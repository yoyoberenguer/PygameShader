/* Generated by Cython 3.0.12 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "define_macros": [
            [
                "NPY_NO_DEPRECATED_API",
                "NPY_1_7_API_VERSION"
            ]
        ],
        "depends": [
            "PygameShader\\Include\\Shaderlib.c"
        ],
        "extra_compile_args": [
            "/openmp",
            "/Qpar",
            "/fp:fast",
            "/O2",
            "/Oy",
            "/Ot",
            "/W3"
        ],
        "include_dirs": [
            "PygameShader"
        ],
        "language": "c++",
        "name": "PygameShader.Palette",
        "sources": [
            "PygameShader/Palette.pyx"
        ]
    },
    "module_name": "PygameShader.Palette"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#if defined(CYTHON_LIMITED_API) && CYTHON_LIMITED_API
#define __PYX_EXTRA_ABI_MODULE_NAME "limited"
#else
#define __PYX_EXTRA_ABI_MODULE_NAME ""
#endif
#define CYTHON_ABI "3_0_12" __PYX_EXTRA_ABI_MODULE_NAME
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x03000CF0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1 && PYPY_VERSION_NUM >= 0x07030C00)
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 1
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(Py_GIL_DISABLED) || defined(Py_NOGIL)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #ifndef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 0
  #endif
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_NOGIL 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0 || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000 && PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #if PY_VERSION_HEX < 0x030400a1
    #undef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #elif !defined(CYTHON_USE_TP_FINALIZE)
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #if PY_VERSION_HEX < 0x030600B1
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5)
  #endif
  #if PY_VERSION_HEX < 0x030700A3
    #undef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 0
  #elif !defined(CYTHON_USE_EXC_INFO_STACK)
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS 1
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_MAJOR_VERSION < 3
    #include "longintrepr.h"
  #endif
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    static CYTHON_INLINE PyObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030B0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030B0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
    #ifndef CO_OPTIMIZED
    #define CO_OPTIMIZED 0x0001
    #endif
    #ifndef CO_NEWLOCALS
    #define CO_NEWLOCALS 0x0002
    #endif
    #ifndef CO_VARARGS
    #define CO_VARARGS 0x0004
    #endif
    #ifndef CO_VARKEYWORDS
    #define CO_VARKEYWORDS 0x0008
    #endif
    #ifndef CO_ASYNC_GENERATOR
    #define CO_ASYNC_GENERATOR 0x0200
    #endif
    #ifndef CO_GENERATOR
    #define CO_GENERATOR 0x0020
    #endif
    #ifndef CO_COROUTINE
    #define CO_COROUTINE 0x0080
    #endif
#elif PY_VERSION_HEX >= 0x030B0000
  static CYTHON_INLINE PyCodeObject* __Pyx_PyCode_New(int a, int p, int k, int l, int s, int f,
                                                    PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                                    PyObject *fv, PyObject *cell, PyObject* fn,
                                                    PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    PyObject *empty_bytes = PyBytes_FromStringAndSize("", 0);
    if (!empty_bytes) return NULL;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, empty_bytes);
    Py_DECREF(empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef CO_COROUTINE
  #define CO_COROUTINE 0x80
#endif
#ifndef CO_ASYNC_GENERATOR
  #define CO_ASYNC_GENERATOR 0x200
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_MAJOR_VERSION >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void *cfunc) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x030900B1
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE(obj), name, func_ctype)
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if PY_MAJOR_VERSION < 3
    #if CYTHON_COMPILING_IN_PYPY
        #if PYPY_VERSION_NUM < 0x07030600
            #if defined(__cplusplus) && __cplusplus >= 201402L
                [[deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")]]
            #elif defined(__GNUC__) || defined(__clang__)
                __attribute__ ((__deprecated__("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6")))
            #elif defined(_MSC_VER)
                __declspec(deprecated("`with nogil:` inside a nogil function will not release the GIL in PyPy2 < 7.3.6"))
            #endif
            static CYTHON_INLINE int PyGILState_Check(void) {
                return 0;
            }
        #else  // PYPY_VERSION_NUM < 0x07030600
        #endif  // PYPY_VERSION_NUM < 0x07030600
    #else
        static CYTHON_INLINE int PyGILState_Check(void) {
            PyThreadState * tstate = _PyThreadState_Current;
            return tstate && (tstate == PyGILState_GetThisThreadState());
        }
    #endif
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000 || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && PY_VERSION_HEX < 0x030d0000 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyObject_GenericSetAttr((PyObject*)tp, k, v)
#else
  #define __Pyx_SetItemOnTypeDict(tp, k, v) PyDict_SetItem(tp->tp_dict, k, v)
#endif
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535U : 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = (Py_UNICODE) ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define __Pyx_Py3Int_Check(op)       PyLong_Check(op)
  #define __Pyx_Py3Int_CheckExact(op)  PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#else
  #define __Pyx_Py3Int_Check(op)       (PyLong_Check(op) || PyInt_Check(op))
  #define __Pyx_Py3Int_CheckExact(op)  (PyLong_CheckExact(op) || PyInt_CheckExact(op))
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #if !defined(_USE_MATH_DEFINES)
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__;  (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__PygameShader__Palette
#define __PYX_HAVE_API__PygameShader__Palette
/* Early includes */
#include "Include/Shaderlib.c"
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include "pythread.h"
#include <stdlib.h>
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
#include <string.h>
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = (char) c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#include <string.h>
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif (defined(_Complex_I) && !defined(_MSC_VER)) || ((defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) && !defined(__STDC_NO_COMPLEX__) && !defined(_MSC_VER))
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "PygameShader\\\\Palette.pxd",
  "PygameShader\\\\Palette.pyx",
  "<stringsource>",
  "__init__.cython-30.pxd",
  "type.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* ForceInitThreads.proto */
#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

/* NoFastGil.proto */
#define __Pyx_PyGILState_Ensure PyGILState_Ensure
#define __Pyx_PyGILState_Release PyGILState_Release
#define __Pyx_FastGIL_Remember()
#define __Pyx_FastGIL_Forget()
#define __Pyx_FastGilFuncInit()

/* BufferFormatStructs.proto */
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name;
  struct __Pyx_StructField_* fields;
  size_t size;
  size_t arraysize[8];
  int ndim;
  char typegroup;
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;

/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_incr_aligned(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_decr_aligned(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_incr_aligned(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_decr_aligned(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_incr_aligned(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_aligned(value) __sync_fetch_and_sub(value, 1)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd)
    #define __pyx_atomic_incr_aligned(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_aligned(value) _InterlockedExchangeAdd(value, -1)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_aligned(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_aligned(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* MemviewSliceStruct.proto */
struct __pyx_memoryview_obj;
typedef struct {
  struct __pyx_memoryview_obj *memview;
  char *data;
  Py_ssize_t shape[8];
  Py_ssize_t strides[8];
  Py_ssize_t suboffsets[8];
} __Pyx_memviewslice;
#define __Pyx_MemoryView_Len(m)  (m.shape[0])

/* #### Code section: numeric_typedefs ### */

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":787
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":788
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":789
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":790
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":794
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":795
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":796
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":797
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":801
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":802
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":809
 * ctypedef double complex complex128_t
 * 
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":810
 * 
 * ctypedef npy_longlong   longlong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":812
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":813
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":815
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":816
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":817
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef float complex       cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* Declarations.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    typedef ::std::complex< long double > __pyx_t_long_double_complex;
  #else
    typedef long double _Complex __pyx_t_long_double_complex;
  #endif
#else
    typedef struct { long double real, imag; } __pyx_t_long_double_complex;
#endif
static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double, long double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_array_obj;
struct __pyx_MemviewEnum_obj;
struct __pyx_memoryview_obj;
struct __pyx_memoryviewslice_obj;

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1113
 * 
 * # Iterator API added in v1.6
 * ctypedef int (*NpyIter_IterNextFunc)(NpyIter* it) noexcept nogil             # <<<<<<<<<<<<<<
 * ctypedef void (*NpyIter_GetMultiIndexFunc)(NpyIter* it, npy_intp* outcoords) noexcept nogil
 * 
 */
typedef int (*__pyx_t_5numpy_NpyIter_IterNextFunc)(NpyIter *);

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1114
 * # Iterator API added in v1.6
 * ctypedef int (*NpyIter_IterNextFunc)(NpyIter* it) noexcept nogil
 * ctypedef void (*NpyIter_GetMultiIndexFunc)(NpyIter* it, npy_intp* outcoords) noexcept nogil             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "numpy/arrayobject.h":
 */
typedef void (*__pyx_t_5numpy_NpyIter_GetMultiIndexFunc)(NpyIter *, npy_intp *);
struct __pyx_opt_args_12PygameShader_4misc_create_line_gradient_rgb;
struct __pyx_opt_args_12PygameShader_4misc_create_line_gradient_rgba;
struct __pyx_opt_args_12PygameShader_4misc_horizontal_rgb_gradient;
struct __pyx_opt_args_12PygameShader_4misc_horizontal_rgba_gradient;
struct __pyx_opt_args_12PygameShader_4misc_create_radial_gradient;
struct __pyx_opt_args_12PygameShader_4misc_create_radial_gradient_alpha;
struct __pyx_opt_args_12PygameShader_4misc_create_quarter_radial_gradient;
struct __pyx_opt_args_12PygameShader_4misc_create_quarter_radial_gradient_alpha;
struct __pyx_ctuple_eaedd6__unsigned__space_char__and_unsigned__space_char__etc;
typedef struct __pyx_ctuple_eaedd6__unsigned__space_char__and_unsigned__space_char__etc __pyx_ctuple_eaedd6__unsigned__space_char__and_unsigned__space_char__etc;
struct __pyx_opt_args_12PygameShader_4misc_combine_rgba_buffers;
struct __pyx_opt_args_12PygameShader_4misc_generate_spectrum_surface;
struct __pyx_opt_args_12PygameShader_4misc_generate_spectrum_surface_c;

/* "PygameShader/misc.pxd":158
 * cimport numpy as np
 * 
 * ctypedef rgb rgb_             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef struct rgb __pyx_t_12PygameShader_4misc_rgb_;

/* "PygameShader/misc.pxd":164
 * 
 * 
 * cpdef np.ndarray[np.uint8_t, ndim=2] create_line_gradient_rgb(             # <<<<<<<<<<<<<<
 *         int num_pixels,
 *         tuple start_rgb = *,
 */
struct __pyx_opt_args_12PygameShader_4misc_create_line_gradient_rgb {
  int __pyx_n;
  PyObject *start_rgb;
  PyObject *end_rgb;
};

/* "PygameShader/misc.pxd":170
 * )
 * 
 * cpdef np.ndarray[np.uint8_t, ndim=2] create_line_gradient_rgba(             # <<<<<<<<<<<<<<
 *         int num_pixels,
 *         tuple start_rgba = *,
 */
struct __pyx_opt_args_12PygameShader_4misc_create_line_gradient_rgba {
  int __pyx_n;
  PyObject *start_rgba;
  PyObject *end_rgba;
};

/* "PygameShader/misc.pxd":177
 * 
 * 
 * cpdef object horizontal_rgb_gradient(             # <<<<<<<<<<<<<<
 *         int w,
 *         int h,
 */
struct __pyx_opt_args_12PygameShader_4misc_horizontal_rgb_gradient {
  int __pyx_n;
  PyObject *color_start;
  PyObject *color_end;
};

/* "PygameShader/misc.pxd":183
 *         tuple color_end   = *
 * )
 * cpdef object horizontal_rgba_gradient (             # <<<<<<<<<<<<<<
 *         int w,
 *         int h,
 */
struct __pyx_opt_args_12PygameShader_4misc_horizontal_rgba_gradient {
  int __pyx_n;
  PyObject *color_start;
  PyObject *color_end;
};

/* "PygameShader/misc.pxd":190
 * )
 * 
 * cpdef create_radial_gradient(             # <<<<<<<<<<<<<<
 *         const int w,
 *         const int h,
 */
struct __pyx_opt_args_12PygameShader_4misc_create_radial_gradient {
  int __pyx_n;
  float offset_x;
  float offset_y;
  PyObject *color_start;
  PyObject *color_end;
  PyObject *precomputed_gradient;
  float scale_factor;
  unsigned short threads;
};

/* "PygameShader/misc.pxd":203
 * 
 * 
 * cpdef create_radial_gradient_alpha(             # <<<<<<<<<<<<<<
 *         const int width_,
 *         const int height_,
 */
struct __pyx_opt_args_12PygameShader_4misc_create_radial_gradient_alpha {
  int __pyx_n;
  float offset_x;
  float offset_y;
  PyObject *color_start;
  PyObject *color_end;
  PyObject *precomputed_gradient;
  float scale_factor;
  unsigned short threads;
};

/* "PygameShader/misc.pxd":215
 * )
 * 
 * cpdef create_quarter_radial_gradient(             # <<<<<<<<<<<<<<
 *         int width_,
 *         int height_,
 */
struct __pyx_opt_args_12PygameShader_4misc_create_quarter_radial_gradient {
  int __pyx_n;
  PyObject *start_color_;
  PyObject *end_color_;
  PyObject *gradient_array_;
  float factor_;
  unsigned short threads_;
};

/* "PygameShader/misc.pxd":225
 * )
 * 
 * cpdef create_quarter_radial_gradient_alpha(             # <<<<<<<<<<<<<<
 *         int width_,
 *         int height_,
 */
struct __pyx_opt_args_12PygameShader_4misc_create_quarter_radial_gradient_alpha {
  int __pyx_n;
  PyObject *start_color_;
  PyObject *end_color_;
  PyObject *gradient_array_;
  float factor_;
  unsigned short threads_;
};

/* "PygameShader/misc.pxd":238
 * cdef float color_dist_hsl(const hsl hsl_1, const hsl hsl_2)nogil
 * 
 * cdef (unsigned char, unsigned char, unsigned char) closest_hsv_color(             # <<<<<<<<<<<<<<
 *         const rgb target_color,
 *         const float [:, ::1] color_palette,
 */
struct __pyx_ctuple_eaedd6__unsigned__space_char__and_unsigned__space_char__etc {
  unsigned char f0;
  unsigned char f1;
  unsigned char f2;
};

/* "PygameShader/misc.pxd":316
 * 
 * 
 * cpdef unsigned char[::1] combine_rgba_buffers(             # <<<<<<<<<<<<<<
 *     const Py_ssize_t w,
 *     const Py_ssize_t h,
 */
struct __pyx_opt_args_12PygameShader_4misc_combine_rgba_buffers {
  int __pyx_n;
  int transpose_output;
};

/* "PygameShader/misc.pxd":326
 * cpdef float [:, :] normalize_2d_array(const unsigned char [:, :] array)
 * 
 * cpdef object generate_spectrum_surface(int width, int height, float gamma=*)             # <<<<<<<<<<<<<<
 * cdef object generate_spectrum_surface_c(int width, int height, float gamma=*)
 * 
 */
struct __pyx_opt_args_12PygameShader_4misc_generate_spectrum_surface {
  int __pyx_n;
  float gamma;
};

/* "PygameShader/misc.pxd":327
 * 
 * cpdef object generate_spectrum_surface(int width, int height, float gamma=*)
 * cdef object generate_spectrum_surface_c(int width, int height, float gamma=*)             # <<<<<<<<<<<<<<
 * 
 * 
 */
struct __pyx_opt_args_12PygameShader_4misc_generate_spectrum_surface_c {
  int __pyx_n;
  float gamma;
};

/* "View.MemoryView":114
 * @cython.collection_type("sequence")
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */
struct __pyx_array_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_array *__pyx_vtab;
  char *data;
  Py_ssize_t len;
  char *format;
  int ndim;
  Py_ssize_t *_shape;
  Py_ssize_t *_strides;
  Py_ssize_t itemsize;
  PyObject *mode;
  PyObject *_format;
  void (*callback_free_data)(void *);
  int free_data;
  int dtype_is_object;
};


/* "View.MemoryView":302
 * 
 * @cname('__pyx_MemviewEnum')
 * cdef class Enum(object):             # <<<<<<<<<<<<<<
 *     cdef object name
 *     def __init__(self, name):
 */
struct __pyx_MemviewEnum_obj {
  PyObject_HEAD
  PyObject *name;
};


/* "View.MemoryView":337
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview:             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */
struct __pyx_memoryview_obj {
  PyObject_HEAD
  struct __pyx_vtabstruct_memoryview *__pyx_vtab;
  PyObject *obj;
  PyObject *_size;
  PyObject *_array_interface;
  PyThread_type_lock lock;
  __pyx_atomic_int_type acquisition_count;
  Py_buffer view;
  int flags;
  int dtype_is_object;
  __Pyx_TypeInfo *typeinfo;
};


/* "View.MemoryView":952
 * @cython.collection_type("sequence")
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */
struct __pyx_memoryviewslice_obj {
  struct __pyx_memoryview_obj __pyx_base;
  __Pyx_memviewslice from_slice;
  PyObject *from_object;
  PyObject *(*to_object_func)(char *);
  int (*to_dtype_func)(char *, PyObject *);
};



/* "View.MemoryView":114
 * @cython.collection_type("sequence")
 * @cname("__pyx_array")
 * cdef class array:             # <<<<<<<<<<<<<<
 * 
 *     cdef:
 */

struct __pyx_vtabstruct_array {
  PyObject *(*get_memview)(struct __pyx_array_obj *);
};
static struct __pyx_vtabstruct_array *__pyx_vtabptr_array;


/* "View.MemoryView":337
 * 
 * @cname('__pyx_memoryview')
 * cdef class memoryview:             # <<<<<<<<<<<<<<
 * 
 *     cdef object obj
 */

struct __pyx_vtabstruct_memoryview {
  char *(*get_item_pointer)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*is_slice)(struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_slice_assignment)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*setitem_slice_assign_scalar)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *);
  PyObject *(*setitem_indexed)(struct __pyx_memoryview_obj *, PyObject *, PyObject *);
  PyObject *(*convert_item_to_object)(struct __pyx_memoryview_obj *, char *);
  PyObject *(*assign_item_from_object)(struct __pyx_memoryview_obj *, char *, PyObject *);
  PyObject *(*_get_base)(struct __pyx_memoryview_obj *);
};
static struct __pyx_vtabstruct_memoryview *__pyx_vtabptr_memoryview;


/* "View.MemoryView":952
 * @cython.collection_type("sequence")
 * @cname('__pyx_memoryviewslice')
 * cdef class _memoryviewslice(memoryview):             # <<<<<<<<<<<<<<
 *     "Internal class for passing memoryview slices to Python"
 * 
 */

struct __pyx_vtabstruct__memoryviewslice {
  struct __pyx_vtabstruct_memoryview __pyx_base;
};
static struct __pyx_vtabstruct__memoryviewslice *__pyx_vtabptr__memoryviewslice;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_VARARGS(args, i) PySequence_GetItem(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#else
    #define __Pyx_Arg_VARARGS(args, i) PyTuple_GetItem(args, i)
#endif
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_Arg_NewRef_VARARGS(arg) __Pyx_NewRef(arg)
    #define __Pyx_Arg_XDECREF_VARARGS(arg) Py_XDECREF(arg)
#else
    #define __Pyx_Arg_NewRef_VARARGS(arg) arg
    #define __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
    #define __Pyx_Arg_NewRef_FASTCALL(arg) arg  /* no-op, __Pyx_Arg_FASTCALL is direct and this needs
                                                   to have the same reference counting */
    #define __Pyx_Arg_XDECREF_FASTCALL(arg)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
    #define __Pyx_Arg_NewRef_FASTCALL(arg) __Pyx_Arg_NewRef_VARARGS(arg)
    #define __Pyx_Arg_XDECREF_FASTCALL(arg) __Pyx_Arg_XDECREF_VARARGS(arg)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *); /*proto*/
/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* DivInt[Py_ssize_t].proto */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t, Py_ssize_t);

/* UnaryNegOverflows.proto */
#define __Pyx_UNARY_NEG_WOULD_OVERFLOW(x)\
        (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (1)
#elif CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PySequenceMultiply.proto */
#define __Pyx_PySequence_Multiply_Left(mul, seq)  __Pyx_PySequence_Multiply(seq, mul)
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul);

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* RaiseUnboundLocalError.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* DivInt[long].proto */
static CYTHON_INLINE long __Pyx_div_long(long, long);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyObjectFormatAndDecref.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f);
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f);

/* ErrOccurredWithGIL.proto */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void);

/* PyIntCompare.proto */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyObject_Unicode.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))
#else
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Unicode(obj))
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* FixUpExtensionType.proto */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);
#endif

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_0_12
#define __PYX_HAVE_RT_ImportType_proto_3_0_12
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_12(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_0_12(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_0_12 {
   __Pyx_ImportType_CheckSize_Error_3_0_12 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_0_12 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_0_12 = 2
};
static PyTypeObject *__Pyx_ImportType_3_0_12(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_12 check_size);
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


/* BufferStructDeclare.proto */
typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

/* MemviewSliceIsContig.proto */
static int __pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim);

/* OverlappingSlices.proto */
static int __pyx_slices_overlap(__Pyx_memviewslice *slice1,
                                __Pyx_memviewslice *slice2,
                                int ndim, size_t itemsize);

/* IsLittleEndian.proto */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void);

/* BufferFormatCheck.proto */
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts);
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type);

/* TypeInfoCompare.proto */
static int __pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b);

/* MemviewSliceValidateAndInit.proto */
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_unsigned_int(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_dc_float(PyObject *, int writable_flag);

/* ObjectToMemviewSlice.proto */
static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_unsigned_char(PyObject *, int writable_flag);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_unsigned_char(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_unsigned_char(const char *itemp, PyObject *obj);

/* MemviewDtypeToObject.proto */
static CYTHON_INLINE PyObject *__pyx_memview_get_unsigned_int(const char *itemp);
static CYTHON_INLINE int __pyx_memview_set_unsigned_int(const char *itemp, PyObject *obj);

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
    #define __Pyx_c_eq_long__double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_long__double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_long__double(a, b) ((a)-(b))
    #define __Pyx_c_prod_long__double(a, b) ((a)*(b))
    #define __Pyx_c_quot_long__double(a, b) ((a)/(b))
    #define __Pyx_c_neg_long__double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_long__double(z) ((z)==(long double)0)
    #define __Pyx_c_conj_long__double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (::std::abs(z))
        #define __Pyx_c_pow_long__double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_long__double(z) ((z)==0)
    #define __Pyx_c_conj_long__double(z)    (conjl(z))
    #if 1
        #define __Pyx_c_abs_long__double(z)     (cabsl(z))
        #define __Pyx_c_pow_long__double(a, b)  (cpowl(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex);
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex);
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex);
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex, __pyx_t_long_double_complex);
    #endif
#endif

/* MemviewSliceCopyTemplate.proto */
static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object);

/* MemviewSliceInit.proto */
#define __Pyx_BUF_MAX_NDIMS %(BUF_MAX_NDIMS)d
#define __Pyx_MEMVIEW_DIRECT   1
#define __Pyx_MEMVIEW_PTR      2
#define __Pyx_MEMVIEW_FULL     4
#define __Pyx_MEMVIEW_CONTIG   8
#define __Pyx_MEMVIEW_STRIDED  16
#define __Pyx_MEMVIEW_FOLLOW   32
#define __Pyx_IS_C_CONTIG 1
#define __Pyx_IS_F_CONTIG 2
static int __Pyx_init_memviewslice(
                struct __pyx_memoryview_obj *memview,
                int ndim,
                __Pyx_memviewslice *memviewslice,
                int memview_is_new_reference);
static CYTHON_INLINE int __pyx_add_acquisition_count_locked(
    __pyx_atomic_int_type *acquisition_count, PyThread_type_lock lock);
static CYTHON_INLINE int __pyx_sub_acquisition_count_locked(
    __pyx_atomic_int_type *acquisition_count, PyThread_type_lock lock);
#define __pyx_get_slice_count_pointer(memview) (&memview->acquisition_count)
#define __PYX_INC_MEMVIEW(slice, have_gil) __Pyx_INC_MEMVIEW(slice, have_gil, __LINE__)
#define __PYX_XCLEAR_MEMVIEW(slice, have_gil) __Pyx_XCLEAR_MEMVIEW(slice, have_gil, __LINE__)
static CYTHON_INLINE void __Pyx_INC_MEMVIEW(__Pyx_memviewslice *, int, int);
static CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *, int, int);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* None.proto */
#include <new>

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CheckBinaryVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* FunctionImport.proto */
static int __Pyx_ImportFunction_3_0_12(PyObject *module, const char *funcname, void (**f)(void), const char *sig);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

/* #### Code section: module_declarations ### */
static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self); /* proto*/
static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto*/
static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src); /* proto*/
static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryview__get_base(struct __pyx_memoryview_obj *__pyx_v_self); /* proto*/
static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp); /* proto*/
static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value); /* proto*/
static PyObject *__pyx_memoryviewslice__get_base(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "cython.view" */

/* Module declarations from "cython.dataclasses" */

/* Module declarations from "cython" */

/* Module declarations from "libc.string" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "cpython" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "numpy" */

/* Module declarations from "numpy" */

/* Module declarations from "PygameShader.misc" */
static unsigned int (*__pyx_f_12PygameShader_4misc_rgb_to_int_c)(unsigned char const , unsigned char const , unsigned char const ); /*proto*/
static __pyx_ctuple_eaedd6__unsigned__space_char__and_unsigned__space_char__etc (*__pyx_f_12PygameShader_4misc_int_to_rgb_c)(unsigned int const ); /*proto*/
static int (*__pyx_f_12PygameShader_4misc_is_type_memoryview)(PyObject *); /*proto*/

/* Module declarations from "PygameShader.Palette" */
static int __pyx_v_12PygameShader_7Palette_THREADS;
static PyObject *__pyx_collections_abc_Sequence = 0;
static PyObject *generic = 0;
static PyObject *strided = 0;
static PyObject *indirect = 0;
static PyObject *contiguous = 0;
static PyObject *indirect_contiguous = 0;
static int __pyx_memoryview_thread_locks_used;
static PyThread_type_lock __pyx_memoryview_thread_locks[8];
static void __pyx_f_12PygameShader_7Palette_palette_change(PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE void __pyx_f_12PygameShader_7Palette_palette_change_c(Py_ssize_t const , Py_ssize_t const , Py_ssize_t const , __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_12PygameShader_7Palette_make_palette(int const , float const , float const , float const , int __pyx_skip_dispatch); /*proto*/
static CYTHON_INLINE __Pyx_memviewslice __pyx_f_12PygameShader_7Palette_make_palette_c(int const , float const , float const , float const ); /*proto*/
static PyObject *__pyx_f_12PygameShader_7Palette_create_surface_from_palette(__Pyx_memviewslice, int __pyx_skip_dispatch); /*proto*/
static int __pyx_array_allocate_buffer(struct __pyx_array_obj *); /*proto*/
static struct __pyx_array_obj *__pyx_array_new(PyObject *, Py_ssize_t, char *, char *, char *); /*proto*/
static PyObject *__pyx_memoryview_new(PyObject *, int, int, __Pyx_TypeInfo *); /*proto*/
static CYTHON_INLINE int __pyx_memoryview_check(PyObject *); /*proto*/
static PyObject *_unellipsify(PyObject *, int); /*proto*/
static int assert_direct_dimensions(Py_ssize_t *, int); /*proto*/
static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *, PyObject *); /*proto*/
static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int *, Py_ssize_t, Py_ssize_t, Py_ssize_t, int, int, int, int); /*proto*/
static char *__pyx_pybuffer_index(Py_buffer *, char *, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memslice_transpose(__Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice, int, PyObject *(*)(char *), int (*)(char *, PyObject *), int); /*proto*/
static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *); /*proto*/
static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *, __Pyx_memviewslice *); /*proto*/
static Py_ssize_t abs_py_ssize_t(Py_ssize_t); /*proto*/
static char __pyx_get_best_slice_order(__Pyx_memviewslice *, int); /*proto*/
static void _copy_strided_to_strided(char *, Py_ssize_t *, char *, Py_ssize_t *, Py_ssize_t *, Py_ssize_t *, int, size_t); /*proto*/
static void copy_strided_to_strided(__Pyx_memviewslice *, __Pyx_memviewslice *, int, size_t); /*proto*/
static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *, int); /*proto*/
static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *, Py_ssize_t *, Py_ssize_t, int, char); /*proto*/
static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *, __Pyx_memviewslice *, char, int); /*proto*/
static int __pyx_memoryview_err_extents(int, Py_ssize_t, Py_ssize_t); /*proto*/
static int __pyx_memoryview_err_dim(PyObject *, PyObject *, int); /*proto*/
static int __pyx_memoryview_err(PyObject *, PyObject *); /*proto*/
static int __pyx_memoryview_err_no_memory(void); /*proto*/
static int __pyx_memoryview_copy_contents(__Pyx_memviewslice, __Pyx_memviewslice, int, int, int); /*proto*/
static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *, int, int); /*proto*/
static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *, int, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_refcount_objects_in_slice(char *, Py_ssize_t *, Py_ssize_t *, int, int); /*proto*/
static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *, int, size_t, void *, int); /*proto*/
static void __pyx_memoryview__slice_assign_scalar(char *, Py_ssize_t *, Py_ssize_t *, int, size_t, void *); /*proto*/
static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
static __Pyx_TypeInfo __Pyx_TypeInfo_unsigned_int = { "unsigned int", NULL, sizeof(unsigned int), { 0 }, 0, __PYX_IS_UNSIGNED(unsigned int) ? 'U' : 'I', __PYX_IS_UNSIGNED(unsigned int), 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_float = { "float", NULL, sizeof(float), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_unsigned_char = { "unsigned char", NULL, sizeof(unsigned char), { 0 }, 0, __PYX_IS_UNSIGNED(unsigned char) ? 'U' : 'I', __PYX_IS_UNSIGNED(unsigned char), 0 };
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "PygameShader.Palette"
extern int __pyx_module_is_main_PygameShader__Palette;
int __pyx_module_is_main_PygameShader__Palette = 0;

/* Implementation of "PygameShader.Palette" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_FutureWarning;
static PyObject *__pyx_builtin_RuntimeWarning;
static PyObject *__pyx_builtin_ImportWarning;
static PyObject *__pyx_builtin_ImportError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin___import__;
static PyObject *__pyx_builtin_MemoryError;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_Ellipsis;
static PyObject *__pyx_builtin_id;
static PyObject *__pyx_builtin_IndexError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = ": ";
static const char __pyx_k_3[] = "3";
static const char __pyx_k_O[] = "O";
static const char __pyx_k_c[] = "c";
static const char __pyx_k__2[] = ".";
static const char __pyx_k__3[] = "*";
static const char __pyx_k__6[] = "'";
static const char __pyx_k__7[] = ")";
static const char __pyx_k_fh[] = "fh";
static const char __pyx_k_fl[] = "fl";
static const char __pyx_k_fs[] = "fs";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_MSX[] = "MSX";
static const char __pyx_k_TO7[] = "TO7";
static const char __pyx_k__12[] = "'.";
static const char __pyx_k__30[] = "?";
static const char __pyx_k_abc[] = "abc";
static const char __pyx_k_and[] = " and ";
static const char __pyx_k_got[] = " (got ";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_hide[] = "hide";
static const char __pyx_k_int8[] = "int8";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_ndim[] = "ndim";
static const char __pyx_k_pack[] = "pack";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_step[] = "step";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_AAP64[] = "AAP64";
static const char __pyx_k_ASCII[] = "ASCII";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_flags[] = "flags";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_width[] = "width";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_APOLLO[] = "APOLLO";
static const char __pyx_k_OPENMP[] = "OPENMP";
static const char __pyx_k_PICO_8[] = "PICO_8";
static const char __pyx_k_SILVER[] = "SILVER";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_encode[] = "encode";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_ignore[] = "ignore";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_pygame[] = "pygame";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_struct[] = "struct";
static const char __pyx_k_uint32[] = "uint32";
static const char __pyx_k_unpack[] = "unpack";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_Surface[] = "Surface";
static const char __pyx_k_VERSION[] = "__VERSION__";
static const char __pyx_k_VINIK24[] = "VINIK24";
static const char __pyx_k_array3d[] = "array3d";
static const char __pyx_k_asarray[] = "asarray";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_environ[] = "environ";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_fortran[] = "fortran";
static const char __pyx_k_memview[] = "memview";
static const char __pyx_k_ndarray[] = "ndarray";
static const char __pyx_k_APPLE_II[] = "APPLE_II";
static const char __pyx_k_CGA_TEST[] = "_CGA_TEST";
static const char __pyx_k_Ellipsis[] = "Ellipsis";
static const char __pyx_k_FAMICUBE[] = "FAMICUBE";
static const char __pyx_k_Sequence[] = "Sequence";
static const char __pyx_k_TELETEXT[] = "TELETEXT";
static const char __pyx_k_category[] = "category";
static const char __pyx_k_get_view[] = "get_view";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_itemsize[] = "itemsize";
static const char __pyx_k_pixels3d[] = "pixels3d";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_register[] = "register";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_BBC_MICRO[] = "BBC_MICRO";
static const char __pyx_k_LOSPEC500[] = "LOSPEC500";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_palette_c[] = "palette_c";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_blit_array[] = "blit_array";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_AMSTRAD_CPC[] = "AMSTRAD_CPC";
static const char __pyx_k_FUNKYFUTURE[] = "FUNKYFUTURE";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_array_alpha[] = "array_alpha";
static const char __pyx_k_collections[] = "collections";
static const char __pyx_k_temp_buffer[] = "temp_buffer";
static const char __pyx_k_APPLE_II_LOW[] = "APPLE_II_LOW";
static const char __pyx_k_COMMODORE_64[] = "COMMODORE_64";
static const char __pyx_k_C_CONTIGUOUS[] = "C_CONTIGUOUS";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_make_surface[] = "make_surface";
static const char __pyx_k_pixels_alpha[] = "pixels_alpha";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_version_info[] = "version_info";
static const char __pyx_k_APPLE_II_HIGH[] = "APPLE_II_HIGH";
static const char __pyx_k_CGA_MODE5_LOW[] = "CGA_MODE5_LOW";
static const char __pyx_k_FutureWarning[] = "FutureWarning";
static const char __pyx_k_ImportWarning[] = "ImportWarning";
static const char __pyx_k_LIST_PALETTES[] = "LIST_PALETTES";
static const char __pyx_k_PICO_8_CUSTOM[] = "PICO_8_CUSTOM";
static const char __pyx_k_THREAD_NUMBER[] = "THREAD_NUMBER";
static const char __pyx_k_TWILIOQUEST76[] = "TWILIOQUEST76";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_color_palette[] = "color_palette";
static const char __pyx_k_image_surface[] = "image_surface";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_AAPSPLENDOR128[] = "AAPSPLENDOR128";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_CGA_MODE5_HIGH[] = "CGA_MODE5_HIGH";
static const char __pyx_k_MSX_NORMALIZED[] = "_MSX_NORMALIZED";
static const char __pyx_k_RuntimeWarning[] = "RuntimeWarning";
static const char __pyx_k_TO7_NORMALIZED[] = "_TO7_NORMALIZED";
static const char __pyx_k_filterwarnings[] = "filterwarnings";
static const char __pyx_k_Created_by_Okee[] = "Created by Okee";
static const char __pyx_k_View_MemoryView[] = "View.MemoryView";
static const char __pyx_k_ZX_SPECTRUM_LOW[] = "ZX_SPECTRUM_LOW";
static const char __pyx_k_allocate_buffer[] = "allocate_buffer";
static const char __pyx_k_collections_abc[] = "collections.abc";
static const char __pyx_k_dtype_is_object[] = "dtype_is_object";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_AAP64_NORMALIZED[] = "_AAP64_NORMALIZED";
static const char __pyx_k_ZX_SPECTRUM_HIGH[] = "ZX_SPECTRUM_HIGH";
static const char __pyx_k_pygame_surfarray[] = "pygame.surfarray";
static const char __pyx_k_APOLLO_NORMALIZED[] = "_APOLLO_NORMALIZED";
static const char __pyx_k_IRIDESCENTCRYSTAL[] = "IRIDESCENTCRYSTAL";
static const char __pyx_k_PICO_8_NORMALIZED[] = "_PICO_8_NORMALIZED";
static const char __pyx_k_SILVER_NORMALIZED[] = "_SILVER_NORMALIZED";
static const char __pyx_k_ascontiguousarray[] = "ascontiguousarray";
static const char __pyx_k_pyx_unpickle_Enum[] = "__pyx_unpickle_Enum";
static const char __pyx_k_CGA_MODE4_PAL1_LOW[] = "CGA_MODE4_PAL1_LOW";
static const char __pyx_k_CGA_MODE4_PAL2_LOW[] = "CGA_MODE4_PAL2_LOW";
static const char __pyx_k_VINIK24_NORMALIZED[] = "_VINIK24_NORMALIZED";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_strided_and_direct[] = "<strided and direct>";
static const char __pyx_k_APPLE_II_NORMALIZED[] = "_APPLE_II_NORMALIZED";
static const char __pyx_k_CGA_MODE4_PAL1_HIGH[] = "CGA_MODE4_PAL1_HIGH";
static const char __pyx_k_CGA_MODE4_PAL2_HIGH[] = "CGA_MODE4_PAL2_HIGH";
static const char __pyx_k_FAMICUBE_NORMALIZED[] = "_FAMICUBE_NORMALIZED";
static const char __pyx_k_MONO_PHOSPHOR_AMBER[] = "MONO_PHOSPHOR_AMBER";
static const char __pyx_k_PygameShader_config[] = "PygameShader.config";
static const char __pyx_k_TELETEXT_NORMALIZED[] = "_TELETEXT_NORMALIZED";
static const char __pyx_k_LOSPEC500_NORMALIZED[] = "_LOSPEC500_NORMALIZED";
static const char __pyx_k_MICROSOFT_WINDOWS_16[] = "MICROSOFT_WINDOWS_16";
static const char __pyx_k_MICROSOFT_WINDOWS_20[] = "MICROSOFT_WINDOWS_20";
static const char __pyx_k_MONO_PHOSPHOR_GREEN1[] = "MONO_PHOSPHOR_GREEN1";
static const char __pyx_k_MONO_PHOSPHOR_GREEN2[] = "MONO_PHOSPHOR_GREEN2";
static const char __pyx_k_MONO_PHOSPHOR_GREEN3[] = "MONO_PHOSPHOR_GREEN3";
static const char __pyx_k_strided_and_indirect[] = "<strided and indirect>";
static const char __pyx_k_Invalid_shape_in_axis[] = "Invalid shape in axis ";
static const char __pyx_k_MONO_PHOSPHOR_LTAMBER[] = "MONO_PHOSPHOR_LTAMBER";
static const char __pyx_k_contiguous_and_direct[] = "<contiguous and direct>";
static const char __pyx_k_AMSTRAD_CPC_NORMALIZED[] = "_AMSTRAD_CPC_NORMALIZED";
static const char __pyx_k_Cannot_index_with_type[] = "Cannot index with type '";
static const char __pyx_k_FUNKYFUTURE_NORMALIZED[] = "_FUNKYFUTURE_NORMALIZED";
static const char __pyx_k_MemoryView_of_r_object[] = "<MemoryView of %r object>";
static const char __pyx_k_APPLE_II_LOW_NORMALIZED[] = "_APPLE_II_LOW_NORMALIZED";
static const char __pyx_k_COMMODORE_64_NORMALIZED[] = "_COMMODORE_64_NORMALIZED";
static const char __pyx_k_Created_by_LostInIndigo[] = "Created by LostInIndigo";
static const char __pyx_k_MICROSOFT_WINDOWS_PAINT[] = "MICROSOFT_WINDOWS_PAINT";
static const char __pyx_k_MemoryView_of_r_at_0x_x[] = "<MemoryView of %r at 0x%x>";
static const char __pyx_k_and_color_palette_dtype[] = "', and 'color_palette' dtype: '";
static const char __pyx_k_contiguous_and_indirect[] = "<contiguous and indirect>";
static const char __pyx_k_APPLE_II_HIGH_NORMALIZED[] = "_APPLE_II_HIGH_NORMALIZED";
static const char __pyx_k_CGA_MODE5_NORMALIZED_LOW[] = "_CGA_MODE5_NORMALIZED_LOW";
static const char __pyx_k_PICO_8_CUSTOM_NORMALIZED[] = "_PICO_8_CUSTOM_NORMALIZED";
static const char __pyx_k_TWILIOQUEST76_NORMALIZED[] = "_TWILIOQUEST76_NORMALIZED";
static const char __pyx_k_AAPSPLENDOR128_NORMALIZED[] = "_AAPSPLENDOR128_NORMALIZED";
static const char __pyx_k_CGA_MODE5_NORMALIZED_HIGH[] = "_CGA_MODE5_NORMALIZED_HIGH";
static const char __pyx_k_Dimension_d_is_not_direct[] = "Dimension %d is not direct";
static const char __pyx_k_MONOCHROME_2_amber_colors[] = "MONOCHROME 2 amber colors";
static const char __pyx_k_MONOCHROME_2_green_colors[] = "MONOCHROME 2 green colors";
static const char __pyx_k_Index_out_of_bounds_axis_d[] = "Index out of bounds (axis %d)";
static const char __pyx_k_PYGAME_HIDE_SUPPORT_PROMPT[] = "PYGAME_HIDE_SUPPORT_PROMPT";
static const char __pyx_k_ZX_SPECTRUM_NORMALIZED_LOW[] = "_ZX_SPECTRUM_NORMALIZED_LOW";
static const char __pyx_k_Step_may_not_be_zero_axis_d[] = "Step may not be zero (axis %d)";
static const char __pyx_k_ZX_SPECTRUM_NORMALIZED_HIGH[] = "_ZX_SPECTRUM_NORMALIZED_HIGH";
static const char __pyx_k_itemsize_0_for_cython_array[] = "itemsize <= 0 for cython.array";
static const char __pyx_k_IRIDESCENTCRYSTAL_NORMALIZED[] = "_IRIDESCENTCRYSTAL_NORMALIZED";
static const char __pyx_k_CGA_MODE4_PAL1_NORMALIZED_LOW[] = "_CGA_MODE4_PAL1_NORMALIZED_LOW";
static const char __pyx_k_CGA_MODE4_PAL2_NORMALIZED_LOW[] = "_CGA_MODE4_PAL2_NORMALIZED_LOW";
static const char __pyx_k_Error_creating_Pygame_surface[] = "Error creating Pygame surface: ";
static const char __pyx_k_Microsoft_paint_color_palette[] = "Microsoft paint color palette";
static const char __pyx_k_unable_to_allocate_array_data[] = "unable to allocate array data.";
static const char __pyx_k_CGA_MODE4_PAL1_NORMALIZED_HIGH[] = "_CGA_MODE4_PAL1_NORMALIZED_HIGH";
static const char __pyx_k_CGA_MODE4_PAL2_NORMALIZED_HIGH[] = "_CGA_MODE4_PAL2_NORMALIZED_HIGH";
static const char __pyx_k_Library_Overview_The_functions[] = "\nLibrary Overview\nThe functions appear to be part of a library designed for image manipulation and palette management, \nfor applications such as graphical rendering, image processing, or creating custom color palettes.\nThe library may be used in graphics software or visual applications where images need to be rendered \nwith specific color palettes, or where images need to be modified dynamically based on palette data.\n\nImage Surface: refers to an object representing an image, where individual pixels can be accessed\nand manipulated. Palette: Refers to a collection of colors that can be applied to images, often used in\nvisual design, digital art, or simulations.Temporary Buffer: This could be used to store intermediate \nresults during computations, reducing the need to perform expensive operations multiple times.\nOverall, the purpose of the library is to provide tools for manipulating images at the color level, \neither by changing palettes or creating new ones from scratch, optimizing image handling for graphical applications.\n";
static const char __pyx_k_MONO_PHOSPHOR_AMBER_NORMALIZED[] = "_MONO_PHOSPHOR_AMBER_NORMALIZED";
static const char __pyx_k_Please_ensure_both_arrays_have[] = ". Please ensure both arrays have the same height, width, and number of dimensions.";
static const char __pyx_k_Please_ensure_you_pass_a_valid[] = ". Please ensure you pass a valid Pygame Surface object.";
static const char __pyx_k_strided_and_direct_or_indirect[] = "<strided and direct or indirect>";
static const char __pyx_k_Every_pixel_on_PICO_8_is_stored[] = "Every pixel on PICO-8 is stored as a 4-bit value in memory. Because a 4-bit value can only hold the values 0-15, this means pixels can only choose from a list of 16 colors. This list is referred to as the palette. PICO-8 has three layers of palettes. Only the first two are configurable. The first is used during each draw call, re-mapping the requested 4-bit indices to the 4-bit indices that are actually written to screen data memory. The second is used when the frame is presented to the viewer, re-mapping the 4-bit indices in the screen data to 8-bit system color indices. The third maps the 8-bit system color indices to pre-defined R,G,B values.";
static const char __pyx_k_Expected_input_array_with_dtype[] = "Expected input array with dtype 'numpy.uint32', but got %s";
static const char __pyx_k_Failed_to_get_a_valid_view_from[] = "Failed to get a valid view from 'rgb_array'. Ensure the surface is a valid Pygame Surface with a compatible format.";
static const char __pyx_k_For_Thomson_computers_a_popular[] = "For Thomson computers, a popular brand in France, the most common display modes are 320\303\227200, with 8\303\2271 attribute cells with 2 colors. Here the intensity byte affects saturation and not only brightness variations.Thomson MO5 and TO7 The Thomson MO5 generated graphics based on a EFGJ03L gate array.[2] The palette was based on 8 RGB primary colors, with an intensity bit that could change its brightness or saturation.[3] This allowed the machine to generate a 320\303\227200 16 color display, but subject to proximity constraints (only two colors for a 8x1 pixel area). The Thomson TO7 had similar graphic abilities and palette.[4]";
static const char __pyx_k_Invalid_type_for_argument_color[] = "Invalid type for argument 'color_palette'. Expected a numpy.ndarray, but got ";
static const char __pyx_k_MICROSOFT_WINDOWS_16_NORMALIZED[] = "_MICROSOFT_WINDOWS_16_NORMALIZED";
static const char __pyx_k_MICROSOFT_WINDOWS_20_NORMALIZED[] = "_MICROSOFT_WINDOWS_20_NORMALIZED";
static const char __pyx_k_MICROSOFT_WINDOWS_PAINT_NORMALI[] = "_MICROSOFT_WINDOWS_PAINT_NORMALIZED";
static const char __pyx_k_MONO_PHOSPHOR_GREEN1_NORMALIZED[] = "_MONO_PHOSPHOR_GREEN1_NORMALIZED";
static const char __pyx_k_MONO_PHOSPHOR_GREEN2_NORMALIZED[] = "_MONO_PHOSPHOR_GREEN2_NORMALIZED";
static const char __pyx_k_MONO_PHOSPHOR_GREEN3_NORMALIZED[] = "_MONO_PHOSPHOR_GREEN3_NORMALIZED";
static const char __pyx_k_MONO_PHOSPHOR_LTAMBER_NORMALIZE[] = "_MONO_PHOSPHOR_LTAMBER_NORMALIZED";
static const char __pyx_k_Please_pass_a_numpy_array_for_t[] = ". Please pass a numpy array for the temporary buffer.";
static const char __pyx_k_Please_provide_a_numpy_array_co[] = ". Please provide a numpy array containing the color palette.";
static const char __pyx_k_Pygame_library_is_missing_on_yo[] = "\n<Pygame> library is missing on your system.\nTry: \n   C:\\pip install pygame on a window command prompt.";
static const char __pyx_k_numpy_library_is_missing_on_you[] = "\n<numpy> library is missing on your system.\nTry: \n   C:\\pip install numpy on a window command prompt.";
static const char __pyx_k_while_the_temp_buffer_array_has[] = " while the 'temp_buffer' array has shape ";
static const char __pyx_k_128_colors_Created_by_Adigun_A_P[] = "128 colors Created by Adigun A. Polack";
static const char __pyx_k_24_colors_palette_Created_by_Vin[] = "24 colors palette Created by Vinik";
static const char __pyx_k_46_colors_palette_by_AdamCYounis[] = "46 colors palette by AdamCYounis";
static const char __pyx_k_64_colors_palette_by_Adigun_Pola[] = "64 colors palette by Adigun Polack";
static const char __pyx_k_76_colors_palette_Created_by_Ker[] = "76 colors palette Created by Kerrie Lake";
static const char __pyx_k_8_colors_palette_Created_by_Sham[] = "8 colors palette Created by Shamaboy";
static const char __pyx_k_All_dimensions_preceding_dimensi[] = "All dimensions preceding dimension %d must be indexed and not sliced";
static const char __pyx_k_Argument_temp_buffer_must_be_a_c[] = "Argument 'temp_buffer' must be a contiguous array (C_CONTIGUOUS). This means the memory layout must be contiguous, which is required for optimal performance. Ensure that the array passed is contiguous using numpy.ascontiguousarray() if needed.";
static const char __pyx_k_Argument_width_should_be_0_got_s[] = "Argument width should be > 0, got %s";
static const char __pyx_k_BBC_Micro_has_8_display_modes_wi[] = "BBC Micro has 8 display modes, with resolutions like 640\303\227256 (max. 2 colors), 320\303\227256 (max. 4 colors) and 160\303\227256 (max. 16 logical colors). No display modes have cell attribute clashes. The palette available has only 8 physical colors, plus a further 8 flashing colors (each being one of the eight non-flashing colors alternating with its physical complement every second), and the display modes can have 16, 4 or 2 simultaneous colors.";
static const char __pyx_k_Both_temp_buffer_and_color_palet[] = "Both 'temp_buffer' and 'color_palette' must be of type numpy.float32. Found 'temp_buffer' dtype: '";
static const char __pyx_k_Buffer_view_does_not_expose_stri[] = "Buffer view does not expose strides";
static const char __pyx_k_Can_only_create_a_buffer_that_is[] = "Can only create a buffer that is contiguous in memory.";
static const char __pyx_k_Cannot_assign_to_read_only_memor[] = "Cannot assign to read-only memoryview";
static const char __pyx_k_Cannot_create_writable_memory_vi[] = "Cannot create writable memory view from read-only memoryview";
static const char __pyx_k_Cannot_transpose_memoryview_with[] = "Cannot transpose memoryview with indirect dimensions";
static const char __pyx_k_Created_by_Arne_as_part_of_his_F[] = "Created by Arne as part of his Famicube Project.";
static const char __pyx_k_Dimension_mismatch_between_rgb_a[] = "Dimension mismatch between 'rgb_array' and 'temp_buffer'. The 'rgb_array' array has shape ";
static const char __pyx_k_Empty_shape_tuple_for_cython_arr[] = "Empty shape tuple for cython.array";
static const char __pyx_k_Expected_input_type_numpy_ndarra[] = "Expected input type numpy.ndarray or memoryviewslice, but got %s";
static const char __pyx_k_Incompatible_checksums_0x_x_vs_0[] = "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))";
static const char __pyx_k_Indirect_dimensions_not_supporte[] = "Indirect dimensions not supported";
static const char __pyx_k_Input_palette_is_empty_The_palet[] = "Input palette is empty. The palette should contain at least one color.";
static const char __pyx_k_Input_palette_must_be_a_contiguo[] = "Input palette must be a contiguous array. The given array is not contiguous.";
static const char __pyx_k_Invalid_mode_expected_c_or_fortr[] = "Invalid mode, expected 'c' or 'fortran', got ";
static const char __pyx_k_Invalid_type_for_argument_rgb_ar[] = "Invalid type for argument 'rgb_array'. Expected a valid pygame.Surface instance, but got ";
static const char __pyx_k_Invalid_type_for_argument_temp_b[] = "Invalid type for argument 'temp_buffer'. Expected a numpy.ndarray, but got ";
static const char __pyx_k_Microsoft_Windows_and_IBM_OS_2_d[] = "Microsoft Windows and IBM OS/2 default 16-color palette";
static const char __pyx_k_Microsoft_Windows_default_20_col[] = "Microsoft Windows default 20-color palette.In 256-color modes, there are four additional standard Windows colors, twenty system reserved colors in total;[1][2] thus the system leaves 236 palette indexes free for applications to use. The system color entries inside a 256-color palette table are the first ten plus the last ten. In any case, the additional system colors do not seem to add a sharp color richness: they are only some intermediate shades of grayish colors.";
static const char __pyx_k_Out_of_bounds_on_buffer_access_a[] = "Out of bounds on buffer access (axis ";
static const char __pyx_k_The_Amstrad_CPC_464_664_6128_ser[] = "The Amstrad CPC 464/664/6128 series of computers generates the available palette with 3 levels (not bits) for every RGB primary. Thus, there are 27 different RGB combinations, from which 16 can be simultaneously displayed in low resolution modes, four in medium resolution modes and two in high resolution modes.[7]";
static const char __pyx_k_The_Apple_II_series_features_a_1[] = "The Apple II series features a 16-color composite video palette, based on the YIQ color space used by the NTSC color TV system.[10][11].The Apple II features low-res and hi-res modes. The 40x48 pixel lo-res modes allowed 15 different colors plus a duplicate gray(**).[12] * The majority of Apple graphic applications used the hi-res modes, which had 280\303\227192 pixels (effectively 140x192 on a color monitor). The hi-res modes allowed six colors: black, white, blue, orange,green and purple.";
static const char __pyx_k_The_Color_Graphics_Adapter_CGA_o[] = "The Color Graphics Adapter (CGA) outputs what IBM called digital RGB[1] (that is, the R, G, B (and I) signals from the graphics card to the monitor can each only have two states: on or off). CGA supports a maximum of 16 colors. However, its 320\303\227200 graphics modes is restricted to fixed palettes containing only four colors, and the 640\303\227200 graphic modes is only two colors. 16 colors are only available in text modes or the tweaked text 160\303\227100 modes. A different set of 16 colors is available in composite modes with an NTSC composite monitor. (Independent groups have also demonstrated much larger composite color sets\342\200\224over 256 colors\342\200\224on a composite monitor by the use of artifact color techniques. See Color Graphics Adapter#High color depth.) The full standard RGBI palette is a variant of the 4-bit RGBI schema. Although the RGBI signals each have only two states, the CGA color monitor decodes them as if RGB signals had four levels. Darker colors are the basic RGB 2nd level signals except for brown, which is dark yellow with the level for the green component halved (1st level). Brighter colors are made by adding a uniform intensity one-level signal to every RGB signal of the dark ones, reaching the 3rd level (except dark gray which reaches only the 1st level), and in this case yellow is produced as if the brown were ordinary dark yellow.";
static const char __pyx_k_The_Commodore_64_has_two_graphic[] = "The Commodore 64 has two graphic modes: Multicolor and High Resolution.In the Multicolor 160\303\227200, 16-color modes, every cell of 4\303\2278, 2:1 aspect ratio pixels can have one of four colors: one shared with the entire screen, the two background and foreground colors of the corresponding text modes character, and one more color also stored in the color RAM area, all of them freely selectable among the entire palette.In the High Resolution 320\303\227200, 16-color modes, every cell of 8\303\2278 pixels can have one of the two background and foreground colors of the correspondent text modes character, both freely selectable among the entire palette.";
static const char __pyx_k_The_MSX_series_has_two_graphic_m[] = "The MSX series has two graphic modes. The MSX BASIC Screen 3 modes is a low-resolution modes with 15 colors, in which every pixel can be any of the 15 available colors. Screen modes 2 is a 256\303\227192 high-resolution modes with 15 colors, in which each of every eight consecutive pixels can only use 2 colors.";
static const char __pyx_k_The_ZX_Spectrum_and_compatible_c[] = "The ZX Spectrum (and compatible) computers use a variation of the 4-bit RGBI palette philosophy. This results in each of the colors of the 3-bit palette to have a basic and bright variant, with the exception of black. This was accomplished by having a maximum voltage level for the bright variant, and a lower voltage level for the basic variant. Due to this, black is the same in both variants.";
static const char __pyx_k_Unable_to_convert_item_to_object[] = "Unable to convert item to object";
static const char __pyx_k_World_System_Teletext_Level_1_19[] = "World System Teletext Level 1 (1976) uses a 3-bit RGB, 8-color palette. Teletext has 40\303\22725 characters per page of which the first row is reserved for a page header. Every character cell has a background color and a text color. These attributes along with others are set through control codes which each occupy one character position. Graphics characters consisting of 2\303\2273 cells can used following a graphics color attribute.";
static const char __pyx_k_got_differing_extents_in_dimensi[] = "got differing extents in dimension ";
static const char __pyx_k_https_lospec_com_palette_list_lo[] = "https://lospec.com/palette-list/lospec500 - Collaboration";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_numpy__core_multiarray_failed_to[] = "numpy._core.multiarray failed to import";
static const char __pyx_k_numpy__core_umath_failed_to_impo[] = "numpy._core.umath failed to import";
static const char __pyx_k_unable_to_allocate_shape_and_str[] = "unable to allocate shape and strides.";
/* #### Code section: decls ### */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr); /* proto */
static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item); /* proto */
static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object); /* proto */
static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self); /* proto */
static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_12PygameShader_7Palette_palette_change(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image_surface, PyObject *__pyx_v_color_palette, PyObject *__pyx_v_temp_buffer); /* proto */
static PyObject *__pyx_pf_12PygameShader_7Palette_2make_palette(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_width, float __pyx_v_fh, float __pyx_v_fs, float __pyx_v_fl); /* proto */
static PyObject *__pyx_pf_12PygameShader_7Palette_4create_surface_from_palette(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_palette_c); /* proto */
static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  #endif
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  #if CYTHON_USE_MODULE_STATE
  #endif
  #if CYTHON_USE_MODULE_STATE
  PyObject *__pyx_type___pyx_array;
  PyObject *__pyx_type___pyx_MemviewEnum;
  PyObject *__pyx_type___pyx_memoryview;
  PyObject *__pyx_type___pyx_memoryviewslice;
  #endif
  PyTypeObject *__pyx_array_type;
  PyTypeObject *__pyx_MemviewEnum_type;
  PyTypeObject *__pyx_memoryview_type;
  PyTypeObject *__pyx_memoryviewslice_type;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_kp_u_128_colors_Created_by_Adigun_A_P;
  PyObject *__pyx_kp_u_24_colors_palette_Created_by_Vin;
  PyObject *__pyx_kp_u_3;
  PyObject *__pyx_kp_u_46_colors_palette_by_AdamCYounis;
  PyObject *__pyx_kp_u_64_colors_palette_by_Adigun_Pola;
  PyObject *__pyx_kp_u_76_colors_palette_Created_by_Ker;
  PyObject *__pyx_kp_u_8_colors_palette_Created_by_Sham;
  PyObject *__pyx_n_s_AAP64;
  PyObject *__pyx_n_u_AAP64;
  PyObject *__pyx_n_s_AAP64_NORMALIZED;
  PyObject *__pyx_n_s_AAPSPLENDOR128;
  PyObject *__pyx_n_u_AAPSPLENDOR128;
  PyObject *__pyx_n_s_AAPSPLENDOR128_NORMALIZED;
  PyObject *__pyx_n_s_AMSTRAD_CPC;
  PyObject *__pyx_n_u_AMSTRAD_CPC;
  PyObject *__pyx_n_s_AMSTRAD_CPC_NORMALIZED;
  PyObject *__pyx_n_s_APOLLO;
  PyObject *__pyx_n_u_APOLLO;
  PyObject *__pyx_n_s_APOLLO_NORMALIZED;
  PyObject *__pyx_n_s_APPLE_II;
  PyObject *__pyx_n_u_APPLE_II;
  PyObject *__pyx_n_s_APPLE_II_HIGH;
  PyObject *__pyx_n_u_APPLE_II_HIGH;
  PyObject *__pyx_n_s_APPLE_II_HIGH_NORMALIZED;
  PyObject *__pyx_n_s_APPLE_II_LOW;
  PyObject *__pyx_n_u_APPLE_II_LOW;
  PyObject *__pyx_n_s_APPLE_II_LOW_NORMALIZED;
  PyObject *__pyx_n_s_APPLE_II_NORMALIZED;
  PyObject *__pyx_n_s_ASCII;
  PyObject *__pyx_kp_s_All_dimensions_preceding_dimensi;
  PyObject *__pyx_kp_u_Argument_temp_buffer_must_be_a_c;
  PyObject *__pyx_kp_u_Argument_width_should_be_0_got_s;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_BBC_MICRO;
  PyObject *__pyx_n_u_BBC_MICRO;
  PyObject *__pyx_kp_u_BBC_Micro_has_8_display_modes_wi;
  PyObject *__pyx_kp_u_Both_temp_buffer_and_color_palet;
  PyObject *__pyx_kp_s_Buffer_view_does_not_expose_stri;
  PyObject *__pyx_n_s_CGA_MODE4_PAL1_HIGH;
  PyObject *__pyx_n_u_CGA_MODE4_PAL1_HIGH;
  PyObject *__pyx_n_s_CGA_MODE4_PAL1_LOW;
  PyObject *__pyx_n_u_CGA_MODE4_PAL1_LOW;
  PyObject *__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_HIGH;
  PyObject *__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_LOW;
  PyObject *__pyx_n_s_CGA_MODE4_PAL2_HIGH;
  PyObject *__pyx_n_u_CGA_MODE4_PAL2_HIGH;
  PyObject *__pyx_n_s_CGA_MODE4_PAL2_LOW;
  PyObject *__pyx_n_u_CGA_MODE4_PAL2_LOW;
  PyObject *__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_HIGH;
  PyObject *__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_LOW;
  PyObject *__pyx_n_s_CGA_MODE5_HIGH;
  PyObject *__pyx_n_u_CGA_MODE5_HIGH;
  PyObject *__pyx_n_s_CGA_MODE5_LOW;
  PyObject *__pyx_n_u_CGA_MODE5_LOW;
  PyObject *__pyx_n_s_CGA_MODE5_NORMALIZED_HIGH;
  PyObject *__pyx_n_s_CGA_MODE5_NORMALIZED_LOW;
  PyObject *__pyx_n_s_CGA_TEST;
  PyObject *__pyx_n_s_COMMODORE_64;
  PyObject *__pyx_n_u_COMMODORE_64;
  PyObject *__pyx_n_s_COMMODORE_64_NORMALIZED;
  PyObject *__pyx_n_u_C_CONTIGUOUS;
  PyObject *__pyx_kp_s_Can_only_create_a_buffer_that_is;
  PyObject *__pyx_kp_s_Cannot_assign_to_read_only_memor;
  PyObject *__pyx_kp_s_Cannot_create_writable_memory_vi;
  PyObject *__pyx_kp_u_Cannot_index_with_type;
  PyObject *__pyx_kp_s_Cannot_transpose_memoryview_with;
  PyObject *__pyx_kp_u_Created_by_Arne_as_part_of_his_F;
  PyObject *__pyx_kp_u_Created_by_LostInIndigo;
  PyObject *__pyx_kp_u_Created_by_Okee;
  PyObject *__pyx_kp_s_Dimension_d_is_not_direct;
  PyObject *__pyx_kp_u_Dimension_mismatch_between_rgb_a;
  PyObject *__pyx_n_s_Ellipsis;
  PyObject *__pyx_kp_s_Empty_shape_tuple_for_cython_arr;
  PyObject *__pyx_kp_u_Error_creating_Pygame_surface;
  PyObject *__pyx_kp_u_Every_pixel_on_PICO_8_is_stored;
  PyObject *__pyx_kp_u_Expected_input_array_with_dtype;
  PyObject *__pyx_kp_u_Expected_input_type_numpy_ndarra;
  PyObject *__pyx_n_s_FAMICUBE;
  PyObject *__pyx_n_u_FAMICUBE;
  PyObject *__pyx_n_s_FAMICUBE_NORMALIZED;
  PyObject *__pyx_n_s_FUNKYFUTURE;
  PyObject *__pyx_n_u_FUNKYFUTURE;
  PyObject *__pyx_n_s_FUNKYFUTURE_NORMALIZED;
  PyObject *__pyx_kp_u_Failed_to_get_a_valid_view_from;
  PyObject *__pyx_kp_u_For_Thomson_computers_a_popular;
  PyObject *__pyx_n_s_FutureWarning;
  PyObject *__pyx_n_s_IRIDESCENTCRYSTAL;
  PyObject *__pyx_n_u_IRIDESCENTCRYSTAL;
  PyObject *__pyx_n_s_IRIDESCENTCRYSTAL_NORMALIZED;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_n_s_ImportWarning;
  PyObject *__pyx_kp_s_Incompatible_checksums_0x_x_vs_0;
  PyObject *__pyx_n_s_IndexError;
  PyObject *__pyx_kp_s_Index_out_of_bounds_axis_d;
  PyObject *__pyx_kp_s_Indirect_dimensions_not_supporte;
  PyObject *__pyx_kp_u_Input_palette_is_empty_The_palet;
  PyObject *__pyx_kp_u_Input_palette_must_be_a_contiguo;
  PyObject *__pyx_kp_u_Invalid_mode_expected_c_or_fortr;
  PyObject *__pyx_kp_u_Invalid_shape_in_axis;
  PyObject *__pyx_kp_u_Invalid_type_for_argument_color;
  PyObject *__pyx_kp_u_Invalid_type_for_argument_rgb_ar;
  PyObject *__pyx_kp_u_Invalid_type_for_argument_temp_b;
  PyObject *__pyx_n_s_LIST_PALETTES;
  PyObject *__pyx_n_s_LOSPEC500;
  PyObject *__pyx_n_u_LOSPEC500;
  PyObject *__pyx_n_s_LOSPEC500_NORMALIZED;
  PyObject *__pyx_n_s_MICROSOFT_WINDOWS_16;
  PyObject *__pyx_n_u_MICROSOFT_WINDOWS_16;
  PyObject *__pyx_n_s_MICROSOFT_WINDOWS_16_NORMALIZED;
  PyObject *__pyx_n_s_MICROSOFT_WINDOWS_20;
  PyObject *__pyx_n_u_MICROSOFT_WINDOWS_20;
  PyObject *__pyx_n_s_MICROSOFT_WINDOWS_20_NORMALIZED;
  PyObject *__pyx_n_s_MICROSOFT_WINDOWS_PAINT;
  PyObject *__pyx_n_u_MICROSOFT_WINDOWS_PAINT;
  PyObject *__pyx_n_s_MICROSOFT_WINDOWS_PAINT_NORMALI;
  PyObject *__pyx_kp_u_MONOCHROME_2_amber_colors;
  PyObject *__pyx_kp_u_MONOCHROME_2_green_colors;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_AMBER;
  PyObject *__pyx_n_u_MONO_PHOSPHOR_AMBER;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_AMBER_NORMALIZED;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_GREEN1;
  PyObject *__pyx_n_u_MONO_PHOSPHOR_GREEN1;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_GREEN1_NORMALIZED;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_GREEN2;
  PyObject *__pyx_n_u_MONO_PHOSPHOR_GREEN2;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_GREEN2_NORMALIZED;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_GREEN3;
  PyObject *__pyx_n_u_MONO_PHOSPHOR_GREEN3;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_GREEN3_NORMALIZED;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_LTAMBER;
  PyObject *__pyx_n_u_MONO_PHOSPHOR_LTAMBER;
  PyObject *__pyx_n_s_MONO_PHOSPHOR_LTAMBER_NORMALIZE;
  PyObject *__pyx_n_s_MSX;
  PyObject *__pyx_n_u_MSX;
  PyObject *__pyx_n_s_MSX_NORMALIZED;
  PyObject *__pyx_n_s_MemoryError;
  PyObject *__pyx_kp_s_MemoryView_of_r_at_0x_x;
  PyObject *__pyx_kp_s_MemoryView_of_r_object;
  PyObject *__pyx_kp_u_Microsoft_Windows_and_IBM_OS_2_d;
  PyObject *__pyx_kp_u_Microsoft_Windows_default_20_col;
  PyObject *__pyx_kp_u_Microsoft_paint_color_palette;
  PyObject *__pyx_n_b_O;
  PyObject *__pyx_n_s_OPENMP;
  PyObject *__pyx_kp_u_Out_of_bounds_on_buffer_access_a;
  PyObject *__pyx_n_s_PICO_8;
  PyObject *__pyx_n_u_PICO_8;
  PyObject *__pyx_n_s_PICO_8_CUSTOM;
  PyObject *__pyx_n_u_PICO_8_CUSTOM;
  PyObject *__pyx_n_s_PICO_8_CUSTOM_NORMALIZED;
  PyObject *__pyx_n_s_PICO_8_NORMALIZED;
  PyObject *__pyx_n_u_PYGAME_HIDE_SUPPORT_PROMPT;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_kp_u_Please_ensure_both_arrays_have;
  PyObject *__pyx_kp_u_Please_ensure_you_pass_a_valid;
  PyObject *__pyx_kp_u_Please_pass_a_numpy_array_for_t;
  PyObject *__pyx_kp_u_Please_provide_a_numpy_array_co;
  PyObject *__pyx_n_s_PygameShader_config;
  PyObject *__pyx_kp_u_Pygame_library_is_missing_on_yo;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_RuntimeWarning;
  PyObject *__pyx_n_s_SILVER;
  PyObject *__pyx_n_u_SILVER;
  PyObject *__pyx_n_s_SILVER_NORMALIZED;
  PyObject *__pyx_n_s_Sequence;
  PyObject *__pyx_kp_s_Step_may_not_be_zero_axis_d;
  PyObject *__pyx_n_s_Surface;
  PyObject *__pyx_n_s_TELETEXT;
  PyObject *__pyx_n_u_TELETEXT;
  PyObject *__pyx_n_s_TELETEXT_NORMALIZED;
  PyObject *__pyx_n_s_THREAD_NUMBER;
  PyObject *__pyx_n_s_TO7;
  PyObject *__pyx_n_u_TO7;
  PyObject *__pyx_n_s_TO7_NORMALIZED;
  PyObject *__pyx_n_s_TWILIOQUEST76;
  PyObject *__pyx_n_u_TWILIOQUEST76;
  PyObject *__pyx_n_s_TWILIOQUEST76_NORMALIZED;
  PyObject *__pyx_kp_u_The_Amstrad_CPC_464_664_6128_ser;
  PyObject *__pyx_kp_u_The_Apple_II_series_features_a_1;
  PyObject *__pyx_kp_u_The_Color_Graphics_Adapter_CGA_o;
  PyObject *__pyx_kp_u_The_Commodore_64_has_two_graphic;
  PyObject *__pyx_kp_u_The_MSX_series_has_two_graphic_m;
  PyObject *__pyx_kp_u_The_ZX_Spectrum_and_compatible_c;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_s_Unable_to_convert_item_to_object;
  PyObject *__pyx_n_s_VERSION;
  PyObject *__pyx_n_s_VINIK24;
  PyObject *__pyx_n_u_VINIK24;
  PyObject *__pyx_n_s_VINIK24_NORMALIZED;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s_View_MemoryView;
  PyObject *__pyx_kp_u_World_System_Teletext_Level_1_19;
  PyObject *__pyx_n_s_ZX_SPECTRUM_HIGH;
  PyObject *__pyx_n_u_ZX_SPECTRUM_HIGH;
  PyObject *__pyx_n_s_ZX_SPECTRUM_LOW;
  PyObject *__pyx_n_u_ZX_SPECTRUM_LOW;
  PyObject *__pyx_n_s_ZX_SPECTRUM_NORMALIZED_HIGH;
  PyObject *__pyx_n_s_ZX_SPECTRUM_NORMALIZED_LOW;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_kp_u__2;
  PyObject *__pyx_n_s__3;
  PyObject *__pyx_n_s__30;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_n_s_abc;
  PyObject *__pyx_n_s_allocate_buffer;
  PyObject *__pyx_kp_u_and;
  PyObject *__pyx_kp_u_and_color_palette_dtype;
  PyObject *__pyx_n_s_array;
  PyObject *__pyx_n_s_array3d;
  PyObject *__pyx_n_s_array_alpha;
  PyObject *__pyx_n_s_asarray;
  PyObject *__pyx_n_s_ascontiguousarray;
  PyObject *__pyx_n_s_base;
  PyObject *__pyx_n_s_blit_array;
  PyObject *__pyx_n_s_c;
  PyObject *__pyx_n_u_c;
  PyObject *__pyx_n_s_category;
  PyObject *__pyx_n_s_class;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_collections;
  PyObject *__pyx_kp_s_collections_abc;
  PyObject *__pyx_n_s_color_palette;
  PyObject *__pyx_kp_s_contiguous_and_direct;
  PyObject *__pyx_kp_s_contiguous_and_indirect;
  PyObject *__pyx_n_s_count;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_dtype;
  PyObject *__pyx_n_s_dtype_is_object;
  PyObject *__pyx_n_s_empty;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_encode;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_s_environ;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_fh;
  PyObject *__pyx_n_s_filterwarnings;
  PyObject *__pyx_n_s_fl;
  PyObject *__pyx_n_s_flags;
  PyObject *__pyx_n_s_float32;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_fortran;
  PyObject *__pyx_n_u_fortran;
  PyObject *__pyx_n_s_fs;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get_view;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_kp_u_got;
  PyObject *__pyx_kp_u_got_differing_extents_in_dimensi;
  PyObject *__pyx_n_u_hide;
  PyObject *__pyx_kp_u_https_lospec_com_palette_list_lo;
  PyObject *__pyx_n_s_id;
  PyObject *__pyx_n_u_ignore;
  PyObject *__pyx_n_s_image_surface;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_int32;
  PyObject *__pyx_n_s_int8;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_itemsize;
  PyObject *__pyx_kp_s_itemsize_0_for_cython_array;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_make_surface;
  PyObject *__pyx_n_s_memview;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_ndarray;
  PyObject *__pyx_n_s_ndim;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_kp_s_no_default___reduce___due_to_non;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_u_numpy__core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy__core_umath_failed_to_impo;
  PyObject *__pyx_kp_u_numpy_library_is_missing_on_you;
  PyObject *__pyx_n_s_obj;
  PyObject *__pyx_n_s_os;
  PyObject *__pyx_n_s_pack;
  PyObject *__pyx_n_s_palette_c;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_pixels3d;
  PyObject *__pyx_n_s_pixels_alpha;
  PyObject *__pyx_n_s_pygame;
  PyObject *__pyx_n_s_pygame_surfarray;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_Enum;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_register;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_shape;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_step;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_kp_s_strided_and_direct;
  PyObject *__pyx_kp_s_strided_and_direct_or_indirect;
  PyObject *__pyx_kp_s_strided_and_indirect;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_struct;
  PyObject *__pyx_n_s_sys;
  PyObject *__pyx_n_s_temp_buffer;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_uint32;
  PyObject *__pyx_n_s_uint8;
  PyObject *__pyx_kp_s_unable_to_allocate_array_data;
  PyObject *__pyx_kp_s_unable_to_allocate_shape_and_str;
  PyObject *__pyx_n_s_unpack;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_version_info;
  PyObject *__pyx_n_s_warnings;
  PyObject *__pyx_kp_u_while_the_temp_buffer_array_has;
  PyObject *__pyx_n_s_width;
  PyObject *__pyx_n_s_zeros;
  PyObject *__pyx_float_0_;
  PyObject *__pyx_float_1_;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_2;
  PyObject *__pyx_float_0_4;
  PyObject *__pyx_float_0_6;
  PyObject *__pyx_float_0_8;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_0_6666;
  PyObject *__pyx_float_0_66666;
  PyObject *__pyx_float_0_0745098;
  PyObject *__pyx_float_0_8627451;
  PyObject *__pyx_float_0_00392157;
  PyObject *__pyx_float_0_00784314;
  PyObject *__pyx_float_0_01176471;
  PyObject *__pyx_float_0_01568627;
  PyObject *__pyx_float_0_04705882;
  PyObject *__pyx_float_0_09803922;
  PyObject *__pyx_float_0_14509804;
  PyObject *__pyx_float_0_15686275;
  PyObject *__pyx_float_0_17254902;
  PyObject *__pyx_float_0_19607843;
  PyObject *__pyx_float_0_21960784;
  PyObject *__pyx_float_0_22352941;
  PyObject *__pyx_float_0_25098039;
  PyObject *__pyx_float_0_47843137;
  PyObject *__pyx_float_0_48235294;
  PyObject *__pyx_float_0_50196078;
  PyObject *__pyx_float_0_62745098;
  PyObject *__pyx_float_0_64313725;
  PyObject *__pyx_float_0_65098039;
  PyObject *__pyx_float_0_69019608;
  PyObject *__pyx_float_0_74117647;
  PyObject *__pyx_float_0_75294118;
  PyObject *__pyx_float_0_79215686;
  PyObject *__pyx_float_0_94117647;
  PyObject *__pyx_float_0_97647059;
  PyObject *__pyx_float_0_98039216;
  PyObject *__pyx_float_0_98431373;
  PyObject *__pyx_float_0_98823529;
  PyObject *__pyx_float_0_99215686;
  PyObject *__pyx_float_0_99607843;
  PyObject *__pyx_float_0_396078431372549;
  PyObject *__pyx_float_0_403921568627451;
  PyObject *__pyx_float_0_592156862745098;
  PyObject *__pyx_float_0_596078431372549;
  PyObject *__pyx_float_0_611764705882353;
  PyObject *__pyx_float_0_615686274509804;
  PyObject *__pyx_float_0_788235294117647;
  PyObject *__pyx_float_0_792156862745098;
  PyObject *__pyx_float_0_796078431372549;
  PyObject *__pyx_float_0_803921568627451;
  PyObject *__pyx_float_0_807843137254902;
  PyObject *__pyx_float_0_984313725490196;
  PyObject *__pyx_float_0_996078431372549;
  PyObject *__pyx_float_0_0196078431372549;
  PyObject *__pyx_float_0_0392156862745098;
  PyObject *__pyx_float_0_0784313725490196;
  PyObject *__pyx_float_0_1411764705882353;
  PyObject *__pyx_float_0_1450980392156863;
  PyObject *__pyx_float_0_1568627450980392;
  PyObject *__pyx_float_0_1607843137254902;
  PyObject *__pyx_float_0_1803921568627451;
  PyObject *__pyx_float_0_1843137254901961;
  PyObject *__pyx_float_0_2196078431372549;
  PyObject *__pyx_float_0_2235294117647059;
  PyObject *__pyx_float_0_2549019607843137;
  PyObject *__pyx_float_0_2627450980392157;
  PyObject *__pyx_float_0_2784313725490196;
  PyObject *__pyx_float_0_2823529411764706;
  PyObject *__pyx_float_0_2901960784313726;
  PyObject *__pyx_float_0_2980392156862745;
  PyObject *__pyx_float_0_3058823529411765;
  PyObject *__pyx_float_0_3137254901960784;
  PyObject *__pyx_float_0_3176470588235294;
  PyObject *__pyx_float_0_3215686274509804;
  PyObject *__pyx_float_0_3254901960784314;
  PyObject *__pyx_float_0_3333333333333333;
  PyObject *__pyx_float_0_3411764705882353;
  PyObject *__pyx_float_0_3568627450980392;
  PyObject *__pyx_float_0_3607843137254902;
  PyObject *__pyx_float_0_3686274509803922;
  PyObject *__pyx_float_0_3764705882352941;
  PyObject *__pyx_float_0_3803921568627451;
  PyObject *__pyx_float_0_3843137254901961;
  PyObject *__pyx_float_0_4117647058823529;
  PyObject *__pyx_float_0_4196078431372549;
  PyObject *__pyx_float_0_4235294117647059;
  PyObject *__pyx_float_0_4392156862745098;
  PyObject *__pyx_float_0_4470588235294118;
  PyObject *__pyx_float_0_4549019607843137;
  PyObject *__pyx_float_0_4588235294117647;
  PyObject *__pyx_float_0_4627450980392157;
  PyObject *__pyx_float_0_4666666666666667;
  PyObject *__pyx_float_0_4745098039215686;
  PyObject *__pyx_float_0_4823529411764706;
  PyObject *__pyx_float_0_4980392156862745;
  PyObject *__pyx_float_0_5019607843137255;
  PyObject *__pyx_float_0_5058823529411764;
  PyObject *__pyx_float_0_5098039215686274;
  PyObject *__pyx_float_0_5137254901960784;
  PyObject *__pyx_float_0_5176470588235295;
  PyObject *__pyx_float_0_5215686274509804;
  PyObject *__pyx_float_0_5254901960784314;
  PyObject *__pyx_float_0_5294117647058824;
  PyObject *__pyx_float_0_5333333333333333;
  PyObject *__pyx_float_0_5372549019607843;
  PyObject *__pyx_float_0_5411764705882353;
  PyObject *__pyx_float_0_5450980392156862;
  PyObject *__pyx_float_0_5490196078431373;
  PyObject *__pyx_float_0_5529411764705883;
  PyObject *__pyx_float_0_5568627450980392;
  PyObject *__pyx_float_0_5607843137254902;
  PyObject *__pyx_float_0_5647058823529412;
  PyObject *__pyx_float_0_5686274509803921;
  PyObject *__pyx_float_0_5725490196078431;
  PyObject *__pyx_float_0_5764705882352941;
  PyObject *__pyx_float_0_5803921568627451;
  PyObject *__pyx_float_0_5843137254901961;
  PyObject *__pyx_float_0_5882352941176471;
  PyObject *__pyx_float_0_6039215686274509;
  PyObject *__pyx_float_0_6078431372549019;
  PyObject *__pyx_float_0_6196078431372549;
  PyObject *__pyx_float_0_6235294117647059;
  PyObject *__pyx_float_0_6274509803921569;
  PyObject *__pyx_float_0_6313725490196078;
  PyObject *__pyx_float_0_6352941176470588;
  PyObject *__pyx_float_0_6392156862745098;
  PyObject *__pyx_float_0_6431372549019608;
  PyObject *__pyx_float_0_6470588235294118;
  PyObject *__pyx_float_0_6509803921568628;
  PyObject *__pyx_float_0_6549019607843137;
  PyObject *__pyx_float_0_6588235294117647;
  PyObject *__pyx_float_0_6627450980392157;
  PyObject *__pyx_float_0_6666666666666666;
  PyObject *__pyx_float_0_6705882352941176;
  PyObject *__pyx_float_0_6745098039215687;
  PyObject *__pyx_float_0_6784313725490196;
  PyObject *__pyx_float_0_6823529411764706;
  PyObject *__pyx_float_0_6862745098039216;
  PyObject *__pyx_float_0_6901960784313725;
  PyObject *__pyx_float_0_6941176470588235;
  PyObject *__pyx_float_0_6980392156862745;
  PyObject *__pyx_float_0_7019607843137254;
  PyObject *__pyx_float_0_7058823529411765;
  PyObject *__pyx_float_0_7098039215686275;
  PyObject *__pyx_float_0_7137254901960784;
  PyObject *__pyx_float_0_7176470588235294;
  PyObject *__pyx_float_0_7215686274509804;
  PyObject *__pyx_float_0_7254901960784313;
  PyObject *__pyx_float_0_7294117647058823;
  PyObject *__pyx_float_0_7333333333333333;
  PyObject *__pyx_float_0_7372549019607844;
  PyObject *__pyx_float_0_7411764705882353;
  PyObject *__pyx_float_0_7450980392156863;
  PyObject *__pyx_float_0_7490196078431373;
  PyObject *__pyx_float_0_7529411764705882;
  PyObject *__pyx_float_0_7568627450980392;
  PyObject *__pyx_float_0_7607843137254902;
  PyObject *__pyx_float_0_7647058823529411;
  PyObject *__pyx_float_0_7686274509803922;
  PyObject *__pyx_float_0_7725490196078432;
  PyObject *__pyx_float_0_7764705882352941;
  PyObject *__pyx_float_0_7803921568627451;
  PyObject *__pyx_float_0_7843137254901961;
  PyObject *__pyx_float_0_8117647058823529;
  PyObject *__pyx_float_0_8156862745098039;
  PyObject *__pyx_float_0_8196078431372549;
  PyObject *__pyx_float_0_8235294117647058;
  PyObject *__pyx_float_0_8274509803921568;
  PyObject *__pyx_float_0_8313725490196079;
  PyObject *__pyx_float_0_8352941176470589;
  PyObject *__pyx_float_0_8392156862745098;
  PyObject *__pyx_float_0_8431372549019608;
  PyObject *__pyx_float_0_8470588235294118;
  PyObject *__pyx_float_0_8549019607843137;
  PyObject *__pyx_float_0_8588235294117647;
  PyObject *__pyx_float_0_8627450980392157;
  PyObject *__pyx_float_0_8666666666666667;
  PyObject *__pyx_float_0_8705882352941177;
  PyObject *__pyx_float_0_8745098039215686;
  PyObject *__pyx_float_0_8784313725490196;
  PyObject *__pyx_float_0_8823529411764706;
  PyObject *__pyx_float_0_8862745098039215;
  PyObject *__pyx_float_0_8901960784313725;
  PyObject *__pyx_float_0_8941176470588236;
  PyObject *__pyx_float_0_9019607843137255;
  PyObject *__pyx_float_0_9058823529411765;
  PyObject *__pyx_float_0_9098039215686274;
  PyObject *__pyx_float_0_9137254901960784;
  PyObject *__pyx_float_0_9176470588235294;
  PyObject *__pyx_float_0_9215686274509803;
  PyObject *__pyx_float_0_9254901960784314;
  PyObject *__pyx_float_0_9294117647058824;
  PyObject *__pyx_float_0_9333333333333333;
  PyObject *__pyx_float_0_9372549019607843;
  PyObject *__pyx_float_0_9411764705882353;
  PyObject *__pyx_float_0_9450980392156862;
  PyObject *__pyx_float_0_9490196078431372;
  PyObject *__pyx_float_0_9529411764705882;
  PyObject *__pyx_float_0_9568627450980393;
  PyObject *__pyx_float_0_9607843137254902;
  PyObject *__pyx_float_0_9647058823529412;
  PyObject *__pyx_float_0_9686274509803922;
  PyObject *__pyx_float_0_9725490196078431;
  PyObject *__pyx_float_0_9764705882352941;
  PyObject *__pyx_float_0_9803921568627451;
  PyObject *__pyx_float_0_9882352941176471;
  PyObject *__pyx_float_0_9921568627450981;
  PyObject *__pyx_float_0_00784313725490196;
  PyObject *__pyx_float_0_01568627450980392;
  PyObject *__pyx_float_0_03137254901960784;
  PyObject *__pyx_float_0_03529411764705882;
  PyObject *__pyx_float_0_06274509803921569;
  PyObject *__pyx_float_0_07058823529411765;
  PyObject *__pyx_float_0_07450980392156863;
  PyObject *__pyx_float_0_08235294117647059;
  PyObject *__pyx_float_0_08627450980392157;
  PyObject *__pyx_float_0_09019607843137255;
  PyObject *__pyx_float_0_09411764705882353;
  PyObject *__pyx_float_0_09803921568627451;
  PyObject *__pyx_float_0_10196078431372549;
  PyObject *__pyx_float_0_10588235294117647;
  PyObject *__pyx_float_0_10980392156862745;
  PyObject *__pyx_float_0_11372549019607843;
  PyObject *__pyx_float_0_11764705882352941;
  PyObject *__pyx_float_0_12156862745098039;
  PyObject *__pyx_float_0_12549019607843137;
  PyObject *__pyx_float_0_12941176470588237;
  PyObject *__pyx_float_0_13333333333333333;
  PyObject *__pyx_float_0_13725490196078433;
  PyObject *__pyx_float_0_14901960784313725;
  PyObject *__pyx_float_0_15294117647058825;
  PyObject *__pyx_float_0_16470588235294117;
  PyObject *__pyx_float_0_16862745098039217;
  PyObject *__pyx_float_0_17254901960784313;
  PyObject *__pyx_float_0_17647058823529413;
  PyObject *__pyx_float_0_18823529411764706;
  PyObject *__pyx_float_0_19215686274509805;
  PyObject *__pyx_float_0_19607843137254902;
  PyObject *__pyx_float_0_20392156862745098;
  PyObject *__pyx_float_0_20784313725490197;
  PyObject *__pyx_float_0_21176470588235294;
  PyObject *__pyx_float_0_21568627450980393;
  PyObject *__pyx_float_0_22745098039215686;
  PyObject *__pyx_float_0_23137254901960785;
  PyObject *__pyx_float_0_23529411764705882;
  PyObject *__pyx_float_0_23921568627450981;
  PyObject *__pyx_float_0_24313725490196078;
  PyObject *__pyx_float_0_24705882352941178;
  PyObject *__pyx_float_0_25098039215686274;
  PyObject *__pyx_float_0_25882352941176473;
  PyObject *__pyx_float_0_26666666666666666;
  PyObject *__pyx_float_0_27058823529411763;
  PyObject *__pyx_float_0_27450980392156865;
  PyObject *__pyx_float_0_28627450980392155;
  PyObject *__pyx_float_0_29411764705882354;
  PyObject *__pyx_float_0_30196078431372547;
  PyObject *__pyx_float_0_30980392156862746;
  PyObject *__pyx_float_0_32941176470588235;
  PyObject *__pyx_float_0_33725490196078434;
  PyObject *__pyx_float_0_34509803921568627;
  PyObject *__pyx_float_0_34901960784313724;
  PyObject *__pyx_float_0_35294117647058826;
  PyObject *__pyx_float_0_36470588235294116;
  PyObject *__pyx_float_0_37254901960784315;
  PyObject *__pyx_float_0_38823529411764707;
  PyObject *__pyx_float_0_39215686274509803;
  PyObject *__pyx_float_0_40784313725490196;
  PyObject *__pyx_float_0_41568627450980394;
  PyObject *__pyx_float_0_42745098039215684;
  PyObject *__pyx_float_0_43137254901960786;
  PyObject *__pyx_float_0_43529411764705883;
  PyObject *__pyx_float_0_44313725490196076;
  PyObject *__pyx_float_0_45098039215686275;
  PyObject *__pyx_float_0_47058823529411764;
  PyObject *__pyx_float_0_47843137254901963;
  PyObject *__pyx_float_0_48627450980392156;
  PyObject *__pyx_float_0_49019607843137253;
  PyObject *__pyx_float_0_49411764705882355;
  PyObject *__pyx_float_0_011764705882352941;
  PyObject *__pyx_float_0_023529411764705882;
  PyObject *__pyx_float_0_027450980392156862;
  PyObject *__pyx_float_0_043137254901960784;
  PyObject *__pyx_float_0_047058823529411764;
  PyObject *__pyx_float_0_050980392156862744;
  PyObject *__pyx_float_0_054901960784313725;
  PyObject *__pyx_float_0_058823529411764705;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_112105877;
  PyObject *__pyx_int_136983863;
  PyObject *__pyx_int_184977713;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_slice__5;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__8;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__10;
  PyObject *__pyx_tuple__11;
  PyObject *__pyx_tuple__13;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__22;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__24;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__28;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_codeobj__26;
} __pyx_mstate;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#else
static __pyx_mstate __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstate *__pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_array_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_array);
  Py_CLEAR(clear_module_state->__pyx_MemviewEnum_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_MemviewEnum);
  Py_CLEAR(clear_module_state->__pyx_memoryview_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_memoryview);
  Py_CLEAR(clear_module_state->__pyx_memoryviewslice_type);
  Py_CLEAR(clear_module_state->__pyx_type___pyx_memoryviewslice);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_kp_u_128_colors_Created_by_Adigun_A_P);
  Py_CLEAR(clear_module_state->__pyx_kp_u_24_colors_palette_Created_by_Vin);
  Py_CLEAR(clear_module_state->__pyx_kp_u_3);
  Py_CLEAR(clear_module_state->__pyx_kp_u_46_colors_palette_by_AdamCYounis);
  Py_CLEAR(clear_module_state->__pyx_kp_u_64_colors_palette_by_Adigun_Pola);
  Py_CLEAR(clear_module_state->__pyx_kp_u_76_colors_palette_Created_by_Ker);
  Py_CLEAR(clear_module_state->__pyx_kp_u_8_colors_palette_Created_by_Sham);
  Py_CLEAR(clear_module_state->__pyx_n_s_AAP64);
  Py_CLEAR(clear_module_state->__pyx_n_u_AAP64);
  Py_CLEAR(clear_module_state->__pyx_n_s_AAP64_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_AAPSPLENDOR128);
  Py_CLEAR(clear_module_state->__pyx_n_u_AAPSPLENDOR128);
  Py_CLEAR(clear_module_state->__pyx_n_s_AAPSPLENDOR128_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_AMSTRAD_CPC);
  Py_CLEAR(clear_module_state->__pyx_n_u_AMSTRAD_CPC);
  Py_CLEAR(clear_module_state->__pyx_n_s_AMSTRAD_CPC_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_APOLLO);
  Py_CLEAR(clear_module_state->__pyx_n_u_APOLLO);
  Py_CLEAR(clear_module_state->__pyx_n_s_APOLLO_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_APPLE_II);
  Py_CLEAR(clear_module_state->__pyx_n_u_APPLE_II);
  Py_CLEAR(clear_module_state->__pyx_n_s_APPLE_II_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_u_APPLE_II_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_APPLE_II_HIGH_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_APPLE_II_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_u_APPLE_II_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_APPLE_II_LOW_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_APPLE_II_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_ASCII);
  Py_CLEAR(clear_module_state->__pyx_kp_s_All_dimensions_preceding_dimensi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Argument_temp_buffer_must_be_a_c);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Argument_width_should_be_0_got_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_BBC_MICRO);
  Py_CLEAR(clear_module_state->__pyx_n_u_BBC_MICRO);
  Py_CLEAR(clear_module_state->__pyx_kp_u_BBC_Micro_has_8_display_modes_wi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Both_temp_buffer_and_color_palet);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Buffer_view_does_not_expose_stri);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE4_PAL1_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_u_CGA_MODE4_PAL1_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE4_PAL1_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_u_CGA_MODE4_PAL1_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE4_PAL2_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_u_CGA_MODE4_PAL2_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE4_PAL2_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_u_CGA_MODE4_PAL2_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE5_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_u_CGA_MODE5_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE5_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_u_CGA_MODE5_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE5_NORMALIZED_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_MODE5_NORMALIZED_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_CGA_TEST);
  Py_CLEAR(clear_module_state->__pyx_n_s_COMMODORE_64);
  Py_CLEAR(clear_module_state->__pyx_n_u_COMMODORE_64);
  Py_CLEAR(clear_module_state->__pyx_n_s_COMMODORE_64_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_u_C_CONTIGUOUS);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Can_only_create_a_buffer_that_is);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_assign_to_read_only_memor);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_create_writable_memory_vi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cannot_index_with_type);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Cannot_transpose_memoryview_with);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Created_by_Arne_as_part_of_his_F);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Created_by_LostInIndigo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Created_by_Okee);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dimension_d_is_not_direct);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Dimension_mismatch_between_rgb_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_Ellipsis);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Empty_shape_tuple_for_cython_arr);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_creating_Pygame_surface);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Every_pixel_on_PICO_8_is_stored);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_input_array_with_dtype);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Expected_input_type_numpy_ndarra);
  Py_CLEAR(clear_module_state->__pyx_n_s_FAMICUBE);
  Py_CLEAR(clear_module_state->__pyx_n_u_FAMICUBE);
  Py_CLEAR(clear_module_state->__pyx_n_s_FAMICUBE_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_FUNKYFUTURE);
  Py_CLEAR(clear_module_state->__pyx_n_u_FUNKYFUTURE);
  Py_CLEAR(clear_module_state->__pyx_n_s_FUNKYFUTURE_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_get_a_valid_view_from);
  Py_CLEAR(clear_module_state->__pyx_kp_u_For_Thomson_computers_a_popular);
  Py_CLEAR(clear_module_state->__pyx_n_s_FutureWarning);
  Py_CLEAR(clear_module_state->__pyx_n_s_IRIDESCENTCRYSTAL);
  Py_CLEAR(clear_module_state->__pyx_n_u_IRIDESCENTCRYSTAL);
  Py_CLEAR(clear_module_state->__pyx_n_s_IRIDESCENTCRYSTAL_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportWarning);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_IndexError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Index_out_of_bounds_axis_d);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Indirect_dimensions_not_supporte);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Input_palette_is_empty_The_palet);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Input_palette_must_be_a_contiguo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_mode_expected_c_or_fortr);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_shape_in_axis);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_type_for_argument_color);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_type_for_argument_rgb_ar);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_type_for_argument_temp_b);
  Py_CLEAR(clear_module_state->__pyx_n_s_LIST_PALETTES);
  Py_CLEAR(clear_module_state->__pyx_n_s_LOSPEC500);
  Py_CLEAR(clear_module_state->__pyx_n_u_LOSPEC500);
  Py_CLEAR(clear_module_state->__pyx_n_s_LOSPEC500_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_MICROSOFT_WINDOWS_16);
  Py_CLEAR(clear_module_state->__pyx_n_u_MICROSOFT_WINDOWS_16);
  Py_CLEAR(clear_module_state->__pyx_n_s_MICROSOFT_WINDOWS_16_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_MICROSOFT_WINDOWS_20);
  Py_CLEAR(clear_module_state->__pyx_n_u_MICROSOFT_WINDOWS_20);
  Py_CLEAR(clear_module_state->__pyx_n_s_MICROSOFT_WINDOWS_20_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_MICROSOFT_WINDOWS_PAINT);
  Py_CLEAR(clear_module_state->__pyx_n_u_MICROSOFT_WINDOWS_PAINT);
  Py_CLEAR(clear_module_state->__pyx_n_s_MICROSOFT_WINDOWS_PAINT_NORMALI);
  Py_CLEAR(clear_module_state->__pyx_kp_u_MONOCHROME_2_amber_colors);
  Py_CLEAR(clear_module_state->__pyx_kp_u_MONOCHROME_2_green_colors);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_AMBER);
  Py_CLEAR(clear_module_state->__pyx_n_u_MONO_PHOSPHOR_AMBER);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_AMBER_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN1);
  Py_CLEAR(clear_module_state->__pyx_n_u_MONO_PHOSPHOR_GREEN1);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN1_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN2);
  Py_CLEAR(clear_module_state->__pyx_n_u_MONO_PHOSPHOR_GREEN2);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN2_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN3);
  Py_CLEAR(clear_module_state->__pyx_n_u_MONO_PHOSPHOR_GREEN3);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN3_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_LTAMBER);
  Py_CLEAR(clear_module_state->__pyx_n_u_MONO_PHOSPHOR_LTAMBER);
  Py_CLEAR(clear_module_state->__pyx_n_s_MONO_PHOSPHOR_LTAMBER_NORMALIZE);
  Py_CLEAR(clear_module_state->__pyx_n_s_MSX);
  Py_CLEAR(clear_module_state->__pyx_n_u_MSX);
  Py_CLEAR(clear_module_state->__pyx_n_s_MSX_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_MemoryError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_MemoryView_of_r_at_0x_x);
  Py_CLEAR(clear_module_state->__pyx_kp_s_MemoryView_of_r_object);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Microsoft_Windows_and_IBM_OS_2_d);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Microsoft_Windows_default_20_col);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Microsoft_paint_color_palette);
  Py_CLEAR(clear_module_state->__pyx_n_b_O);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPENMP);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_PICO_8);
  Py_CLEAR(clear_module_state->__pyx_n_u_PICO_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_PICO_8_CUSTOM);
  Py_CLEAR(clear_module_state->__pyx_n_u_PICO_8_CUSTOM);
  Py_CLEAR(clear_module_state->__pyx_n_s_PICO_8_CUSTOM_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_PICO_8_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_u_PYGAME_HIDE_SUPPORT_PROMPT);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Please_ensure_both_arrays_have);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Please_ensure_you_pass_a_valid);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Please_pass_a_numpy_array_for_t);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Please_provide_a_numpy_array_co);
  Py_CLEAR(clear_module_state->__pyx_n_s_PygameShader_config);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Pygame_library_is_missing_on_yo);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeWarning);
  Py_CLEAR(clear_module_state->__pyx_n_s_SILVER);
  Py_CLEAR(clear_module_state->__pyx_n_u_SILVER);
  Py_CLEAR(clear_module_state->__pyx_n_s_SILVER_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_Sequence);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Step_may_not_be_zero_axis_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_Surface);
  Py_CLEAR(clear_module_state->__pyx_n_s_TELETEXT);
  Py_CLEAR(clear_module_state->__pyx_n_u_TELETEXT);
  Py_CLEAR(clear_module_state->__pyx_n_s_TELETEXT_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_THREAD_NUMBER);
  Py_CLEAR(clear_module_state->__pyx_n_s_TO7);
  Py_CLEAR(clear_module_state->__pyx_n_u_TO7);
  Py_CLEAR(clear_module_state->__pyx_n_s_TO7_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_TWILIOQUEST76);
  Py_CLEAR(clear_module_state->__pyx_n_u_TWILIOQUEST76);
  Py_CLEAR(clear_module_state->__pyx_n_s_TWILIOQUEST76_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_Amstrad_CPC_464_664_6128_ser);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_Apple_II_series_features_a_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_Color_Graphics_Adapter_CGA_o);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_Commodore_64_has_two_graphic);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_MSX_series_has_two_graphic_m);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_ZX_Spectrum_and_compatible_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Unable_to_convert_item_to_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_VERSION);
  Py_CLEAR(clear_module_state->__pyx_n_s_VINIK24);
  Py_CLEAR(clear_module_state->__pyx_n_u_VINIK24);
  Py_CLEAR(clear_module_state->__pyx_n_s_VINIK24_NORMALIZED);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s_View_MemoryView);
  Py_CLEAR(clear_module_state->__pyx_kp_u_World_System_Teletext_Level_1_19);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZX_SPECTRUM_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_u_ZX_SPECTRUM_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZX_SPECTRUM_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_u_ZX_SPECTRUM_LOW);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZX_SPECTRUM_NORMALIZED_HIGH);
  Py_CLEAR(clear_module_state->__pyx_n_s_ZX_SPECTRUM_NORMALIZED_LOW);
  Py_CLEAR(clear_module_state->__pyx_kp_u__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__2);
  Py_CLEAR(clear_module_state->__pyx_n_s__3);
  Py_CLEAR(clear_module_state->__pyx_n_s__30);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_n_s_abc);
  Py_CLEAR(clear_module_state->__pyx_n_s_allocate_buffer);
  Py_CLEAR(clear_module_state->__pyx_kp_u_and);
  Py_CLEAR(clear_module_state->__pyx_kp_u_and_color_palette_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_array3d);
  Py_CLEAR(clear_module_state->__pyx_n_s_array_alpha);
  Py_CLEAR(clear_module_state->__pyx_n_s_asarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_ascontiguousarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_base);
  Py_CLEAR(clear_module_state->__pyx_n_s_blit_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_c);
  Py_CLEAR(clear_module_state->__pyx_n_u_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_category);
  Py_CLEAR(clear_module_state->__pyx_n_s_class);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_collections);
  Py_CLEAR(clear_module_state->__pyx_kp_s_collections_abc);
  Py_CLEAR(clear_module_state->__pyx_n_s_color_palette);
  Py_CLEAR(clear_module_state->__pyx_kp_s_contiguous_and_direct);
  Py_CLEAR(clear_module_state->__pyx_kp_s_contiguous_and_indirect);
  Py_CLEAR(clear_module_state->__pyx_n_s_count);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype);
  Py_CLEAR(clear_module_state->__pyx_n_s_dtype_is_object);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_encode);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_s_environ);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_fh);
  Py_CLEAR(clear_module_state->__pyx_n_s_filterwarnings);
  Py_CLEAR(clear_module_state->__pyx_n_s_fl);
  Py_CLEAR(clear_module_state->__pyx_n_s_flags);
  Py_CLEAR(clear_module_state->__pyx_n_s_float32);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_fortran);
  Py_CLEAR(clear_module_state->__pyx_n_u_fortran);
  Py_CLEAR(clear_module_state->__pyx_n_s_fs);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_view);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_kp_u_got);
  Py_CLEAR(clear_module_state->__pyx_kp_u_got_differing_extents_in_dimensi);
  Py_CLEAR(clear_module_state->__pyx_n_u_hide);
  Py_CLEAR(clear_module_state->__pyx_kp_u_https_lospec_com_palette_list_lo);
  Py_CLEAR(clear_module_state->__pyx_n_s_id);
  Py_CLEAR(clear_module_state->__pyx_n_u_ignore);
  Py_CLEAR(clear_module_state->__pyx_n_s_image_surface);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_int32);
  Py_CLEAR(clear_module_state->__pyx_n_s_int8);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_itemsize);
  Py_CLEAR(clear_module_state->__pyx_kp_s_itemsize_0_for_cython_array);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_make_surface);
  Py_CLEAR(clear_module_state->__pyx_n_s_memview);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_ndim);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy__core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy__core_umath_failed_to_impo);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_library_is_missing_on_you);
  Py_CLEAR(clear_module_state->__pyx_n_s_obj);
  Py_CLEAR(clear_module_state->__pyx_n_s_os);
  Py_CLEAR(clear_module_state->__pyx_n_s_pack);
  Py_CLEAR(clear_module_state->__pyx_n_s_palette_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_pixels3d);
  Py_CLEAR(clear_module_state->__pyx_n_s_pixels_alpha);
  Py_CLEAR(clear_module_state->__pyx_n_s_pygame);
  Py_CLEAR(clear_module_state->__pyx_n_s_pygame_surfarray);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_Enum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_register);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_shape);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_step);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_direct);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_direct_or_indirect);
  Py_CLEAR(clear_module_state->__pyx_kp_s_strided_and_indirect);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_struct);
  Py_CLEAR(clear_module_state->__pyx_n_s_sys);
  Py_CLEAR(clear_module_state->__pyx_n_s_temp_buffer);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_uint32);
  Py_CLEAR(clear_module_state->__pyx_n_s_uint8);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unable_to_allocate_array_data);
  Py_CLEAR(clear_module_state->__pyx_kp_s_unable_to_allocate_shape_and_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_unpack);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_version_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_warnings);
  Py_CLEAR(clear_module_state->__pyx_kp_u_while_the_temp_buffer_array_has);
  Py_CLEAR(clear_module_state->__pyx_n_s_width);
  Py_CLEAR(clear_module_state->__pyx_n_s_zeros);
  Py_CLEAR(clear_module_state->__pyx_float_0_);
  Py_CLEAR(clear_module_state->__pyx_float_1_);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_2);
  Py_CLEAR(clear_module_state->__pyx_float_0_4);
  Py_CLEAR(clear_module_state->__pyx_float_0_6);
  Py_CLEAR(clear_module_state->__pyx_float_0_8);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_6666);
  Py_CLEAR(clear_module_state->__pyx_float_0_66666);
  Py_CLEAR(clear_module_state->__pyx_float_0_0745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_8627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_00392157);
  Py_CLEAR(clear_module_state->__pyx_float_0_00784314);
  Py_CLEAR(clear_module_state->__pyx_float_0_01176471);
  Py_CLEAR(clear_module_state->__pyx_float_0_01568627);
  Py_CLEAR(clear_module_state->__pyx_float_0_04705882);
  Py_CLEAR(clear_module_state->__pyx_float_0_09803922);
  Py_CLEAR(clear_module_state->__pyx_float_0_14509804);
  Py_CLEAR(clear_module_state->__pyx_float_0_15686275);
  Py_CLEAR(clear_module_state->__pyx_float_0_17254902);
  Py_CLEAR(clear_module_state->__pyx_float_0_19607843);
  Py_CLEAR(clear_module_state->__pyx_float_0_21960784);
  Py_CLEAR(clear_module_state->__pyx_float_0_22352941);
  Py_CLEAR(clear_module_state->__pyx_float_0_25098039);
  Py_CLEAR(clear_module_state->__pyx_float_0_47843137);
  Py_CLEAR(clear_module_state->__pyx_float_0_48235294);
  Py_CLEAR(clear_module_state->__pyx_float_0_50196078);
  Py_CLEAR(clear_module_state->__pyx_float_0_62745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_64313725);
  Py_CLEAR(clear_module_state->__pyx_float_0_65098039);
  Py_CLEAR(clear_module_state->__pyx_float_0_69019608);
  Py_CLEAR(clear_module_state->__pyx_float_0_74117647);
  Py_CLEAR(clear_module_state->__pyx_float_0_75294118);
  Py_CLEAR(clear_module_state->__pyx_float_0_79215686);
  Py_CLEAR(clear_module_state->__pyx_float_0_94117647);
  Py_CLEAR(clear_module_state->__pyx_float_0_97647059);
  Py_CLEAR(clear_module_state->__pyx_float_0_98039216);
  Py_CLEAR(clear_module_state->__pyx_float_0_98431373);
  Py_CLEAR(clear_module_state->__pyx_float_0_98823529);
  Py_CLEAR(clear_module_state->__pyx_float_0_99215686);
  Py_CLEAR(clear_module_state->__pyx_float_0_99607843);
  Py_CLEAR(clear_module_state->__pyx_float_0_396078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_403921568627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_592156862745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_596078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_611764705882353);
  Py_CLEAR(clear_module_state->__pyx_float_0_615686274509804);
  Py_CLEAR(clear_module_state->__pyx_float_0_788235294117647);
  Py_CLEAR(clear_module_state->__pyx_float_0_792156862745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_796078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_803921568627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_807843137254902);
  Py_CLEAR(clear_module_state->__pyx_float_0_984313725490196);
  Py_CLEAR(clear_module_state->__pyx_float_0_996078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_0196078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_0392156862745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_0784313725490196);
  Py_CLEAR(clear_module_state->__pyx_float_0_1411764705882353);
  Py_CLEAR(clear_module_state->__pyx_float_0_1450980392156863);
  Py_CLEAR(clear_module_state->__pyx_float_0_1568627450980392);
  Py_CLEAR(clear_module_state->__pyx_float_0_1607843137254902);
  Py_CLEAR(clear_module_state->__pyx_float_0_1803921568627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_1843137254901961);
  Py_CLEAR(clear_module_state->__pyx_float_0_2196078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_2235294117647059);
  Py_CLEAR(clear_module_state->__pyx_float_0_2549019607843137);
  Py_CLEAR(clear_module_state->__pyx_float_0_2627450980392157);
  Py_CLEAR(clear_module_state->__pyx_float_0_2784313725490196);
  Py_CLEAR(clear_module_state->__pyx_float_0_2823529411764706);
  Py_CLEAR(clear_module_state->__pyx_float_0_2901960784313726);
  Py_CLEAR(clear_module_state->__pyx_float_0_2980392156862745);
  Py_CLEAR(clear_module_state->__pyx_float_0_3058823529411765);
  Py_CLEAR(clear_module_state->__pyx_float_0_3137254901960784);
  Py_CLEAR(clear_module_state->__pyx_float_0_3176470588235294);
  Py_CLEAR(clear_module_state->__pyx_float_0_3215686274509804);
  Py_CLEAR(clear_module_state->__pyx_float_0_3254901960784314);
  Py_CLEAR(clear_module_state->__pyx_float_0_3333333333333333);
  Py_CLEAR(clear_module_state->__pyx_float_0_3411764705882353);
  Py_CLEAR(clear_module_state->__pyx_float_0_3568627450980392);
  Py_CLEAR(clear_module_state->__pyx_float_0_3607843137254902);
  Py_CLEAR(clear_module_state->__pyx_float_0_3686274509803922);
  Py_CLEAR(clear_module_state->__pyx_float_0_3764705882352941);
  Py_CLEAR(clear_module_state->__pyx_float_0_3803921568627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_3843137254901961);
  Py_CLEAR(clear_module_state->__pyx_float_0_4117647058823529);
  Py_CLEAR(clear_module_state->__pyx_float_0_4196078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_4235294117647059);
  Py_CLEAR(clear_module_state->__pyx_float_0_4392156862745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_4470588235294118);
  Py_CLEAR(clear_module_state->__pyx_float_0_4549019607843137);
  Py_CLEAR(clear_module_state->__pyx_float_0_4588235294117647);
  Py_CLEAR(clear_module_state->__pyx_float_0_4627450980392157);
  Py_CLEAR(clear_module_state->__pyx_float_0_4666666666666667);
  Py_CLEAR(clear_module_state->__pyx_float_0_4745098039215686);
  Py_CLEAR(clear_module_state->__pyx_float_0_4823529411764706);
  Py_CLEAR(clear_module_state->__pyx_float_0_4980392156862745);
  Py_CLEAR(clear_module_state->__pyx_float_0_5019607843137255);
  Py_CLEAR(clear_module_state->__pyx_float_0_5058823529411764);
  Py_CLEAR(clear_module_state->__pyx_float_0_5098039215686274);
  Py_CLEAR(clear_module_state->__pyx_float_0_5137254901960784);
  Py_CLEAR(clear_module_state->__pyx_float_0_5176470588235295);
  Py_CLEAR(clear_module_state->__pyx_float_0_5215686274509804);
  Py_CLEAR(clear_module_state->__pyx_float_0_5254901960784314);
  Py_CLEAR(clear_module_state->__pyx_float_0_5294117647058824);
  Py_CLEAR(clear_module_state->__pyx_float_0_5333333333333333);
  Py_CLEAR(clear_module_state->__pyx_float_0_5372549019607843);
  Py_CLEAR(clear_module_state->__pyx_float_0_5411764705882353);
  Py_CLEAR(clear_module_state->__pyx_float_0_5450980392156862);
  Py_CLEAR(clear_module_state->__pyx_float_0_5490196078431373);
  Py_CLEAR(clear_module_state->__pyx_float_0_5529411764705883);
  Py_CLEAR(clear_module_state->__pyx_float_0_5568627450980392);
  Py_CLEAR(clear_module_state->__pyx_float_0_5607843137254902);
  Py_CLEAR(clear_module_state->__pyx_float_0_5647058823529412);
  Py_CLEAR(clear_module_state->__pyx_float_0_5686274509803921);
  Py_CLEAR(clear_module_state->__pyx_float_0_5725490196078431);
  Py_CLEAR(clear_module_state->__pyx_float_0_5764705882352941);
  Py_CLEAR(clear_module_state->__pyx_float_0_5803921568627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_5843137254901961);
  Py_CLEAR(clear_module_state->__pyx_float_0_5882352941176471);
  Py_CLEAR(clear_module_state->__pyx_float_0_6039215686274509);
  Py_CLEAR(clear_module_state->__pyx_float_0_6078431372549019);
  Py_CLEAR(clear_module_state->__pyx_float_0_6196078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_6235294117647059);
  Py_CLEAR(clear_module_state->__pyx_float_0_6274509803921569);
  Py_CLEAR(clear_module_state->__pyx_float_0_6313725490196078);
  Py_CLEAR(clear_module_state->__pyx_float_0_6352941176470588);
  Py_CLEAR(clear_module_state->__pyx_float_0_6392156862745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_6431372549019608);
  Py_CLEAR(clear_module_state->__pyx_float_0_6470588235294118);
  Py_CLEAR(clear_module_state->__pyx_float_0_6509803921568628);
  Py_CLEAR(clear_module_state->__pyx_float_0_6549019607843137);
  Py_CLEAR(clear_module_state->__pyx_float_0_6588235294117647);
  Py_CLEAR(clear_module_state->__pyx_float_0_6627450980392157);
  Py_CLEAR(clear_module_state->__pyx_float_0_6666666666666666);
  Py_CLEAR(clear_module_state->__pyx_float_0_6705882352941176);
  Py_CLEAR(clear_module_state->__pyx_float_0_6745098039215687);
  Py_CLEAR(clear_module_state->__pyx_float_0_6784313725490196);
  Py_CLEAR(clear_module_state->__pyx_float_0_6823529411764706);
  Py_CLEAR(clear_module_state->__pyx_float_0_6862745098039216);
  Py_CLEAR(clear_module_state->__pyx_float_0_6901960784313725);
  Py_CLEAR(clear_module_state->__pyx_float_0_6941176470588235);
  Py_CLEAR(clear_module_state->__pyx_float_0_6980392156862745);
  Py_CLEAR(clear_module_state->__pyx_float_0_7019607843137254);
  Py_CLEAR(clear_module_state->__pyx_float_0_7058823529411765);
  Py_CLEAR(clear_module_state->__pyx_float_0_7098039215686275);
  Py_CLEAR(clear_module_state->__pyx_float_0_7137254901960784);
  Py_CLEAR(clear_module_state->__pyx_float_0_7176470588235294);
  Py_CLEAR(clear_module_state->__pyx_float_0_7215686274509804);
  Py_CLEAR(clear_module_state->__pyx_float_0_7254901960784313);
  Py_CLEAR(clear_module_state->__pyx_float_0_7294117647058823);
  Py_CLEAR(clear_module_state->__pyx_float_0_7333333333333333);
  Py_CLEAR(clear_module_state->__pyx_float_0_7372549019607844);
  Py_CLEAR(clear_module_state->__pyx_float_0_7411764705882353);
  Py_CLEAR(clear_module_state->__pyx_float_0_7450980392156863);
  Py_CLEAR(clear_module_state->__pyx_float_0_7490196078431373);
  Py_CLEAR(clear_module_state->__pyx_float_0_7529411764705882);
  Py_CLEAR(clear_module_state->__pyx_float_0_7568627450980392);
  Py_CLEAR(clear_module_state->__pyx_float_0_7607843137254902);
  Py_CLEAR(clear_module_state->__pyx_float_0_7647058823529411);
  Py_CLEAR(clear_module_state->__pyx_float_0_7686274509803922);
  Py_CLEAR(clear_module_state->__pyx_float_0_7725490196078432);
  Py_CLEAR(clear_module_state->__pyx_float_0_7764705882352941);
  Py_CLEAR(clear_module_state->__pyx_float_0_7803921568627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_7843137254901961);
  Py_CLEAR(clear_module_state->__pyx_float_0_8117647058823529);
  Py_CLEAR(clear_module_state->__pyx_float_0_8156862745098039);
  Py_CLEAR(clear_module_state->__pyx_float_0_8196078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_8235294117647058);
  Py_CLEAR(clear_module_state->__pyx_float_0_8274509803921568);
  Py_CLEAR(clear_module_state->__pyx_float_0_8313725490196079);
  Py_CLEAR(clear_module_state->__pyx_float_0_8352941176470589);
  Py_CLEAR(clear_module_state->__pyx_float_0_8392156862745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_8431372549019608);
  Py_CLEAR(clear_module_state->__pyx_float_0_8470588235294118);
  Py_CLEAR(clear_module_state->__pyx_float_0_8549019607843137);
  Py_CLEAR(clear_module_state->__pyx_float_0_8588235294117647);
  Py_CLEAR(clear_module_state->__pyx_float_0_8627450980392157);
  Py_CLEAR(clear_module_state->__pyx_float_0_8666666666666667);
  Py_CLEAR(clear_module_state->__pyx_float_0_8705882352941177);
  Py_CLEAR(clear_module_state->__pyx_float_0_8745098039215686);
  Py_CLEAR(clear_module_state->__pyx_float_0_8784313725490196);
  Py_CLEAR(clear_module_state->__pyx_float_0_8823529411764706);
  Py_CLEAR(clear_module_state->__pyx_float_0_8862745098039215);
  Py_CLEAR(clear_module_state->__pyx_float_0_8901960784313725);
  Py_CLEAR(clear_module_state->__pyx_float_0_8941176470588236);
  Py_CLEAR(clear_module_state->__pyx_float_0_9019607843137255);
  Py_CLEAR(clear_module_state->__pyx_float_0_9058823529411765);
  Py_CLEAR(clear_module_state->__pyx_float_0_9098039215686274);
  Py_CLEAR(clear_module_state->__pyx_float_0_9137254901960784);
  Py_CLEAR(clear_module_state->__pyx_float_0_9176470588235294);
  Py_CLEAR(clear_module_state->__pyx_float_0_9215686274509803);
  Py_CLEAR(clear_module_state->__pyx_float_0_9254901960784314);
  Py_CLEAR(clear_module_state->__pyx_float_0_9294117647058824);
  Py_CLEAR(clear_module_state->__pyx_float_0_9333333333333333);
  Py_CLEAR(clear_module_state->__pyx_float_0_9372549019607843);
  Py_CLEAR(clear_module_state->__pyx_float_0_9411764705882353);
  Py_CLEAR(clear_module_state->__pyx_float_0_9450980392156862);
  Py_CLEAR(clear_module_state->__pyx_float_0_9490196078431372);
  Py_CLEAR(clear_module_state->__pyx_float_0_9529411764705882);
  Py_CLEAR(clear_module_state->__pyx_float_0_9568627450980393);
  Py_CLEAR(clear_module_state->__pyx_float_0_9607843137254902);
  Py_CLEAR(clear_module_state->__pyx_float_0_9647058823529412);
  Py_CLEAR(clear_module_state->__pyx_float_0_9686274509803922);
  Py_CLEAR(clear_module_state->__pyx_float_0_9725490196078431);
  Py_CLEAR(clear_module_state->__pyx_float_0_9764705882352941);
  Py_CLEAR(clear_module_state->__pyx_float_0_9803921568627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_9882352941176471);
  Py_CLEAR(clear_module_state->__pyx_float_0_9921568627450981);
  Py_CLEAR(clear_module_state->__pyx_float_0_00784313725490196);
  Py_CLEAR(clear_module_state->__pyx_float_0_01568627450980392);
  Py_CLEAR(clear_module_state->__pyx_float_0_03137254901960784);
  Py_CLEAR(clear_module_state->__pyx_float_0_03529411764705882);
  Py_CLEAR(clear_module_state->__pyx_float_0_06274509803921569);
  Py_CLEAR(clear_module_state->__pyx_float_0_07058823529411765);
  Py_CLEAR(clear_module_state->__pyx_float_0_07450980392156863);
  Py_CLEAR(clear_module_state->__pyx_float_0_08235294117647059);
  Py_CLEAR(clear_module_state->__pyx_float_0_08627450980392157);
  Py_CLEAR(clear_module_state->__pyx_float_0_09019607843137255);
  Py_CLEAR(clear_module_state->__pyx_float_0_09411764705882353);
  Py_CLEAR(clear_module_state->__pyx_float_0_09803921568627451);
  Py_CLEAR(clear_module_state->__pyx_float_0_10196078431372549);
  Py_CLEAR(clear_module_state->__pyx_float_0_10588235294117647);
  Py_CLEAR(clear_module_state->__pyx_float_0_10980392156862745);
  Py_CLEAR(clear_module_state->__pyx_float_0_11372549019607843);
  Py_CLEAR(clear_module_state->__pyx_float_0_11764705882352941);
  Py_CLEAR(clear_module_state->__pyx_float_0_12156862745098039);
  Py_CLEAR(clear_module_state->__pyx_float_0_12549019607843137);
  Py_CLEAR(clear_module_state->__pyx_float_0_12941176470588237);
  Py_CLEAR(clear_module_state->__pyx_float_0_13333333333333333);
  Py_CLEAR(clear_module_state->__pyx_float_0_13725490196078433);
  Py_CLEAR(clear_module_state->__pyx_float_0_14901960784313725);
  Py_CLEAR(clear_module_state->__pyx_float_0_15294117647058825);
  Py_CLEAR(clear_module_state->__pyx_float_0_16470588235294117);
  Py_CLEAR(clear_module_state->__pyx_float_0_16862745098039217);
  Py_CLEAR(clear_module_state->__pyx_float_0_17254901960784313);
  Py_CLEAR(clear_module_state->__pyx_float_0_17647058823529413);
  Py_CLEAR(clear_module_state->__pyx_float_0_18823529411764706);
  Py_CLEAR(clear_module_state->__pyx_float_0_19215686274509805);
  Py_CLEAR(clear_module_state->__pyx_float_0_19607843137254902);
  Py_CLEAR(clear_module_state->__pyx_float_0_20392156862745098);
  Py_CLEAR(clear_module_state->__pyx_float_0_20784313725490197);
  Py_CLEAR(clear_module_state->__pyx_float_0_21176470588235294);
  Py_CLEAR(clear_module_state->__pyx_float_0_21568627450980393);
  Py_CLEAR(clear_module_state->__pyx_float_0_22745098039215686);
  Py_CLEAR(clear_module_state->__pyx_float_0_23137254901960785);
  Py_CLEAR(clear_module_state->__pyx_float_0_23529411764705882);
  Py_CLEAR(clear_module_state->__pyx_float_0_23921568627450981);
  Py_CLEAR(clear_module_state->__pyx_float_0_24313725490196078);
  Py_CLEAR(clear_module_state->__pyx_float_0_24705882352941178);
  Py_CLEAR(clear_module_state->__pyx_float_0_25098039215686274);
  Py_CLEAR(clear_module_state->__pyx_float_0_25882352941176473);
  Py_CLEAR(clear_module_state->__pyx_float_0_26666666666666666);
  Py_CLEAR(clear_module_state->__pyx_float_0_27058823529411763);
  Py_CLEAR(clear_module_state->__pyx_float_0_27450980392156865);
  Py_CLEAR(clear_module_state->__pyx_float_0_28627450980392155);
  Py_CLEAR(clear_module_state->__pyx_float_0_29411764705882354);
  Py_CLEAR(clear_module_state->__pyx_float_0_30196078431372547);
  Py_CLEAR(clear_module_state->__pyx_float_0_30980392156862746);
  Py_CLEAR(clear_module_state->__pyx_float_0_32941176470588235);
  Py_CLEAR(clear_module_state->__pyx_float_0_33725490196078434);
  Py_CLEAR(clear_module_state->__pyx_float_0_34509803921568627);
  Py_CLEAR(clear_module_state->__pyx_float_0_34901960784313724);
  Py_CLEAR(clear_module_state->__pyx_float_0_35294117647058826);
  Py_CLEAR(clear_module_state->__pyx_float_0_36470588235294116);
  Py_CLEAR(clear_module_state->__pyx_float_0_37254901960784315);
  Py_CLEAR(clear_module_state->__pyx_float_0_38823529411764707);
  Py_CLEAR(clear_module_state->__pyx_float_0_39215686274509803);
  Py_CLEAR(clear_module_state->__pyx_float_0_40784313725490196);
  Py_CLEAR(clear_module_state->__pyx_float_0_41568627450980394);
  Py_CLEAR(clear_module_state->__pyx_float_0_42745098039215684);
  Py_CLEAR(clear_module_state->__pyx_float_0_43137254901960786);
  Py_CLEAR(clear_module_state->__pyx_float_0_43529411764705883);
  Py_CLEAR(clear_module_state->__pyx_float_0_44313725490196076);
  Py_CLEAR(clear_module_state->__pyx_float_0_45098039215686275);
  Py_CLEAR(clear_module_state->__pyx_float_0_47058823529411764);
  Py_CLEAR(clear_module_state->__pyx_float_0_47843137254901963);
  Py_CLEAR(clear_module_state->__pyx_float_0_48627450980392156);
  Py_CLEAR(clear_module_state->__pyx_float_0_49019607843137253);
  Py_CLEAR(clear_module_state->__pyx_float_0_49411764705882355);
  Py_CLEAR(clear_module_state->__pyx_float_0_011764705882352941);
  Py_CLEAR(clear_module_state->__pyx_float_0_023529411764705882);
  Py_CLEAR(clear_module_state->__pyx_float_0_027450980392156862);
  Py_CLEAR(clear_module_state->__pyx_float_0_043137254901960784);
  Py_CLEAR(clear_module_state->__pyx_float_0_047058823529411764);
  Py_CLEAR(clear_module_state->__pyx_float_0_050980392156862744);
  Py_CLEAR(clear_module_state->__pyx_float_0_054901960784313725);
  Py_CLEAR(clear_module_state->__pyx_float_0_058823529411764705);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_112105877);
  Py_CLEAR(clear_module_state->__pyx_int_136983863);
  Py_CLEAR(clear_module_state->__pyx_int_184977713);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_slice__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__10);
  Py_CLEAR(clear_module_state->__pyx_tuple__11);
  Py_CLEAR(clear_module_state->__pyx_tuple__13);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__22);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__24);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_array_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_array);
  Py_VISIT(traverse_module_state->__pyx_MemviewEnum_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_MemviewEnum);
  Py_VISIT(traverse_module_state->__pyx_memoryview_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_memoryview);
  Py_VISIT(traverse_module_state->__pyx_memoryviewslice_type);
  Py_VISIT(traverse_module_state->__pyx_type___pyx_memoryviewslice);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_kp_u_128_colors_Created_by_Adigun_A_P);
  Py_VISIT(traverse_module_state->__pyx_kp_u_24_colors_palette_Created_by_Vin);
  Py_VISIT(traverse_module_state->__pyx_kp_u_3);
  Py_VISIT(traverse_module_state->__pyx_kp_u_46_colors_palette_by_AdamCYounis);
  Py_VISIT(traverse_module_state->__pyx_kp_u_64_colors_palette_by_Adigun_Pola);
  Py_VISIT(traverse_module_state->__pyx_kp_u_76_colors_palette_Created_by_Ker);
  Py_VISIT(traverse_module_state->__pyx_kp_u_8_colors_palette_Created_by_Sham);
  Py_VISIT(traverse_module_state->__pyx_n_s_AAP64);
  Py_VISIT(traverse_module_state->__pyx_n_u_AAP64);
  Py_VISIT(traverse_module_state->__pyx_n_s_AAP64_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_AAPSPLENDOR128);
  Py_VISIT(traverse_module_state->__pyx_n_u_AAPSPLENDOR128);
  Py_VISIT(traverse_module_state->__pyx_n_s_AAPSPLENDOR128_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_AMSTRAD_CPC);
  Py_VISIT(traverse_module_state->__pyx_n_u_AMSTRAD_CPC);
  Py_VISIT(traverse_module_state->__pyx_n_s_AMSTRAD_CPC_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_APOLLO);
  Py_VISIT(traverse_module_state->__pyx_n_u_APOLLO);
  Py_VISIT(traverse_module_state->__pyx_n_s_APOLLO_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_APPLE_II);
  Py_VISIT(traverse_module_state->__pyx_n_u_APPLE_II);
  Py_VISIT(traverse_module_state->__pyx_n_s_APPLE_II_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_u_APPLE_II_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_APPLE_II_HIGH_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_APPLE_II_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_u_APPLE_II_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_APPLE_II_LOW_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_APPLE_II_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_ASCII);
  Py_VISIT(traverse_module_state->__pyx_kp_s_All_dimensions_preceding_dimensi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Argument_temp_buffer_must_be_a_c);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Argument_width_should_be_0_got_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_BBC_MICRO);
  Py_VISIT(traverse_module_state->__pyx_n_u_BBC_MICRO);
  Py_VISIT(traverse_module_state->__pyx_kp_u_BBC_Micro_has_8_display_modes_wi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Both_temp_buffer_and_color_palet);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Buffer_view_does_not_expose_stri);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE4_PAL1_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_u_CGA_MODE4_PAL1_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE4_PAL1_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_u_CGA_MODE4_PAL1_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE4_PAL2_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_u_CGA_MODE4_PAL2_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE4_PAL2_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_u_CGA_MODE4_PAL2_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE5_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_u_CGA_MODE5_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE5_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_u_CGA_MODE5_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE5_NORMALIZED_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_MODE5_NORMALIZED_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_CGA_TEST);
  Py_VISIT(traverse_module_state->__pyx_n_s_COMMODORE_64);
  Py_VISIT(traverse_module_state->__pyx_n_u_COMMODORE_64);
  Py_VISIT(traverse_module_state->__pyx_n_s_COMMODORE_64_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_u_C_CONTIGUOUS);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Can_only_create_a_buffer_that_is);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_assign_to_read_only_memor);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_create_writable_memory_vi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cannot_index_with_type);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Cannot_transpose_memoryview_with);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Created_by_Arne_as_part_of_his_F);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Created_by_LostInIndigo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Created_by_Okee);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dimension_d_is_not_direct);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Dimension_mismatch_between_rgb_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_Ellipsis);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Empty_shape_tuple_for_cython_arr);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_creating_Pygame_surface);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Every_pixel_on_PICO_8_is_stored);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_input_array_with_dtype);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Expected_input_type_numpy_ndarra);
  Py_VISIT(traverse_module_state->__pyx_n_s_FAMICUBE);
  Py_VISIT(traverse_module_state->__pyx_n_u_FAMICUBE);
  Py_VISIT(traverse_module_state->__pyx_n_s_FAMICUBE_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_FUNKYFUTURE);
  Py_VISIT(traverse_module_state->__pyx_n_u_FUNKYFUTURE);
  Py_VISIT(traverse_module_state->__pyx_n_s_FUNKYFUTURE_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_get_a_valid_view_from);
  Py_VISIT(traverse_module_state->__pyx_kp_u_For_Thomson_computers_a_popular);
  Py_VISIT(traverse_module_state->__pyx_n_s_FutureWarning);
  Py_VISIT(traverse_module_state->__pyx_n_s_IRIDESCENTCRYSTAL);
  Py_VISIT(traverse_module_state->__pyx_n_u_IRIDESCENTCRYSTAL);
  Py_VISIT(traverse_module_state->__pyx_n_s_IRIDESCENTCRYSTAL_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportWarning);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_IndexError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Index_out_of_bounds_axis_d);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Indirect_dimensions_not_supporte);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Input_palette_is_empty_The_palet);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Input_palette_must_be_a_contiguo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_mode_expected_c_or_fortr);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_shape_in_axis);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_type_for_argument_color);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_type_for_argument_rgb_ar);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_type_for_argument_temp_b);
  Py_VISIT(traverse_module_state->__pyx_n_s_LIST_PALETTES);
  Py_VISIT(traverse_module_state->__pyx_n_s_LOSPEC500);
  Py_VISIT(traverse_module_state->__pyx_n_u_LOSPEC500);
  Py_VISIT(traverse_module_state->__pyx_n_s_LOSPEC500_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_MICROSOFT_WINDOWS_16);
  Py_VISIT(traverse_module_state->__pyx_n_u_MICROSOFT_WINDOWS_16);
  Py_VISIT(traverse_module_state->__pyx_n_s_MICROSOFT_WINDOWS_16_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_MICROSOFT_WINDOWS_20);
  Py_VISIT(traverse_module_state->__pyx_n_u_MICROSOFT_WINDOWS_20);
  Py_VISIT(traverse_module_state->__pyx_n_s_MICROSOFT_WINDOWS_20_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_MICROSOFT_WINDOWS_PAINT);
  Py_VISIT(traverse_module_state->__pyx_n_u_MICROSOFT_WINDOWS_PAINT);
  Py_VISIT(traverse_module_state->__pyx_n_s_MICROSOFT_WINDOWS_PAINT_NORMALI);
  Py_VISIT(traverse_module_state->__pyx_kp_u_MONOCHROME_2_amber_colors);
  Py_VISIT(traverse_module_state->__pyx_kp_u_MONOCHROME_2_green_colors);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_AMBER);
  Py_VISIT(traverse_module_state->__pyx_n_u_MONO_PHOSPHOR_AMBER);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_AMBER_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN1);
  Py_VISIT(traverse_module_state->__pyx_n_u_MONO_PHOSPHOR_GREEN1);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN1_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN2);
  Py_VISIT(traverse_module_state->__pyx_n_u_MONO_PHOSPHOR_GREEN2);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN2_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN3);
  Py_VISIT(traverse_module_state->__pyx_n_u_MONO_PHOSPHOR_GREEN3);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_GREEN3_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_LTAMBER);
  Py_VISIT(traverse_module_state->__pyx_n_u_MONO_PHOSPHOR_LTAMBER);
  Py_VISIT(traverse_module_state->__pyx_n_s_MONO_PHOSPHOR_LTAMBER_NORMALIZE);
  Py_VISIT(traverse_module_state->__pyx_n_s_MSX);
  Py_VISIT(traverse_module_state->__pyx_n_u_MSX);
  Py_VISIT(traverse_module_state->__pyx_n_s_MSX_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_MemoryError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_MemoryView_of_r_at_0x_x);
  Py_VISIT(traverse_module_state->__pyx_kp_s_MemoryView_of_r_object);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Microsoft_Windows_and_IBM_OS_2_d);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Microsoft_Windows_default_20_col);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Microsoft_paint_color_palette);
  Py_VISIT(traverse_module_state->__pyx_n_b_O);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPENMP);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_PICO_8);
  Py_VISIT(traverse_module_state->__pyx_n_u_PICO_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_PICO_8_CUSTOM);
  Py_VISIT(traverse_module_state->__pyx_n_u_PICO_8_CUSTOM);
  Py_VISIT(traverse_module_state->__pyx_n_s_PICO_8_CUSTOM_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_PICO_8_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_u_PYGAME_HIDE_SUPPORT_PROMPT);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Please_ensure_both_arrays_have);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Please_ensure_you_pass_a_valid);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Please_pass_a_numpy_array_for_t);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Please_provide_a_numpy_array_co);
  Py_VISIT(traverse_module_state->__pyx_n_s_PygameShader_config);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Pygame_library_is_missing_on_yo);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeWarning);
  Py_VISIT(traverse_module_state->__pyx_n_s_SILVER);
  Py_VISIT(traverse_module_state->__pyx_n_u_SILVER);
  Py_VISIT(traverse_module_state->__pyx_n_s_SILVER_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_Sequence);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Step_may_not_be_zero_axis_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_Surface);
  Py_VISIT(traverse_module_state->__pyx_n_s_TELETEXT);
  Py_VISIT(traverse_module_state->__pyx_n_u_TELETEXT);
  Py_VISIT(traverse_module_state->__pyx_n_s_TELETEXT_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_THREAD_NUMBER);
  Py_VISIT(traverse_module_state->__pyx_n_s_TO7);
  Py_VISIT(traverse_module_state->__pyx_n_u_TO7);
  Py_VISIT(traverse_module_state->__pyx_n_s_TO7_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_TWILIOQUEST76);
  Py_VISIT(traverse_module_state->__pyx_n_u_TWILIOQUEST76);
  Py_VISIT(traverse_module_state->__pyx_n_s_TWILIOQUEST76_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_Amstrad_CPC_464_664_6128_ser);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_Apple_II_series_features_a_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_Color_Graphics_Adapter_CGA_o);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_Commodore_64_has_two_graphic);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_MSX_series_has_two_graphic_m);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_ZX_Spectrum_and_compatible_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Unable_to_convert_item_to_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_VERSION);
  Py_VISIT(traverse_module_state->__pyx_n_s_VINIK24);
  Py_VISIT(traverse_module_state->__pyx_n_u_VINIK24);
  Py_VISIT(traverse_module_state->__pyx_n_s_VINIK24_NORMALIZED);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s_View_MemoryView);
  Py_VISIT(traverse_module_state->__pyx_kp_u_World_System_Teletext_Level_1_19);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZX_SPECTRUM_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_u_ZX_SPECTRUM_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZX_SPECTRUM_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_u_ZX_SPECTRUM_LOW);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZX_SPECTRUM_NORMALIZED_HIGH);
  Py_VISIT(traverse_module_state->__pyx_n_s_ZX_SPECTRUM_NORMALIZED_LOW);
  Py_VISIT(traverse_module_state->__pyx_kp_u__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__2);
  Py_VISIT(traverse_module_state->__pyx_n_s__3);
  Py_VISIT(traverse_module_state->__pyx_n_s__30);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_n_s_abc);
  Py_VISIT(traverse_module_state->__pyx_n_s_allocate_buffer);
  Py_VISIT(traverse_module_state->__pyx_kp_u_and);
  Py_VISIT(traverse_module_state->__pyx_kp_u_and_color_palette_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_array3d);
  Py_VISIT(traverse_module_state->__pyx_n_s_array_alpha);
  Py_VISIT(traverse_module_state->__pyx_n_s_asarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_ascontiguousarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_base);
  Py_VISIT(traverse_module_state->__pyx_n_s_blit_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_c);
  Py_VISIT(traverse_module_state->__pyx_n_u_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_category);
  Py_VISIT(traverse_module_state->__pyx_n_s_class);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_collections);
  Py_VISIT(traverse_module_state->__pyx_kp_s_collections_abc);
  Py_VISIT(traverse_module_state->__pyx_n_s_color_palette);
  Py_VISIT(traverse_module_state->__pyx_kp_s_contiguous_and_direct);
  Py_VISIT(traverse_module_state->__pyx_kp_s_contiguous_and_indirect);
  Py_VISIT(traverse_module_state->__pyx_n_s_count);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype);
  Py_VISIT(traverse_module_state->__pyx_n_s_dtype_is_object);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_encode);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_s_environ);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_fh);
  Py_VISIT(traverse_module_state->__pyx_n_s_filterwarnings);
  Py_VISIT(traverse_module_state->__pyx_n_s_fl);
  Py_VISIT(traverse_module_state->__pyx_n_s_flags);
  Py_VISIT(traverse_module_state->__pyx_n_s_float32);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_fortran);
  Py_VISIT(traverse_module_state->__pyx_n_u_fortran);
  Py_VISIT(traverse_module_state->__pyx_n_s_fs);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_view);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_kp_u_got);
  Py_VISIT(traverse_module_state->__pyx_kp_u_got_differing_extents_in_dimensi);
  Py_VISIT(traverse_module_state->__pyx_n_u_hide);
  Py_VISIT(traverse_module_state->__pyx_kp_u_https_lospec_com_palette_list_lo);
  Py_VISIT(traverse_module_state->__pyx_n_s_id);
  Py_VISIT(traverse_module_state->__pyx_n_u_ignore);
  Py_VISIT(traverse_module_state->__pyx_n_s_image_surface);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_int32);
  Py_VISIT(traverse_module_state->__pyx_n_s_int8);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_itemsize);
  Py_VISIT(traverse_module_state->__pyx_kp_s_itemsize_0_for_cython_array);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_make_surface);
  Py_VISIT(traverse_module_state->__pyx_n_s_memview);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_ndim);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_kp_s_no_default___reduce___due_to_non);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy__core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy__core_umath_failed_to_impo);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_library_is_missing_on_you);
  Py_VISIT(traverse_module_state->__pyx_n_s_obj);
  Py_VISIT(traverse_module_state->__pyx_n_s_os);
  Py_VISIT(traverse_module_state->__pyx_n_s_pack);
  Py_VISIT(traverse_module_state->__pyx_n_s_palette_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_pixels3d);
  Py_VISIT(traverse_module_state->__pyx_n_s_pixels_alpha);
  Py_VISIT(traverse_module_state->__pyx_n_s_pygame);
  Py_VISIT(traverse_module_state->__pyx_n_s_pygame_surfarray);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_Enum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_register);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_shape);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_step);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_direct);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_direct_or_indirect);
  Py_VISIT(traverse_module_state->__pyx_kp_s_strided_and_indirect);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_struct);
  Py_VISIT(traverse_module_state->__pyx_n_s_sys);
  Py_VISIT(traverse_module_state->__pyx_n_s_temp_buffer);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_uint32);
  Py_VISIT(traverse_module_state->__pyx_n_s_uint8);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unable_to_allocate_array_data);
  Py_VISIT(traverse_module_state->__pyx_kp_s_unable_to_allocate_shape_and_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_unpack);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_version_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_warnings);
  Py_VISIT(traverse_module_state->__pyx_kp_u_while_the_temp_buffer_array_has);
  Py_VISIT(traverse_module_state->__pyx_n_s_width);
  Py_VISIT(traverse_module_state->__pyx_n_s_zeros);
  Py_VISIT(traverse_module_state->__pyx_float_0_);
  Py_VISIT(traverse_module_state->__pyx_float_1_);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_2);
  Py_VISIT(traverse_module_state->__pyx_float_0_4);
  Py_VISIT(traverse_module_state->__pyx_float_0_6);
  Py_VISIT(traverse_module_state->__pyx_float_0_8);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_6666);
  Py_VISIT(traverse_module_state->__pyx_float_0_66666);
  Py_VISIT(traverse_module_state->__pyx_float_0_0745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_8627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_00392157);
  Py_VISIT(traverse_module_state->__pyx_float_0_00784314);
  Py_VISIT(traverse_module_state->__pyx_float_0_01176471);
  Py_VISIT(traverse_module_state->__pyx_float_0_01568627);
  Py_VISIT(traverse_module_state->__pyx_float_0_04705882);
  Py_VISIT(traverse_module_state->__pyx_float_0_09803922);
  Py_VISIT(traverse_module_state->__pyx_float_0_14509804);
  Py_VISIT(traverse_module_state->__pyx_float_0_15686275);
  Py_VISIT(traverse_module_state->__pyx_float_0_17254902);
  Py_VISIT(traverse_module_state->__pyx_float_0_19607843);
  Py_VISIT(traverse_module_state->__pyx_float_0_21960784);
  Py_VISIT(traverse_module_state->__pyx_float_0_22352941);
  Py_VISIT(traverse_module_state->__pyx_float_0_25098039);
  Py_VISIT(traverse_module_state->__pyx_float_0_47843137);
  Py_VISIT(traverse_module_state->__pyx_float_0_48235294);
  Py_VISIT(traverse_module_state->__pyx_float_0_50196078);
  Py_VISIT(traverse_module_state->__pyx_float_0_62745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_64313725);
  Py_VISIT(traverse_module_state->__pyx_float_0_65098039);
  Py_VISIT(traverse_module_state->__pyx_float_0_69019608);
  Py_VISIT(traverse_module_state->__pyx_float_0_74117647);
  Py_VISIT(traverse_module_state->__pyx_float_0_75294118);
  Py_VISIT(traverse_module_state->__pyx_float_0_79215686);
  Py_VISIT(traverse_module_state->__pyx_float_0_94117647);
  Py_VISIT(traverse_module_state->__pyx_float_0_97647059);
  Py_VISIT(traverse_module_state->__pyx_float_0_98039216);
  Py_VISIT(traverse_module_state->__pyx_float_0_98431373);
  Py_VISIT(traverse_module_state->__pyx_float_0_98823529);
  Py_VISIT(traverse_module_state->__pyx_float_0_99215686);
  Py_VISIT(traverse_module_state->__pyx_float_0_99607843);
  Py_VISIT(traverse_module_state->__pyx_float_0_396078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_403921568627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_592156862745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_596078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_611764705882353);
  Py_VISIT(traverse_module_state->__pyx_float_0_615686274509804);
  Py_VISIT(traverse_module_state->__pyx_float_0_788235294117647);
  Py_VISIT(traverse_module_state->__pyx_float_0_792156862745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_796078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_803921568627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_807843137254902);
  Py_VISIT(traverse_module_state->__pyx_float_0_984313725490196);
  Py_VISIT(traverse_module_state->__pyx_float_0_996078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_0196078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_0392156862745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_0784313725490196);
  Py_VISIT(traverse_module_state->__pyx_float_0_1411764705882353);
  Py_VISIT(traverse_module_state->__pyx_float_0_1450980392156863);
  Py_VISIT(traverse_module_state->__pyx_float_0_1568627450980392);
  Py_VISIT(traverse_module_state->__pyx_float_0_1607843137254902);
  Py_VISIT(traverse_module_state->__pyx_float_0_1803921568627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_1843137254901961);
  Py_VISIT(traverse_module_state->__pyx_float_0_2196078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_2235294117647059);
  Py_VISIT(traverse_module_state->__pyx_float_0_2549019607843137);
  Py_VISIT(traverse_module_state->__pyx_float_0_2627450980392157);
  Py_VISIT(traverse_module_state->__pyx_float_0_2784313725490196);
  Py_VISIT(traverse_module_state->__pyx_float_0_2823529411764706);
  Py_VISIT(traverse_module_state->__pyx_float_0_2901960784313726);
  Py_VISIT(traverse_module_state->__pyx_float_0_2980392156862745);
  Py_VISIT(traverse_module_state->__pyx_float_0_3058823529411765);
  Py_VISIT(traverse_module_state->__pyx_float_0_3137254901960784);
  Py_VISIT(traverse_module_state->__pyx_float_0_3176470588235294);
  Py_VISIT(traverse_module_state->__pyx_float_0_3215686274509804);
  Py_VISIT(traverse_module_state->__pyx_float_0_3254901960784314);
  Py_VISIT(traverse_module_state->__pyx_float_0_3333333333333333);
  Py_VISIT(traverse_module_state->__pyx_float_0_3411764705882353);
  Py_VISIT(traverse_module_state->__pyx_float_0_3568627450980392);
  Py_VISIT(traverse_module_state->__pyx_float_0_3607843137254902);
  Py_VISIT(traverse_module_state->__pyx_float_0_3686274509803922);
  Py_VISIT(traverse_module_state->__pyx_float_0_3764705882352941);
  Py_VISIT(traverse_module_state->__pyx_float_0_3803921568627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_3843137254901961);
  Py_VISIT(traverse_module_state->__pyx_float_0_4117647058823529);
  Py_VISIT(traverse_module_state->__pyx_float_0_4196078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_4235294117647059);
  Py_VISIT(traverse_module_state->__pyx_float_0_4392156862745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_4470588235294118);
  Py_VISIT(traverse_module_state->__pyx_float_0_4549019607843137);
  Py_VISIT(traverse_module_state->__pyx_float_0_4588235294117647);
  Py_VISIT(traverse_module_state->__pyx_float_0_4627450980392157);
  Py_VISIT(traverse_module_state->__pyx_float_0_4666666666666667);
  Py_VISIT(traverse_module_state->__pyx_float_0_4745098039215686);
  Py_VISIT(traverse_module_state->__pyx_float_0_4823529411764706);
  Py_VISIT(traverse_module_state->__pyx_float_0_4980392156862745);
  Py_VISIT(traverse_module_state->__pyx_float_0_5019607843137255);
  Py_VISIT(traverse_module_state->__pyx_float_0_5058823529411764);
  Py_VISIT(traverse_module_state->__pyx_float_0_5098039215686274);
  Py_VISIT(traverse_module_state->__pyx_float_0_5137254901960784);
  Py_VISIT(traverse_module_state->__pyx_float_0_5176470588235295);
  Py_VISIT(traverse_module_state->__pyx_float_0_5215686274509804);
  Py_VISIT(traverse_module_state->__pyx_float_0_5254901960784314);
  Py_VISIT(traverse_module_state->__pyx_float_0_5294117647058824);
  Py_VISIT(traverse_module_state->__pyx_float_0_5333333333333333);
  Py_VISIT(traverse_module_state->__pyx_float_0_5372549019607843);
  Py_VISIT(traverse_module_state->__pyx_float_0_5411764705882353);
  Py_VISIT(traverse_module_state->__pyx_float_0_5450980392156862);
  Py_VISIT(traverse_module_state->__pyx_float_0_5490196078431373);
  Py_VISIT(traverse_module_state->__pyx_float_0_5529411764705883);
  Py_VISIT(traverse_module_state->__pyx_float_0_5568627450980392);
  Py_VISIT(traverse_module_state->__pyx_float_0_5607843137254902);
  Py_VISIT(traverse_module_state->__pyx_float_0_5647058823529412);
  Py_VISIT(traverse_module_state->__pyx_float_0_5686274509803921);
  Py_VISIT(traverse_module_state->__pyx_float_0_5725490196078431);
  Py_VISIT(traverse_module_state->__pyx_float_0_5764705882352941);
  Py_VISIT(traverse_module_state->__pyx_float_0_5803921568627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_5843137254901961);
  Py_VISIT(traverse_module_state->__pyx_float_0_5882352941176471);
  Py_VISIT(traverse_module_state->__pyx_float_0_6039215686274509);
  Py_VISIT(traverse_module_state->__pyx_float_0_6078431372549019);
  Py_VISIT(traverse_module_state->__pyx_float_0_6196078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_6235294117647059);
  Py_VISIT(traverse_module_state->__pyx_float_0_6274509803921569);
  Py_VISIT(traverse_module_state->__pyx_float_0_6313725490196078);
  Py_VISIT(traverse_module_state->__pyx_float_0_6352941176470588);
  Py_VISIT(traverse_module_state->__pyx_float_0_6392156862745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_6431372549019608);
  Py_VISIT(traverse_module_state->__pyx_float_0_6470588235294118);
  Py_VISIT(traverse_module_state->__pyx_float_0_6509803921568628);
  Py_VISIT(traverse_module_state->__pyx_float_0_6549019607843137);
  Py_VISIT(traverse_module_state->__pyx_float_0_6588235294117647);
  Py_VISIT(traverse_module_state->__pyx_float_0_6627450980392157);
  Py_VISIT(traverse_module_state->__pyx_float_0_6666666666666666);
  Py_VISIT(traverse_module_state->__pyx_float_0_6705882352941176);
  Py_VISIT(traverse_module_state->__pyx_float_0_6745098039215687);
  Py_VISIT(traverse_module_state->__pyx_float_0_6784313725490196);
  Py_VISIT(traverse_module_state->__pyx_float_0_6823529411764706);
  Py_VISIT(traverse_module_state->__pyx_float_0_6862745098039216);
  Py_VISIT(traverse_module_state->__pyx_float_0_6901960784313725);
  Py_VISIT(traverse_module_state->__pyx_float_0_6941176470588235);
  Py_VISIT(traverse_module_state->__pyx_float_0_6980392156862745);
  Py_VISIT(traverse_module_state->__pyx_float_0_7019607843137254);
  Py_VISIT(traverse_module_state->__pyx_float_0_7058823529411765);
  Py_VISIT(traverse_module_state->__pyx_float_0_7098039215686275);
  Py_VISIT(traverse_module_state->__pyx_float_0_7137254901960784);
  Py_VISIT(traverse_module_state->__pyx_float_0_7176470588235294);
  Py_VISIT(traverse_module_state->__pyx_float_0_7215686274509804);
  Py_VISIT(traverse_module_state->__pyx_float_0_7254901960784313);
  Py_VISIT(traverse_module_state->__pyx_float_0_7294117647058823);
  Py_VISIT(traverse_module_state->__pyx_float_0_7333333333333333);
  Py_VISIT(traverse_module_state->__pyx_float_0_7372549019607844);
  Py_VISIT(traverse_module_state->__pyx_float_0_7411764705882353);
  Py_VISIT(traverse_module_state->__pyx_float_0_7450980392156863);
  Py_VISIT(traverse_module_state->__pyx_float_0_7490196078431373);
  Py_VISIT(traverse_module_state->__pyx_float_0_7529411764705882);
  Py_VISIT(traverse_module_state->__pyx_float_0_7568627450980392);
  Py_VISIT(traverse_module_state->__pyx_float_0_7607843137254902);
  Py_VISIT(traverse_module_state->__pyx_float_0_7647058823529411);
  Py_VISIT(traverse_module_state->__pyx_float_0_7686274509803922);
  Py_VISIT(traverse_module_state->__pyx_float_0_7725490196078432);
  Py_VISIT(traverse_module_state->__pyx_float_0_7764705882352941);
  Py_VISIT(traverse_module_state->__pyx_float_0_7803921568627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_7843137254901961);
  Py_VISIT(traverse_module_state->__pyx_float_0_8117647058823529);
  Py_VISIT(traverse_module_state->__pyx_float_0_8156862745098039);
  Py_VISIT(traverse_module_state->__pyx_float_0_8196078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_8235294117647058);
  Py_VISIT(traverse_module_state->__pyx_float_0_8274509803921568);
  Py_VISIT(traverse_module_state->__pyx_float_0_8313725490196079);
  Py_VISIT(traverse_module_state->__pyx_float_0_8352941176470589);
  Py_VISIT(traverse_module_state->__pyx_float_0_8392156862745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_8431372549019608);
  Py_VISIT(traverse_module_state->__pyx_float_0_8470588235294118);
  Py_VISIT(traverse_module_state->__pyx_float_0_8549019607843137);
  Py_VISIT(traverse_module_state->__pyx_float_0_8588235294117647);
  Py_VISIT(traverse_module_state->__pyx_float_0_8627450980392157);
  Py_VISIT(traverse_module_state->__pyx_float_0_8666666666666667);
  Py_VISIT(traverse_module_state->__pyx_float_0_8705882352941177);
  Py_VISIT(traverse_module_state->__pyx_float_0_8745098039215686);
  Py_VISIT(traverse_module_state->__pyx_float_0_8784313725490196);
  Py_VISIT(traverse_module_state->__pyx_float_0_8823529411764706);
  Py_VISIT(traverse_module_state->__pyx_float_0_8862745098039215);
  Py_VISIT(traverse_module_state->__pyx_float_0_8901960784313725);
  Py_VISIT(traverse_module_state->__pyx_float_0_8941176470588236);
  Py_VISIT(traverse_module_state->__pyx_float_0_9019607843137255);
  Py_VISIT(traverse_module_state->__pyx_float_0_9058823529411765);
  Py_VISIT(traverse_module_state->__pyx_float_0_9098039215686274);
  Py_VISIT(traverse_module_state->__pyx_float_0_9137254901960784);
  Py_VISIT(traverse_module_state->__pyx_float_0_9176470588235294);
  Py_VISIT(traverse_module_state->__pyx_float_0_9215686274509803);
  Py_VISIT(traverse_module_state->__pyx_float_0_9254901960784314);
  Py_VISIT(traverse_module_state->__pyx_float_0_9294117647058824);
  Py_VISIT(traverse_module_state->__pyx_float_0_9333333333333333);
  Py_VISIT(traverse_module_state->__pyx_float_0_9372549019607843);
  Py_VISIT(traverse_module_state->__pyx_float_0_9411764705882353);
  Py_VISIT(traverse_module_state->__pyx_float_0_9450980392156862);
  Py_VISIT(traverse_module_state->__pyx_float_0_9490196078431372);
  Py_VISIT(traverse_module_state->__pyx_float_0_9529411764705882);
  Py_VISIT(traverse_module_state->__pyx_float_0_9568627450980393);
  Py_VISIT(traverse_module_state->__pyx_float_0_9607843137254902);
  Py_VISIT(traverse_module_state->__pyx_float_0_9647058823529412);
  Py_VISIT(traverse_module_state->__pyx_float_0_9686274509803922);
  Py_VISIT(traverse_module_state->__pyx_float_0_9725490196078431);
  Py_VISIT(traverse_module_state->__pyx_float_0_9764705882352941);
  Py_VISIT(traverse_module_state->__pyx_float_0_9803921568627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_9882352941176471);
  Py_VISIT(traverse_module_state->__pyx_float_0_9921568627450981);
  Py_VISIT(traverse_module_state->__pyx_float_0_00784313725490196);
  Py_VISIT(traverse_module_state->__pyx_float_0_01568627450980392);
  Py_VISIT(traverse_module_state->__pyx_float_0_03137254901960784);
  Py_VISIT(traverse_module_state->__pyx_float_0_03529411764705882);
  Py_VISIT(traverse_module_state->__pyx_float_0_06274509803921569);
  Py_VISIT(traverse_module_state->__pyx_float_0_07058823529411765);
  Py_VISIT(traverse_module_state->__pyx_float_0_07450980392156863);
  Py_VISIT(traverse_module_state->__pyx_float_0_08235294117647059);
  Py_VISIT(traverse_module_state->__pyx_float_0_08627450980392157);
  Py_VISIT(traverse_module_state->__pyx_float_0_09019607843137255);
  Py_VISIT(traverse_module_state->__pyx_float_0_09411764705882353);
  Py_VISIT(traverse_module_state->__pyx_float_0_09803921568627451);
  Py_VISIT(traverse_module_state->__pyx_float_0_10196078431372549);
  Py_VISIT(traverse_module_state->__pyx_float_0_10588235294117647);
  Py_VISIT(traverse_module_state->__pyx_float_0_10980392156862745);
  Py_VISIT(traverse_module_state->__pyx_float_0_11372549019607843);
  Py_VISIT(traverse_module_state->__pyx_float_0_11764705882352941);
  Py_VISIT(traverse_module_state->__pyx_float_0_12156862745098039);
  Py_VISIT(traverse_module_state->__pyx_float_0_12549019607843137);
  Py_VISIT(traverse_module_state->__pyx_float_0_12941176470588237);
  Py_VISIT(traverse_module_state->__pyx_float_0_13333333333333333);
  Py_VISIT(traverse_module_state->__pyx_float_0_13725490196078433);
  Py_VISIT(traverse_module_state->__pyx_float_0_14901960784313725);
  Py_VISIT(traverse_module_state->__pyx_float_0_15294117647058825);
  Py_VISIT(traverse_module_state->__pyx_float_0_16470588235294117);
  Py_VISIT(traverse_module_state->__pyx_float_0_16862745098039217);
  Py_VISIT(traverse_module_state->__pyx_float_0_17254901960784313);
  Py_VISIT(traverse_module_state->__pyx_float_0_17647058823529413);
  Py_VISIT(traverse_module_state->__pyx_float_0_18823529411764706);
  Py_VISIT(traverse_module_state->__pyx_float_0_19215686274509805);
  Py_VISIT(traverse_module_state->__pyx_float_0_19607843137254902);
  Py_VISIT(traverse_module_state->__pyx_float_0_20392156862745098);
  Py_VISIT(traverse_module_state->__pyx_float_0_20784313725490197);
  Py_VISIT(traverse_module_state->__pyx_float_0_21176470588235294);
  Py_VISIT(traverse_module_state->__pyx_float_0_21568627450980393);
  Py_VISIT(traverse_module_state->__pyx_float_0_22745098039215686);
  Py_VISIT(traverse_module_state->__pyx_float_0_23137254901960785);
  Py_VISIT(traverse_module_state->__pyx_float_0_23529411764705882);
  Py_VISIT(traverse_module_state->__pyx_float_0_23921568627450981);
  Py_VISIT(traverse_module_state->__pyx_float_0_24313725490196078);
  Py_VISIT(traverse_module_state->__pyx_float_0_24705882352941178);
  Py_VISIT(traverse_module_state->__pyx_float_0_25098039215686274);
  Py_VISIT(traverse_module_state->__pyx_float_0_25882352941176473);
  Py_VISIT(traverse_module_state->__pyx_float_0_26666666666666666);
  Py_VISIT(traverse_module_state->__pyx_float_0_27058823529411763);
  Py_VISIT(traverse_module_state->__pyx_float_0_27450980392156865);
  Py_VISIT(traverse_module_state->__pyx_float_0_28627450980392155);
  Py_VISIT(traverse_module_state->__pyx_float_0_29411764705882354);
  Py_VISIT(traverse_module_state->__pyx_float_0_30196078431372547);
  Py_VISIT(traverse_module_state->__pyx_float_0_30980392156862746);
  Py_VISIT(traverse_module_state->__pyx_float_0_32941176470588235);
  Py_VISIT(traverse_module_state->__pyx_float_0_33725490196078434);
  Py_VISIT(traverse_module_state->__pyx_float_0_34509803921568627);
  Py_VISIT(traverse_module_state->__pyx_float_0_34901960784313724);
  Py_VISIT(traverse_module_state->__pyx_float_0_35294117647058826);
  Py_VISIT(traverse_module_state->__pyx_float_0_36470588235294116);
  Py_VISIT(traverse_module_state->__pyx_float_0_37254901960784315);
  Py_VISIT(traverse_module_state->__pyx_float_0_38823529411764707);
  Py_VISIT(traverse_module_state->__pyx_float_0_39215686274509803);
  Py_VISIT(traverse_module_state->__pyx_float_0_40784313725490196);
  Py_VISIT(traverse_module_state->__pyx_float_0_41568627450980394);
  Py_VISIT(traverse_module_state->__pyx_float_0_42745098039215684);
  Py_VISIT(traverse_module_state->__pyx_float_0_43137254901960786);
  Py_VISIT(traverse_module_state->__pyx_float_0_43529411764705883);
  Py_VISIT(traverse_module_state->__pyx_float_0_44313725490196076);
  Py_VISIT(traverse_module_state->__pyx_float_0_45098039215686275);
  Py_VISIT(traverse_module_state->__pyx_float_0_47058823529411764);
  Py_VISIT(traverse_module_state->__pyx_float_0_47843137254901963);
  Py_VISIT(traverse_module_state->__pyx_float_0_48627450980392156);
  Py_VISIT(traverse_module_state->__pyx_float_0_49019607843137253);
  Py_VISIT(traverse_module_state->__pyx_float_0_49411764705882355);
  Py_VISIT(traverse_module_state->__pyx_float_0_011764705882352941);
  Py_VISIT(traverse_module_state->__pyx_float_0_023529411764705882);
  Py_VISIT(traverse_module_state->__pyx_float_0_027450980392156862);
  Py_VISIT(traverse_module_state->__pyx_float_0_043137254901960784);
  Py_VISIT(traverse_module_state->__pyx_float_0_047058823529411764);
  Py_VISIT(traverse_module_state->__pyx_float_0_050980392156862744);
  Py_VISIT(traverse_module_state->__pyx_float_0_054901960784313725);
  Py_VISIT(traverse_module_state->__pyx_float_0_058823529411764705);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_112105877);
  Py_VISIT(traverse_module_state->__pyx_int_136983863);
  Py_VISIT(traverse_module_state->__pyx_int_184977713);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_slice__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__10);
  Py_VISIT(traverse_module_state->__pyx_tuple__11);
  Py_VISIT(traverse_module_state->__pyx_tuple__13);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__22);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__24);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#ifdef __Pyx_Generator_USED
#define __pyx_GeneratorType __pyx_mstate_global->__pyx_GeneratorType
#endif
#ifdef __Pyx_IterableCoroutine_USED
#define __pyx_IterableCoroutineType __pyx_mstate_global->__pyx_IterableCoroutineType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineAwaitType __pyx_mstate_global->__pyx_CoroutineAwaitType
#endif
#ifdef __Pyx_Coroutine_USED
#define __pyx_CoroutineType __pyx_mstate_global->__pyx_CoroutineType
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#endif
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#if CYTHON_USE_MODULE_STATE
#endif
#if CYTHON_USE_MODULE_STATE
#define __pyx_type___pyx_array __pyx_mstate_global->__pyx_type___pyx_array
#define __pyx_type___pyx_MemviewEnum __pyx_mstate_global->__pyx_type___pyx_MemviewEnum
#define __pyx_type___pyx_memoryview __pyx_mstate_global->__pyx_type___pyx_memoryview
#define __pyx_type___pyx_memoryviewslice __pyx_mstate_global->__pyx_type___pyx_memoryviewslice
#endif
#define __pyx_array_type __pyx_mstate_global->__pyx_array_type
#define __pyx_MemviewEnum_type __pyx_mstate_global->__pyx_MemviewEnum_type
#define __pyx_memoryview_type __pyx_mstate_global->__pyx_memoryview_type
#define __pyx_memoryviewslice_type __pyx_mstate_global->__pyx_memoryviewslice_type
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_kp_u_128_colors_Created_by_Adigun_A_P __pyx_mstate_global->__pyx_kp_u_128_colors_Created_by_Adigun_A_P
#define __pyx_kp_u_24_colors_palette_Created_by_Vin __pyx_mstate_global->__pyx_kp_u_24_colors_palette_Created_by_Vin
#define __pyx_kp_u_3 __pyx_mstate_global->__pyx_kp_u_3
#define __pyx_kp_u_46_colors_palette_by_AdamCYounis __pyx_mstate_global->__pyx_kp_u_46_colors_palette_by_AdamCYounis
#define __pyx_kp_u_64_colors_palette_by_Adigun_Pola __pyx_mstate_global->__pyx_kp_u_64_colors_palette_by_Adigun_Pola
#define __pyx_kp_u_76_colors_palette_Created_by_Ker __pyx_mstate_global->__pyx_kp_u_76_colors_palette_Created_by_Ker
#define __pyx_kp_u_8_colors_palette_Created_by_Sham __pyx_mstate_global->__pyx_kp_u_8_colors_palette_Created_by_Sham
#define __pyx_n_s_AAP64 __pyx_mstate_global->__pyx_n_s_AAP64
#define __pyx_n_u_AAP64 __pyx_mstate_global->__pyx_n_u_AAP64
#define __pyx_n_s_AAP64_NORMALIZED __pyx_mstate_global->__pyx_n_s_AAP64_NORMALIZED
#define __pyx_n_s_AAPSPLENDOR128 __pyx_mstate_global->__pyx_n_s_AAPSPLENDOR128
#define __pyx_n_u_AAPSPLENDOR128 __pyx_mstate_global->__pyx_n_u_AAPSPLENDOR128
#define __pyx_n_s_AAPSPLENDOR128_NORMALIZED __pyx_mstate_global->__pyx_n_s_AAPSPLENDOR128_NORMALIZED
#define __pyx_n_s_AMSTRAD_CPC __pyx_mstate_global->__pyx_n_s_AMSTRAD_CPC
#define __pyx_n_u_AMSTRAD_CPC __pyx_mstate_global->__pyx_n_u_AMSTRAD_CPC
#define __pyx_n_s_AMSTRAD_CPC_NORMALIZED __pyx_mstate_global->__pyx_n_s_AMSTRAD_CPC_NORMALIZED
#define __pyx_n_s_APOLLO __pyx_mstate_global->__pyx_n_s_APOLLO
#define __pyx_n_u_APOLLO __pyx_mstate_global->__pyx_n_u_APOLLO
#define __pyx_n_s_APOLLO_NORMALIZED __pyx_mstate_global->__pyx_n_s_APOLLO_NORMALIZED
#define __pyx_n_s_APPLE_II __pyx_mstate_global->__pyx_n_s_APPLE_II
#define __pyx_n_u_APPLE_II __pyx_mstate_global->__pyx_n_u_APPLE_II
#define __pyx_n_s_APPLE_II_HIGH __pyx_mstate_global->__pyx_n_s_APPLE_II_HIGH
#define __pyx_n_u_APPLE_II_HIGH __pyx_mstate_global->__pyx_n_u_APPLE_II_HIGH
#define __pyx_n_s_APPLE_II_HIGH_NORMALIZED __pyx_mstate_global->__pyx_n_s_APPLE_II_HIGH_NORMALIZED
#define __pyx_n_s_APPLE_II_LOW __pyx_mstate_global->__pyx_n_s_APPLE_II_LOW
#define __pyx_n_u_APPLE_II_LOW __pyx_mstate_global->__pyx_n_u_APPLE_II_LOW
#define __pyx_n_s_APPLE_II_LOW_NORMALIZED __pyx_mstate_global->__pyx_n_s_APPLE_II_LOW_NORMALIZED
#define __pyx_n_s_APPLE_II_NORMALIZED __pyx_mstate_global->__pyx_n_s_APPLE_II_NORMALIZED
#define __pyx_n_s_ASCII __pyx_mstate_global->__pyx_n_s_ASCII
#define __pyx_kp_s_All_dimensions_preceding_dimensi __pyx_mstate_global->__pyx_kp_s_All_dimensions_preceding_dimensi
#define __pyx_kp_u_Argument_temp_buffer_must_be_a_c __pyx_mstate_global->__pyx_kp_u_Argument_temp_buffer_must_be_a_c
#define __pyx_kp_u_Argument_width_should_be_0_got_s __pyx_mstate_global->__pyx_kp_u_Argument_width_should_be_0_got_s
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_BBC_MICRO __pyx_mstate_global->__pyx_n_s_BBC_MICRO
#define __pyx_n_u_BBC_MICRO __pyx_mstate_global->__pyx_n_u_BBC_MICRO
#define __pyx_kp_u_BBC_Micro_has_8_display_modes_wi __pyx_mstate_global->__pyx_kp_u_BBC_Micro_has_8_display_modes_wi
#define __pyx_kp_u_Both_temp_buffer_and_color_palet __pyx_mstate_global->__pyx_kp_u_Both_temp_buffer_and_color_palet
#define __pyx_kp_s_Buffer_view_does_not_expose_stri __pyx_mstate_global->__pyx_kp_s_Buffer_view_does_not_expose_stri
#define __pyx_n_s_CGA_MODE4_PAL1_HIGH __pyx_mstate_global->__pyx_n_s_CGA_MODE4_PAL1_HIGH
#define __pyx_n_u_CGA_MODE4_PAL1_HIGH __pyx_mstate_global->__pyx_n_u_CGA_MODE4_PAL1_HIGH
#define __pyx_n_s_CGA_MODE4_PAL1_LOW __pyx_mstate_global->__pyx_n_s_CGA_MODE4_PAL1_LOW
#define __pyx_n_u_CGA_MODE4_PAL1_LOW __pyx_mstate_global->__pyx_n_u_CGA_MODE4_PAL1_LOW
#define __pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_HIGH __pyx_mstate_global->__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_HIGH
#define __pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_LOW __pyx_mstate_global->__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_LOW
#define __pyx_n_s_CGA_MODE4_PAL2_HIGH __pyx_mstate_global->__pyx_n_s_CGA_MODE4_PAL2_HIGH
#define __pyx_n_u_CGA_MODE4_PAL2_HIGH __pyx_mstate_global->__pyx_n_u_CGA_MODE4_PAL2_HIGH
#define __pyx_n_s_CGA_MODE4_PAL2_LOW __pyx_mstate_global->__pyx_n_s_CGA_MODE4_PAL2_LOW
#define __pyx_n_u_CGA_MODE4_PAL2_LOW __pyx_mstate_global->__pyx_n_u_CGA_MODE4_PAL2_LOW
#define __pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_HIGH __pyx_mstate_global->__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_HIGH
#define __pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_LOW __pyx_mstate_global->__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_LOW
#define __pyx_n_s_CGA_MODE5_HIGH __pyx_mstate_global->__pyx_n_s_CGA_MODE5_HIGH
#define __pyx_n_u_CGA_MODE5_HIGH __pyx_mstate_global->__pyx_n_u_CGA_MODE5_HIGH
#define __pyx_n_s_CGA_MODE5_LOW __pyx_mstate_global->__pyx_n_s_CGA_MODE5_LOW
#define __pyx_n_u_CGA_MODE5_LOW __pyx_mstate_global->__pyx_n_u_CGA_MODE5_LOW
#define __pyx_n_s_CGA_MODE5_NORMALIZED_HIGH __pyx_mstate_global->__pyx_n_s_CGA_MODE5_NORMALIZED_HIGH
#define __pyx_n_s_CGA_MODE5_NORMALIZED_LOW __pyx_mstate_global->__pyx_n_s_CGA_MODE5_NORMALIZED_LOW
#define __pyx_n_s_CGA_TEST __pyx_mstate_global->__pyx_n_s_CGA_TEST
#define __pyx_n_s_COMMODORE_64 __pyx_mstate_global->__pyx_n_s_COMMODORE_64
#define __pyx_n_u_COMMODORE_64 __pyx_mstate_global->__pyx_n_u_COMMODORE_64
#define __pyx_n_s_COMMODORE_64_NORMALIZED __pyx_mstate_global->__pyx_n_s_COMMODORE_64_NORMALIZED
#define __pyx_n_u_C_CONTIGUOUS __pyx_mstate_global->__pyx_n_u_C_CONTIGUOUS
#define __pyx_kp_s_Can_only_create_a_buffer_that_is __pyx_mstate_global->__pyx_kp_s_Can_only_create_a_buffer_that_is
#define __pyx_kp_s_Cannot_assign_to_read_only_memor __pyx_mstate_global->__pyx_kp_s_Cannot_assign_to_read_only_memor
#define __pyx_kp_s_Cannot_create_writable_memory_vi __pyx_mstate_global->__pyx_kp_s_Cannot_create_writable_memory_vi
#define __pyx_kp_u_Cannot_index_with_type __pyx_mstate_global->__pyx_kp_u_Cannot_index_with_type
#define __pyx_kp_s_Cannot_transpose_memoryview_with __pyx_mstate_global->__pyx_kp_s_Cannot_transpose_memoryview_with
#define __pyx_kp_u_Created_by_Arne_as_part_of_his_F __pyx_mstate_global->__pyx_kp_u_Created_by_Arne_as_part_of_his_F
#define __pyx_kp_u_Created_by_LostInIndigo __pyx_mstate_global->__pyx_kp_u_Created_by_LostInIndigo
#define __pyx_kp_u_Created_by_Okee __pyx_mstate_global->__pyx_kp_u_Created_by_Okee
#define __pyx_kp_s_Dimension_d_is_not_direct __pyx_mstate_global->__pyx_kp_s_Dimension_d_is_not_direct
#define __pyx_kp_u_Dimension_mismatch_between_rgb_a __pyx_mstate_global->__pyx_kp_u_Dimension_mismatch_between_rgb_a
#define __pyx_n_s_Ellipsis __pyx_mstate_global->__pyx_n_s_Ellipsis
#define __pyx_kp_s_Empty_shape_tuple_for_cython_arr __pyx_mstate_global->__pyx_kp_s_Empty_shape_tuple_for_cython_arr
#define __pyx_kp_u_Error_creating_Pygame_surface __pyx_mstate_global->__pyx_kp_u_Error_creating_Pygame_surface
#define __pyx_kp_u_Every_pixel_on_PICO_8_is_stored __pyx_mstate_global->__pyx_kp_u_Every_pixel_on_PICO_8_is_stored
#define __pyx_kp_u_Expected_input_array_with_dtype __pyx_mstate_global->__pyx_kp_u_Expected_input_array_with_dtype
#define __pyx_kp_u_Expected_input_type_numpy_ndarra __pyx_mstate_global->__pyx_kp_u_Expected_input_type_numpy_ndarra
#define __pyx_n_s_FAMICUBE __pyx_mstate_global->__pyx_n_s_FAMICUBE
#define __pyx_n_u_FAMICUBE __pyx_mstate_global->__pyx_n_u_FAMICUBE
#define __pyx_n_s_FAMICUBE_NORMALIZED __pyx_mstate_global->__pyx_n_s_FAMICUBE_NORMALIZED
#define __pyx_n_s_FUNKYFUTURE __pyx_mstate_global->__pyx_n_s_FUNKYFUTURE
#define __pyx_n_u_FUNKYFUTURE __pyx_mstate_global->__pyx_n_u_FUNKYFUTURE
#define __pyx_n_s_FUNKYFUTURE_NORMALIZED __pyx_mstate_global->__pyx_n_s_FUNKYFUTURE_NORMALIZED
#define __pyx_kp_u_Failed_to_get_a_valid_view_from __pyx_mstate_global->__pyx_kp_u_Failed_to_get_a_valid_view_from
#define __pyx_kp_u_For_Thomson_computers_a_popular __pyx_mstate_global->__pyx_kp_u_For_Thomson_computers_a_popular
#define __pyx_n_s_FutureWarning __pyx_mstate_global->__pyx_n_s_FutureWarning
#define __pyx_n_s_IRIDESCENTCRYSTAL __pyx_mstate_global->__pyx_n_s_IRIDESCENTCRYSTAL
#define __pyx_n_u_IRIDESCENTCRYSTAL __pyx_mstate_global->__pyx_n_u_IRIDESCENTCRYSTAL
#define __pyx_n_s_IRIDESCENTCRYSTAL_NORMALIZED __pyx_mstate_global->__pyx_n_s_IRIDESCENTCRYSTAL_NORMALIZED
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_n_s_ImportWarning __pyx_mstate_global->__pyx_n_s_ImportWarning
#define __pyx_kp_s_Incompatible_checksums_0x_x_vs_0 __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_0x_x_vs_0
#define __pyx_n_s_IndexError __pyx_mstate_global->__pyx_n_s_IndexError
#define __pyx_kp_s_Index_out_of_bounds_axis_d __pyx_mstate_global->__pyx_kp_s_Index_out_of_bounds_axis_d
#define __pyx_kp_s_Indirect_dimensions_not_supporte __pyx_mstate_global->__pyx_kp_s_Indirect_dimensions_not_supporte
#define __pyx_kp_u_Input_palette_is_empty_The_palet __pyx_mstate_global->__pyx_kp_u_Input_palette_is_empty_The_palet
#define __pyx_kp_u_Input_palette_must_be_a_contiguo __pyx_mstate_global->__pyx_kp_u_Input_palette_must_be_a_contiguo
#define __pyx_kp_u_Invalid_mode_expected_c_or_fortr __pyx_mstate_global->__pyx_kp_u_Invalid_mode_expected_c_or_fortr
#define __pyx_kp_u_Invalid_shape_in_axis __pyx_mstate_global->__pyx_kp_u_Invalid_shape_in_axis
#define __pyx_kp_u_Invalid_type_for_argument_color __pyx_mstate_global->__pyx_kp_u_Invalid_type_for_argument_color
#define __pyx_kp_u_Invalid_type_for_argument_rgb_ar __pyx_mstate_global->__pyx_kp_u_Invalid_type_for_argument_rgb_ar
#define __pyx_kp_u_Invalid_type_for_argument_temp_b __pyx_mstate_global->__pyx_kp_u_Invalid_type_for_argument_temp_b
#define __pyx_n_s_LIST_PALETTES __pyx_mstate_global->__pyx_n_s_LIST_PALETTES
#define __pyx_n_s_LOSPEC500 __pyx_mstate_global->__pyx_n_s_LOSPEC500
#define __pyx_n_u_LOSPEC500 __pyx_mstate_global->__pyx_n_u_LOSPEC500
#define __pyx_n_s_LOSPEC500_NORMALIZED __pyx_mstate_global->__pyx_n_s_LOSPEC500_NORMALIZED
#define __pyx_n_s_MICROSOFT_WINDOWS_16 __pyx_mstate_global->__pyx_n_s_MICROSOFT_WINDOWS_16
#define __pyx_n_u_MICROSOFT_WINDOWS_16 __pyx_mstate_global->__pyx_n_u_MICROSOFT_WINDOWS_16
#define __pyx_n_s_MICROSOFT_WINDOWS_16_NORMALIZED __pyx_mstate_global->__pyx_n_s_MICROSOFT_WINDOWS_16_NORMALIZED
#define __pyx_n_s_MICROSOFT_WINDOWS_20 __pyx_mstate_global->__pyx_n_s_MICROSOFT_WINDOWS_20
#define __pyx_n_u_MICROSOFT_WINDOWS_20 __pyx_mstate_global->__pyx_n_u_MICROSOFT_WINDOWS_20
#define __pyx_n_s_MICROSOFT_WINDOWS_20_NORMALIZED __pyx_mstate_global->__pyx_n_s_MICROSOFT_WINDOWS_20_NORMALIZED
#define __pyx_n_s_MICROSOFT_WINDOWS_PAINT __pyx_mstate_global->__pyx_n_s_MICROSOFT_WINDOWS_PAINT
#define __pyx_n_u_MICROSOFT_WINDOWS_PAINT __pyx_mstate_global->__pyx_n_u_MICROSOFT_WINDOWS_PAINT
#define __pyx_n_s_MICROSOFT_WINDOWS_PAINT_NORMALI __pyx_mstate_global->__pyx_n_s_MICROSOFT_WINDOWS_PAINT_NORMALI
#define __pyx_kp_u_MONOCHROME_2_amber_colors __pyx_mstate_global->__pyx_kp_u_MONOCHROME_2_amber_colors
#define __pyx_kp_u_MONOCHROME_2_green_colors __pyx_mstate_global->__pyx_kp_u_MONOCHROME_2_green_colors
#define __pyx_n_s_MONO_PHOSPHOR_AMBER __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_AMBER
#define __pyx_n_u_MONO_PHOSPHOR_AMBER __pyx_mstate_global->__pyx_n_u_MONO_PHOSPHOR_AMBER
#define __pyx_n_s_MONO_PHOSPHOR_AMBER_NORMALIZED __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_AMBER_NORMALIZED
#define __pyx_n_s_MONO_PHOSPHOR_GREEN1 __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_GREEN1
#define __pyx_n_u_MONO_PHOSPHOR_GREEN1 __pyx_mstate_global->__pyx_n_u_MONO_PHOSPHOR_GREEN1
#define __pyx_n_s_MONO_PHOSPHOR_GREEN1_NORMALIZED __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_GREEN1_NORMALIZED
#define __pyx_n_s_MONO_PHOSPHOR_GREEN2 __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_GREEN2
#define __pyx_n_u_MONO_PHOSPHOR_GREEN2 __pyx_mstate_global->__pyx_n_u_MONO_PHOSPHOR_GREEN2
#define __pyx_n_s_MONO_PHOSPHOR_GREEN2_NORMALIZED __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_GREEN2_NORMALIZED
#define __pyx_n_s_MONO_PHOSPHOR_GREEN3 __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_GREEN3
#define __pyx_n_u_MONO_PHOSPHOR_GREEN3 __pyx_mstate_global->__pyx_n_u_MONO_PHOSPHOR_GREEN3
#define __pyx_n_s_MONO_PHOSPHOR_GREEN3_NORMALIZED __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_GREEN3_NORMALIZED
#define __pyx_n_s_MONO_PHOSPHOR_LTAMBER __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_LTAMBER
#define __pyx_n_u_MONO_PHOSPHOR_LTAMBER __pyx_mstate_global->__pyx_n_u_MONO_PHOSPHOR_LTAMBER
#define __pyx_n_s_MONO_PHOSPHOR_LTAMBER_NORMALIZE __pyx_mstate_global->__pyx_n_s_MONO_PHOSPHOR_LTAMBER_NORMALIZE
#define __pyx_n_s_MSX __pyx_mstate_global->__pyx_n_s_MSX
#define __pyx_n_u_MSX __pyx_mstate_global->__pyx_n_u_MSX
#define __pyx_n_s_MSX_NORMALIZED __pyx_mstate_global->__pyx_n_s_MSX_NORMALIZED
#define __pyx_n_s_MemoryError __pyx_mstate_global->__pyx_n_s_MemoryError
#define __pyx_kp_s_MemoryView_of_r_at_0x_x __pyx_mstate_global->__pyx_kp_s_MemoryView_of_r_at_0x_x
#define __pyx_kp_s_MemoryView_of_r_object __pyx_mstate_global->__pyx_kp_s_MemoryView_of_r_object
#define __pyx_kp_u_Microsoft_Windows_and_IBM_OS_2_d __pyx_mstate_global->__pyx_kp_u_Microsoft_Windows_and_IBM_OS_2_d
#define __pyx_kp_u_Microsoft_Windows_default_20_col __pyx_mstate_global->__pyx_kp_u_Microsoft_Windows_default_20_col
#define __pyx_kp_u_Microsoft_paint_color_palette __pyx_mstate_global->__pyx_kp_u_Microsoft_paint_color_palette
#define __pyx_n_b_O __pyx_mstate_global->__pyx_n_b_O
#define __pyx_n_s_OPENMP __pyx_mstate_global->__pyx_n_s_OPENMP
#define __pyx_kp_u_Out_of_bounds_on_buffer_access_a __pyx_mstate_global->__pyx_kp_u_Out_of_bounds_on_buffer_access_a
#define __pyx_n_s_PICO_8 __pyx_mstate_global->__pyx_n_s_PICO_8
#define __pyx_n_u_PICO_8 __pyx_mstate_global->__pyx_n_u_PICO_8
#define __pyx_n_s_PICO_8_CUSTOM __pyx_mstate_global->__pyx_n_s_PICO_8_CUSTOM
#define __pyx_n_u_PICO_8_CUSTOM __pyx_mstate_global->__pyx_n_u_PICO_8_CUSTOM
#define __pyx_n_s_PICO_8_CUSTOM_NORMALIZED __pyx_mstate_global->__pyx_n_s_PICO_8_CUSTOM_NORMALIZED
#define __pyx_n_s_PICO_8_NORMALIZED __pyx_mstate_global->__pyx_n_s_PICO_8_NORMALIZED
#define __pyx_n_u_PYGAME_HIDE_SUPPORT_PROMPT __pyx_mstate_global->__pyx_n_u_PYGAME_HIDE_SUPPORT_PROMPT
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_kp_u_Please_ensure_both_arrays_have __pyx_mstate_global->__pyx_kp_u_Please_ensure_both_arrays_have
#define __pyx_kp_u_Please_ensure_you_pass_a_valid __pyx_mstate_global->__pyx_kp_u_Please_ensure_you_pass_a_valid
#define __pyx_kp_u_Please_pass_a_numpy_array_for_t __pyx_mstate_global->__pyx_kp_u_Please_pass_a_numpy_array_for_t
#define __pyx_kp_u_Please_provide_a_numpy_array_co __pyx_mstate_global->__pyx_kp_u_Please_provide_a_numpy_array_co
#define __pyx_n_s_PygameShader_config __pyx_mstate_global->__pyx_n_s_PygameShader_config
#define __pyx_kp_u_Pygame_library_is_missing_on_yo __pyx_mstate_global->__pyx_kp_u_Pygame_library_is_missing_on_yo
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_RuntimeWarning __pyx_mstate_global->__pyx_n_s_RuntimeWarning
#define __pyx_n_s_SILVER __pyx_mstate_global->__pyx_n_s_SILVER
#define __pyx_n_u_SILVER __pyx_mstate_global->__pyx_n_u_SILVER
#define __pyx_n_s_SILVER_NORMALIZED __pyx_mstate_global->__pyx_n_s_SILVER_NORMALIZED
#define __pyx_n_s_Sequence __pyx_mstate_global->__pyx_n_s_Sequence
#define __pyx_kp_s_Step_may_not_be_zero_axis_d __pyx_mstate_global->__pyx_kp_s_Step_may_not_be_zero_axis_d
#define __pyx_n_s_Surface __pyx_mstate_global->__pyx_n_s_Surface
#define __pyx_n_s_TELETEXT __pyx_mstate_global->__pyx_n_s_TELETEXT
#define __pyx_n_u_TELETEXT __pyx_mstate_global->__pyx_n_u_TELETEXT
#define __pyx_n_s_TELETEXT_NORMALIZED __pyx_mstate_global->__pyx_n_s_TELETEXT_NORMALIZED
#define __pyx_n_s_THREAD_NUMBER __pyx_mstate_global->__pyx_n_s_THREAD_NUMBER
#define __pyx_n_s_TO7 __pyx_mstate_global->__pyx_n_s_TO7
#define __pyx_n_u_TO7 __pyx_mstate_global->__pyx_n_u_TO7
#define __pyx_n_s_TO7_NORMALIZED __pyx_mstate_global->__pyx_n_s_TO7_NORMALIZED
#define __pyx_n_s_TWILIOQUEST76 __pyx_mstate_global->__pyx_n_s_TWILIOQUEST76
#define __pyx_n_u_TWILIOQUEST76 __pyx_mstate_global->__pyx_n_u_TWILIOQUEST76
#define __pyx_n_s_TWILIOQUEST76_NORMALIZED __pyx_mstate_global->__pyx_n_s_TWILIOQUEST76_NORMALIZED
#define __pyx_kp_u_The_Amstrad_CPC_464_664_6128_ser __pyx_mstate_global->__pyx_kp_u_The_Amstrad_CPC_464_664_6128_ser
#define __pyx_kp_u_The_Apple_II_series_features_a_1 __pyx_mstate_global->__pyx_kp_u_The_Apple_II_series_features_a_1
#define __pyx_kp_u_The_Color_Graphics_Adapter_CGA_o __pyx_mstate_global->__pyx_kp_u_The_Color_Graphics_Adapter_CGA_o
#define __pyx_kp_u_The_Commodore_64_has_two_graphic __pyx_mstate_global->__pyx_kp_u_The_Commodore_64_has_two_graphic
#define __pyx_kp_u_The_MSX_series_has_two_graphic_m __pyx_mstate_global->__pyx_kp_u_The_MSX_series_has_two_graphic_m
#define __pyx_kp_u_The_ZX_Spectrum_and_compatible_c __pyx_mstate_global->__pyx_kp_u_The_ZX_Spectrum_and_compatible_c
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_s_Unable_to_convert_item_to_object __pyx_mstate_global->__pyx_kp_s_Unable_to_convert_item_to_object
#define __pyx_n_s_VERSION __pyx_mstate_global->__pyx_n_s_VERSION
#define __pyx_n_s_VINIK24 __pyx_mstate_global->__pyx_n_s_VINIK24
#define __pyx_n_u_VINIK24 __pyx_mstate_global->__pyx_n_u_VINIK24
#define __pyx_n_s_VINIK24_NORMALIZED __pyx_mstate_global->__pyx_n_s_VINIK24_NORMALIZED
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s_View_MemoryView __pyx_mstate_global->__pyx_n_s_View_MemoryView
#define __pyx_kp_u_World_System_Teletext_Level_1_19 __pyx_mstate_global->__pyx_kp_u_World_System_Teletext_Level_1_19
#define __pyx_n_s_ZX_SPECTRUM_HIGH __pyx_mstate_global->__pyx_n_s_ZX_SPECTRUM_HIGH
#define __pyx_n_u_ZX_SPECTRUM_HIGH __pyx_mstate_global->__pyx_n_u_ZX_SPECTRUM_HIGH
#define __pyx_n_s_ZX_SPECTRUM_LOW __pyx_mstate_global->__pyx_n_s_ZX_SPECTRUM_LOW
#define __pyx_n_u_ZX_SPECTRUM_LOW __pyx_mstate_global->__pyx_n_u_ZX_SPECTRUM_LOW
#define __pyx_n_s_ZX_SPECTRUM_NORMALIZED_HIGH __pyx_mstate_global->__pyx_n_s_ZX_SPECTRUM_NORMALIZED_HIGH
#define __pyx_n_s_ZX_SPECTRUM_NORMALIZED_LOW __pyx_mstate_global->__pyx_n_s_ZX_SPECTRUM_NORMALIZED_LOW
#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12
#define __pyx_kp_u__2 __pyx_mstate_global->__pyx_kp_u__2
#define __pyx_n_s__3 __pyx_mstate_global->__pyx_n_s__3
#define __pyx_n_s__30 __pyx_mstate_global->__pyx_n_s__30
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_n_s_abc __pyx_mstate_global->__pyx_n_s_abc
#define __pyx_n_s_allocate_buffer __pyx_mstate_global->__pyx_n_s_allocate_buffer
#define __pyx_kp_u_and __pyx_mstate_global->__pyx_kp_u_and
#define __pyx_kp_u_and_color_palette_dtype __pyx_mstate_global->__pyx_kp_u_and_color_palette_dtype
#define __pyx_n_s_array __pyx_mstate_global->__pyx_n_s_array
#define __pyx_n_s_array3d __pyx_mstate_global->__pyx_n_s_array3d
#define __pyx_n_s_array_alpha __pyx_mstate_global->__pyx_n_s_array_alpha
#define __pyx_n_s_asarray __pyx_mstate_global->__pyx_n_s_asarray
#define __pyx_n_s_ascontiguousarray __pyx_mstate_global->__pyx_n_s_ascontiguousarray
#define __pyx_n_s_base __pyx_mstate_global->__pyx_n_s_base
#define __pyx_n_s_blit_array __pyx_mstate_global->__pyx_n_s_blit_array
#define __pyx_n_s_c __pyx_mstate_global->__pyx_n_s_c
#define __pyx_n_u_c __pyx_mstate_global->__pyx_n_u_c
#define __pyx_n_s_category __pyx_mstate_global->__pyx_n_s_category
#define __pyx_n_s_class __pyx_mstate_global->__pyx_n_s_class
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_collections __pyx_mstate_global->__pyx_n_s_collections
#define __pyx_kp_s_collections_abc __pyx_mstate_global->__pyx_kp_s_collections_abc
#define __pyx_n_s_color_palette __pyx_mstate_global->__pyx_n_s_color_palette
#define __pyx_kp_s_contiguous_and_direct __pyx_mstate_global->__pyx_kp_s_contiguous_and_direct
#define __pyx_kp_s_contiguous_and_indirect __pyx_mstate_global->__pyx_kp_s_contiguous_and_indirect
#define __pyx_n_s_count __pyx_mstate_global->__pyx_n_s_count
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_dtype __pyx_mstate_global->__pyx_n_s_dtype
#define __pyx_n_s_dtype_is_object __pyx_mstate_global->__pyx_n_s_dtype_is_object
#define __pyx_n_s_empty __pyx_mstate_global->__pyx_n_s_empty
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_encode __pyx_mstate_global->__pyx_n_s_encode
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_s_environ __pyx_mstate_global->__pyx_n_s_environ
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_fh __pyx_mstate_global->__pyx_n_s_fh
#define __pyx_n_s_filterwarnings __pyx_mstate_global->__pyx_n_s_filterwarnings
#define __pyx_n_s_fl __pyx_mstate_global->__pyx_n_s_fl
#define __pyx_n_s_flags __pyx_mstate_global->__pyx_n_s_flags
#define __pyx_n_s_float32 __pyx_mstate_global->__pyx_n_s_float32
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_fortran __pyx_mstate_global->__pyx_n_s_fortran
#define __pyx_n_u_fortran __pyx_mstate_global->__pyx_n_u_fortran
#define __pyx_n_s_fs __pyx_mstate_global->__pyx_n_s_fs
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get_view __pyx_mstate_global->__pyx_n_s_get_view
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_kp_u_got __pyx_mstate_global->__pyx_kp_u_got
#define __pyx_kp_u_got_differing_extents_in_dimensi __pyx_mstate_global->__pyx_kp_u_got_differing_extents_in_dimensi
#define __pyx_n_u_hide __pyx_mstate_global->__pyx_n_u_hide
#define __pyx_kp_u_https_lospec_com_palette_list_lo __pyx_mstate_global->__pyx_kp_u_https_lospec_com_palette_list_lo
#define __pyx_n_s_id __pyx_mstate_global->__pyx_n_s_id
#define __pyx_n_u_ignore __pyx_mstate_global->__pyx_n_u_ignore
#define __pyx_n_s_image_surface __pyx_mstate_global->__pyx_n_s_image_surface
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_int32 __pyx_mstate_global->__pyx_n_s_int32
#define __pyx_n_s_int8 __pyx_mstate_global->__pyx_n_s_int8
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_itemsize __pyx_mstate_global->__pyx_n_s_itemsize
#define __pyx_kp_s_itemsize_0_for_cython_array __pyx_mstate_global->__pyx_kp_s_itemsize_0_for_cython_array
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_make_surface __pyx_mstate_global->__pyx_n_s_make_surface
#define __pyx_n_s_memview __pyx_mstate_global->__pyx_n_s_memview
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_ndarray __pyx_mstate_global->__pyx_n_s_ndarray
#define __pyx_n_s_ndim __pyx_mstate_global->__pyx_n_s_ndim
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_kp_s_no_default___reduce___due_to_non __pyx_mstate_global->__pyx_kp_s_no_default___reduce___due_to_non
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_u_numpy__core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy__core_multiarray_failed_to
#define __pyx_kp_u_numpy__core_umath_failed_to_impo __pyx_mstate_global->__pyx_kp_u_numpy__core_umath_failed_to_impo
#define __pyx_kp_u_numpy_library_is_missing_on_you __pyx_mstate_global->__pyx_kp_u_numpy_library_is_missing_on_you
#define __pyx_n_s_obj __pyx_mstate_global->__pyx_n_s_obj
#define __pyx_n_s_os __pyx_mstate_global->__pyx_n_s_os
#define __pyx_n_s_pack __pyx_mstate_global->__pyx_n_s_pack
#define __pyx_n_s_palette_c __pyx_mstate_global->__pyx_n_s_palette_c
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_pixels3d __pyx_mstate_global->__pyx_n_s_pixels3d
#define __pyx_n_s_pixels_alpha __pyx_mstate_global->__pyx_n_s_pixels_alpha
#define __pyx_n_s_pygame __pyx_mstate_global->__pyx_n_s_pygame
#define __pyx_n_s_pygame_surfarray __pyx_mstate_global->__pyx_n_s_pygame_surfarray
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_Enum __pyx_mstate_global->__pyx_n_s_pyx_unpickle_Enum
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_register __pyx_mstate_global->__pyx_n_s_register
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_shape __pyx_mstate_global->__pyx_n_s_shape
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_step __pyx_mstate_global->__pyx_n_s_step
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_kp_s_strided_and_direct __pyx_mstate_global->__pyx_kp_s_strided_and_direct
#define __pyx_kp_s_strided_and_direct_or_indirect __pyx_mstate_global->__pyx_kp_s_strided_and_direct_or_indirect
#define __pyx_kp_s_strided_and_indirect __pyx_mstate_global->__pyx_kp_s_strided_and_indirect
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_struct __pyx_mstate_global->__pyx_n_s_struct
#define __pyx_n_s_sys __pyx_mstate_global->__pyx_n_s_sys
#define __pyx_n_s_temp_buffer __pyx_mstate_global->__pyx_n_s_temp_buffer
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_uint32 __pyx_mstate_global->__pyx_n_s_uint32
#define __pyx_n_s_uint8 __pyx_mstate_global->__pyx_n_s_uint8
#define __pyx_kp_s_unable_to_allocate_array_data __pyx_mstate_global->__pyx_kp_s_unable_to_allocate_array_data
#define __pyx_kp_s_unable_to_allocate_shape_and_str __pyx_mstate_global->__pyx_kp_s_unable_to_allocate_shape_and_str
#define __pyx_n_s_unpack __pyx_mstate_global->__pyx_n_s_unpack
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_version_info __pyx_mstate_global->__pyx_n_s_version_info
#define __pyx_n_s_warnings __pyx_mstate_global->__pyx_n_s_warnings
#define __pyx_kp_u_while_the_temp_buffer_array_has __pyx_mstate_global->__pyx_kp_u_while_the_temp_buffer_array_has
#define __pyx_n_s_width __pyx_mstate_global->__pyx_n_s_width
#define __pyx_n_s_zeros __pyx_mstate_global->__pyx_n_s_zeros
#define __pyx_float_0_ __pyx_mstate_global->__pyx_float_0_
#define __pyx_float_1_ __pyx_mstate_global->__pyx_float_1_
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_0_2 __pyx_mstate_global->__pyx_float_0_2
#define __pyx_float_0_4 __pyx_mstate_global->__pyx_float_0_4
#define __pyx_float_0_6 __pyx_mstate_global->__pyx_float_0_6
#define __pyx_float_0_8 __pyx_mstate_global->__pyx_float_0_8
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_float_0_6666 __pyx_mstate_global->__pyx_float_0_6666
#define __pyx_float_0_66666 __pyx_mstate_global->__pyx_float_0_66666
#define __pyx_float_0_0745098 __pyx_mstate_global->__pyx_float_0_0745098
#define __pyx_float_0_8627451 __pyx_mstate_global->__pyx_float_0_8627451
#define __pyx_float_0_00392157 __pyx_mstate_global->__pyx_float_0_00392157
#define __pyx_float_0_00784314 __pyx_mstate_global->__pyx_float_0_00784314
#define __pyx_float_0_01176471 __pyx_mstate_global->__pyx_float_0_01176471
#define __pyx_float_0_01568627 __pyx_mstate_global->__pyx_float_0_01568627
#define __pyx_float_0_04705882 __pyx_mstate_global->__pyx_float_0_04705882
#define __pyx_float_0_09803922 __pyx_mstate_global->__pyx_float_0_09803922
#define __pyx_float_0_14509804 __pyx_mstate_global->__pyx_float_0_14509804
#define __pyx_float_0_15686275 __pyx_mstate_global->__pyx_float_0_15686275
#define __pyx_float_0_17254902 __pyx_mstate_global->__pyx_float_0_17254902
#define __pyx_float_0_19607843 __pyx_mstate_global->__pyx_float_0_19607843
#define __pyx_float_0_21960784 __pyx_mstate_global->__pyx_float_0_21960784
#define __pyx_float_0_22352941 __pyx_mstate_global->__pyx_float_0_22352941
#define __pyx_float_0_25098039 __pyx_mstate_global->__pyx_float_0_25098039
#define __pyx_float_0_47843137 __pyx_mstate_global->__pyx_float_0_47843137
#define __pyx_float_0_48235294 __pyx_mstate_global->__pyx_float_0_48235294
#define __pyx_float_0_50196078 __pyx_mstate_global->__pyx_float_0_50196078
#define __pyx_float_0_62745098 __pyx_mstate_global->__pyx_float_0_62745098
#define __pyx_float_0_64313725 __pyx_mstate_global->__pyx_float_0_64313725
#define __pyx_float_0_65098039 __pyx_mstate_global->__pyx_float_0_65098039
#define __pyx_float_0_69019608 __pyx_mstate_global->__pyx_float_0_69019608
#define __pyx_float_0_74117647 __pyx_mstate_global->__pyx_float_0_74117647
#define __pyx_float_0_75294118 __pyx_mstate_global->__pyx_float_0_75294118
#define __pyx_float_0_79215686 __pyx_mstate_global->__pyx_float_0_79215686
#define __pyx_float_0_94117647 __pyx_mstate_global->__pyx_float_0_94117647
#define __pyx_float_0_97647059 __pyx_mstate_global->__pyx_float_0_97647059
#define __pyx_float_0_98039216 __pyx_mstate_global->__pyx_float_0_98039216
#define __pyx_float_0_98431373 __pyx_mstate_global->__pyx_float_0_98431373
#define __pyx_float_0_98823529 __pyx_mstate_global->__pyx_float_0_98823529
#define __pyx_float_0_99215686 __pyx_mstate_global->__pyx_float_0_99215686
#define __pyx_float_0_99607843 __pyx_mstate_global->__pyx_float_0_99607843
#define __pyx_float_0_396078431372549 __pyx_mstate_global->__pyx_float_0_396078431372549
#define __pyx_float_0_403921568627451 __pyx_mstate_global->__pyx_float_0_403921568627451
#define __pyx_float_0_592156862745098 __pyx_mstate_global->__pyx_float_0_592156862745098
#define __pyx_float_0_596078431372549 __pyx_mstate_global->__pyx_float_0_596078431372549
#define __pyx_float_0_611764705882353 __pyx_mstate_global->__pyx_float_0_611764705882353
#define __pyx_float_0_615686274509804 __pyx_mstate_global->__pyx_float_0_615686274509804
#define __pyx_float_0_788235294117647 __pyx_mstate_global->__pyx_float_0_788235294117647
#define __pyx_float_0_792156862745098 __pyx_mstate_global->__pyx_float_0_792156862745098
#define __pyx_float_0_796078431372549 __pyx_mstate_global->__pyx_float_0_796078431372549
#define __pyx_float_0_803921568627451 __pyx_mstate_global->__pyx_float_0_803921568627451
#define __pyx_float_0_807843137254902 __pyx_mstate_global->__pyx_float_0_807843137254902
#define __pyx_float_0_984313725490196 __pyx_mstate_global->__pyx_float_0_984313725490196
#define __pyx_float_0_996078431372549 __pyx_mstate_global->__pyx_float_0_996078431372549
#define __pyx_float_0_0196078431372549 __pyx_mstate_global->__pyx_float_0_0196078431372549
#define __pyx_float_0_0392156862745098 __pyx_mstate_global->__pyx_float_0_0392156862745098
#define __pyx_float_0_0784313725490196 __pyx_mstate_global->__pyx_float_0_0784313725490196
#define __pyx_float_0_1411764705882353 __pyx_mstate_global->__pyx_float_0_1411764705882353
#define __pyx_float_0_1450980392156863 __pyx_mstate_global->__pyx_float_0_1450980392156863
#define __pyx_float_0_1568627450980392 __pyx_mstate_global->__pyx_float_0_1568627450980392
#define __pyx_float_0_1607843137254902 __pyx_mstate_global->__pyx_float_0_1607843137254902
#define __pyx_float_0_1803921568627451 __pyx_mstate_global->__pyx_float_0_1803921568627451
#define __pyx_float_0_1843137254901961 __pyx_mstate_global->__pyx_float_0_1843137254901961
#define __pyx_float_0_2196078431372549 __pyx_mstate_global->__pyx_float_0_2196078431372549
#define __pyx_float_0_2235294117647059 __pyx_mstate_global->__pyx_float_0_2235294117647059
#define __pyx_float_0_2549019607843137 __pyx_mstate_global->__pyx_float_0_2549019607843137
#define __pyx_float_0_2627450980392157 __pyx_mstate_global->__pyx_float_0_2627450980392157
#define __pyx_float_0_2784313725490196 __pyx_mstate_global->__pyx_float_0_2784313725490196
#define __pyx_float_0_2823529411764706 __pyx_mstate_global->__pyx_float_0_2823529411764706
#define __pyx_float_0_2901960784313726 __pyx_mstate_global->__pyx_float_0_2901960784313726
#define __pyx_float_0_2980392156862745 __pyx_mstate_global->__pyx_float_0_2980392156862745
#define __pyx_float_0_3058823529411765 __pyx_mstate_global->__pyx_float_0_3058823529411765
#define __pyx_float_0_3137254901960784 __pyx_mstate_global->__pyx_float_0_3137254901960784
#define __pyx_float_0_3176470588235294 __pyx_mstate_global->__pyx_float_0_3176470588235294
#define __pyx_float_0_3215686274509804 __pyx_mstate_global->__pyx_float_0_3215686274509804
#define __pyx_float_0_3254901960784314 __pyx_mstate_global->__pyx_float_0_3254901960784314
#define __pyx_float_0_3333333333333333 __pyx_mstate_global->__pyx_float_0_3333333333333333
#define __pyx_float_0_3411764705882353 __pyx_mstate_global->__pyx_float_0_3411764705882353
#define __pyx_float_0_3568627450980392 __pyx_mstate_global->__pyx_float_0_3568627450980392
#define __pyx_float_0_3607843137254902 __pyx_mstate_global->__pyx_float_0_3607843137254902
#define __pyx_float_0_3686274509803922 __pyx_mstate_global->__pyx_float_0_3686274509803922
#define __pyx_float_0_3764705882352941 __pyx_mstate_global->__pyx_float_0_3764705882352941
#define __pyx_float_0_3803921568627451 __pyx_mstate_global->__pyx_float_0_3803921568627451
#define __pyx_float_0_3843137254901961 __pyx_mstate_global->__pyx_float_0_3843137254901961
#define __pyx_float_0_4117647058823529 __pyx_mstate_global->__pyx_float_0_4117647058823529
#define __pyx_float_0_4196078431372549 __pyx_mstate_global->__pyx_float_0_4196078431372549
#define __pyx_float_0_4235294117647059 __pyx_mstate_global->__pyx_float_0_4235294117647059
#define __pyx_float_0_4392156862745098 __pyx_mstate_global->__pyx_float_0_4392156862745098
#define __pyx_float_0_4470588235294118 __pyx_mstate_global->__pyx_float_0_4470588235294118
#define __pyx_float_0_4549019607843137 __pyx_mstate_global->__pyx_float_0_4549019607843137
#define __pyx_float_0_4588235294117647 __pyx_mstate_global->__pyx_float_0_4588235294117647
#define __pyx_float_0_4627450980392157 __pyx_mstate_global->__pyx_float_0_4627450980392157
#define __pyx_float_0_4666666666666667 __pyx_mstate_global->__pyx_float_0_4666666666666667
#define __pyx_float_0_4745098039215686 __pyx_mstate_global->__pyx_float_0_4745098039215686
#define __pyx_float_0_4823529411764706 __pyx_mstate_global->__pyx_float_0_4823529411764706
#define __pyx_float_0_4980392156862745 __pyx_mstate_global->__pyx_float_0_4980392156862745
#define __pyx_float_0_5019607843137255 __pyx_mstate_global->__pyx_float_0_5019607843137255
#define __pyx_float_0_5058823529411764 __pyx_mstate_global->__pyx_float_0_5058823529411764
#define __pyx_float_0_5098039215686274 __pyx_mstate_global->__pyx_float_0_5098039215686274
#define __pyx_float_0_5137254901960784 __pyx_mstate_global->__pyx_float_0_5137254901960784
#define __pyx_float_0_5176470588235295 __pyx_mstate_global->__pyx_float_0_5176470588235295
#define __pyx_float_0_5215686274509804 __pyx_mstate_global->__pyx_float_0_5215686274509804
#define __pyx_float_0_5254901960784314 __pyx_mstate_global->__pyx_float_0_5254901960784314
#define __pyx_float_0_5294117647058824 __pyx_mstate_global->__pyx_float_0_5294117647058824
#define __pyx_float_0_5333333333333333 __pyx_mstate_global->__pyx_float_0_5333333333333333
#define __pyx_float_0_5372549019607843 __pyx_mstate_global->__pyx_float_0_5372549019607843
#define __pyx_float_0_5411764705882353 __pyx_mstate_global->__pyx_float_0_5411764705882353
#define __pyx_float_0_5450980392156862 __pyx_mstate_global->__pyx_float_0_5450980392156862
#define __pyx_float_0_5490196078431373 __pyx_mstate_global->__pyx_float_0_5490196078431373
#define __pyx_float_0_5529411764705883 __pyx_mstate_global->__pyx_float_0_5529411764705883
#define __pyx_float_0_5568627450980392 __pyx_mstate_global->__pyx_float_0_5568627450980392
#define __pyx_float_0_5607843137254902 __pyx_mstate_global->__pyx_float_0_5607843137254902
#define __pyx_float_0_5647058823529412 __pyx_mstate_global->__pyx_float_0_5647058823529412
#define __pyx_float_0_5686274509803921 __pyx_mstate_global->__pyx_float_0_5686274509803921
#define __pyx_float_0_5725490196078431 __pyx_mstate_global->__pyx_float_0_5725490196078431
#define __pyx_float_0_5764705882352941 __pyx_mstate_global->__pyx_float_0_5764705882352941
#define __pyx_float_0_5803921568627451 __pyx_mstate_global->__pyx_float_0_5803921568627451
#define __pyx_float_0_5843137254901961 __pyx_mstate_global->__pyx_float_0_5843137254901961
#define __pyx_float_0_5882352941176471 __pyx_mstate_global->__pyx_float_0_5882352941176471
#define __pyx_float_0_6039215686274509 __pyx_mstate_global->__pyx_float_0_6039215686274509
#define __pyx_float_0_6078431372549019 __pyx_mstate_global->__pyx_float_0_6078431372549019
#define __pyx_float_0_6196078431372549 __pyx_mstate_global->__pyx_float_0_6196078431372549
#define __pyx_float_0_6235294117647059 __pyx_mstate_global->__pyx_float_0_6235294117647059
#define __pyx_float_0_6274509803921569 __pyx_mstate_global->__pyx_float_0_6274509803921569
#define __pyx_float_0_6313725490196078 __pyx_mstate_global->__pyx_float_0_6313725490196078
#define __pyx_float_0_6352941176470588 __pyx_mstate_global->__pyx_float_0_6352941176470588
#define __pyx_float_0_6392156862745098 __pyx_mstate_global->__pyx_float_0_6392156862745098
#define __pyx_float_0_6431372549019608 __pyx_mstate_global->__pyx_float_0_6431372549019608
#define __pyx_float_0_6470588235294118 __pyx_mstate_global->__pyx_float_0_6470588235294118
#define __pyx_float_0_6509803921568628 __pyx_mstate_global->__pyx_float_0_6509803921568628
#define __pyx_float_0_6549019607843137 __pyx_mstate_global->__pyx_float_0_6549019607843137
#define __pyx_float_0_6588235294117647 __pyx_mstate_global->__pyx_float_0_6588235294117647
#define __pyx_float_0_6627450980392157 __pyx_mstate_global->__pyx_float_0_6627450980392157
#define __pyx_float_0_6666666666666666 __pyx_mstate_global->__pyx_float_0_6666666666666666
#define __pyx_float_0_6705882352941176 __pyx_mstate_global->__pyx_float_0_6705882352941176
#define __pyx_float_0_6745098039215687 __pyx_mstate_global->__pyx_float_0_6745098039215687
#define __pyx_float_0_6784313725490196 __pyx_mstate_global->__pyx_float_0_6784313725490196
#define __pyx_float_0_6823529411764706 __pyx_mstate_global->__pyx_float_0_6823529411764706
#define __pyx_float_0_6862745098039216 __pyx_mstate_global->__pyx_float_0_6862745098039216
#define __pyx_float_0_6901960784313725 __pyx_mstate_global->__pyx_float_0_6901960784313725
#define __pyx_float_0_6941176470588235 __pyx_mstate_global->__pyx_float_0_6941176470588235
#define __pyx_float_0_6980392156862745 __pyx_mstate_global->__pyx_float_0_6980392156862745
#define __pyx_float_0_7019607843137254 __pyx_mstate_global->__pyx_float_0_7019607843137254
#define __pyx_float_0_7058823529411765 __pyx_mstate_global->__pyx_float_0_7058823529411765
#define __pyx_float_0_7098039215686275 __pyx_mstate_global->__pyx_float_0_7098039215686275
#define __pyx_float_0_7137254901960784 __pyx_mstate_global->__pyx_float_0_7137254901960784
#define __pyx_float_0_7176470588235294 __pyx_mstate_global->__pyx_float_0_7176470588235294
#define __pyx_float_0_7215686274509804 __pyx_mstate_global->__pyx_float_0_7215686274509804
#define __pyx_float_0_7254901960784313 __pyx_mstate_global->__pyx_float_0_7254901960784313
#define __pyx_float_0_7294117647058823 __pyx_mstate_global->__pyx_float_0_7294117647058823
#define __pyx_float_0_7333333333333333 __pyx_mstate_global->__pyx_float_0_7333333333333333
#define __pyx_float_0_7372549019607844 __pyx_mstate_global->__pyx_float_0_7372549019607844
#define __pyx_float_0_7411764705882353 __pyx_mstate_global->__pyx_float_0_7411764705882353
#define __pyx_float_0_7450980392156863 __pyx_mstate_global->__pyx_float_0_7450980392156863
#define __pyx_float_0_7490196078431373 __pyx_mstate_global->__pyx_float_0_7490196078431373
#define __pyx_float_0_7529411764705882 __pyx_mstate_global->__pyx_float_0_7529411764705882
#define __pyx_float_0_7568627450980392 __pyx_mstate_global->__pyx_float_0_7568627450980392
#define __pyx_float_0_7607843137254902 __pyx_mstate_global->__pyx_float_0_7607843137254902
#define __pyx_float_0_7647058823529411 __pyx_mstate_global->__pyx_float_0_7647058823529411
#define __pyx_float_0_7686274509803922 __pyx_mstate_global->__pyx_float_0_7686274509803922
#define __pyx_float_0_7725490196078432 __pyx_mstate_global->__pyx_float_0_7725490196078432
#define __pyx_float_0_7764705882352941 __pyx_mstate_global->__pyx_float_0_7764705882352941
#define __pyx_float_0_7803921568627451 __pyx_mstate_global->__pyx_float_0_7803921568627451
#define __pyx_float_0_7843137254901961 __pyx_mstate_global->__pyx_float_0_7843137254901961
#define __pyx_float_0_8117647058823529 __pyx_mstate_global->__pyx_float_0_8117647058823529
#define __pyx_float_0_8156862745098039 __pyx_mstate_global->__pyx_float_0_8156862745098039
#define __pyx_float_0_8196078431372549 __pyx_mstate_global->__pyx_float_0_8196078431372549
#define __pyx_float_0_8235294117647058 __pyx_mstate_global->__pyx_float_0_8235294117647058
#define __pyx_float_0_8274509803921568 __pyx_mstate_global->__pyx_float_0_8274509803921568
#define __pyx_float_0_8313725490196079 __pyx_mstate_global->__pyx_float_0_8313725490196079
#define __pyx_float_0_8352941176470589 __pyx_mstate_global->__pyx_float_0_8352941176470589
#define __pyx_float_0_8392156862745098 __pyx_mstate_global->__pyx_float_0_8392156862745098
#define __pyx_float_0_8431372549019608 __pyx_mstate_global->__pyx_float_0_8431372549019608
#define __pyx_float_0_8470588235294118 __pyx_mstate_global->__pyx_float_0_8470588235294118
#define __pyx_float_0_8549019607843137 __pyx_mstate_global->__pyx_float_0_8549019607843137
#define __pyx_float_0_8588235294117647 __pyx_mstate_global->__pyx_float_0_8588235294117647
#define __pyx_float_0_8627450980392157 __pyx_mstate_global->__pyx_float_0_8627450980392157
#define __pyx_float_0_8666666666666667 __pyx_mstate_global->__pyx_float_0_8666666666666667
#define __pyx_float_0_8705882352941177 __pyx_mstate_global->__pyx_float_0_8705882352941177
#define __pyx_float_0_8745098039215686 __pyx_mstate_global->__pyx_float_0_8745098039215686
#define __pyx_float_0_8784313725490196 __pyx_mstate_global->__pyx_float_0_8784313725490196
#define __pyx_float_0_8823529411764706 __pyx_mstate_global->__pyx_float_0_8823529411764706
#define __pyx_float_0_8862745098039215 __pyx_mstate_global->__pyx_float_0_8862745098039215
#define __pyx_float_0_8901960784313725 __pyx_mstate_global->__pyx_float_0_8901960784313725
#define __pyx_float_0_8941176470588236 __pyx_mstate_global->__pyx_float_0_8941176470588236
#define __pyx_float_0_9019607843137255 __pyx_mstate_global->__pyx_float_0_9019607843137255
#define __pyx_float_0_9058823529411765 __pyx_mstate_global->__pyx_float_0_9058823529411765
#define __pyx_float_0_9098039215686274 __pyx_mstate_global->__pyx_float_0_9098039215686274
#define __pyx_float_0_9137254901960784 __pyx_mstate_global->__pyx_float_0_9137254901960784
#define __pyx_float_0_9176470588235294 __pyx_mstate_global->__pyx_float_0_9176470588235294
#define __pyx_float_0_9215686274509803 __pyx_mstate_global->__pyx_float_0_9215686274509803
#define __pyx_float_0_9254901960784314 __pyx_mstate_global->__pyx_float_0_9254901960784314
#define __pyx_float_0_9294117647058824 __pyx_mstate_global->__pyx_float_0_9294117647058824
#define __pyx_float_0_9333333333333333 __pyx_mstate_global->__pyx_float_0_9333333333333333
#define __pyx_float_0_9372549019607843 __pyx_mstate_global->__pyx_float_0_9372549019607843
#define __pyx_float_0_9411764705882353 __pyx_mstate_global->__pyx_float_0_9411764705882353
#define __pyx_float_0_9450980392156862 __pyx_mstate_global->__pyx_float_0_9450980392156862
#define __pyx_float_0_9490196078431372 __pyx_mstate_global->__pyx_float_0_9490196078431372
#define __pyx_float_0_9529411764705882 __pyx_mstate_global->__pyx_float_0_9529411764705882
#define __pyx_float_0_9568627450980393 __pyx_mstate_global->__pyx_float_0_9568627450980393
#define __pyx_float_0_9607843137254902 __pyx_mstate_global->__pyx_float_0_9607843137254902
#define __pyx_float_0_9647058823529412 __pyx_mstate_global->__pyx_float_0_9647058823529412
#define __pyx_float_0_9686274509803922 __pyx_mstate_global->__pyx_float_0_9686274509803922
#define __pyx_float_0_9725490196078431 __pyx_mstate_global->__pyx_float_0_9725490196078431
#define __pyx_float_0_9764705882352941 __pyx_mstate_global->__pyx_float_0_9764705882352941
#define __pyx_float_0_9803921568627451 __pyx_mstate_global->__pyx_float_0_9803921568627451
#define __pyx_float_0_9882352941176471 __pyx_mstate_global->__pyx_float_0_9882352941176471
#define __pyx_float_0_9921568627450981 __pyx_mstate_global->__pyx_float_0_9921568627450981
#define __pyx_float_0_00784313725490196 __pyx_mstate_global->__pyx_float_0_00784313725490196
#define __pyx_float_0_01568627450980392 __pyx_mstate_global->__pyx_float_0_01568627450980392
#define __pyx_float_0_03137254901960784 __pyx_mstate_global->__pyx_float_0_03137254901960784
#define __pyx_float_0_03529411764705882 __pyx_mstate_global->__pyx_float_0_03529411764705882
#define __pyx_float_0_06274509803921569 __pyx_mstate_global->__pyx_float_0_06274509803921569
#define __pyx_float_0_07058823529411765 __pyx_mstate_global->__pyx_float_0_07058823529411765
#define __pyx_float_0_07450980392156863 __pyx_mstate_global->__pyx_float_0_07450980392156863
#define __pyx_float_0_08235294117647059 __pyx_mstate_global->__pyx_float_0_08235294117647059
#define __pyx_float_0_08627450980392157 __pyx_mstate_global->__pyx_float_0_08627450980392157
#define __pyx_float_0_09019607843137255 __pyx_mstate_global->__pyx_float_0_09019607843137255
#define __pyx_float_0_09411764705882353 __pyx_mstate_global->__pyx_float_0_09411764705882353
#define __pyx_float_0_09803921568627451 __pyx_mstate_global->__pyx_float_0_09803921568627451
#define __pyx_float_0_10196078431372549 __pyx_mstate_global->__pyx_float_0_10196078431372549
#define __pyx_float_0_10588235294117647 __pyx_mstate_global->__pyx_float_0_10588235294117647
#define __pyx_float_0_10980392156862745 __pyx_mstate_global->__pyx_float_0_10980392156862745
#define __pyx_float_0_11372549019607843 __pyx_mstate_global->__pyx_float_0_11372549019607843
#define __pyx_float_0_11764705882352941 __pyx_mstate_global->__pyx_float_0_11764705882352941
#define __pyx_float_0_12156862745098039 __pyx_mstate_global->__pyx_float_0_12156862745098039
#define __pyx_float_0_12549019607843137 __pyx_mstate_global->__pyx_float_0_12549019607843137
#define __pyx_float_0_12941176470588237 __pyx_mstate_global->__pyx_float_0_12941176470588237
#define __pyx_float_0_13333333333333333 __pyx_mstate_global->__pyx_float_0_13333333333333333
#define __pyx_float_0_13725490196078433 __pyx_mstate_global->__pyx_float_0_13725490196078433
#define __pyx_float_0_14901960784313725 __pyx_mstate_global->__pyx_float_0_14901960784313725
#define __pyx_float_0_15294117647058825 __pyx_mstate_global->__pyx_float_0_15294117647058825
#define __pyx_float_0_16470588235294117 __pyx_mstate_global->__pyx_float_0_16470588235294117
#define __pyx_float_0_16862745098039217 __pyx_mstate_global->__pyx_float_0_16862745098039217
#define __pyx_float_0_17254901960784313 __pyx_mstate_global->__pyx_float_0_17254901960784313
#define __pyx_float_0_17647058823529413 __pyx_mstate_global->__pyx_float_0_17647058823529413
#define __pyx_float_0_18823529411764706 __pyx_mstate_global->__pyx_float_0_18823529411764706
#define __pyx_float_0_19215686274509805 __pyx_mstate_global->__pyx_float_0_19215686274509805
#define __pyx_float_0_19607843137254902 __pyx_mstate_global->__pyx_float_0_19607843137254902
#define __pyx_float_0_20392156862745098 __pyx_mstate_global->__pyx_float_0_20392156862745098
#define __pyx_float_0_20784313725490197 __pyx_mstate_global->__pyx_float_0_20784313725490197
#define __pyx_float_0_21176470588235294 __pyx_mstate_global->__pyx_float_0_21176470588235294
#define __pyx_float_0_21568627450980393 __pyx_mstate_global->__pyx_float_0_21568627450980393
#define __pyx_float_0_22745098039215686 __pyx_mstate_global->__pyx_float_0_22745098039215686
#define __pyx_float_0_23137254901960785 __pyx_mstate_global->__pyx_float_0_23137254901960785
#define __pyx_float_0_23529411764705882 __pyx_mstate_global->__pyx_float_0_23529411764705882
#define __pyx_float_0_23921568627450981 __pyx_mstate_global->__pyx_float_0_23921568627450981
#define __pyx_float_0_24313725490196078 __pyx_mstate_global->__pyx_float_0_24313725490196078
#define __pyx_float_0_24705882352941178 __pyx_mstate_global->__pyx_float_0_24705882352941178
#define __pyx_float_0_25098039215686274 __pyx_mstate_global->__pyx_float_0_25098039215686274
#define __pyx_float_0_25882352941176473 __pyx_mstate_global->__pyx_float_0_25882352941176473
#define __pyx_float_0_26666666666666666 __pyx_mstate_global->__pyx_float_0_26666666666666666
#define __pyx_float_0_27058823529411763 __pyx_mstate_global->__pyx_float_0_27058823529411763
#define __pyx_float_0_27450980392156865 __pyx_mstate_global->__pyx_float_0_27450980392156865
#define __pyx_float_0_28627450980392155 __pyx_mstate_global->__pyx_float_0_28627450980392155
#define __pyx_float_0_29411764705882354 __pyx_mstate_global->__pyx_float_0_29411764705882354
#define __pyx_float_0_30196078431372547 __pyx_mstate_global->__pyx_float_0_30196078431372547
#define __pyx_float_0_30980392156862746 __pyx_mstate_global->__pyx_float_0_30980392156862746
#define __pyx_float_0_32941176470588235 __pyx_mstate_global->__pyx_float_0_32941176470588235
#define __pyx_float_0_33725490196078434 __pyx_mstate_global->__pyx_float_0_33725490196078434
#define __pyx_float_0_34509803921568627 __pyx_mstate_global->__pyx_float_0_34509803921568627
#define __pyx_float_0_34901960784313724 __pyx_mstate_global->__pyx_float_0_34901960784313724
#define __pyx_float_0_35294117647058826 __pyx_mstate_global->__pyx_float_0_35294117647058826
#define __pyx_float_0_36470588235294116 __pyx_mstate_global->__pyx_float_0_36470588235294116
#define __pyx_float_0_37254901960784315 __pyx_mstate_global->__pyx_float_0_37254901960784315
#define __pyx_float_0_38823529411764707 __pyx_mstate_global->__pyx_float_0_38823529411764707
#define __pyx_float_0_39215686274509803 __pyx_mstate_global->__pyx_float_0_39215686274509803
#define __pyx_float_0_40784313725490196 __pyx_mstate_global->__pyx_float_0_40784313725490196
#define __pyx_float_0_41568627450980394 __pyx_mstate_global->__pyx_float_0_41568627450980394
#define __pyx_float_0_42745098039215684 __pyx_mstate_global->__pyx_float_0_42745098039215684
#define __pyx_float_0_43137254901960786 __pyx_mstate_global->__pyx_float_0_43137254901960786
#define __pyx_float_0_43529411764705883 __pyx_mstate_global->__pyx_float_0_43529411764705883
#define __pyx_float_0_44313725490196076 __pyx_mstate_global->__pyx_float_0_44313725490196076
#define __pyx_float_0_45098039215686275 __pyx_mstate_global->__pyx_float_0_45098039215686275
#define __pyx_float_0_47058823529411764 __pyx_mstate_global->__pyx_float_0_47058823529411764
#define __pyx_float_0_47843137254901963 __pyx_mstate_global->__pyx_float_0_47843137254901963
#define __pyx_float_0_48627450980392156 __pyx_mstate_global->__pyx_float_0_48627450980392156
#define __pyx_float_0_49019607843137253 __pyx_mstate_global->__pyx_float_0_49019607843137253
#define __pyx_float_0_49411764705882355 __pyx_mstate_global->__pyx_float_0_49411764705882355
#define __pyx_float_0_011764705882352941 __pyx_mstate_global->__pyx_float_0_011764705882352941
#define __pyx_float_0_023529411764705882 __pyx_mstate_global->__pyx_float_0_023529411764705882
#define __pyx_float_0_027450980392156862 __pyx_mstate_global->__pyx_float_0_027450980392156862
#define __pyx_float_0_043137254901960784 __pyx_mstate_global->__pyx_float_0_043137254901960784
#define __pyx_float_0_047058823529411764 __pyx_mstate_global->__pyx_float_0_047058823529411764
#define __pyx_float_0_050980392156862744 __pyx_mstate_global->__pyx_float_0_050980392156862744
#define __pyx_float_0_054901960784313725 __pyx_mstate_global->__pyx_float_0_054901960784313725
#define __pyx_float_0_058823529411764705 __pyx_mstate_global->__pyx_float_0_058823529411764705
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_112105877 __pyx_mstate_global->__pyx_int_112105877
#define __pyx_int_136983863 __pyx_mstate_global->__pyx_int_136983863
#define __pyx_int_184977713 __pyx_mstate_global->__pyx_int_184977713
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_slice__5 __pyx_mstate_global->__pyx_slice__5
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__8 __pyx_mstate_global->__pyx_tuple__8
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__10 __pyx_mstate_global->__pyx_tuple__10
#define __pyx_tuple__11 __pyx_mstate_global->__pyx_tuple__11
#define __pyx_tuple__13 __pyx_mstate_global->__pyx_tuple__13
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__22 __pyx_mstate_global->__pyx_tuple__22
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__24 __pyx_mstate_global->__pyx_tuple__24
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__28 __pyx_mstate_global->__pyx_tuple__28
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
/* #### Code section: module_code ### */

/* "View.MemoryView":131
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

/* Python wrapper */
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_array___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_shape = 0;
  Py_ssize_t __pyx_v_itemsize;
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_v_mode = 0;
  int __pyx_v_allocate_buffer;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_shape,&__pyx_n_s_itemsize,&__pyx_n_s_format,&__pyx_n_s_mode,&__pyx_n_s_allocate_buffer,0};
    values[3] = __Pyx_Arg_NewRef_VARARGS(((PyObject *)__pyx_n_s_c));
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_shape)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 131, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_itemsize)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 131, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 1); __PYX_ERR(2, 131, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_format)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 131, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, 2); __PYX_ERR(2, 131, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_mode);
          if (value) { values[3] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 131, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_allocate_buffer);
          if (value) { values[4] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 131, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(2, 131, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_shape = ((PyObject*)values[0]);
    __pyx_v_itemsize = __Pyx_PyIndex_AsSsize_t(values[1]); if (unlikely((__pyx_v_itemsize == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 131, __pyx_L3_error)
    __pyx_v_format = values[2];
    __pyx_v_mode = values[3];
    if (values[4]) {
      __pyx_v_allocate_buffer = __Pyx_PyObject_IsTrue(values[4]); if (unlikely((__pyx_v_allocate_buffer == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 132, __pyx_L3_error)
    } else {

      /* "View.MemoryView":132
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,
 *                   mode="c", bint allocate_buffer=True):             # <<<<<<<<<<<<<<
 * 
 *         cdef int idx
 */
      __pyx_v_allocate_buffer = ((int)1);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 3, 5, __pyx_nargs); __PYX_ERR(2, 131, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_shape), (&PyTuple_Type), 1, "shape", 1))) __PYX_ERR(2, 131, __pyx_L1_error)
  if (unlikely(((PyObject *)__pyx_v_format) == Py_None)) {
    PyErr_Format(PyExc_TypeError, "Argument '%.200s' must not be None", "format"); __PYX_ERR(2, 131, __pyx_L1_error)
  }
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v_shape, __pyx_v_itemsize, __pyx_v_format, __pyx_v_mode, __pyx_v_allocate_buffer);

  /* "View.MemoryView":131
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array___cinit__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, PyObject *__pyx_v_format, PyObject *__pyx_v_mode, int __pyx_v_allocate_buffer) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_v_dim;
  char __pyx_v_order;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  char *__pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_INCREF(__pyx_v_format);

  /* "View.MemoryView":137
 *         cdef Py_ssize_t dim
 * 
 *         self.ndim = <int> len(shape)             # <<<<<<<<<<<<<<
 *         self.itemsize = itemsize
 * 
 */
  if (unlikely(__pyx_v_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 137, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(2, 137, __pyx_L1_error)
  __pyx_v_self->ndim = ((int)__pyx_t_1);

  /* "View.MemoryView":138
 * 
 *         self.ndim = <int> len(shape)
 *         self.itemsize = itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not self.ndim:
 */
  __pyx_v_self->itemsize = __pyx_v_itemsize;

  /* "View.MemoryView":140
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 */
  __pyx_t_2 = (!(__pyx_v_self->ndim != 0));
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":141
 * 
 *         if not self.ndim:
 *             raise ValueError, "Empty shape tuple for cython.array"             # <<<<<<<<<<<<<<
 * 
 *         if itemsize <= 0:
 */
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Empty_shape_tuple_for_cython_arr, 0, 0);
    __PYX_ERR(2, 141, __pyx_L1_error)

    /* "View.MemoryView":140
 *         self.itemsize = itemsize
 * 
 *         if not self.ndim:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 */
  }

  /* "View.MemoryView":143
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 */
  __pyx_t_2 = (__pyx_v_itemsize <= 0);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":144
 * 
 *         if itemsize <= 0:
 *             raise ValueError, "itemsize <= 0 for cython.array"             # <<<<<<<<<<<<<<
 * 
 *         if not isinstance(format, bytes):
 */
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_itemsize_0_for_cython_array, 0, 0);
    __PYX_ERR(2, 144, __pyx_L1_error)

    /* "View.MemoryView":143
 *             raise ValueError, "Empty shape tuple for cython.array"
 * 
 *         if itemsize <= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 */
  }

  /* "View.MemoryView":146
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  __pyx_t_2 = PyBytes_Check(__pyx_v_format); 
  __pyx_t_3 = (!__pyx_t_2);
  if (__pyx_t_3) {

    /* "View.MemoryView":147
 * 
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')             # <<<<<<<<<<<<<<
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_format, __pyx_n_s_encode); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_n_s_ASCII};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 147, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF_SET(__pyx_v_format, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "View.MemoryView":146
 *             raise ValueError, "itemsize <= 0 for cython.array"
 * 
 *         if not isinstance(format, bytes):             # <<<<<<<<<<<<<<
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 */
  }

  /* "View.MemoryView":148
 *         if not isinstance(format, bytes):
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string             # <<<<<<<<<<<<<<
 *         self.format = self._format
 * 
 */
  if (!(likely(PyBytes_CheckExact(__pyx_v_format))||((__pyx_v_format) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_v_format))) __PYX_ERR(2, 148, __pyx_L1_error)
  __pyx_t_4 = __pyx_v_format;
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_self->_format);
  __Pyx_DECREF(__pyx_v_self->_format);
  __pyx_v_self->_format = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "View.MemoryView":149
 *             format = format.encode('ASCII')
 *         self._format = format  # keep a reference to the byte string
 *         self.format = self._format             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (unlikely(__pyx_v_self->_format == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "expected bytes, NoneType found");
    __PYX_ERR(2, 149, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_PyBytes_AsWritableString(__pyx_v_self->_format); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(2, 149, __pyx_L1_error)
  __pyx_v_self->format = __pyx_t_8;

  /* "View.MemoryView":152
 * 
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)             # <<<<<<<<<<<<<<
 *         self._strides = self._shape + self.ndim
 * 
 */
  __pyx_v_self->_shape = ((Py_ssize_t *)PyObject_Malloc((((sizeof(Py_ssize_t)) * __pyx_v_self->ndim) * 2)));

  /* "View.MemoryView":153
 * 
 *         self._shape = <Py_ssize_t *> PyObject_Malloc(sizeof(Py_ssize_t)*self.ndim*2)
 *         self._strides = self._shape + self.ndim             # <<<<<<<<<<<<<<
 * 
 *         if not self._shape:
 */
  __pyx_v_self->_strides = (__pyx_v_self->_shape + __pyx_v_self->ndim);

  /* "View.MemoryView":155
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError, "unable to allocate shape and strides."
 * 
 */
  __pyx_t_3 = (!(__pyx_v_self->_shape != 0));
  if (unlikely(__pyx_t_3)) {

    /* "View.MemoryView":156
 * 
 *         if not self._shape:
 *             raise MemoryError, "unable to allocate shape and strides."             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_Raise(__pyx_builtin_MemoryError, __pyx_kp_s_unable_to_allocate_shape_and_str, 0, 0);
    __PYX_ERR(2, 156, __pyx_L1_error)

    /* "View.MemoryView":155
 *         self._strides = self._shape + self.ndim
 * 
 *         if not self._shape:             # <<<<<<<<<<<<<<
 *             raise MemoryError, "unable to allocate shape and strides."
 * 
 */
  }

  /* "View.MemoryView":159
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 */
  __pyx_t_9 = 0;
  __pyx_t_4 = __pyx_v_shape; __Pyx_INCREF(__pyx_t_4);
  __pyx_t_1 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(2, 159, __pyx_L1_error)
      #endif
      if (__pyx_t_1 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_1); __Pyx_INCREF(__pyx_t_5); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(2, 159, __pyx_L1_error)
    #else
    __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __pyx_t_10 = __Pyx_PyIndex_AsSsize_t(__pyx_t_5); if (unlikely((__pyx_t_10 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_10;
    __pyx_v_idx = __pyx_t_9;
    __pyx_t_9 = (__pyx_t_9 + 1);

    /* "View.MemoryView":160
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim
 */
    __pyx_t_3 = (__pyx_v_dim <= 0);
    if (unlikely(__pyx_t_3)) {

      /* "View.MemoryView":161
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."             # <<<<<<<<<<<<<<
 *             self._shape[idx] = dim
 * 
 */
      __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = 0;
      __pyx_t_11 = 127;
      __Pyx_INCREF(__pyx_kp_u_Invalid_shape_in_axis);
      __pyx_t_10 += 22;
      __Pyx_GIVEREF(__pyx_kp_u_Invalid_shape_in_axis);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Invalid_shape_in_axis);
      __pyx_t_6 = __Pyx_PyUnicode_From_int(__pyx_v_idx, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_);
      __pyx_t_10 += 2;
      __Pyx_GIVEREF(__pyx_kp_u_);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_);
      __pyx_t_6 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__2);
      __pyx_t_10 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__2);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__2);
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 161, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_6, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 161, __pyx_L1_error)

      /* "View.MemoryView":160
 * 
 *         for idx, dim in enumerate(shape):
 *             if dim <= 0:             # <<<<<<<<<<<<<<
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim
 */
    }

    /* "View.MemoryView":162
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 *             self._shape[idx] = dim             # <<<<<<<<<<<<<<
 * 
 *         cdef char order
 */
    (__pyx_v_self->_shape[__pyx_v_idx]) = __pyx_v_dim;

    /* "View.MemoryView":159
 * 
 * 
 *         for idx, dim in enumerate(shape):             # <<<<<<<<<<<<<<
 *             if dim <= 0:
 *                 raise ValueError, f"Invalid shape in axis {idx}: {dim}."
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "View.MemoryView":165
 * 
 *         cdef char order
 *         if mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_c, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(2, 165, __pyx_L1_error)
  if (__pyx_t_3) {

    /* "View.MemoryView":166
 *         cdef char order
 *         if mode == 'c':
 *             order = b'C'             # <<<<<<<<<<<<<<
 *             self.mode = u'c'
 *         elif mode == 'fortran':
 */
    __pyx_v_order = 'C';

    /* "View.MemoryView":167
 *         if mode == 'c':
 *             order = b'C'
 *             self.mode = u'c'             # <<<<<<<<<<<<<<
 *         elif mode == 'fortran':
 *             order = b'F'
 */
    __Pyx_INCREF(__pyx_n_u_c);
    __Pyx_GIVEREF(__pyx_n_u_c);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_c;

    /* "View.MemoryView":165
 * 
 *         cdef char order
 *         if mode == 'c':             # <<<<<<<<<<<<<<
 *             order = b'C'
 *             self.mode = u'c'
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":168
 *             order = b'C'
 *             self.mode = u'c'
 *         elif mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_mode, __pyx_n_s_fortran, Py_EQ)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(2, 168, __pyx_L1_error)
  if (likely(__pyx_t_3)) {

    /* "View.MemoryView":169
 *             self.mode = u'c'
 *         elif mode == 'fortran':
 *             order = b'F'             # <<<<<<<<<<<<<<
 *             self.mode = u'fortran'
 *         else:
 */
    __pyx_v_order = 'F';

    /* "View.MemoryView":170
 *         elif mode == 'fortran':
 *             order = b'F'
 *             self.mode = u'fortran'             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"
 */
    __Pyx_INCREF(__pyx_n_u_fortran);
    __Pyx_GIVEREF(__pyx_n_u_fortran);
    __Pyx_GOTREF(__pyx_v_self->mode);
    __Pyx_DECREF(__pyx_v_self->mode);
    __pyx_v_self->mode = __pyx_n_u_fortran;

    /* "View.MemoryView":168
 *             order = b'C'
 *             self.mode = u'c'
 *         elif mode == 'fortran':             # <<<<<<<<<<<<<<
 *             order = b'F'
 *             self.mode = u'fortran'
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":172
 *             self.mode = u'fortran'
 *         else:
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"             # <<<<<<<<<<<<<<
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_mode, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Invalid_mode_expected_c_or_fortr, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_6, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(2, 172, __pyx_L1_error)
  }
  __pyx_L11:;

  /* "View.MemoryView":174
 *             raise ValueError, f"Invalid mode, expected 'c' or 'fortran', got {mode}"
 * 
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)             # <<<<<<<<<<<<<<
 * 
 *         self.free_data = allocate_buffer
 */
  __pyx_v_self->len = __pyx_fill_contig_strides_array(__pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_itemsize, __pyx_v_self->ndim, __pyx_v_order);

  /* "View.MemoryView":176
 *         self.len = fill_contig_strides_array(self._shape, self._strides, itemsize, self.ndim, order)
 * 
 *         self.free_data = allocate_buffer             # <<<<<<<<<<<<<<
 *         self.dtype_is_object = format == b'O'
 * 
 */
  __pyx_v_self->free_data = __pyx_v_allocate_buffer;

  /* "View.MemoryView":177
 * 
 *         self.free_data = allocate_buffer
 *         self.dtype_is_object = format == b'O'             # <<<<<<<<<<<<<<
 * 
 *         if allocate_buffer:
 */
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_format, __pyx_n_b_O, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 177, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_self->dtype_is_object = __pyx_t_3;

  /* "View.MemoryView":179
 *         self.dtype_is_object = format == b'O'
 * 
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 *             _allocate_buffer(self)
 * 
 */
  if (__pyx_v_allocate_buffer) {

    /* "View.MemoryView":180
 * 
 *         if allocate_buffer:
 *             _allocate_buffer(self)             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_t_9 = __pyx_array_allocate_buffer(__pyx_v_self); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 180, __pyx_L1_error)

    /* "View.MemoryView":179
 *         self.dtype_is_object = format == b'O'
 * 
 *         if allocate_buffer:             # <<<<<<<<<<<<<<
 *             _allocate_buffer(self)
 * 
 */
  }

  /* "View.MemoryView":131
 *         cdef bint dtype_is_object
 * 
 *     def __cinit__(array self, tuple shape, Py_ssize_t itemsize, format not None,             # <<<<<<<<<<<<<<
 *                   mode="c", bint allocate_buffer=True):
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.array.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_format);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":182
 *             _allocate_buffer(self)
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 */

/* Python wrapper */
CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
CYTHON_UNUSED static int __pyx_array_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(((struct __pyx_array_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_2__getbuffer__(struct __pyx_array_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_bufmode;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (unlikely(__pyx_v_info == NULL)) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":184
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1             # <<<<<<<<<<<<<<
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":
 */
  __pyx_v_bufmode = -1;

  /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):             # <<<<<<<<<<<<<<
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  __pyx_t_1 = ((__pyx_v_flags & ((PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS) | PyBUF_ANY_CONTIGUOUS)) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":186
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 */
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_c, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(2, 186, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":187
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
      __pyx_v_bufmode = (PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

      /* "View.MemoryView":186
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):
 *             if self.mode == u"c":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":188
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 */
    __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_self->mode, __pyx_n_u_fortran, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(2, 188, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "View.MemoryView":189
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS             # <<<<<<<<<<<<<<
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 */
      __pyx_v_bufmode = (PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS);

      /* "View.MemoryView":188
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             elif self.mode == u"fortran":             # <<<<<<<<<<<<<<
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 */
    }
    __pyx_L4:;

    /* "View.MemoryView":190
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 */
    __pyx_t_1 = (!((__pyx_v_flags & __pyx_v_bufmode) != 0));
    if (unlikely(__pyx_t_1)) {

      /* "View.MemoryView":191
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."             # <<<<<<<<<<<<<<
 *         info.buf = self.data
 *         info.len = self.len
 */
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Can_only_create_a_buffer_that_is, 0, 0);
      __PYX_ERR(2, 191, __pyx_L1_error)

      /* "View.MemoryView":190
 *             elif self.mode == u"fortran":
 *                 bufmode = PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 *             if not (flags & bufmode):             # <<<<<<<<<<<<<<
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 */
    }

    /* "View.MemoryView":185
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 *         if flags & (PyBUF_C_CONTIGUOUS | PyBUF_F_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS):             # <<<<<<<<<<<<<<
 *             if self.mode == u"c":
 *                 bufmode = PyBUF_C_CONTIGUOUS | PyBUF_ANY_CONTIGUOUS
 */
  }

  /* "View.MemoryView":192
 *             if not (flags & bufmode):
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data             # <<<<<<<<<<<<<<
 *         info.len = self.len
 * 
 */
  __pyx_t_2 = __pyx_v_self->data;
  __pyx_v_info->buf = __pyx_t_2;

  /* "View.MemoryView":193
 *                 raise ValueError, "Can only create a buffer that is contiguous in memory."
 *         info.buf = self.data
 *         info.len = self.len             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  __pyx_t_3 = __pyx_v_self->len;
  __pyx_v_info->len = __pyx_t_3;

  /* "View.MemoryView":195
 *         info.len = self.len
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":196
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.ndim = self.ndim             # <<<<<<<<<<<<<<
 *             info.shape = self._shape
 *             info.strides = self._strides
 */
    __pyx_t_4 = __pyx_v_self->ndim;
    __pyx_v_info->ndim = __pyx_t_4;

    /* "View.MemoryView":197
 *         if flags & PyBUF_STRIDES:
 *             info.ndim = self.ndim
 *             info.shape = self._shape             # <<<<<<<<<<<<<<
 *             info.strides = self._strides
 *         else:
 */
    __pyx_t_5 = __pyx_v_self->_shape;
    __pyx_v_info->shape = __pyx_t_5;

    /* "View.MemoryView":198
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 *             info.strides = self._strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.ndim = 1
 */
    __pyx_t_5 = __pyx_v_self->_strides;
    __pyx_v_info->strides = __pyx_t_5;

    /* "View.MemoryView":195
 *         info.len = self.len
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.ndim = self.ndim
 *             info.shape = self._shape
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":200
 *             info.strides = self._strides
 *         else:
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.shape = &self.len if flags & PyBUF_ND else NULL
 *             info.strides = NULL
 */
  /*else*/ {
    __pyx_v_info->ndim = 1;

    /* "View.MemoryView":201
 *         else:
 *             info.ndim = 1
 *             info.shape = &self.len if flags & PyBUF_ND else NULL             # <<<<<<<<<<<<<<
 *             info.strides = NULL
 * 
 */
    __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
    if (__pyx_t_1) {
      __pyx_t_5 = (&__pyx_v_self->len);
    } else {
      __pyx_t_5 = NULL;
    }
    __pyx_v_info->shape = __pyx_t_5;

    /* "View.MemoryView":202
 *             info.ndim = 1
 *             info.shape = &self.len if flags & PyBUF_ND else NULL
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.suboffsets = NULL
 */
    __pyx_v_info->strides = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":204
 *             info.strides = NULL
 * 
 *         info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 */
  __pyx_v_info->suboffsets = NULL;

  /* "View.MemoryView":205
 * 
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize             # <<<<<<<<<<<<<<
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 */
  __pyx_t_3 = __pyx_v_self->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "View.MemoryView":206
 *         info.suboffsets = NULL
 *         info.itemsize = self.itemsize
 *         info.readonly = 0             # <<<<<<<<<<<<<<
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 *         info.obj = self
 */
  __pyx_v_info->readonly = 0;

  /* "View.MemoryView":207
 *         info.itemsize = self.itemsize
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = __pyx_v_self->format;
  } else {
    __pyx_t_2 = NULL;
  }
  __pyx_v_info->format = __pyx_t_2;

  /* "View.MemoryView":208
 *         info.readonly = 0
 *         info.format = self.format if flags & PyBUF_FORMAT else NULL
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(array self):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":182
 *             _allocate_buffer(self)
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         cdef int bufmode = -1
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":210
 *         info.obj = self
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

/* Python wrapper */
static void __pyx_array___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_array___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_array___pyx_pf_15View_dot_MemoryView_5array_4__dealloc__(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":211
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 */
  __pyx_t_1 = (__pyx_v_self->callback_free_data != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":212
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)             # <<<<<<<<<<<<<<
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:
 */
    __pyx_v_self->callback_free_data(__pyx_v_self->data);

    /* "View.MemoryView":211
 * 
 *     def __dealloc__(array self):
 *         if self.callback_free_data != NULL:             # <<<<<<<<<<<<<<
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":213
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 */
  if (__pyx_v_self->free_data) {
  } else {
    __pyx_t_1 = __pyx_v_self->free_data;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_self->data != NULL);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":214
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 */
    if (__pyx_v_self->dtype_is_object) {

      /* "View.MemoryView":215
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)             # <<<<<<<<<<<<<<
 *             free(self.data)
 *         PyObject_Free(self._shape)
 */
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_self->data, __pyx_v_self->_shape, __pyx_v_self->_strides, __pyx_v_self->ndim, 0);

      /* "View.MemoryView":214
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 */
    }

    /* "View.MemoryView":216
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)             # <<<<<<<<<<<<<<
 *         PyObject_Free(self._shape)
 * 
 */
    free(__pyx_v_self->data);

    /* "View.MemoryView":213
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 *         elif self.free_data and self.data is not NULL:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":217
 *                 refcount_objects_in_slice(self.data, self._shape, self._strides, self.ndim, inc=False)
 *             free(self.data)
 *         PyObject_Free(self._shape)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  PyObject_Free(__pyx_v_self->_shape);

  /* "View.MemoryView":210
 *         info.obj = self
 * 
 *     def __dealloc__(array self):             # <<<<<<<<<<<<<<
 *         if self.callback_free_data != NULL:
 *             self.callback_free_data(self.data)
 */

  /* function exit code */
}

/* "View.MemoryView":219
 *         PyObject_Free(self._shape)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memview(self):
 *         return self.get_memview()
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_5array_7memview___get__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_5array_7memview___get__(struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":221
 *     @property
 *     def memview(self):
 *         return self.get_memview()             # <<<<<<<<<<<<<<
 * 
 *     @cname('get_memview')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_array *)__pyx_v_self->__pyx_vtab)->get_memview(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":219
 *         PyObject_Free(self._shape)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def memview(self):
 *         return self.get_memview()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.memview.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

static PyObject *__pyx_array_get_memview(struct __pyx_array_obj *__pyx_v_self) {
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_memview", 1);

  /* "View.MemoryView":225
 *     @cname('get_memview')
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE             # <<<<<<<<<<<<<<
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 */
  __pyx_v_flags = ((PyBUF_ANY_CONTIGUOUS | PyBUF_FORMAT) | PyBUF_WRITABLE);

  /* "View.MemoryView":226
 *     cdef get_memview(self):
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self))) __PYX_ERR(2, 226, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(2, 226, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":224
 * 
 *     @cname('get_memview')
 *     cdef get_memview(self):             # <<<<<<<<<<<<<<
 *         flags =  PyBUF_ANY_CONTIGUOUS|PyBUF_FORMAT|PyBUF_WRITABLE
 *         return  memoryview(self, flags, self.dtype_is_object)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.array.get_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":228
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_array___len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_array___pyx_pf_15View_dot_MemoryView_5array_6__len__(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;

  /* "View.MemoryView":229
 * 
 *     def __len__(self):
 *         return self._shape[0]             # <<<<<<<<<<<<<<
 * 
 *     def __getattr__(self, attr):
 */
  __pyx_r = (__pyx_v_self->_shape[0]);
  goto __pyx_L0;

  /* "View.MemoryView":228
 *         return  memoryview(self, flags, self.dtype_is_object)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self._shape[0]
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":231
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr); /*proto*/
static PyObject *__pyx_array___getattr__(PyObject *__pyx_v_self, PyObject *__pyx_v_attr) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getattr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_attr));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_8__getattr__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_attr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getattr__", 1);

  /* "View.MemoryView":232
 * 
 *     def __getattr__(self, attr):
 *         return getattr(self.memview, attr)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, item):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetAttr(__pyx_t_1, __pyx_v_attr); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":231
 *         return self._shape[0]
 * 
 *     def __getattr__(self, attr):             # <<<<<<<<<<<<<<
 *         return getattr(self.memview, attr)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getattr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":234
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item); /*proto*/
static PyObject *__pyx_array___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_array___pyx_pf_15View_dot_MemoryView_5array_10__getitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "View.MemoryView":235
 * 
 *     def __getitem__(self, item):
 *         return self.memview[item]             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, item, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_item); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":234
 *         return getattr(self.memview, attr)
 * 
 *     def __getitem__(self, item):             # <<<<<<<<<<<<<<
 *         return self.memview[item]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.array.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":237
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

/* Python wrapper */
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value); /*proto*/
static int __pyx_array___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(((struct __pyx_array_obj *)__pyx_v_self), ((PyObject *)__pyx_v_item), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_array___pyx_pf_15View_dot_MemoryView_5array_12__setitem__(struct __pyx_array_obj *__pyx_v_self, PyObject *__pyx_v_item, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 1);

  /* "View.MemoryView":238
 * 
 *     def __setitem__(self, item, value):
 *         self.memview[item] = value             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_memview); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyObject_SetItem(__pyx_t_1, __pyx_v_item, __pyx_v_value) < 0))) __PYX_ERR(2, 238, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":237
 *         return self.memview[item]
 * 
 *     def __setitem__(self, item, value):             # <<<<<<<<<<<<<<
 *         self.memview[item] = value
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.array.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_array_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf___pyx_array___reduce_cython__(((struct __pyx_array_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array___reduce_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_array_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_array_2__setstate_cython__(((struct __pyx_array_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_array_2__setstate_cython__(CYTHON_UNUSED struct __pyx_array_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.array.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":248
 * 
 * @cname("__pyx_array_allocate_buffer")
 * cdef int _allocate_buffer(array self) except -1:             # <<<<<<<<<<<<<<
 * 
 * 
 */

static int __pyx_array_allocate_buffer(struct __pyx_array_obj *__pyx_v_self) {
  Py_ssize_t __pyx_v_i;
  PyObject **__pyx_v_p;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":254
 *     cdef PyObject **p
 * 
 *     self.free_data = True             # <<<<<<<<<<<<<<
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:
 */
  __pyx_v_self->free_data = 1;

  /* "View.MemoryView":255
 * 
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)             # <<<<<<<<<<<<<<
 *     if not self.data:
 *         raise MemoryError, "unable to allocate array data."
 */
  __pyx_v_self->data = ((char *)malloc(__pyx_v_self->len));

  /* "View.MemoryView":256
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:             # <<<<<<<<<<<<<<
 *         raise MemoryError, "unable to allocate array data."
 * 
 */
  __pyx_t_1 = (!(__pyx_v_self->data != 0));
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":257
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:
 *         raise MemoryError, "unable to allocate array data."             # <<<<<<<<<<<<<<
 * 
 *     if self.dtype_is_object:
 */
    __Pyx_Raise(__pyx_builtin_MemoryError, __pyx_kp_s_unable_to_allocate_array_data, 0, 0);
    __PYX_ERR(2, 257, __pyx_L1_error)

    /* "View.MemoryView":256
 *     self.free_data = True
 *     self.data = <char *>malloc(self.len)
 *     if not self.data:             # <<<<<<<<<<<<<<
 *         raise MemoryError, "unable to allocate array data."
 * 
 */
  }

  /* "View.MemoryView":259
 *         raise MemoryError, "unable to allocate array data."
 * 
 *     if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 */
  if (__pyx_v_self->dtype_is_object) {

    /* "View.MemoryView":260
 * 
 *     if self.dtype_is_object:
 *         p = <PyObject **> self.data             # <<<<<<<<<<<<<<
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None
 */
    __pyx_v_p = ((PyObject **)__pyx_v_self->data);

    /* "View.MemoryView":261
 *     if self.dtype_is_object:
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):             # <<<<<<<<<<<<<<
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)
 */
    if (unlikely(__pyx_v_self->itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(2, 261, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_self->itemsize == (Py_ssize_t)-1)  && unlikely(__Pyx_UNARY_NEG_WOULD_OVERFLOW(__pyx_v_self->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(2, 261, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_div_Py_ssize_t(__pyx_v_self->len, __pyx_v_self->itemsize);
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":262
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None             # <<<<<<<<<<<<<<
 *             Py_INCREF(Py_None)
 *     return 0
 */
      (__pyx_v_p[__pyx_v_i]) = Py_None;

      /* "View.MemoryView":263
 *         for i in range(self.len // self.itemsize):
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
      Py_INCREF(Py_None);
    }

    /* "View.MemoryView":259
 *         raise MemoryError, "unable to allocate array data."
 * 
 *     if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *         p = <PyObject **> self.data
 *         for i in range(self.len // self.itemsize):
 */
  }

  /* "View.MemoryView":264
 *             p[i] = Py_None
 *             Py_INCREF(Py_None)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":248
 * 
 * @cname("__pyx_array_allocate_buffer")
 * cdef int _allocate_buffer(array self) except -1:             # <<<<<<<<<<<<<<
 * 
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._allocate_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":268
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):             # <<<<<<<<<<<<<<
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 */

static struct __pyx_array_obj *__pyx_array_new(PyObject *__pyx_v_shape, Py_ssize_t __pyx_v_itemsize, char *__pyx_v_format, char *__pyx_v_c_mode, char *__pyx_v_buf) {
  struct __pyx_array_obj *__pyx_v_result = 0;
  PyObject *__pyx_v_mode = 0;
  struct __pyx_array_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("array_cwrapper", 1);

  /* "View.MemoryView":270
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.             # <<<<<<<<<<<<<<
 * 
 *     if buf is NULL:
 */
  __pyx_t_2 = ((__pyx_v_c_mode[0]) == 'f');
  if (__pyx_t_2) {
    __Pyx_INCREF(__pyx_n_s_fortran);
    __pyx_t_1 = __pyx_n_s_fortran;
  } else {
    __Pyx_INCREF(__pyx_n_s_c);
    __pyx_t_1 = __pyx_n_s_c;
  }
  __pyx_v_mode = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":272
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 * 
 *     if buf is NULL:             # <<<<<<<<<<<<<<
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 */
  __pyx_t_2 = (__pyx_v_buf == NULL);
  if (__pyx_t_2) {

    /* "View.MemoryView":273
 * 
 *     if buf is NULL:
 *         result = array.__new__(array, shape, itemsize, format, mode)             # <<<<<<<<<<<<<<
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)
 */
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_shape)) __PYX_ERR(2, 273, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(2, 273, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3)) __PYX_ERR(2, 273, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_v_mode)) __PYX_ERR(2, 273, __pyx_L1_error);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_array(((PyTypeObject *)__pyx_array_type), __pyx_t_4, NULL)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 273, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":272
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 * 
 *     if buf is NULL:             # <<<<<<<<<<<<<<
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":275
 *         result = array.__new__(array, shape, itemsize, format, mode)
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)             # <<<<<<<<<<<<<<
 *         result.data = buf
 * 
 */
  /*else*/ {
    __pyx_t_3 = PyInt_FromSsize_t(__pyx_v_itemsize); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_format); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_shape);
    __Pyx_GIVEREF(__pyx_v_shape);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_shape)) __PYX_ERR(2, 275, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3)) __PYX_ERR(2, 275, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_4)) __PYX_ERR(2, 275, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_mode);
    __Pyx_GIVEREF(__pyx_v_mode);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_mode)) __PYX_ERR(2, 275, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_allocate_buffer, Py_False) < 0) __PYX_ERR(2, 275, __pyx_L1_error)
    __pyx_t_3 = ((PyObject *)__pyx_tp_new_array(((PyTypeObject *)__pyx_array_type), __pyx_t_1, __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 275, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_result = ((struct __pyx_array_obj *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":276
 *     else:
 *         result = array.__new__(array, shape, itemsize, format, mode, allocate_buffer=False)
 *         result.data = buf             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
    __pyx_v_result->data = __pyx_v_buf;
  }
  __pyx_L3:;

  /* "View.MemoryView":278
 *         result.data = buf
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":268
 * 
 * @cname("__pyx_array_new")
 * cdef array array_cwrapper(tuple shape, Py_ssize_t itemsize, char *format, char *c_mode, char *buf):             # <<<<<<<<<<<<<<
 *     cdef array result
 *     cdef str mode = "fortran" if c_mode[0] == b'f' else "c"  # this often comes from a constant C string.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.array_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_mode);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":304
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

/* Python wrapper */
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_MemviewEnum___init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_name = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_name,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_name)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 304, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(2, 304, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_name = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 304, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.Enum.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v_name);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum___init__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v_name) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 1);

  /* "View.MemoryView":305
 *     cdef object name
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.name
 */
  __Pyx_INCREF(__pyx_v_name);
  __Pyx_GIVEREF(__pyx_v_name);
  __Pyx_GOTREF(__pyx_v_self->name);
  __Pyx_DECREF(__pyx_v_self->name);
  __pyx_v_self->name = __pyx_v_name;

  /* "View.MemoryView":304
 * cdef class Enum(object):
 *     cdef object name
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *     def __repr__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":306
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

/* Python wrapper */
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_MemviewEnum___repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_MemviewEnum___pyx_pf_15View_dot_MemoryView_4Enum_2__repr__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "View.MemoryView":307
 *         self.name = name
 *     def __repr__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->name);
  __pyx_r = __pyx_v_self->name;
  goto __pyx_L0;

  /* "View.MemoryView":306
 *     def __init__(self, name):
 *         self.name = name
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf___pyx_MemviewEnum___reduce_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum___reduce_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self.name,)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_self->name);
  __Pyx_GIVEREF(__pyx_v_self->name);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_self->name)) __PYX_ERR(2, 5, __pyx_L1_error);
  __pyx_v_state = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_1 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v__dict = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_2 = (__pyx_v__dict != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v__dict)) __PYX_ERR(2, 8, __pyx_L1_error);
    __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self.name is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self.name,)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self.name is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_self->name != Py_None);
    __pyx_v_use_setstate = __pyx_t_2;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 */
  if (__pyx_v_use_setstate) {

    /* "(tree fragment)":13
 *         use_setstate = self.name is not None
 *     if use_setstate:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_136983863);
    __Pyx_GIVEREF(__pyx_int_136983863);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_136983863)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, Py_None)) __PYX_ERR(2, 13, __pyx_L1_error);
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1)) __PYX_ERR(2, 13, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_v_state)) __PYX_ERR(2, 13, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self.name is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, None), state
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_pyx_unpickle_Enum); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))))) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_int_136983863);
    __Pyx_GIVEREF(__pyx_int_136983863);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_int_136983863)) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_state)) __PYX_ERR(2, 15, __pyx_L1_error);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4)) __PYX_ERR(2, 15, __pyx_L1_error);
    __Pyx_GIVEREF(__pyx_t_1);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(2, 15, __pyx_L1_error);
    __pyx_t_4 = 0;
    __pyx_t_1 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.Enum.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_MemviewEnum_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 16, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_MemviewEnum_2__setstate_cython__(((struct __pyx_MemviewEnum_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_MemviewEnum_2__setstate_cython__(struct __pyx_MemviewEnum_obj *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(2, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_unpickle_Enum__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_Enum, (type(self), 0x82a3537, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_Enum__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.Enum.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":349
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

/* Python wrapper */
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_memoryview___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_obj = 0;
  int __pyx_v_flags;
  int __pyx_v_dtype_is_object;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_obj,&__pyx_n_s_flags,&__pyx_n_s_dtype_is_object,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_obj)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 349, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_flags)) != 0)) {
          (void)__Pyx_Arg_NewRef_VARARGS(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 349, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, 1); __PYX_ERR(2, 349, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_dtype_is_object);
          if (value) { values[2] = __Pyx_Arg_NewRef_VARARGS(value); kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 349, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__cinit__") < 0)) __PYX_ERR(2, 349, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_obj = values[0];
    __pyx_v_flags = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_flags == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 349, __pyx_L3_error)
    if (values[2]) {
      __pyx_v_dtype_is_object = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_dtype_is_object == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 349, __pyx_L3_error)
    } else {
      __pyx_v_dtype_is_object = ((int)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 2, 3, __pyx_nargs); __PYX_ERR(2, 349, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_obj, __pyx_v_flags, __pyx_v_dtype_is_object);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_VARARGS(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview___cinit__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj, int __pyx_v_flags, int __pyx_v_dtype_is_object) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_intptr_t __pyx_t_4;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 1);

  /* "View.MemoryView":350
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj             # <<<<<<<<<<<<<<
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 */
  __Pyx_INCREF(__pyx_v_obj);
  __Pyx_GIVEREF(__pyx_v_obj);
  __Pyx_GOTREF(__pyx_v_self->obj);
  __Pyx_DECREF(__pyx_v_self->obj);
  __pyx_v_self->obj = __pyx_v_obj;

  /* "View.MemoryView":351
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):
 *         self.obj = obj
 *         self.flags = flags             # <<<<<<<<<<<<<<
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 */
  __pyx_v_self->flags = __pyx_v_flags;

  /* "View.MemoryView":352
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  __pyx_t_2 = (((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))) == ((PyObject *)__pyx_memoryview_type));
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_obj != Py_None);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "View.MemoryView":353
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)             # <<<<<<<<<<<<<<
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 */
    __pyx_t_3 = __Pyx_GetBuffer(__pyx_v_obj, (&__pyx_v_self->view), __pyx_v_flags); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 353, __pyx_L1_error)

    /* "View.MemoryView":354
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    __pyx_t_1 = (((PyObject *)__pyx_v_self->view.obj) == NULL);
    if (__pyx_t_1) {

      /* "View.MemoryView":355
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None             # <<<<<<<<<<<<<<
 *                 Py_INCREF(Py_None)
 * 
 */
      ((Py_buffer *)(&__pyx_v_self->view))->obj = Py_None;

      /* "View.MemoryView":356
 *             if <PyObject *> self.view.obj == NULL:
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 */
      Py_INCREF(Py_None);

      /* "View.MemoryView":354
 *         if type(self) is memoryview or obj is not None:
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:             # <<<<<<<<<<<<<<
 *                 (<__pyx_buffer *> &self.view).obj = Py_None
 *                 Py_INCREF(Py_None)
 */
    }

    /* "View.MemoryView":352
 *         self.obj = obj
 *         self.flags = flags
 *         if type(self) is memoryview or obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_GetBuffer(obj, &self.view, flags)
 *             if <PyObject *> self.view.obj == NULL:
 */
  }

  /* "View.MemoryView":358
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 */
  __pyx_t_1 = (!__PYX_CYTHON_ATOMICS_ENABLED());
  if (__pyx_t_1) {

    /* "View.MemoryView":360
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    __pyx_t_1 = (__pyx_memoryview_thread_locks_used < 8);
    if (__pyx_t_1) {

      /* "View.MemoryView":361
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]             # <<<<<<<<<<<<<<
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 */
      __pyx_v_self->lock = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);

      /* "View.MemoryView":362
 *             if __pyx_memoryview_thread_locks_used < 8:
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1             # <<<<<<<<<<<<<<
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 */
      __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used + 1);

      /* "View.MemoryView":360
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:             # <<<<<<<<<<<<<<
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 */
    }

    /* "View.MemoryView":363
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    __pyx_t_1 = (__pyx_v_self->lock == NULL);
    if (__pyx_t_1) {

      /* "View.MemoryView":364
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()             # <<<<<<<<<<<<<<
 *                 if self.lock is NULL:
 *                     raise MemoryError
 */
      __pyx_v_self->lock = PyThread_allocate_lock();

      /* "View.MemoryView":365
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      __pyx_t_1 = (__pyx_v_self->lock == NULL);
      if (unlikely(__pyx_t_1)) {

        /* "View.MemoryView":366
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 *                     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
        PyErr_NoMemory(); __PYX_ERR(2, 366, __pyx_L1_error)

        /* "View.MemoryView":365
 *             if self.lock is NULL:
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                     raise MemoryError
 * 
 */
      }

      /* "View.MemoryView":363
 *                 self.lock = __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]
 *                 __pyx_memoryview_thread_locks_used += 1
 *             if self.lock is NULL:             # <<<<<<<<<<<<<<
 *                 self.lock = PyThread_allocate_lock()
 *                 if self.lock is NULL:
 */
    }

    /* "View.MemoryView":358
 *                 Py_INCREF(Py_None)
 * 
 *         if not __PYX_CYTHON_ATOMICS_ENABLED():             # <<<<<<<<<<<<<<
 *             global __pyx_memoryview_thread_locks_used
 *             if __pyx_memoryview_thread_locks_used < 8:
 */
  }

  /* "View.MemoryView":368
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":369
 * 
 *         if flags & PyBUF_FORMAT:
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')             # <<<<<<<<<<<<<<
 *         else:
 *             self.dtype_is_object = dtype_is_object
 */
    __pyx_t_2 = ((__pyx_v_self->view.format[0]) == 'O');
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L12_bool_binop_done;
    }
    __pyx_t_2 = ((__pyx_v_self->view.format[1]) == '\x00');
    __pyx_t_1 = __pyx_t_2;
    __pyx_L12_bool_binop_done:;
    __pyx_v_self->dtype_is_object = __pyx_t_1;

    /* "View.MemoryView":368
 *                     raise MemoryError
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 */
    goto __pyx_L11;
  }

  /* "View.MemoryView":371
 *             self.dtype_is_object = (self.view.format[0] == b'O' and self.view.format[1] == b'\0')
 *         else:
 *             self.dtype_is_object = dtype_is_object             # <<<<<<<<<<<<<<
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0
 */
  /*else*/ {
    __pyx_v_self->dtype_is_object = __pyx_v_dtype_is_object;
  }
  __pyx_L11:;

  /* "View.MemoryView":373
 *             self.dtype_is_object = dtype_is_object
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0             # <<<<<<<<<<<<<<
 *         self.typeinfo = NULL
 * 
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_4 = ((Py_intptr_t)((void *)(&__pyx_v_self->acquisition_count)));
    __pyx_t_5 = (sizeof(__pyx_atomic_int_type));
    if (unlikely(__pyx_t_5 == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(2, 373, __pyx_L1_error)
    }
    __pyx_t_1 = ((__pyx_t_4 % __pyx_t_5) == 0);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(2, 373, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(2, 373, __pyx_L1_error)
  #endif

  /* "View.MemoryView":374
 * 
 *         assert <Py_intptr_t><void*>(&self.acquisition_count) % sizeof(__pyx_atomic_int_type) == 0
 *         self.typeinfo = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(memoryview self):
 */
  __pyx_v_self->typeinfo = NULL;

  /* "View.MemoryView":349
 *     cdef __Pyx_TypeInfo *typeinfo
 * 
 *     def __cinit__(memoryview self, object obj, int flags, bint dtype_is_object=False):             # <<<<<<<<<<<<<<
 *         self.obj = obj
 *         self.flags = flags
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":376
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

/* Python wrapper */
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryview___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_2__dealloc__(struct __pyx_memoryview_obj *__pyx_v_self) {
  int __pyx_v_i;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyThread_type_lock __pyx_t_5;
  PyThread_type_lock __pyx_t_6;

  /* "View.MemoryView":377
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
  __pyx_t_1 = (__pyx_v_self->obj != Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":378
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)             # <<<<<<<<<<<<<<
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 */
    __Pyx_ReleaseBuffer((&__pyx_v_self->view));

    /* "View.MemoryView":377
 * 
 *     def __dealloc__(memoryview self):
 *         if self.obj is not None:             # <<<<<<<<<<<<<<
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":379
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  __pyx_t_1 = (((Py_buffer *)(&__pyx_v_self->view))->obj == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":381
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL             # <<<<<<<<<<<<<<
 *             Py_DECREF(Py_None)
 * 
 */
    ((Py_buffer *)(&__pyx_v_self->view))->obj = NULL;

    /* "View.MemoryView":382
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 *             Py_DECREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *         cdef int i
 */
    Py_DECREF(Py_None);

    /* "View.MemoryView":379
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 *         elif (<__pyx_buffer *> &self.view).obj == Py_None:             # <<<<<<<<<<<<<<
 * 
 *             (<__pyx_buffer *> &self.view).obj = NULL
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":386
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  __pyx_t_1 = (__pyx_v_self->lock != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":387
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):             # <<<<<<<<<<<<<<
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 */
    __pyx_t_2 = __pyx_memoryview_thread_locks_used;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":388
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      __pyx_t_1 = ((__pyx_memoryview_thread_locks[__pyx_v_i]) == __pyx_v_self->lock);
      if (__pyx_t_1) {

        /* "View.MemoryView":389
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1             # <<<<<<<<<<<<<<
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 */
        __pyx_memoryview_thread_locks_used = (__pyx_memoryview_thread_locks_used - 1);

        /* "View.MemoryView":390
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        __pyx_t_1 = (__pyx_v_i != __pyx_memoryview_thread_locks_used);
        if (__pyx_t_1) {

          /* "View.MemoryView":392
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])             # <<<<<<<<<<<<<<
 *                     break
 *             else:
 */
          __pyx_t_5 = (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]);
          __pyx_t_6 = (__pyx_memoryview_thread_locks[__pyx_v_i]);

          /* "View.MemoryView":391
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (             # <<<<<<<<<<<<<<
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break
 */
          (__pyx_memoryview_thread_locks[__pyx_v_i]) = __pyx_t_5;
          (__pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used]) = __pyx_t_6;

          /* "View.MemoryView":390
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:             # <<<<<<<<<<<<<<
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 */
        }

        /* "View.MemoryView":393
 *                         __pyx_memoryview_thread_locks[i], __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used] = (
 *                             __pyx_memoryview_thread_locks[__pyx_memoryview_thread_locks_used], __pyx_memoryview_thread_locks[i])
 *                     break             # <<<<<<<<<<<<<<
 *             else:
 *                 PyThread_free_lock(self.lock)
 */
        goto __pyx_L6_break;

        /* "View.MemoryView":388
 *         if self.lock != NULL:
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:             # <<<<<<<<<<<<<<
 *                     __pyx_memoryview_thread_locks_used -= 1
 *                     if i != __pyx_memoryview_thread_locks_used:
 */
      }
    }
    /*else*/ {

      /* "View.MemoryView":395
 *                     break
 *             else:
 *                 PyThread_free_lock(self.lock)             # <<<<<<<<<<<<<<
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 */
      PyThread_free_lock(__pyx_v_self->lock);
    }
    __pyx_L6_break:;

    /* "View.MemoryView":386
 *         cdef int i
 *         global __pyx_memoryview_thread_locks_used
 *         if self.lock != NULL:             # <<<<<<<<<<<<<<
 *             for i in range(__pyx_memoryview_thread_locks_used):
 *                 if __pyx_memoryview_thread_locks[i] is self.lock:
 */
  }

  /* "View.MemoryView":376
 *         self.typeinfo = NULL
 * 
 *     def __dealloc__(memoryview self):             # <<<<<<<<<<<<<<
 *         if self.obj is not None:
 *             __Pyx_ReleaseBuffer(&self.view)
 */

  /* function exit code */
}

/* "View.MemoryView":397
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

static char *__pyx_memoryview_get_item_pointer(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  Py_ssize_t __pyx_v_dim;
  char *__pyx_v_itemp;
  PyObject *__pyx_v_idx = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  char *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_item_pointer", 1);

  /* "View.MemoryView":399
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf             # <<<<<<<<<<<<<<
 * 
 *         for dim, idx in enumerate(index):
 */
  __pyx_v_itemp = ((char *)__pyx_v_self->view.buf);

  /* "View.MemoryView":401
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_v_index)) || PyTuple_CheckExact(__pyx_v_index)) {
    __pyx_t_2 = __pyx_v_index; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 401, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(2, 401, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(2, 401, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(2, 401, __pyx_L1_error)
          #endif
          if (__pyx_t_3 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(2, 401, __pyx_L1_error)
        #else
        __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 401, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_v_dim = __pyx_t_1;
    __pyx_t_1 = (__pyx_t_1 + 1);

    /* "View.MemoryView":402
 * 
 *         for dim, idx in enumerate(index):
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)             # <<<<<<<<<<<<<<
 * 
 *         return itemp
 */
    __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_v_idx); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 402, __pyx_L1_error)
    __pyx_t_7 = __pyx_pybuffer_index((&__pyx_v_self->view), __pyx_v_itemp, __pyx_t_6, __pyx_v_dim); if (unlikely(__pyx_t_7 == ((char *)NULL))) __PYX_ERR(2, 402, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_7;

    /* "View.MemoryView":401
 *         cdef char *itemp = <char *> self.view.buf
 * 
 *         for dim, idx in enumerate(index):             # <<<<<<<<<<<<<<
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":404
 *             itemp = pybuffer_index(&self.view, itemp, idx, dim)
 * 
 *         return itemp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_itemp;
  goto __pyx_L0;

  /* "View.MemoryView":397
 *                 PyThread_free_lock(self.lock)
 * 
 *     cdef char *get_item_pointer(memoryview self, object index) except NULL:             # <<<<<<<<<<<<<<
 *         cdef Py_ssize_t dim
 *         cdef char *itemp = <char *> self.view.buf
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.get_item_pointer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":407
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_memoryview___getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_4__getitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_indices = NULL;
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 1);

  /* "View.MemoryView":408
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  __pyx_t_1 = (__pyx_v_index == __pyx_builtin_Ellipsis);
  if (__pyx_t_1) {

    /* "View.MemoryView":409
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:
 *             return self             # <<<<<<<<<<<<<<
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __pyx_r = ((PyObject *)__pyx_v_self);
    goto __pyx_L0;

    /* "View.MemoryView":408
 * 
 *     def __getitem__(memoryview self, object index):
 *         if index is Ellipsis:             # <<<<<<<<<<<<<<
 *             return self
 * 
 */
  }

  /* "View.MemoryView":411
 *             return self
 * 
 *         have_slices, indices = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         cdef char *itemp
 */
  __pyx_t_2 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(__pyx_t_2 != Py_None)) {
    PyObject* sequence = __pyx_t_2;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 411, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    #else
    __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 411, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 411, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_indices = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "View.MemoryView":414
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(2, 414, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "View.MemoryView":415
 *         cdef char *itemp
 *         if have_slices:
 *             return memview_slice(self, indices)             # <<<<<<<<<<<<<<
 *         else:
 *             itemp = self.get_item_pointer(indices)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((PyObject *)__pyx_memview_slice(__pyx_v_self, __pyx_v_indices)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":414
 * 
 *         cdef char *itemp
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             return memview_slice(self, indices)
 *         else:
 */
  }

  /* "View.MemoryView":417
 *             return memview_slice(self, indices)
 *         else:
 *             itemp = self.get_item_pointer(indices)             # <<<<<<<<<<<<<<
 *             return self.convert_item_to_object(itemp)
 * 
 */
  /*else*/ {
    __pyx_t_5 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_indices); if (unlikely(__pyx_t_5 == ((char *)NULL))) __PYX_ERR(2, 417, __pyx_L1_error)
    __pyx_v_itemp = __pyx_t_5;

    /* "View.MemoryView":418
 *         else:
 *             itemp = self.get_item_pointer(indices)
 *             return self.convert_item_to_object(itemp)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(memoryview self, object index, object value):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->convert_item_to_object(__pyx_v_self, __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":407
 * 
 * 
 *     def __getitem__(memoryview self, object index):             # <<<<<<<<<<<<<<
 *         if index is Ellipsis:
 *             return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_indices);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":420
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"
 */

/* Python wrapper */
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_memoryview___setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_6__setitem__(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_have_slices = NULL;
  PyObject *__pyx_v_obj = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setitem__", 0);
  __Pyx_INCREF(__pyx_v_index);

  /* "View.MemoryView":421
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 */
  if (unlikely(__pyx_v_self->view.readonly)) {

    /* "View.MemoryView":422
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"             # <<<<<<<<<<<<<<
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 */
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_Cannot_assign_to_read_only_memor, 0, 0);
    __PYX_ERR(2, 422, __pyx_L1_error)

    /* "View.MemoryView":421
 * 
 *     def __setitem__(memoryview self, object index, object value):
 *         if self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 */
  }

  /* "View.MemoryView":424
 *             raise TypeError, "Cannot assign to read-only memoryview"
 * 
 *         have_slices, index = _unellipsify(index, self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *         if have_slices:
 */
  __pyx_t_1 = _unellipsify(__pyx_v_index, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(2, 424, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(2, 424, __pyx_L1_error)
  }
  __pyx_v_have_slices = __pyx_t_2;
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_index, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "View.MemoryView":426
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj is not None:
 */
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_v_have_slices); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(2, 426, __pyx_L1_error)
  if (__pyx_t_4) {

    /* "View.MemoryView":427
 * 
 *         if have_slices:
 *             obj = self.is_slice(value)             # <<<<<<<<<<<<<<
 *             if obj is not None:
 *                 self.setitem_slice_assignment(self[index], obj)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->is_slice(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_obj = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "View.MemoryView":428
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj is not None:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
    __pyx_t_4 = (__pyx_v_obj != Py_None);
    if (__pyx_t_4) {

      /* "View.MemoryView":429
 *             obj = self.is_slice(value)
 *             if obj is not None:
 *                 self.setitem_slice_assignment(self[index], obj)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)
 */
      __pyx_t_1 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assignment(__pyx_v_self, __pyx_t_1, __pyx_v_obj); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 429, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "View.MemoryView":428
 *         if have_slices:
 *             obj = self.is_slice(value)
 *             if obj is not None:             # <<<<<<<<<<<<<<
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":431
 *                 self.setitem_slice_assignment(self[index], obj)
 *             else:
 *                 self.setitem_slice_assign_scalar(self[index], value)             # <<<<<<<<<<<<<<
 *         else:
 *             self.setitem_indexed(index, value)
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_memoryview_type))))) __PYX_ERR(2, 431, __pyx_L1_error)
      __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_slice_assign_scalar(__pyx_v_self, ((struct __pyx_memoryview_obj *)__pyx_t_3), __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "View.MemoryView":426
 *         have_slices, index = _unellipsify(index, self.view.ndim)
 * 
 *         if have_slices:             # <<<<<<<<<<<<<<
 *             obj = self.is_slice(value)
 *             if obj is not None:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":433
 *                 self.setitem_slice_assign_scalar(self[index], value)
 *         else:
 *             self.setitem_indexed(index, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef is_slice(self, obj):
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->setitem_indexed(__pyx_v_self, __pyx_v_index, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 433, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "View.MemoryView":420
 *             return self.convert_item_to_object(itemp)
 * 
 *     def __setitem__(memoryview self, object index, object value):             # <<<<<<<<<<<<<<
 *         if self.view.readonly:
 *             raise TypeError, "Cannot assign to read-only memoryview"
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_have_slices);
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":435
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

static PyObject *__pyx_memoryview_is_slice(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_slice", 0);
  __Pyx_INCREF(__pyx_v_obj);

  /* "View.MemoryView":436
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_obj, __pyx_memoryview_type); 
  __pyx_t_2 = (!__pyx_t_1);
  if (__pyx_t_2) {

    /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "View.MemoryView":438
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_6 = __Pyx_PyInt_From_int(((__pyx_v_self->flags & (~PyBUF_WRITABLE)) | PyBUF_ANY_CONTIGUOUS)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 438, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "View.MemoryView":439
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)             # <<<<<<<<<<<<<<
 *             except TypeError:
 *                 return None
 */
        __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_self->dtype_is_object); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 439, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "View.MemoryView":438
 *         if not isinstance(obj, memoryview):
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,             # <<<<<<<<<<<<<<
 *                                  self.dtype_is_object)
 *             except TypeError:
 */
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 438, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_v_obj);
        __Pyx_GIVEREF(__pyx_v_obj);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_obj)) __PYX_ERR(2, 438, __pyx_L4_error);
        __Pyx_GIVEREF(__pyx_t_6);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6)) __PYX_ERR(2, 438, __pyx_L4_error);
        __Pyx_GIVEREF(__pyx_t_7);
        if (__Pyx_PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_7)) __PYX_ERR(2, 438, __pyx_L4_error);
        __pyx_t_6 = 0;
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_8, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 438, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF_SET(__pyx_v_obj, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      }
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L9_try_end;
      __pyx_L4_error:;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "View.MemoryView":440
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 *             except TypeError:             # <<<<<<<<<<<<<<
 *                 return None
 * 
 */
      __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
      if (__pyx_t_9) {
        __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_6) < 0) __PYX_ERR(2, 440, __pyx_L6_except_error)
        __Pyx_XGOTREF(__pyx_t_7);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_6);

        /* "View.MemoryView":441
 *                                  self.dtype_is_object)
 *             except TypeError:
 *                 return None             # <<<<<<<<<<<<<<
 * 
 *         return obj
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_except_return;
      }
      goto __pyx_L6_except_error;

      /* "View.MemoryView":437
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):
 *             try:             # <<<<<<<<<<<<<<
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 *                                  self.dtype_is_object)
 */
      __pyx_L6_except_error:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L7_except_return:;
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
      __pyx_L9_try_end:;
    }

    /* "View.MemoryView":436
 * 
 *     cdef is_slice(self, obj):
 *         if not isinstance(obj, memoryview):             # <<<<<<<<<<<<<<
 *             try:
 *                 obj = memoryview(obj, self.flags & ~PyBUF_WRITABLE | PyBUF_ANY_CONTIGUOUS,
 */
  }

  /* "View.MemoryView":443
 *                 return None
 * 
 *         return obj             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assignment(self, dst, src):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_obj);
  __pyx_r = __pyx_v_obj;
  goto __pyx_L0;

  /* "View.MemoryView":435
 *             self.setitem_indexed(index, value)
 * 
 *     cdef is_slice(self, obj):             # <<<<<<<<<<<<<<
 *         if not isinstance(obj, memoryview):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_obj);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":445
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

static PyObject *__pyx_memoryview_setitem_slice_assignment(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_dst, PyObject *__pyx_v_src) {
  __Pyx_memviewslice __pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_src_slice;
  __Pyx_memviewslice __pyx_v_msrc;
  __Pyx_memviewslice __pyx_v_mdst;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assignment", 1);

  /* "View.MemoryView":448
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 *         cdef __Pyx_memviewslice msrc = get_slice_from_memview(src, &src_slice)[0]             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]
 * 
 */
  if (!(likely(((__pyx_v_src) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_src, __pyx_memoryview_type))))) __PYX_ERR(2, 448, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_src), (&__pyx_v_src_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 448, __pyx_L1_error)
  __pyx_v_msrc = (__pyx_t_1[0]);

  /* "View.MemoryView":449
 *         cdef __Pyx_memviewslice src_slice
 *         cdef __Pyx_memviewslice msrc = get_slice_from_memview(src, &src_slice)[0]
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]             # <<<<<<<<<<<<<<
 * 
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 */
  if (!(likely(((__pyx_v_dst) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_dst, __pyx_memoryview_type))))) __PYX_ERR(2, 449, __pyx_L1_error)
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(((struct __pyx_memoryview_obj *)__pyx_v_dst), (&__pyx_v_dst_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 449, __pyx_L1_error)
  __pyx_v_mdst = (__pyx_t_1[0]);

  /* "View.MemoryView":451
 *         cdef __Pyx_memviewslice mdst = get_slice_from_memview(dst, &dst_slice)[0]
 * 
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_src, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_dst, __pyx_n_s_ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __pyx_memoryview_copy_contents(__pyx_v_msrc, __pyx_v_mdst, __pyx_t_3, __pyx_t_4, __pyx_v_self->dtype_is_object); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 451, __pyx_L1_error)

  /* "View.MemoryView":445
 *         return obj
 * 
 *     cdef setitem_slice_assignment(self, dst, src):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice dst_slice
 *         cdef __Pyx_memviewslice src_slice
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assignment", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":453
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

static PyObject *__pyx_memoryview_setitem_slice_assign_scalar(struct __pyx_memoryview_obj *__pyx_v_self, struct __pyx_memoryview_obj *__pyx_v_dst, PyObject *__pyx_v_value) {
  int __pyx_v_array[0x80];
  void *__pyx_v_tmp;
  void *__pyx_v_item;
  __Pyx_memviewslice *__pyx_v_dst_slice;
  __Pyx_memviewslice __pyx_v_tmp_slice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  char const *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_slice_assign_scalar", 1);

  /* "View.MemoryView":455
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):
 *         cdef int array[128]
 *         cdef void *tmp = NULL             # <<<<<<<<<<<<<<
 *         cdef void *item
 * 
 */
  __pyx_v_tmp = NULL;

  /* "View.MemoryView":460
 *         cdef __Pyx_memviewslice *dst_slice
 *         cdef __Pyx_memviewslice tmp_slice
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)             # <<<<<<<<<<<<<<
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_dst, (&__pyx_v_tmp_slice)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 460, __pyx_L1_error)
  __pyx_v_dst_slice = __pyx_t_1;

  /* "View.MemoryView":462
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
  __pyx_t_2 = (((size_t)__pyx_v_self->view.itemsize) > (sizeof(__pyx_v_array)));
  if (__pyx_t_2) {

    /* "View.MemoryView":463
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)             # <<<<<<<<<<<<<<
 *             if tmp == NULL:
 *                 raise MemoryError
 */
    __pyx_v_tmp = PyMem_Malloc(__pyx_v_self->view.itemsize);

    /* "View.MemoryView":464
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    __pyx_t_2 = (__pyx_v_tmp == NULL);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":465
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 *                 raise MemoryError             # <<<<<<<<<<<<<<
 *             item = tmp
 *         else:
 */
      PyErr_NoMemory(); __PYX_ERR(2, 465, __pyx_L1_error)

      /* "View.MemoryView":464
 *         if <size_t>self.view.itemsize > sizeof(array):
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:             # <<<<<<<<<<<<<<
 *                 raise MemoryError
 *             item = tmp
 */
    }

    /* "View.MemoryView":466
 *             if tmp == NULL:
 *                 raise MemoryError
 *             item = tmp             # <<<<<<<<<<<<<<
 *         else:
 *             item = <void *> array
 */
    __pyx_v_item = __pyx_v_tmp;

    /* "View.MemoryView":462
 *         dst_slice = get_slice_from_memview(dst, &tmp_slice)
 * 
 *         if <size_t>self.view.itemsize > sizeof(array):             # <<<<<<<<<<<<<<
 *             tmp = PyMem_Malloc(self.view.itemsize)
 *             if tmp == NULL:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":468
 *             item = tmp
 *         else:
 *             item = <void *> array             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  /*else*/ {
    __pyx_v_item = ((void *)__pyx_v_array);
  }
  __pyx_L3:;

  /* "View.MemoryView":470
 *             item = <void *> array
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value
 */
  /*try:*/ {

    /* "View.MemoryView":471
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
    if (__pyx_v_self->dtype_is_object) {

      /* "View.MemoryView":472
 *         try:
 *             if self.dtype_is_object:
 *                 (<PyObject **> item)[0] = <PyObject *> value             # <<<<<<<<<<<<<<
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)
 */
      (((PyObject **)__pyx_v_item)[0]) = ((PyObject *)__pyx_v_value);

      /* "View.MemoryView":471
 * 
 *         try:
 *             if self.dtype_is_object:             # <<<<<<<<<<<<<<
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":474
 *                 (<PyObject **> item)[0] = <PyObject *> value
 *             else:
 *                 self.assign_item_from_object(<char *> item, value)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    /*else*/ {
      __pyx_t_3 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, ((char *)__pyx_v_item), __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 474, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L8:;

    /* "View.MemoryView":478
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    __pyx_t_2 = (__pyx_v_self->view.suboffsets != NULL);
    if (__pyx_t_2) {

      /* "View.MemoryView":479
 * 
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)             # <<<<<<<<<<<<<<
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 *                                 item, self.dtype_is_object)
 */
      __pyx_t_4 = assert_direct_dimensions(__pyx_v_self->view.suboffsets, __pyx_v_self->view.ndim); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 479, __pyx_L6_error)

      /* "View.MemoryView":478
 * 
 * 
 *             if self.view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,
 */
    }

    /* "View.MemoryView":480
 *             if self.view.suboffsets != NULL:
 *                 assert_direct_dimensions(self.view.suboffsets, self.view.ndim)
 *             slice_assign_scalar(dst_slice, dst.view.ndim, self.view.itemsize,             # <<<<<<<<<<<<<<
 *                                 item, self.dtype_is_object)
 *         finally:
 */
    __pyx_memoryview_slice_assign_scalar(__pyx_v_dst_slice, __pyx_v_dst->view.ndim, __pyx_v_self->view.itemsize, __pyx_v_item, __pyx_v_self->dtype_is_object);
  }

  /* "View.MemoryView":483
 *                                 item, self.dtype_is_object)
 *         finally:
 *             PyMem_Free(tmp)             # <<<<<<<<<<<<<<
 * 
 *     cdef setitem_indexed(self, index, value):
 */
  /*finally:*/ {
    /*normal exit:*/{
      PyMem_Free(__pyx_v_tmp);
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_12);
      __pyx_t_4 = __pyx_lineno; __pyx_t_5 = __pyx_clineno; __pyx_t_6 = __pyx_filename;
      {
        PyMem_Free(__pyx_v_tmp);
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
      }
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ErrRestore(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_t_7 = 0; __pyx_t_8 = 0; __pyx_t_9 = 0; __pyx_t_10 = 0; __pyx_t_11 = 0; __pyx_t_12 = 0;
      __pyx_lineno = __pyx_t_4; __pyx_clineno = __pyx_t_5; __pyx_filename = __pyx_t_6;
      goto __pyx_L1_error;
    }
    __pyx_L7:;
  }

  /* "View.MemoryView":453
 *         memoryview_copy_contents(msrc, mdst, src.ndim, dst.ndim, self.dtype_is_object)
 * 
 *     cdef setitem_slice_assign_scalar(self, memoryview dst, value):             # <<<<<<<<<<<<<<
 *         cdef int array[128]
 *         cdef void *tmp = NULL
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_slice_assign_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":485
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

static PyObject *__pyx_memoryview_setitem_indexed(struct __pyx_memoryview_obj *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_itemp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("setitem_indexed", 1);

  /* "View.MemoryView":486
 * 
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)             # <<<<<<<<<<<<<<
 *         self.assign_item_from_object(itemp, value)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->get_item_pointer(__pyx_v_self, __pyx_v_index); if (unlikely(__pyx_t_1 == ((char *)NULL))) __PYX_ERR(2, 486, __pyx_L1_error)
  __pyx_v_itemp = __pyx_t_1;

  /* "View.MemoryView":487
 *     cdef setitem_indexed(self, index, value):
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->assign_item_from_object(__pyx_v_self, __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":485
 *             PyMem_Free(tmp)
 * 
 *     cdef setitem_indexed(self, index, value):             # <<<<<<<<<<<<<<
 *         cdef char *itemp = self.get_item_pointer(index)
 *         self.assign_item_from_object(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.setitem_indexed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":489
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_convert_item_to_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_v_struct = NULL;
  PyObject *__pyx_v_bytesitem = 0;
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 1);

  /* "View.MemoryView":492
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef bytes bytesitem
 * 
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_struct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 492, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":495
 *         cdef bytes bytesitem
 * 
 *         bytesitem = itemp[:self.view.itemsize]             # <<<<<<<<<<<<<<
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 */
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_itemp + 0, __pyx_v_self->view.itemsize - 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bytesitem = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "View.MemoryView":497
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)             # <<<<<<<<<<<<<<
 *         except struct.error:
 *             raise ValueError, "Unable to convert item to object"
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_unpack); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 497, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 497, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_8 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_6, __pyx_v_bytesitem};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 497, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_v_result = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    }

    /* "View.MemoryView":501
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
    /*else:*/ {
      __pyx_t_9 = __Pyx_ssize_strlen(__pyx_v_self->view.format); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(2, 501, __pyx_L5_except_error)
      __pyx_t_10 = (__pyx_t_9 == 1);
      if (__pyx_t_10) {

        /* "View.MemoryView":502
 *         else:
 *             if len(self.view.format) == 1:
 *                 return result[0]             # <<<<<<<<<<<<<<
 *             return result
 * 
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_result, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 502, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_r = __pyx_t_1;
        __pyx_t_1 = 0;
        goto __pyx_L6_except_return;

        /* "View.MemoryView":501
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 *             if len(self.view.format) == 1:             # <<<<<<<<<<<<<<
 *                 return result[0]
 *             return result
 */
      }

      /* "View.MemoryView":503
 *             if len(self.view.format) == 1:
 *                 return result[0]
 *             return result             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_result);
      __pyx_r = __pyx_v_result;
      goto __pyx_L6_except_return;
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":498
 *         try:
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Unable to convert item to object"
 *         else:
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_5, &__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 498, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_11 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_7);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_5, __pyx_t_6);
    __pyx_t_1 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0;
    if (__pyx_t_11) {
      __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_1) < 0) __PYX_ERR(2, 498, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_1);

      /* "View.MemoryView":499
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 *             raise ValueError, "Unable to convert item to object"             # <<<<<<<<<<<<<<
 *         else:
 *             if len(self.view.format) == 1:
 */
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Unable_to_convert_item_to_object, 0, 0);
      __PYX_ERR(2, 499, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "View.MemoryView":496
 * 
 *         bytesitem = itemp[:self.view.itemsize]
 *         try:             # <<<<<<<<<<<<<<
 *             result = struct.unpack(self.view.format, bytesitem)
 *         except struct.error:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "View.MemoryView":489
 *         self.assign_item_from_object(itemp, value)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView.memoryview.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesitem);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":505
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

static PyObject *__pyx_memoryview_assign_item_from_object(struct __pyx_memoryview_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_struct = NULL;
  char __pyx_v_c;
  PyObject *__pyx_v_bytesvalue = 0;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  char *__pyx_t_10;
  char *__pyx_t_11;
  char *__pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 1);

  /* "View.MemoryView":508
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 *         import struct             # <<<<<<<<<<<<<<
 *         cdef char c
 *         cdef bytes bytesvalue
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_struct, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_struct = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "View.MemoryView":513
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_value); 
  if (__pyx_t_2) {

    /* "View.MemoryView":514
 * 
 *         if isinstance(value, tuple):
 *             bytesvalue = struct.pack(self.view.format, *value)             # <<<<<<<<<<<<<<
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3)) __PYX_ERR(2, 514, __pyx_L1_error);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PySequence_Tuple(__pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(2, 514, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":513
 *         cdef Py_ssize_t i
 * 
 *         if isinstance(value, tuple):             # <<<<<<<<<<<<<<
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":516
 *             bytesvalue = struct.pack(self.view.format, *value)
 *         else:
 *             bytesvalue = struct.pack(self.view.format, value)             # <<<<<<<<<<<<<<
 * 
 *         for i, c in enumerate(bytesvalue):
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_struct, __pyx_n_s_pack); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_self->view.format); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_1, __pyx_v_value};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if (!(likely(PyBytes_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("bytes", __pyx_t_3))) __PYX_ERR(2, 516, __pyx_L1_error)
    __pyx_v_bytesvalue = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":518
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
  __pyx_t_7 = 0;
  if (unlikely(__pyx_v_bytesvalue == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' is not iterable");
    __PYX_ERR(2, 518, __pyx_L1_error)
  }
  __Pyx_INCREF(__pyx_v_bytesvalue);
  __pyx_t_8 = __pyx_v_bytesvalue;
  __pyx_t_10 = PyBytes_AS_STRING(__pyx_t_8);
  __pyx_t_11 = (__pyx_t_10 + PyBytes_GET_SIZE(__pyx_t_8));
  for (__pyx_t_12 = __pyx_t_10; __pyx_t_12 < __pyx_t_11; __pyx_t_12++) {
    __pyx_t_9 = __pyx_t_12;
    __pyx_v_c = (__pyx_t_9[0]);

    /* "View.MemoryView":519
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    __pyx_v_i = __pyx_t_7;

    /* "View.MemoryView":518
 *             bytesvalue = struct.pack(self.view.format, value)
 * 
 *         for i, c in enumerate(bytesvalue):             # <<<<<<<<<<<<<<
 *             itemp[i] = c
 * 
 */
    __pyx_t_7 = (__pyx_t_7 + 1);

    /* "View.MemoryView":519
 * 
 *         for i, c in enumerate(bytesvalue):
 *             itemp[i] = c             # <<<<<<<<<<<<<<
 * 
 *     @cname('getbuffer')
 */
    (__pyx_v_itemp[__pyx_v_i]) = __pyx_v_c;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "View.MemoryView":505
 *             return result
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         """Only used if instantiated manually by the user, or if Cython doesn't
 *         know how to convert the type"""
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memoryview.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_struct);
  __Pyx_XDECREF(__pyx_v_bytesvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":521
 *             itemp[i] = c
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 */

/* Python wrapper */
CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
CYTHON_UNUSED static int __pyx_memoryview_getbuffer(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(((struct __pyx_memoryview_obj *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_8__getbuffer__(struct __pyx_memoryview_obj *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  char *__pyx_t_4;
  void *__pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (unlikely(__pyx_v_info == NULL)) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "View.MemoryView":523
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 */
  __pyx_t_2 = ((__pyx_v_flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_L4_bool_binop_done:;
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":524
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_ND:
 */
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Cannot_create_writable_memory_vi, 0, 0);
    __PYX_ERR(2, 524, __pyx_L1_error)

    /* "View.MemoryView":523
 *     @cname('getbuffer')
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 */
  }

  /* "View.MemoryView":526
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_ND) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":527
 * 
 *         if flags & PyBUF_ND:
 *             info.shape = self.view.shape             # <<<<<<<<<<<<<<
 *         else:
 *             info.shape = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.shape;
    __pyx_v_info->shape = __pyx_t_3;

    /* "View.MemoryView":526
 *             raise ValueError, "Cannot create writable memory view from read-only memoryview"
 * 
 *         if flags & PyBUF_ND:             # <<<<<<<<<<<<<<
 *             info.shape = self.view.shape
 *         else:
 */
    goto __pyx_L6;
  }

  /* "View.MemoryView":529
 *             info.shape = self.view.shape
 *         else:
 *             info.shape = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_STRIDES:
 */
  /*else*/ {
    __pyx_v_info->shape = NULL;
  }
  __pyx_L6:;

  /* "View.MemoryView":531
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_STRIDES) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":532
 * 
 *         if flags & PyBUF_STRIDES:
 *             info.strides = self.view.strides             # <<<<<<<<<<<<<<
 *         else:
 *             info.strides = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.strides;
    __pyx_v_info->strides = __pyx_t_3;

    /* "View.MemoryView":531
 *             info.shape = NULL
 * 
 *         if flags & PyBUF_STRIDES:             # <<<<<<<<<<<<<<
 *             info.strides = self.view.strides
 *         else:
 */
    goto __pyx_L7;
  }

  /* "View.MemoryView":534
 *             info.strides = self.view.strides
 *         else:
 *             info.strides = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_INDIRECT:
 */
  /*else*/ {
    __pyx_v_info->strides = NULL;
  }
  __pyx_L7:;

  /* "View.MemoryView":536
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_INDIRECT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":537
 * 
 *         if flags & PyBUF_INDIRECT:
 *             info.suboffsets = self.view.suboffsets             # <<<<<<<<<<<<<<
 *         else:
 *             info.suboffsets = NULL
 */
    __pyx_t_3 = __pyx_v_self->view.suboffsets;
    __pyx_v_info->suboffsets = __pyx_t_3;

    /* "View.MemoryView":536
 *             info.strides = NULL
 * 
 *         if flags & PyBUF_INDIRECT:             # <<<<<<<<<<<<<<
 *             info.suboffsets = self.view.suboffsets
 *         else:
 */
    goto __pyx_L8;
  }

  /* "View.MemoryView":539
 *             info.suboffsets = self.view.suboffsets
 *         else:
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 * 
 *         if flags & PyBUF_FORMAT:
 */
  /*else*/ {
    __pyx_v_info->suboffsets = NULL;
  }
  __pyx_L8:;

  /* "View.MemoryView":541
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_flags & PyBUF_FORMAT) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":542
 * 
 *         if flags & PyBUF_FORMAT:
 *             info.format = self.view.format             # <<<<<<<<<<<<<<
 *         else:
 *             info.format = NULL
 */
    __pyx_t_4 = __pyx_v_self->view.format;
    __pyx_v_info->format = __pyx_t_4;

    /* "View.MemoryView":541
 *             info.suboffsets = NULL
 * 
 *         if flags & PyBUF_FORMAT:             # <<<<<<<<<<<<<<
 *             info.format = self.view.format
 *         else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":544
 *             info.format = self.view.format
 *         else:
 *             info.format = NULL             # <<<<<<<<<<<<<<
 * 
 *         info.buf = self.view.buf
 */
  /*else*/ {
    __pyx_v_info->format = NULL;
  }
  __pyx_L9:;

  /* "View.MemoryView":546
 *             info.format = NULL
 * 
 *         info.buf = self.view.buf             # <<<<<<<<<<<<<<
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 */
  __pyx_t_5 = __pyx_v_self->view.buf;
  __pyx_v_info->buf = __pyx_t_5;

  /* "View.MemoryView":547
 * 
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim             # <<<<<<<<<<<<<<
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 */
  __pyx_t_6 = __pyx_v_self->view.ndim;
  __pyx_v_info->ndim = __pyx_t_6;

  /* "View.MemoryView":548
 *         info.buf = self.view.buf
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize             # <<<<<<<<<<<<<<
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 */
  __pyx_t_7 = __pyx_v_self->view.itemsize;
  __pyx_v_info->itemsize = __pyx_t_7;

  /* "View.MemoryView":549
 *         info.ndim = self.view.ndim
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len             # <<<<<<<<<<<<<<
 *         info.readonly = self.view.readonly
 *         info.obj = self
 */
  __pyx_t_7 = __pyx_v_self->view.len;
  __pyx_v_info->len = __pyx_t_7;

  /* "View.MemoryView":550
 *         info.itemsize = self.view.itemsize
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly             # <<<<<<<<<<<<<<
 *         info.obj = self
 * 
 */
  __pyx_t_1 = __pyx_v_self->view.readonly;
  __pyx_v_info->readonly = __pyx_t_1;

  /* "View.MemoryView":551
 *         info.len = self.view.len
 *         info.readonly = self.view.readonly
 *         info.obj = self             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "View.MemoryView":521
 *             itemp[i] = c
 * 
 *     @cname('getbuffer')             # <<<<<<<<<<<<<<
 *     def __getbuffer__(self, Py_buffer *info, int flags):
 *         if flags & PyBUF_WRITABLE and self.view.readonly:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":554
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_1T___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":556
 *     @property
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&result.from_slice)
 *         return result
 */
  __pyx_t_1 = __pyx_memoryview_copy_object(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_memoryviewslice_type))))) __PYX_ERR(2, 556, __pyx_L1_error)
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":557
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_2 = __pyx_memslice_transpose((&__pyx_v_result->from_slice)); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(2, 557, __pyx_L1_error)

  /* "View.MemoryView":558
 *         cdef _memoryviewslice result = memoryview_copy(self)
 *         transpose_memslice(&result.from_slice)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":554
 * 
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def T(self):
 *         cdef _memoryviewslice result = memoryview_copy(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.T.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":560
 *         return result
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base(self):
 *         return self._get_base()
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4base___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":562
 *     @property
 *     def base(self):
 *         return self._get_base()             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_base(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_memoryview *)__pyx_v_self->__pyx_vtab)->_get_base(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":560
 *         return result
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base(self):
 *         return self._get_base()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.base.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":564
 *         return self._get_base()
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

static PyObject *__pyx_memoryview__get_base(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_base", 1);

  /* "View.MemoryView":565
 * 
 *     cdef _get_base(self):
 *         return self.obj             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->obj);
  __pyx_r = __pyx_v_self->obj;
  goto __pyx_L0;

  /* "View.MemoryView":564
 *         return self._get_base()
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.obj
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":567
 *         return self.obj
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_5shape___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_7genexpr__pyx_v_length;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":569
 *     @property
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
      __pyx_t_2 = __pyx_t_4;
      __pyx_7genexpr__pyx_v_length = (__pyx_t_2[0]);
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_7genexpr__pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 569, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 569, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  } /* exit inner scope */
  __pyx_t_5 = PyList_AsTuple(((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":567
 *         return self.obj
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def shape(self):
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.shape.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":571
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def strides(self):
 *         if self.view.strides == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_7strides___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_8genexpr1__pyx_v_stride;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":573
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError, "Buffer view does not expose strides"
 */
  __pyx_t_1 = (__pyx_v_self->view.strides == NULL);
  if (unlikely(__pyx_t_1)) {

    /* "View.MemoryView":575
 *         if self.view.strides == NULL:
 * 
 *             raise ValueError, "Buffer view does not expose strides"             # <<<<<<<<<<<<<<
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 */
    __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Buffer_view_does_not_expose_stri, 0, 0);
    __PYX_ERR(2, 575, __pyx_L1_error)

    /* "View.MemoryView":573
 *     @property
 *     def strides(self):
 *         if self.view.strides == NULL:             # <<<<<<<<<<<<<<
 * 
 *             raise ValueError, "Buffer view does not expose strides"
 */
  }

  /* "View.MemoryView":577
 *             raise ValueError, "Buffer view does not expose strides"
 * 
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__pyx_v_self->view.strides + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.strides; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_8genexpr1__pyx_v_stride = (__pyx_t_3[0]);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_8genexpr1__pyx_v_stride); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 577, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 577, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":571
 *         return tuple([length for length in self.view.shape[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def strides(self):
 *         if self.view.strides == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.strides.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":579
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_10suboffsets___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_8genexpr2__pyx_v_suboffset;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  Py_ssize_t *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":581
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.suboffsets == NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":582
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PySequence_Multiply(__pyx_tuple__4, __pyx_v_self->view.ndim); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":581
 *     @property
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:             # <<<<<<<<<<<<<<
 *             return (-1,) * self.view.ndim
 * 
 */
  }

  /* "View.MemoryView":584
 *             return (-1,) * self.view.ndim
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 584, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = (__pyx_v_self->view.suboffsets + __pyx_v_self->view.ndim);
    for (__pyx_t_5 = __pyx_v_self->view.suboffsets; __pyx_t_5 < __pyx_t_4; __pyx_t_5++) {
      __pyx_t_3 = __pyx_t_5;
      __pyx_8genexpr2__pyx_v_suboffset = (__pyx_t_3[0]);
      __pyx_t_6 = PyInt_FromSsize_t(__pyx_8genexpr2__pyx_v_suboffset); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 584, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_6))) __PYX_ERR(2, 584, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
  } /* exit inner scope */
  __pyx_t_6 = PyList_AsTuple(((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":579
 *         return tuple([stride for stride in self.view.strides[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("View.MemoryView.memoryview.suboffsets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":586
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ndim(self):
 *         return self.view.ndim
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4ndim___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":588
 *     @property
 *     def ndim(self):
 *         return self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->view.ndim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":586
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ndim(self):
 *         return self.view.ndim
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.ndim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":590
 *         return self.view.ndim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def itemsize(self):
 *         return self.view.itemsize
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_8itemsize___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":592
 *     @property
 *     def itemsize(self):
 *         return self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":590
 *         return self.view.ndim
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def itemsize(self):
 *         return self.view.itemsize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview.itemsize.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":594
 *         return self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nbytes(self):
 *         return self.size * self.view.itemsize
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_6nbytes___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":596
 *     @property
 *     def nbytes(self):
 *         return self.size * self.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_self->view.itemsize); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":594
 *         return self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def nbytes(self):
 *         return self.size * self.view.itemsize
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.nbytes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":598
 *         return self.size * self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         if self._size is None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView_10memoryview_4size___get__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_v_result = NULL;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 1);

  /* "View.MemoryView":600
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_size == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":601
 *     def size(self):
 *         if self._size is None:
 *             result = 1             # <<<<<<<<<<<<<<
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 */
    __Pyx_INCREF(__pyx_int_1);
    __pyx_v_result = __pyx_int_1;

    /* "View.MemoryView":603
 *             result = 1
 * 
 *             for length in self.view.shape[:self.view.ndim]:             # <<<<<<<<<<<<<<
 *                 result *= length
 * 
 */
    __pyx_t_3 = (__pyx_v_self->view.shape + __pyx_v_self->view.ndim);
    for (__pyx_t_4 = __pyx_v_self->view.shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
      __pyx_t_2 = __pyx_t_4;
      __pyx_t_5 = PyInt_FromSsize_t((__pyx_t_2[0])); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 603, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "View.MemoryView":604
 * 
 *             for length in self.view.shape[:self.view.ndim]:
 *                 result *= length             # <<<<<<<<<<<<<<
 * 
 *             self._size = result
 */
      __pyx_t_5 = PyNumber_InPlaceMultiply(__pyx_v_result, __pyx_v_length); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 604, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_result, __pyx_t_5);
      __pyx_t_5 = 0;
    }

    /* "View.MemoryView":606
 *                 result *= length
 * 
 *             self._size = result             # <<<<<<<<<<<<<<
 * 
 *         return self._size
 */
    __Pyx_INCREF(__pyx_v_result);
    __Pyx_GIVEREF(__pyx_v_result);
    __Pyx_GOTREF(__pyx_v_self->_size);
    __Pyx_DECREF(__pyx_v_self->_size);
    __pyx_v_self->_size = __pyx_v_result;

    /* "View.MemoryView":600
 *     @property
 *     def size(self):
 *         if self._size is None:             # <<<<<<<<<<<<<<
 *             result = 1
 * 
 */
  }

  /* "View.MemoryView":608
 *             self._size = result
 * 
 *         return self._size             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_size);
  __pyx_r = __pyx_v_self->_size;
  goto __pyx_L0;

  /* "View.MemoryView":598
 *         return self.size * self.view.itemsize
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def size(self):
 *         if self._size is None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.memoryview.size.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":610
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

/* Python wrapper */
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_memoryview___len__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_10__len__(struct __pyx_memoryview_obj *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":611
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  __pyx_t_1 = (__pyx_v_self->view.ndim >= 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":612
 *     def __len__(self):
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]             # <<<<<<<<<<<<<<
 * 
 *         return 0
 */
    __pyx_r = (__pyx_v_self->view.shape[0]);
    goto __pyx_L0;

    /* "View.MemoryView":611
 * 
 *     def __len__(self):
 *         if self.view.ndim >= 1:             # <<<<<<<<<<<<<<
 *             return self.view.shape[0]
 * 
 */
  }

  /* "View.MemoryView":614
 *             return self.view.shape[0]
 * 
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":610
 *         return self._size
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         if self.view.ndim >= 1:
 *             return self.view.shape[0]
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":616
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___repr__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_12__repr__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__repr__", 1);

  /* "View.MemoryView":617
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":618
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_id, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "View.MemoryView":617
 * 
 *     def __repr__(self):
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,             # <<<<<<<<<<<<<<
 *                                                id(self))
 * 
 */
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(2, 617, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2)) __PYX_ERR(2, 617, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":616
 *         return 0
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r at 0x%x>" % (self.base.__class__.__name__,
 *                                                id(self))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":620
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_memoryview___str__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_14__str__(struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 1);

  /* "View.MemoryView":621
 * 
 *     def __str__(self):
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1)) __PYX_ERR(2, 621, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_MemoryView_of_r_object, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":620
 *                                                id(self))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<MemoryView of %r object>" % (self.base.__class__.__name__,)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":624
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_is_c_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_c_contig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_c_contig", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_c_contig", 0))) return NULL;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_16is_c_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_c_contig", 1);

  /* "View.MemoryView":627
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 627, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":628
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def is_f_contig(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'C', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":624
 * 
 * 
 *     def is_c_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_c_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":630
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_is_f_contig(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_f_contig (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_f_contig", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_f_contig", 0))) return NULL;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_18is_f_contig(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice *__pyx_v_mslice;
  __Pyx_memviewslice __pyx_v_tmp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_f_contig", 1);

  /* "View.MemoryView":633
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)             # <<<<<<<<<<<<<<
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 */
  __pyx_t_1 = __pyx_memoryview_get_slice_from_memoryview(__pyx_v_self, (&__pyx_v_tmp)); if (unlikely(__pyx_t_1 == ((__Pyx_memviewslice *)NULL))) __PYX_ERR(2, 633, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":634
 *         cdef __Pyx_memviewslice tmp
 *         mslice = get_slice_from_memview(self, &tmp)
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_memviewslice_is_contig((__pyx_v_mslice[0]), 'F', __pyx_v_self->view.ndim)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":630
 *         return slice_is_contig(mslice[0], 'C', self.view.ndim)
 * 
 *     def is_f_contig(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice *mslice
 *         cdef __Pyx_memviewslice tmp
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.is_f_contig", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":636
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_copy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy", 0))) return NULL;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_20copy(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_mslice;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 1);

  /* "View.MemoryView":638
 *     def copy(self):
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &mslice)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_F_CONTIGUOUS));

  /* "View.MemoryView":640
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 * 
 *         slice_copy(self, &mslice)             # <<<<<<<<<<<<<<
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,
 *                                    self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_mslice));

  /* "View.MemoryView":641
 * 
 *         slice_copy(self, &mslice)
 *         mslice = slice_copy_contig(&mslice, "c", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                    self.view.itemsize,
 *                                    flags|PyBUF_C_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_mslice), ((char *)"c"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_C_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 641, __pyx_L1_error)
  __pyx_v_mslice = __pyx_t_1;

  /* "View.MemoryView":646
 *                                    self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &mslice)             # <<<<<<<<<<<<<<
 * 
 *     def copy_fortran(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_mslice)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":636
 *         return slice_is_contig(mslice[0], 'F', self.view.ndim)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice mslice
 *         cdef int flags = self.flags & ~PyBUF_F_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":648
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

/* Python wrapper */
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_memoryview_copy_fortran(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_fortran (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("copy_fortran", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "copy_fortran", 0))) return NULL;
  __pyx_r = __pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_memoryview___pyx_pf_15View_dot_MemoryView_10memoryview_22copy_fortran(struct __pyx_memoryview_obj *__pyx_v_self) {
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  int __pyx_v_flags;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_memviewslice __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy_fortran", 1);

  /* "View.MemoryView":650
 *     def copy_fortran(self):
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS             # <<<<<<<<<<<<<<
 * 
 *         slice_copy(self, &src)
 */
  __pyx_v_flags = (__pyx_v_self->flags & (~PyBUF_C_CONTIGUOUS));

  /* "View.MemoryView":652
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 * 
 *         slice_copy(self, &src)             # <<<<<<<<<<<<<<
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,
 *                                 self.view.itemsize,
 */
  __pyx_memoryview_slice_copy(__pyx_v_self, (&__pyx_v_src));

  /* "View.MemoryView":653
 * 
 *         slice_copy(self, &src)
 *         dst = slice_copy_contig(&src, "fortran", self.view.ndim,             # <<<<<<<<<<<<<<
 *                                 self.view.itemsize,
 *                                 flags|PyBUF_F_CONTIGUOUS,
 */
  __pyx_t_1 = __pyx_memoryview_copy_new_contig((&__pyx_v_src), ((char *)"fortran"), __pyx_v_self->view.ndim, __pyx_v_self->view.itemsize, (__pyx_v_flags | PyBUF_F_CONTIGUOUS), __pyx_v_self->dtype_is_object); if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 653, __pyx_L1_error)
  __pyx_v_dst = __pyx_t_1;

  /* "View.MemoryView":658
 *                                 self.dtype_is_object)
 * 
 *         return memoryview_copy_from_slice(self, &dst)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_memoryview_copy_object_from_slice(__pyx_v_self, (&__pyx_v_dst)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":648
 *         return memoryview_copy_from_slice(self, &mslice)
 * 
 *     def copy_fortran(self):             # <<<<<<<<<<<<<<
 *         cdef __Pyx_memviewslice src, dst
 *         cdef int flags = self.flags & ~PyBUF_C_CONTIGUOUS
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.memoryview.copy_fortran", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf___pyx_memoryview___reduce_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryview_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_memoryview_2__setstate_cython__(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryview_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryview_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.memoryview.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":662
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

static PyObject *__pyx_memoryview_new(PyObject *__pyx_v_o, int __pyx_v_flags, int __pyx_v_dtype_is_object, __Pyx_TypeInfo *__pyx_v_typeinfo) {
  struct __pyx_memoryview_obj *__pyx_v_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_cwrapper", 1);

  /* "View.MemoryView":663
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)             # <<<<<<<<<<<<<<
 *     result.typeinfo = typeinfo
 *     return result
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_o);
  __Pyx_GIVEREF(__pyx_v_o);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_o)) __PYX_ERR(2, 663, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1)) __PYX_ERR(2, 663, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2)) __PYX_ERR(2, 663, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_memoryview_type), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 663, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryview_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":664
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo             # <<<<<<<<<<<<<<
 *     return result
 * 
 */
  __pyx_v_result->typeinfo = __pyx_v_typeinfo;

  /* "View.MemoryView":665
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_check')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":662
 * 
 * @cname('__pyx_memoryview_new')
 * cdef memoryview_cwrapper(object o, int flags, bint dtype_is_object, __Pyx_TypeInfo *typeinfo):             # <<<<<<<<<<<<<<
 *     cdef memoryview result = memoryview(o, flags, dtype_is_object)
 *     result.typeinfo = typeinfo
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_cwrapper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":668
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

static CYTHON_INLINE int __pyx_memoryview_check(PyObject *__pyx_v_o) {
  int __pyx_r;
  int __pyx_t_1;

  /* "View.MemoryView":669
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o) noexcept:
 *     return isinstance(o, memoryview)             # <<<<<<<<<<<<<<
 * 
 * cdef tuple _unellipsify(object index, int ndim):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_o, __pyx_memoryview_type); 
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":668
 * 
 * @cname('__pyx_memoryview_check')
 * cdef inline bint memoryview_check(object o) noexcept:             # <<<<<<<<<<<<<<
 *     return isinstance(o, memoryview)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":671
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

static PyObject *_unellipsify(PyObject *__pyx_v_index, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_v_tup = NULL;
  PyObject *__pyx_v_result = NULL;
  int __pyx_v_have_slices;
  int __pyx_v_seen_ellipsis;
  PyObject *__pyx_v_item = NULL;
  Py_ssize_t __pyx_v_nslices;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_unellipsify", 1);

  /* "View.MemoryView":677
 *     """
 *     cdef Py_ssize_t idx
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)             # <<<<<<<<<<<<<<
 * 
 *     result = [slice(None)] * ndim
 */
  __pyx_t_2 = PyTuple_Check(__pyx_v_index); 
  if (__pyx_t_2) {
    __Pyx_INCREF(((PyObject*)__pyx_v_index));
    __pyx_t_1 = __pyx_v_index;
  } else {
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 677, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index)) __PYX_ERR(2, 677, __pyx_L1_error);
    __pyx_t_1 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __pyx_v_tup = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":679
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)
 * 
 *     result = [slice(None)] * ndim             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_t_1 = PyList_New(1 * ((__pyx_v_ndim<0) ? 0:__pyx_v_ndim)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_v_ndim; __pyx_temp++) {
      __Pyx_INCREF(__pyx_slice__5);
      __Pyx_GIVEREF(__pyx_slice__5);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_1, __pyx_temp, __pyx_slice__5)) __PYX_ERR(2, 679, __pyx_L1_error);
    }
  }
  __pyx_v_result = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "View.MemoryView":680
 * 
 *     result = [slice(None)] * ndim
 *     have_slices = False             # <<<<<<<<<<<<<<
 *     seen_ellipsis = False
 *     idx = 0
 */
  __pyx_v_have_slices = 0;

  /* "View.MemoryView":681
 *     result = [slice(None)] * ndim
 *     have_slices = False
 *     seen_ellipsis = False             # <<<<<<<<<<<<<<
 *     idx = 0
 *     for item in tup:
 */
  __pyx_v_seen_ellipsis = 0;

  /* "View.MemoryView":682
 *     have_slices = False
 *     seen_ellipsis = False
 *     idx = 0             # <<<<<<<<<<<<<<
 *     for item in tup:
 *         if item is Ellipsis:
 */
  __pyx_v_idx = 0;

  /* "View.MemoryView":683
 *     seen_ellipsis = False
 *     idx = 0
 *     for item in tup:             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  if (unlikely(__pyx_v_tup == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(2, 683, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_tup; __Pyx_INCREF(__pyx_t_1);
  __pyx_t_4 = 0;
  for (;;) {
    {
      Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_1);
      #if !CYTHON_ASSUME_SAFE_MACROS
      if (unlikely((__pyx_temp < 0))) __PYX_ERR(2, 683, __pyx_L1_error)
      #endif
      if (__pyx_t_4 >= __pyx_temp) break;
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(2, 683, __pyx_L1_error)
    #else
    __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "View.MemoryView":684
 *     idx = 0
 *     for item in tup:
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 */
    __pyx_t_2 = (__pyx_v_item == __pyx_builtin_Ellipsis);
    if (__pyx_t_2) {

      /* "View.MemoryView":685
 *     for item in tup:
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 */
      __pyx_t_2 = (!__pyx_v_seen_ellipsis);
      if (__pyx_t_2) {

        /* "View.MemoryView":686
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)             # <<<<<<<<<<<<<<
 *                 seen_ellipsis = True
 *             have_slices = True
 */
        if (unlikely(__pyx_v_tup == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
          __PYX_ERR(2, 686, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_PyTuple_GET_SIZE(__pyx_v_tup); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(2, 686, __pyx_L1_error)
        __pyx_v_idx = (__pyx_v_idx + (__pyx_v_ndim - __pyx_t_5));

        /* "View.MemoryView":687
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True             # <<<<<<<<<<<<<<
 *             have_slices = True
 *         else:
 */
        __pyx_v_seen_ellipsis = 1;

        /* "View.MemoryView":685
 *     for item in tup:
 *         if item is Ellipsis:
 *             if not seen_ellipsis:             # <<<<<<<<<<<<<<
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 */
      }

      /* "View.MemoryView":688
 *                 idx += ndim - len(tup)
 *                 seen_ellipsis = True
 *             have_slices = True             # <<<<<<<<<<<<<<
 *         else:
 *             if isinstance(item, slice):
 */
      __pyx_v_have_slices = 1;

      /* "View.MemoryView":684
 *     idx = 0
 *     for item in tup:
 *         if item is Ellipsis:             # <<<<<<<<<<<<<<
 *             if not seen_ellipsis:
 *                 idx += ndim - len(tup)
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if isinstance(item, slice):             # <<<<<<<<<<<<<<
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 */
    /*else*/ {
      __pyx_t_2 = PySlice_Check(__pyx_v_item); 
      if (__pyx_t_2) {

        /* "View.MemoryView":691
 *         else:
 *             if isinstance(item, slice):
 *                 have_slices = True             # <<<<<<<<<<<<<<
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 */
        __pyx_v_have_slices = 1;

        /* "View.MemoryView":690
 *             have_slices = True
 *         else:
 *             if isinstance(item, slice):             # <<<<<<<<<<<<<<
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":692
 *             if isinstance(item, slice):
 *                 have_slices = True
 *             elif not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 */
      __pyx_t_2 = (!(PyIndex_Check(__pyx_v_item) != 0));
      if (unlikely(__pyx_t_2)) {

        /* "View.MemoryView":693
 *                 have_slices = True
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"             # <<<<<<<<<<<<<<
 *             result[idx] = item
 *         idx += 1
 */
        __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 693, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_5 = 0;
        __pyx_t_6 = 127;
        __Pyx_INCREF(__pyx_kp_u_Cannot_index_with_type);
        __pyx_t_5 += 24;
        __Pyx_GIVEREF(__pyx_kp_u_Cannot_index_with_type);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Cannot_index_with_type);
        __pyx_t_7 = __Pyx_PyObject_FormatSimple(((PyObject *)Py_TYPE(__pyx_v_item)), __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 693, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_6;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u__6);
        __pyx_t_5 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__6);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__6);
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 693, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_builtin_TypeError, __pyx_t_7, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(2, 693, __pyx_L1_error)

        /* "View.MemoryView":692
 *             if isinstance(item, slice):
 *                 have_slices = True
 *             elif not PyIndex_Check(item):             # <<<<<<<<<<<<<<
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 */
      }
      __pyx_L7:;

      /* "View.MemoryView":694
 *             elif not PyIndex_Check(item):
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item             # <<<<<<<<<<<<<<
 *         idx += 1
 * 
 */
      if (unlikely((__Pyx_SetItemInt(__pyx_v_result, __pyx_v_idx, __pyx_v_item, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 1, 1) < 0))) __PYX_ERR(2, 694, __pyx_L1_error)
    }
    __pyx_L5:;

    /* "View.MemoryView":695
 *                 raise TypeError, f"Cannot index with type '{type(item)}'"
 *             result[idx] = item
 *         idx += 1             # <<<<<<<<<<<<<<
 * 
 *     nslices = ndim - idx
 */
    __pyx_v_idx = (__pyx_v_idx + 1);

    /* "View.MemoryView":683
 *     seen_ellipsis = False
 *     idx = 0
 *     for item in tup:             # <<<<<<<<<<<<<<
 *         if item is Ellipsis:
 *             if not seen_ellipsis:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "View.MemoryView":697
 *         idx += 1
 * 
 *     nslices = ndim - idx             # <<<<<<<<<<<<<<
 *     return have_slices or nslices, tuple(result)
 * 
 */
  __pyx_v_nslices = (__pyx_v_ndim - __pyx_v_idx);

  /* "View.MemoryView":698
 * 
 *     nslices = ndim - idx
 *     return have_slices or nslices, tuple(result)             # <<<<<<<<<<<<<<
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 */
  __Pyx_XDECREF(__pyx_r);
  if (!__pyx_v_have_slices) {
  } else {
    __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_v_have_slices); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 698, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __pyx_t_7;
    __pyx_t_7 = 0;
    goto __pyx_L9_bool_binop_done;
  }
  __pyx_t_7 = PyInt_FromSsize_t(__pyx_v_nslices); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_L9_bool_binop_done:;
  __pyx_t_7 = PyList_AsTuple(__pyx_v_result); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1)) __PYX_ERR(2, 698, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_7)) __PYX_ERR(2, 698, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_7 = 0;
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":671
 *     return isinstance(o, memoryview)
 * 
 * cdef tuple _unellipsify(object index, int ndim):             # <<<<<<<<<<<<<<
 *     """
 *     Replace all ellipses with full slices and fill incomplete indices with
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView._unellipsify", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tup);
  __Pyx_XDECREF(__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

static int assert_direct_dimensions(Py_ssize_t *__pyx_v_suboffsets, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_suboffset;
  int __pyx_r;
  Py_ssize_t *__pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "View.MemoryView":701
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"
 */
  __pyx_t_2 = (__pyx_v_suboffsets + __pyx_v_ndim);
  for (__pyx_t_3 = __pyx_v_suboffsets; __pyx_t_3 < __pyx_t_2; __pyx_t_3++) {
    __pyx_t_1 = __pyx_t_3;
    __pyx_v_suboffset = (__pyx_t_1[0]);

    /* "View.MemoryView":702
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag
 */
    __pyx_t_4 = (__pyx_v_suboffset >= 0);
    if (unlikely(__pyx_t_4)) {

      /* "View.MemoryView":703
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"             # <<<<<<<<<<<<<<
 *     return 0  # return type just used as an error flag
 * 
 */
      __Pyx_Raise(__pyx_builtin_ValueError, __pyx_kp_s_Indirect_dimensions_not_supporte, 0, 0);
      __PYX_ERR(2, 703, __pyx_L1_error)

      /* "View.MemoryView":702
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag
 */
    }
  }

  /* "View.MemoryView":704
 *         if suboffset >= 0:
 *             raise ValueError, "Indirect dimensions not supported"
 *     return 0  # return type just used as an error flag             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":700
 *     return have_slices or nslices, tuple(result)
 * 
 * cdef int assert_direct_dimensions(Py_ssize_t *suboffsets, int ndim) except -1:             # <<<<<<<<<<<<<<
 *     for suboffset in suboffsets[:ndim]:
 *         if suboffset >= 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView.assert_direct_dimensions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":711
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

static struct __pyx_memoryview_obj *__pyx_memview_slice(struct __pyx_memoryview_obj *__pyx_v_memview, PyObject *__pyx_v_indices) {
  int __pyx_v_new_ndim;
  int __pyx_v_suboffset_dim;
  int __pyx_v_dim;
  __Pyx_memviewslice __pyx_v_src;
  __Pyx_memviewslice __pyx_v_dst;
  __Pyx_memviewslice *__pyx_v_p_src;
  struct __pyx_memoryviewslice_obj *__pyx_v_memviewsliceobj = 0;
  __Pyx_memviewslice *__pyx_v_p_dst;
  int *__pyx_v_p_suboffset_dim;
  Py_ssize_t __pyx_v_start;
  Py_ssize_t __pyx_v_stop;
  Py_ssize_t __pyx_v_step;
  Py_ssize_t __pyx_v_cindex;
  int __pyx_v_have_start;
  int __pyx_v_have_stop;
  int __pyx_v_have_step;
  PyObject *__pyx_v_index = NULL;
  struct __pyx_memoryview_obj *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_memoryview_obj *__pyx_t_3;
  char *__pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memview_slice", 1);

  /* "View.MemoryView":712
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim             # <<<<<<<<<<<<<<
 *     cdef bint negative_step
 *     cdef __Pyx_memviewslice src, dst
 */
  __pyx_v_new_ndim = 0;
  __pyx_v_suboffset_dim = -1;

  /* "View.MemoryView":719
 * 
 * 
 *     memset(&dst, 0, sizeof(dst))             # <<<<<<<<<<<<<<
 * 
 *     cdef _memoryviewslice memviewsliceobj
 */
  (void)(memset((&__pyx_v_dst), 0, (sizeof(__pyx_v_dst))));

  /* "View.MemoryView":723
 *     cdef _memoryviewslice memviewsliceobj
 * 
 *     assert memview.view.ndim > 0             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_memview->view.ndim > 0);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(2, 723, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(2, 723, __pyx_L1_error)
  #endif

  /* "View.MemoryView":725
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":726
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview             # <<<<<<<<<<<<<<
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 726, __pyx_L1_error)
    __pyx_t_2 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_memviewsliceobj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":727
 *     if isinstance(memview, _memoryviewslice):
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, &src)
 */
    __pyx_v_p_src = (&__pyx_v_memviewsliceobj->from_slice);

    /* "View.MemoryView":725
 *     assert memview.view.ndim > 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         memviewsliceobj = memview
 *         p_src = &memviewsliceobj.from_slice
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":729
 *         p_src = &memviewsliceobj.from_slice
 *     else:
 *         slice_copy(memview, &src)             # <<<<<<<<<<<<<<
 *         p_src = &src
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_src));

    /* "View.MemoryView":730
 *     else:
 *         slice_copy(memview, &src)
 *         p_src = &src             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_p_src = (&__pyx_v_src);
  }
  __pyx_L3:;

  /* "View.MemoryView":736
 * 
 * 
 *     dst.memview = p_src.memview             # <<<<<<<<<<<<<<
 *     dst.data = p_src.data
 * 
 */
  __pyx_t_3 = __pyx_v_p_src->memview;
  __pyx_v_dst.memview = __pyx_t_3;

  /* "View.MemoryView":737
 * 
 *     dst.memview = p_src.memview
 *     dst.data = p_src.data             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __pyx_v_p_src->data;
  __pyx_v_dst.data = __pyx_t_4;

  /* "View.MemoryView":742
 * 
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst             # <<<<<<<<<<<<<<
 *     cdef int *p_suboffset_dim = &suboffset_dim
 *     cdef Py_ssize_t start, stop, step, cindex
 */
  __pyx_v_p_dst = (&__pyx_v_dst);

  /* "View.MemoryView":743
 * 
 *     cdef __Pyx_memviewslice *p_dst = &dst
 *     cdef int *p_suboffset_dim = &suboffset_dim             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t start, stop, step, cindex
 *     cdef bint have_start, have_stop, have_step
 */
  __pyx_v_p_suboffset_dim = (&__pyx_v_suboffset_dim);

  /* "View.MemoryView":747
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             cindex = index
 */
  __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_v_indices)) || PyTuple_CheckExact(__pyx_v_indices)) {
    __pyx_t_2 = __pyx_v_indices; __Pyx_INCREF(__pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_indices); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 747, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(2, 747, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(2, 747, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 747, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      } else {
        {
          Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
          #if !CYTHON_ASSUME_SAFE_MACROS
          if (unlikely((__pyx_temp < 0))) __PYX_ERR(2, 747, __pyx_L1_error)
          #endif
          if (__pyx_t_6 >= __pyx_temp) break;
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(2, 747, __pyx_L1_error)
        #else
        __pyx_t_8 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 747, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
      }
    } else {
      __pyx_t_8 = __pyx_t_7(__pyx_t_2);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 747, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    __Pyx_XDECREF_SET(__pyx_v_index, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_v_dim = __pyx_t_5;
    __pyx_t_5 = (__pyx_t_5 + 1);

    /* "View.MemoryView":748
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             cindex = index
 *             slice_memviewslice(
 */
    __pyx_t_1 = (PyIndex_Check(__pyx_v_index) != 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":749
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):
 *             cindex = index             # <<<<<<<<<<<<<<
 *             slice_memviewslice(
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 */
      __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_v_index); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 749, __pyx_L1_error)
      __pyx_v_cindex = __pyx_t_9;

      /* "View.MemoryView":750
 *         if PyIndex_Check(index):
 *             cindex = index
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_10 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_cindex, 0, 0, 0, 0, 0, 0); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(2, 750, __pyx_L1_error)

      /* "View.MemoryView":748
 * 
 *     for dim, index in enumerate(indices):
 *         if PyIndex_Check(index):             # <<<<<<<<<<<<<<
 *             cindex = index
 *             slice_memviewslice(
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
    __pyx_t_1 = (__pyx_v_index == Py_None);
    if (__pyx_t_1) {

      /* "View.MemoryView":757
 *                 False)
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1             # <<<<<<<<<<<<<<
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 */
      (__pyx_v_p_dst->shape[__pyx_v_new_ndim]) = 1;

      /* "View.MemoryView":758
 *         elif index is None:
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0             # <<<<<<<<<<<<<<
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1
 */
      (__pyx_v_p_dst->strides[__pyx_v_new_ndim]) = 0;

      /* "View.MemoryView":759
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1             # <<<<<<<<<<<<<<
 *             new_ndim += 1
 *         else:
 */
      (__pyx_v_p_dst->suboffsets[__pyx_v_new_ndim]) = -1L;

      /* "View.MemoryView":760
 *             p_dst.strides[new_ndim] = 0
 *             p_dst.suboffsets[new_ndim] = -1
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 *         else:
 *             start = index.start or 0
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);

      /* "View.MemoryView":756
 *                 0, 0, 0, # have_{start,stop,step}
 *                 False)
 *         elif index is None:             # <<<<<<<<<<<<<<
 *             p_dst.shape[new_ndim] = 1
 *             p_dst.strides[new_ndim] = 0
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":762
 *             new_ndim += 1
 *         else:
 *             start = index.start or 0             # <<<<<<<<<<<<<<
 *             stop = index.stop or 0
 *             step = index.step or 0
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 762, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(2, 762, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 762, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L7_bool_binop_done:;
      __pyx_v_start = __pyx_t_9;

      /* "View.MemoryView":763
 *         else:
 *             start = index.start or 0
 *             stop = index.stop or 0             # <<<<<<<<<<<<<<
 *             step = index.step or 0
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 763, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(2, 763, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 763, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L9_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L9_bool_binop_done:;
      __pyx_v_stop = __pyx_t_9;

      /* "View.MemoryView":764
 *             start = index.start or 0
 *             stop = index.stop or 0
 *             step = index.step or 0             # <<<<<<<<<<<<<<
 * 
 *             have_start = index.start is not None
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 764, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(2, 764, __pyx_L1_error)
      if (!__pyx_t_1) {
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      } else {
        __pyx_t_11 = __Pyx_PyIndex_AsSsize_t(__pyx_t_8); if (unlikely((__pyx_t_11 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 764, __pyx_L1_error)
        __pyx_t_9 = __pyx_t_11;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_9 = 0;
      __pyx_L11_bool_binop_done:;
      __pyx_v_step = __pyx_t_9;

      /* "View.MemoryView":766
 *             step = index.step or 0
 * 
 *             have_start = index.start is not None             # <<<<<<<<<<<<<<
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_start); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 766, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_start = __pyx_t_1;

      /* "View.MemoryView":767
 * 
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None             # <<<<<<<<<<<<<<
 *             have_step = index.step is not None
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 767, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_stop = __pyx_t_1;

      /* "View.MemoryView":768
 *             have_start = index.start is not None
 *             have_stop = index.stop is not None
 *             have_step = index.step is not None             # <<<<<<<<<<<<<<
 * 
 *             slice_memviewslice(
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_step); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 768, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = (__pyx_t_8 != Py_None);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_have_step = __pyx_t_1;

      /* "View.MemoryView":770
 *             have_step = index.step is not None
 * 
 *             slice_memviewslice(             # <<<<<<<<<<<<<<
 *                 p_dst, p_src.shape[dim], p_src.strides[dim], p_src.suboffsets[dim],
 *                 dim, new_ndim, p_suboffset_dim,
 */
      __pyx_t_10 = __pyx_memoryview_slice_memviewslice(__pyx_v_p_dst, (__pyx_v_p_src->shape[__pyx_v_dim]), (__pyx_v_p_src->strides[__pyx_v_dim]), (__pyx_v_p_src->suboffsets[__pyx_v_dim]), __pyx_v_dim, __pyx_v_new_ndim, __pyx_v_p_suboffset_dim, __pyx_v_start, __pyx_v_stop, __pyx_v_step, __pyx_v_have_start, __pyx_v_have_stop, __pyx_v_have_step, 1); if (unlikely(__pyx_t_10 == ((int)-1))) __PYX_ERR(2, 770, __pyx_L1_error)

      /* "View.MemoryView":776
 *                 have_start, have_stop, have_step,
 *                 True)
 *             new_ndim += 1             # <<<<<<<<<<<<<<
 * 
 *     if isinstance(memview, _memoryviewslice):
 */
      __pyx_v_new_ndim = (__pyx_v_new_ndim + 1);
    }
    __pyx_L6:;

    /* "View.MemoryView":747
 *     cdef bint have_start, have_stop, have_step
 * 
 *     for dim, index in enumerate(indices):             # <<<<<<<<<<<<<<
 *         if PyIndex_Check(index):
 *             cindex = index
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __Pyx_XDECREF((PyObject *)__pyx_r);

    /* "View.MemoryView":780
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_dtype_func,
 *                                     memview.dtype_is_object)
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 780, __pyx_L1_error) }

    /* "View.MemoryView":781
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 *     else:
 */
    if (unlikely(!__pyx_v_memviewsliceobj)) { __Pyx_RaiseUnboundLocalError("memviewsliceobj"); __PYX_ERR(2, 781, __pyx_L1_error) }

    /* "View.MemoryView":779
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         return memoryview_fromslice(dst, new_ndim,             # <<<<<<<<<<<<<<
 *                                     memviewsliceobj.to_object_func,
 *                                     memviewsliceobj.to_dtype_func,
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, __pyx_v_memviewsliceobj->to_object_func, __pyx_v_memviewsliceobj->to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 779, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_memoryview_type))))) __PYX_ERR(2, 779, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":778
 *             new_ndim += 1
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         return memoryview_fromslice(dst, new_ndim,
 *                                     memviewsliceobj.to_object_func,
 */
  }

  /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
  /*else*/ {
    __Pyx_XDECREF((PyObject *)__pyx_r);

    /* "View.MemoryView":785
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,
 *                                     memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_dst, __pyx_v_new_ndim, NULL, NULL, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 784, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "View.MemoryView":784
 *                                     memview.dtype_is_object)
 *     else:
 *         return memoryview_fromslice(dst, new_ndim, NULL, NULL,             # <<<<<<<<<<<<<<
 *                                     memview.dtype_is_object)
 * 
 */
    if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_memoryview_type))))) __PYX_ERR(2, 784, __pyx_L1_error)
    __pyx_r = ((struct __pyx_memoryview_obj *)__pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":711
 * 
 * @cname('__pyx_memview_slice')
 * cdef memoryview memview_slice(memoryview memview, object indices):             # <<<<<<<<<<<<<<
 *     cdef int new_ndim = 0, suboffset_dim = -1, dim
 *     cdef bint negative_step
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("View.MemoryView.memview_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_memviewsliceobj);
  __Pyx_XDECREF(__pyx_v_index);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

static int __pyx_memoryview_slice_memviewslice(__Pyx_memviewslice *__pyx_v_dst, Py_ssize_t __pyx_v_shape, Py_ssize_t __pyx_v_stride, Py_ssize_t __pyx_v_suboffset, int __pyx_v_dim, int __pyx_v_new_ndim, int *__pyx_v_suboffset_dim, Py_ssize_t __pyx_v_start, Py_ssize_t __pyx_v_stop, Py_ssize_t __pyx_v_step, int __pyx_v_have_start, int __pyx_v_have_stop, int __pyx_v_have_step, int __pyx_v_is_slice) {
  Py_ssize_t __pyx_v_new_shape;
  int __pyx_v_negative_step;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
  __pyx_t_1 = (!__pyx_v_is_slice);
  if (__pyx_t_1) {

    /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    __pyx_t_1 = (__pyx_v_start < 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":816
 * 
 *         if start < 0:
 *             start += shape             # <<<<<<<<<<<<<<
 *         if not 0 <= start < shape:
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 */
      __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

      /* "View.MemoryView":815
 *     if not is_slice:
 * 
 *         if start < 0:             # <<<<<<<<<<<<<<
 *             start += shape
 *         if not 0 <= start < shape:
 */
    }

    /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    __pyx_t_1 = (0 <= __pyx_v_start);
    if (__pyx_t_1) {
      __pyx_t_1 = (__pyx_v_start < __pyx_v_shape);
    }
    __pyx_t_2 = (!__pyx_t_1);
    if (__pyx_t_2) {

      /* "View.MemoryView":818
 *             start += shape
 *         if not 0 <= start < shape:
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)             # <<<<<<<<<<<<<<
 *     else:
 * 
 */
      __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_IndexError, __pyx_kp_s_Index_out_of_bounds_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 818, __pyx_L1_error)

      /* "View.MemoryView":817
 *         if start < 0:
 *             start += shape
 *         if not 0 <= start < shape:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_IndexError, "Index out of bounds (axis %d)", dim)
 *     else:
 */
    }

    /* "View.MemoryView":813
 *     cdef bint negative_step
 * 
 *     if not is_slice:             # <<<<<<<<<<<<<<
 * 
 *         if start < 0:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":821
 *     else:
 * 
 *         if have_step:             # <<<<<<<<<<<<<<
 *             negative_step = step < 0
 *             if step == 0:
 */
  /*else*/ {
    __pyx_t_2 = (__pyx_v_have_step != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":822
 * 
 *         if have_step:
 *             negative_step = step < 0             # <<<<<<<<<<<<<<
 *             if step == 0:
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 */
      __pyx_v_negative_step = (__pyx_v_step < 0);

      /* "View.MemoryView":823
 *         if have_step:
 *             negative_step = step < 0
 *             if step == 0:             # <<<<<<<<<<<<<<
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 */
      __pyx_t_2 = (__pyx_v_step == 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":824
 *             negative_step = step < 0
 *             if step == 0:
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             negative_step = False
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_ValueError, __pyx_kp_s_Step_may_not_be_zero_axis_d, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 824, __pyx_L1_error)

        /* "View.MemoryView":823
 *         if have_step:
 *             negative_step = step < 0
 *             if step == 0:             # <<<<<<<<<<<<<<
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 */
      }

      /* "View.MemoryView":821
 *     else:
 * 
 *         if have_step:             # <<<<<<<<<<<<<<
 *             negative_step = step < 0
 *             if step == 0:
 */
      goto __pyx_L6;
    }

    /* "View.MemoryView":826
 *                 _err_dim(PyExc_ValueError, "Step may not be zero (axis %d)", dim)
 *         else:
 *             negative_step = False             # <<<<<<<<<<<<<<
 *             step = 1
 * 
 */
    /*else*/ {
      __pyx_v_negative_step = 0;

      /* "View.MemoryView":827
 *         else:
 *             negative_step = False
 *             step = 1             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_step = 1;
    }
    __pyx_L6:;

    /* "View.MemoryView":830
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
    __pyx_t_2 = (__pyx_v_have_start != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":831
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
      __pyx_t_2 = (__pyx_v_start < 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":832
 *         if have_start:
 *             if start < 0:
 *                 start += shape             # <<<<<<<<<<<<<<
 *                 if start < 0:
 *                     start = 0
 */
        __pyx_v_start = (__pyx_v_start + __pyx_v_shape);

        /* "View.MemoryView":833
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        __pyx_t_2 = (__pyx_v_start < 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":834
 *                 start += shape
 *                 if start < 0:
 *                     start = 0             # <<<<<<<<<<<<<<
 *             elif start >= shape:
 *                 if negative_step:
 */
          __pyx_v_start = 0;

          /* "View.MemoryView":833
 *             if start < 0:
 *                 start += shape
 *                 if start < 0:             # <<<<<<<<<<<<<<
 *                     start = 0
 *             elif start >= shape:
 */
        }

        /* "View.MemoryView":831
 * 
 *         if have_start:
 *             if start < 0:             # <<<<<<<<<<<<<<
 *                 start += shape
 *                 if start < 0:
 */
        goto __pyx_L9;
      }

      /* "View.MemoryView":835
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      __pyx_t_2 = (__pyx_v_start >= __pyx_v_shape);
      if (__pyx_t_2) {

        /* "View.MemoryView":836
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
        if (__pyx_v_negative_step) {

          /* "View.MemoryView":837
 *             elif start >= shape:
 *                 if negative_step:
 *                     start = shape - 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     start = shape
 */
          __pyx_v_start = (__pyx_v_shape - 1);

          /* "View.MemoryView":836
 *                     start = 0
 *             elif start >= shape:
 *                 if negative_step:             # <<<<<<<<<<<<<<
 *                     start = shape - 1
 *                 else:
 */
          goto __pyx_L11;
        }

        /* "View.MemoryView":839
 *                     start = shape - 1
 *                 else:
 *                     start = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        /*else*/ {
          __pyx_v_start = __pyx_v_shape;
        }
        __pyx_L11:;

        /* "View.MemoryView":835
 *                 if start < 0:
 *                     start = 0
 *             elif start >= shape:             # <<<<<<<<<<<<<<
 *                 if negative_step:
 *                     start = shape - 1
 */
      }
      __pyx_L9:;

      /* "View.MemoryView":830
 * 
 * 
 *         if have_start:             # <<<<<<<<<<<<<<
 *             if start < 0:
 *                 start += shape
 */
      goto __pyx_L8;
    }

    /* "View.MemoryView":841
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
    /*else*/ {
      if (__pyx_v_negative_step) {

        /* "View.MemoryView":842
 *         else:
 *             if negative_step:
 *                 start = shape - 1             # <<<<<<<<<<<<<<
 *             else:
 *                 start = 0
 */
        __pyx_v_start = (__pyx_v_shape - 1);

        /* "View.MemoryView":841
 *                     start = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 start = shape - 1
 *             else:
 */
        goto __pyx_L12;
      }

      /* "View.MemoryView":844
 *                 start = shape - 1
 *             else:
 *                 start = 0             # <<<<<<<<<<<<<<
 * 
 *         if have_stop:
 */
      /*else*/ {
        __pyx_v_start = 0;
      }
      __pyx_L12:;
    }
    __pyx_L8:;

    /* "View.MemoryView":846
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
    __pyx_t_2 = (__pyx_v_have_stop != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":847
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
      __pyx_t_2 = (__pyx_v_stop < 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":848
 *         if have_stop:
 *             if stop < 0:
 *                 stop += shape             # <<<<<<<<<<<<<<
 *                 if stop < 0:
 *                     stop = 0
 */
        __pyx_v_stop = (__pyx_v_stop + __pyx_v_shape);

        /* "View.MemoryView":849
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        __pyx_t_2 = (__pyx_v_stop < 0);
        if (__pyx_t_2) {

          /* "View.MemoryView":850
 *                 stop += shape
 *                 if stop < 0:
 *                     stop = 0             # <<<<<<<<<<<<<<
 *             elif stop > shape:
 *                 stop = shape
 */
          __pyx_v_stop = 0;

          /* "View.MemoryView":849
 *             if stop < 0:
 *                 stop += shape
 *                 if stop < 0:             # <<<<<<<<<<<<<<
 *                     stop = 0
 *             elif stop > shape:
 */
        }

        /* "View.MemoryView":847
 * 
 *         if have_stop:
 *             if stop < 0:             # <<<<<<<<<<<<<<
 *                 stop += shape
 *                 if stop < 0:
 */
        goto __pyx_L14;
      }

      /* "View.MemoryView":851
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      __pyx_t_2 = (__pyx_v_stop > __pyx_v_shape);
      if (__pyx_t_2) {

        /* "View.MemoryView":852
 *                     stop = 0
 *             elif stop > shape:
 *                 stop = shape             # <<<<<<<<<<<<<<
 *         else:
 *             if negative_step:
 */
        __pyx_v_stop = __pyx_v_shape;

        /* "View.MemoryView":851
 *                 if stop < 0:
 *                     stop = 0
 *             elif stop > shape:             # <<<<<<<<<<<<<<
 *                 stop = shape
 *         else:
 */
      }
      __pyx_L14:;

      /* "View.MemoryView":846
 *                 start = 0
 * 
 *         if have_stop:             # <<<<<<<<<<<<<<
 *             if stop < 0:
 *                 stop += shape
 */
      goto __pyx_L13;
    }

    /* "View.MemoryView":854
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
    /*else*/ {
      if (__pyx_v_negative_step) {

        /* "View.MemoryView":855
 *         else:
 *             if negative_step:
 *                 stop = -1             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = shape
 */
        __pyx_v_stop = -1L;

        /* "View.MemoryView":854
 *                 stop = shape
 *         else:
 *             if negative_step:             # <<<<<<<<<<<<<<
 *                 stop = -1
 *             else:
 */
        goto __pyx_L16;
      }

      /* "View.MemoryView":857
 *                 stop = -1
 *             else:
 *                 stop = shape             # <<<<<<<<<<<<<<
 * 
 * 
 */
      /*else*/ {
        __pyx_v_stop = __pyx_v_shape;
      }
      __pyx_L16:;
    }
    __pyx_L13:;

    /* "View.MemoryView":861
 * 
 *         with cython.cdivision(True):
 *             new_shape = (stop - start) // step             # <<<<<<<<<<<<<<
 * 
 *             if (stop - start) - step * new_shape:
 */
    __pyx_v_new_shape = ((__pyx_v_stop - __pyx_v_start) / __pyx_v_step);

    /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    __pyx_t_2 = (((__pyx_v_stop - __pyx_v_start) - (__pyx_v_step * __pyx_v_new_shape)) != 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":864
 * 
 *             if (stop - start) - step * new_shape:
 *                 new_shape += 1             # <<<<<<<<<<<<<<
 * 
 *         if new_shape < 0:
 */
      __pyx_v_new_shape = (__pyx_v_new_shape + 1);

      /* "View.MemoryView":863
 *             new_shape = (stop - start) // step
 * 
 *             if (stop - start) - step * new_shape:             # <<<<<<<<<<<<<<
 *                 new_shape += 1
 * 
 */
    }

    /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    __pyx_t_2 = (__pyx_v_new_shape < 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":867
 * 
 *         if new_shape < 0:
 *             new_shape = 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_new_shape = 0;

      /* "View.MemoryView":866
 *                 new_shape += 1
 * 
 *         if new_shape < 0:             # <<<<<<<<<<<<<<
 *             new_shape = 0
 * 
 */
    }

    /* "View.MemoryView":870
 * 
 * 
 *         dst.strides[new_ndim] = stride * step             # <<<<<<<<<<<<<<
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset
 */
    (__pyx_v_dst->strides[__pyx_v_new_ndim]) = (__pyx_v_stride * __pyx_v_step);

    /* "View.MemoryView":871
 * 
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape             # <<<<<<<<<<<<<<
 *         dst.suboffsets[new_ndim] = suboffset
 * 
 */
    (__pyx_v_dst->shape[__pyx_v_new_ndim]) = __pyx_v_new_shape;

    /* "View.MemoryView":872
 *         dst.strides[new_ndim] = stride * step
 *         dst.shape[new_ndim] = new_shape
 *         dst.suboffsets[new_ndim] = suboffset             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_dst->suboffsets[__pyx_v_new_ndim]) = __pyx_v_suboffset;
  }
  __pyx_L3:;

  /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
  __pyx_t_2 = ((__pyx_v_suboffset_dim[0]) < 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":876
 * 
 *     if suboffset_dim[0] < 0:
 *         dst.data += start * stride             # <<<<<<<<<<<<<<
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 */
    __pyx_v_dst->data = (__pyx_v_dst->data + (__pyx_v_start * __pyx_v_stride));

    /* "View.MemoryView":875
 * 
 * 
 *     if suboffset_dim[0] < 0:             # <<<<<<<<<<<<<<
 *         dst.data += start * stride
 *     else:
 */
    goto __pyx_L19;
  }

  /* "View.MemoryView":878
 *         dst.data += start * stride
 *     else:
 *         dst.suboffsets[suboffset_dim[0]] += start * stride             # <<<<<<<<<<<<<<
 * 
 *     if suboffset >= 0:
 */
  /*else*/ {
    __pyx_t_3 = (__pyx_v_suboffset_dim[0]);
    (__pyx_v_dst->suboffsets[__pyx_t_3]) = ((__pyx_v_dst->suboffsets[__pyx_t_3]) + (__pyx_v_start * __pyx_v_stride));
  }
  __pyx_L19:;

  /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  __pyx_t_2 = (__pyx_v_suboffset >= 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
    __pyx_t_2 = (!__pyx_v_is_slice);
    if (__pyx_t_2) {

      /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
      __pyx_t_2 = (__pyx_v_new_ndim == 0);
      if (__pyx_t_2) {

        /* "View.MemoryView":883
 *         if not is_slice:
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "
 */
        __pyx_v_dst->data = ((((char **)__pyx_v_dst->data)[0]) + __pyx_v_suboffset);

        /* "View.MemoryView":882
 *     if suboffset >= 0:
 *         if not is_slice:
 *             if new_ndim == 0:             # <<<<<<<<<<<<<<
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 */
        goto __pyx_L22;
      }

      /* "View.MemoryView":885
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "             # <<<<<<<<<<<<<<
 *                                      "must be indexed and not sliced", dim)
 *         else:
 */
      /*else*/ {

        /* "View.MemoryView":886
 *             else:
 *                 _err_dim(PyExc_IndexError, "All dimensions preceding dimension %d "
 *                                      "must be indexed and not sliced", dim)             # <<<<<<<<<<<<<<
 *         else:
 *             suboffset_dim[0] = new_ndim
 */
        __pyx_t_3 = __pyx_memoryview_err_dim(PyExc_IndexError, __pyx_kp_s_All_dimensions_preceding_dimensi, __pyx_v_dim); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 885, __pyx_L1_error)
      }
      __pyx_L22:;

      /* "View.MemoryView":881
 * 
 *     if suboffset >= 0:
 *         if not is_slice:             # <<<<<<<<<<<<<<
 *             if new_ndim == 0:
 *                 dst.data = (<char **> dst.data)[0] + suboffset
 */
      goto __pyx_L21;
    }

    /* "View.MemoryView":888
 *                                      "must be indexed and not sliced", dim)
 *         else:
 *             suboffset_dim[0] = new_ndim             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
    /*else*/ {
      (__pyx_v_suboffset_dim[0]) = __pyx_v_new_ndim;
    }
    __pyx_L21:;

    /* "View.MemoryView":880
 *         dst.suboffsets[suboffset_dim[0]] += start * stride
 * 
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         if not is_slice:
 *             if new_ndim == 0:
 */
  }

  /* "View.MemoryView":890
 *             suboffset_dim[0] = new_ndim
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":793
 * 
 * @cname('__pyx_memoryview_slice_memviewslice')
 * cdef int slice_memviewslice(             # <<<<<<<<<<<<<<
 *         __Pyx_memviewslice *dst,
 *         Py_ssize_t shape, Py_ssize_t stride, Py_ssize_t suboffset,
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("View.MemoryView.slice_memviewslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

static char *__pyx_pybuffer_index(Py_buffer *__pyx_v_view, char *__pyx_v_bufp, Py_ssize_t __pyx_v_index, Py_ssize_t __pyx_v_dim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_suboffset;
  Py_ssize_t __pyx_v_itemsize;
  char *__pyx_v_resultp;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_UCS4 __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pybuffer_index", 1);

  /* "View.MemoryView":898
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t itemsize = view.itemsize
 *     cdef char *resultp
 */
  __pyx_v_suboffset = -1L;

  /* "View.MemoryView":899
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 *     cdef Py_ssize_t itemsize = view.itemsize             # <<<<<<<<<<<<<<
 *     cdef char *resultp
 * 
 */
  __pyx_t_1 = __pyx_v_view->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len // itemsize
 *         stride = itemsize
 */
  __pyx_t_2 = (__pyx_v_view->ndim == 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":903
 * 
 *     if view.ndim == 0:
 *         shape = view.len // itemsize             # <<<<<<<<<<<<<<
 *         stride = itemsize
 *     else:
 */
    if (unlikely(__pyx_v_itemsize == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      __PYX_ERR(2, 903, __pyx_L1_error)
    }
    else if (sizeof(Py_ssize_t) == sizeof(long) && (!(((Py_ssize_t)-1) > 0)) && unlikely(__pyx_v_itemsize == (Py_ssize_t)-1)  && unlikely(__Pyx_UNARY_NEG_WOULD_OVERFLOW(__pyx_v_view->len))) {
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      __PYX_ERR(2, 903, __pyx_L1_error)
    }
    __pyx_v_shape = __Pyx_div_Py_ssize_t(__pyx_v_view->len, __pyx_v_itemsize);

    /* "View.MemoryView":904
 *     if view.ndim == 0:
 *         shape = view.len // itemsize
 *         stride = itemsize             # <<<<<<<<<<<<<<
 *     else:
 *         shape = view.shape[dim]
 */
    __pyx_v_stride = __pyx_v_itemsize;

    /* "View.MemoryView":902
 *     cdef char *resultp
 * 
 *     if view.ndim == 0:             # <<<<<<<<<<<<<<
 *         shape = view.len // itemsize
 *         stride = itemsize
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":906
 *         stride = itemsize
 *     else:
 *         shape = view.shape[dim]             # <<<<<<<<<<<<<<
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 */
  /*else*/ {
    __pyx_v_shape = (__pyx_v_view->shape[__pyx_v_dim]);

    /* "View.MemoryView":907
 *     else:
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]             # <<<<<<<<<<<<<<
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]
 */
    __pyx_v_stride = (__pyx_v_view->strides[__pyx_v_dim]);

    /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    __pyx_t_2 = (__pyx_v_view->suboffsets != NULL);
    if (__pyx_t_2) {

      /* "View.MemoryView":909
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:
 *             suboffset = view.suboffsets[dim]             # <<<<<<<<<<<<<<
 * 
 *     if index < 0:
 */
      __pyx_v_suboffset = (__pyx_v_view->suboffsets[__pyx_v_dim]);

      /* "View.MemoryView":908
 *         shape = view.shape[dim]
 *         stride = view.strides[dim]
 *         if view.suboffsets != NULL:             # <<<<<<<<<<<<<<
 *             suboffset = view.suboffsets[dim]
 * 
 */
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  __pyx_t_2 = (__pyx_v_index < 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":912
 * 
 *     if index < 0:
 *         index += view.shape[dim]             # <<<<<<<<<<<<<<
 *         if index < 0:
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 */
    __pyx_v_index = (__pyx_v_index + (__pyx_v_view->shape[__pyx_v_dim]));

    /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */
    __pyx_t_2 = (__pyx_v_index < 0);
    if (unlikely(__pyx_t_2)) {

      /* "View.MemoryView":914
 *         index += view.shape[dim]
 *         if index < 0:
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"             # <<<<<<<<<<<<<<
 * 
 *     if index >= shape:
 */
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = 0;
      __pyx_t_4 = 127;
      __Pyx_INCREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
      __pyx_t_1 += 37;
      __Pyx_GIVEREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Out_of_bounds_on_buffer_access_a);
      __pyx_t_5 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u__7);
      __pyx_t_1 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__7);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__7);
      __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 914, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(2, 914, __pyx_L1_error)

      /* "View.MemoryView":913
 *     if index < 0:
 *         index += view.shape[dim]
 *         if index < 0:             # <<<<<<<<<<<<<<
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */
    }

    /* "View.MemoryView":911
 *             suboffset = view.suboffsets[dim]
 * 
 *     if index < 0:             # <<<<<<<<<<<<<<
 *         index += view.shape[dim]
 *         if index < 0:
 */
  }

  /* "View.MemoryView":916
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */
  __pyx_t_2 = (__pyx_v_index >= __pyx_v_shape);
  if (unlikely(__pyx_t_2)) {

    /* "View.MemoryView":917
 * 
 *     if index >= shape:
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"             # <<<<<<<<<<<<<<
 * 
 *     resultp = bufp + index * stride
 */
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_4 = 127;
    __Pyx_INCREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
    __pyx_t_1 += 37;
    __Pyx_GIVEREF(__pyx_kp_u_Out_of_bounds_on_buffer_access_a);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Out_of_bounds_on_buffer_access_a);
    __pyx_t_3 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_dim, 0, ' ', 'd'); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u__7);
    __pyx_t_1 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__7);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u__7);
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 917, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_3, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 917, __pyx_L1_error)

    /* "View.MemoryView":916
 *             raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     if index >= shape:             # <<<<<<<<<<<<<<
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 */
  }

  /* "View.MemoryView":919
 *         raise IndexError, f"Out of bounds on buffer access (axis {dim})"
 * 
 *     resultp = bufp + index * stride             # <<<<<<<<<<<<<<
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset
 */
  __pyx_v_resultp = (__pyx_v_bufp + (__pyx_v_index * __pyx_v_stride));

  /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  __pyx_t_2 = (__pyx_v_suboffset >= 0);
  if (__pyx_t_2) {

    /* "View.MemoryView":921
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:
 *         resultp = (<char **> resultp)[0] + suboffset             # <<<<<<<<<<<<<<
 * 
 *     return resultp
 */
    __pyx_v_resultp = ((((char **)__pyx_v_resultp)[0]) + __pyx_v_suboffset);

    /* "View.MemoryView":920
 * 
 *     resultp = bufp + index * stride
 *     if suboffset >= 0:             # <<<<<<<<<<<<<<
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 */
  }

  /* "View.MemoryView":923
 *         resultp = (<char **> resultp)[0] + suboffset
 * 
 *     return resultp             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_resultp;
  goto __pyx_L0;

  /* "View.MemoryView":896
 * 
 * @cname('__pyx_pybuffer_index')
 * cdef char *pybuffer_index(Py_buffer *view, char *bufp, Py_ssize_t index,             # <<<<<<<<<<<<<<
 *                           Py_ssize_t dim) except NULL:
 *     cdef Py_ssize_t shape, stride, suboffset = -1
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("View.MemoryView.pybuffer_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

static int __pyx_memslice_transpose(__Pyx_memviewslice *__pyx_v_memslice) {
  int __pyx_v_ndim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  int __pyx_v_i;
  int __pyx_v_j;
  int __pyx_r;
  int __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  long __pyx_t_3;
  long __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "View.MemoryView":930
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:
 *     cdef int ndim = memslice.memview.view.ndim             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 */
  __pyx_t_1 = __pyx_v_memslice->memview->view.ndim;
  __pyx_v_ndim = __pyx_t_1;

  /* "View.MemoryView":932
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 *     cdef Py_ssize_t *shape = memslice.shape             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t *strides = memslice.strides
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->shape;
  __pyx_v_shape = __pyx_t_2;

  /* "View.MemoryView":933
 * 
 *     cdef Py_ssize_t *shape = memslice.shape
 *     cdef Py_ssize_t *strides = memslice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = __pyx_v_memslice->strides;
  __pyx_v_strides = __pyx_t_2;

  /* "View.MemoryView":937
 * 
 *     cdef int i, j
 *     for i in range(ndim // 2):             # <<<<<<<<<<<<<<
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 */
  __pyx_t_3 = __Pyx_div_long(__pyx_v_ndim, 2);
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_4; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":938
 *     cdef int i, j
 *     for i in range(ndim // 2):
 *         j = ndim - 1 - i             # <<<<<<<<<<<<<<
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]
 */
    __pyx_v_j = ((__pyx_v_ndim - 1) - __pyx_v_i);

    /* "View.MemoryView":939
 *     for i in range(ndim // 2):
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]             # <<<<<<<<<<<<<<
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 */
    __pyx_t_5 = (__pyx_v_strides[__pyx_v_j]);
    __pyx_t_6 = (__pyx_v_strides[__pyx_v_i]);
    (__pyx_v_strides[__pyx_v_i]) = __pyx_t_5;
    (__pyx_v_strides[__pyx_v_j]) = __pyx_t_6;

    /* "View.MemoryView":940
 *         j = ndim - 1 - i
 *         strides[i], strides[j] = strides[j], strides[i]
 *         shape[i], shape[j] = shape[j], shape[i]             # <<<<<<<<<<<<<<
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 */
    __pyx_t_6 = (__pyx_v_shape[__pyx_v_j]);
    __pyx_t_5 = (__pyx_v_shape[__pyx_v_i]);
    (__pyx_v_shape[__pyx_v_i]) = __pyx_t_6;
    (__pyx_v_shape[__pyx_v_j]) = __pyx_t_5;

    /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    __pyx_t_8 = ((__pyx_v_memslice->suboffsets[__pyx_v_i]) >= 0);
    if (!__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_8 = ((__pyx_v_memslice->suboffsets[__pyx_v_j]) >= 0);
    __pyx_t_7 = __pyx_t_8;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_7) {

      /* "View.MemoryView":943
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")             # <<<<<<<<<<<<<<
 * 
 *     return 0
 */
      __pyx_t_9 = __pyx_memoryview_err(PyExc_ValueError, __pyx_kp_s_Cannot_transpose_memoryview_with); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(2, 943, __pyx_L1_error)

      /* "View.MemoryView":942
 *         shape[i], shape[j] = shape[j], shape[i]
 * 
 *         if memslice.suboffsets[i] >= 0 or memslice.suboffsets[j] >= 0:             # <<<<<<<<<<<<<<
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 */
    }
  }

  /* "View.MemoryView":945
 *             _err(PyExc_ValueError, "Cannot transpose memoryview with indirect dimensions")
 * 
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":929
 * 
 * @cname('__pyx_memslice_transpose')
 * cdef int transpose_memslice(__Pyx_memviewslice *memslice) except -1 nogil:             # <<<<<<<<<<<<<<
 *     cdef int ndim = memslice.memview.view.ndim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("View.MemoryView.transpose_memslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":963
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 */

/* Python wrapper */
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_memoryviewslice___dealloc__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_memoryviewslice___pyx_pf_15View_dot_MemoryView_16_memoryviewslice___dealloc__(struct __pyx_memoryviewslice_obj *__pyx_v_self) {

  /* "View.MemoryView":964
 * 
 *     def __dealloc__(self):
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)             # <<<<<<<<<<<<<<
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 */
  __PYX_XCLEAR_MEMVIEW((&__pyx_v_self->from_slice), 1);

  /* "View.MemoryView":963
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 */

  /* function exit code */
}

/* "View.MemoryView":966
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

static PyObject *__pyx_memoryviewslice_convert_item_to_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_item_to_object", 1);

  /* "View.MemoryView":967
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->to_object_func != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":968
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)             # <<<<<<<<<<<<<<
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_v_self->to_object_func(__pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 968, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "View.MemoryView":967
 * 
 *     cdef convert_item_to_object(self, char *itemp):
 *         if self.to_object_func != NULL:             # <<<<<<<<<<<<<<
 *             return self.to_object_func(itemp)
 *         else:
 */
  }

  /* "View.MemoryView":970
 *             return self.to_object_func(itemp)
 *         else:
 *             return memoryview.convert_item_to_object(self, itemp)             # <<<<<<<<<<<<<<
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_memoryview_convert_item_to_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 970, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "View.MemoryView":966
 *         __PYX_XCLEAR_MEMVIEW(&self.from_slice, 1)
 * 
 *     cdef convert_item_to_object(self, char *itemp):             # <<<<<<<<<<<<<<
 *         if self.to_object_func != NULL:
 *             return self.to_object_func(itemp)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.convert_item_to_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":972
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

static PyObject *__pyx_memoryviewslice_assign_item_from_object(struct __pyx_memoryviewslice_obj *__pyx_v_self, char *__pyx_v_itemp, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("assign_item_from_object", 1);

  /* "View.MemoryView":973
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
  __pyx_t_1 = (__pyx_v_self->to_dtype_func != NULL);
  if (__pyx_t_1) {

    /* "View.MemoryView":974
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)             # <<<<<<<<<<<<<<
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)
 */
    __pyx_t_2 = __pyx_v_self->to_dtype_func(__pyx_v_itemp, __pyx_v_value); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(2, 974, __pyx_L1_error)

    /* "View.MemoryView":973
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):
 *         if self.to_dtype_func != NULL:             # <<<<<<<<<<<<<<
 *             self.to_dtype_func(itemp, value)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":976
 *             self.to_dtype_func(itemp, value)
 *         else:
 *             memoryview.assign_item_from_object(self, itemp, value)             # <<<<<<<<<<<<<<
 * 
 *     cdef _get_base(self):
 */
  /*else*/ {
    __pyx_t_3 = __pyx_memoryview_assign_item_from_object(((struct __pyx_memoryview_obj *)__pyx_v_self), __pyx_v_itemp, __pyx_v_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 976, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "View.MemoryView":972
 *             return memoryview.convert_item_to_object(self, itemp)
 * 
 *     cdef assign_item_from_object(self, char *itemp, object value):             # <<<<<<<<<<<<<<
 *         if self.to_dtype_func != NULL:
 *             self.to_dtype_func(itemp, value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.assign_item_from_object", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":978
 *             memoryview.assign_item_from_object(self, itemp, value)
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

static PyObject *__pyx_memoryviewslice__get_base(struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_base", 1);

  /* "View.MemoryView":979
 * 
 *     cdef _get_base(self):
 *         return self.from_object             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->from_object);
  __pyx_r = __pyx_v_self->from_object;
  goto __pyx_L0;

  /* "View.MemoryView":978
 *             memoryview.assign_item_from_object(self, itemp, value)
 * 
 *     cdef _get_base(self):             # <<<<<<<<<<<<<<
 *         return self.from_object
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf___pyx_memoryviewslice___reduce_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice___reduce_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 1);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

/* Python wrapper */
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_pw___pyx_memoryviewslice_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(2, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(2, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf___pyx_memoryviewslice_2__setstate_cython__(((struct __pyx_memoryviewslice_obj *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf___pyx_memoryviewslice_2__setstate_cython__(CYTHON_UNUSED struct __pyx_memoryviewslice_obj *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 1);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(2, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._memoryviewslice.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

static PyObject *__pyx_memoryview_fromslice(__Pyx_memviewslice __pyx_v_memviewslice, int __pyx_v_ndim, PyObject *(*__pyx_v_to_object_func)(char *), int (*__pyx_v_to_dtype_func)(char *, PyObject *), int __pyx_v_dtype_is_object) {
  struct __pyx_memoryviewslice_obj *__pyx_v_result = 0;
  Py_ssize_t __pyx_v_suboffset;
  PyObject *__pyx_v_length = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_TypeInfo *__pyx_t_4;
  Py_buffer __pyx_t_5;
  Py_ssize_t *__pyx_t_6;
  Py_ssize_t *__pyx_t_7;
  Py_ssize_t *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_fromslice", 1);

  /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_memviewslice.memview) == Py_None);
  if (__pyx_t_1) {

    /* "View.MemoryView":1008
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "View.MemoryView":1007
 *     cdef _memoryviewslice result
 * 
 *     if <PyObject *> memviewslice.memview == Py_None:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  }

  /* "View.MemoryView":1013
 * 
 * 
 *     result = _memoryviewslice.__new__(_memoryviewslice, None, 0, dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 *     result.from_slice = memviewslice
 */
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_dtype_is_object); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, Py_None)) __PYX_ERR(2, 1013, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_0)) __PYX_ERR(2, 1013, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_2)) __PYX_ERR(2, 1013, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = ((PyObject *)__pyx_tp_new__memoryviewslice(((PyTypeObject *)__pyx_memoryviewslice_type), __pyx_t_3, NULL)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1013, __pyx_L1_error)
  __Pyx_GOTREF((PyObject *)__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_result = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "View.MemoryView":1015
 *     result = _memoryviewslice.__new__(_memoryviewslice, None, 0, dtype_is_object)
 * 
 *     result.from_slice = memviewslice             # <<<<<<<<<<<<<<
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 */
  __pyx_v_result->from_slice = __pyx_v_memviewslice;

  /* "View.MemoryView":1016
 * 
 *     result.from_slice = memviewslice
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)             # <<<<<<<<<<<<<<
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()
 */
  __PYX_INC_MEMVIEW((&__pyx_v_memviewslice), 1);

  /* "View.MemoryView":1018
 *     __PYX_INC_MEMVIEW(&memviewslice, 1)
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()             # <<<<<<<<<<<<<<
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_memoryview *)((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->__pyx_vtab)->_get_base(((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_result->from_object);
  __Pyx_DECREF(__pyx_v_result->from_object);
  __pyx_v_result->from_object = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "View.MemoryView":1019
 * 
 *     result.from_object = (<memoryview> memviewslice.memview)._get_base()
 *     result.typeinfo = memviewslice.memview.typeinfo             # <<<<<<<<<<<<<<
 * 
 *     result.view = memviewslice.memview.view
 */
  __pyx_t_4 = __pyx_v_memviewslice.memview->typeinfo;
  __pyx_v_result->__pyx_base.typeinfo = __pyx_t_4;

  /* "View.MemoryView":1021
 *     result.typeinfo = memviewslice.memview.typeinfo
 * 
 *     result.view = memviewslice.memview.view             # <<<<<<<<<<<<<<
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 */
  __pyx_t_5 = __pyx_v_memviewslice.memview->view;
  __pyx_v_result->__pyx_base.view = __pyx_t_5;

  /* "View.MemoryView":1022
 * 
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data             # <<<<<<<<<<<<<<
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 */
  __pyx_v_result->__pyx_base.view.buf = ((void *)__pyx_v_memviewslice.data);

  /* "View.MemoryView":1023
 *     result.view = memviewslice.memview.view
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim             # <<<<<<<<<<<<<<
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)
 */
  __pyx_v_result->__pyx_base.view.ndim = __pyx_v_ndim;

  /* "View.MemoryView":1024
 *     result.view.buf = <void *> memviewslice.data
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None             # <<<<<<<<<<<<<<
 *     Py_INCREF(Py_None)
 * 
 */
  ((Py_buffer *)(&__pyx_v_result->__pyx_base.view))->obj = Py_None;

  /* "View.MemoryView":1025
 *     result.view.ndim = ndim
 *     (<__pyx_buffer *> &result.view).obj = Py_None
 *     Py_INCREF(Py_None)             # <<<<<<<<<<<<<<
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 */
  Py_INCREF(Py_None);

  /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
  __pyx_t_1 = ((((struct __pyx_memoryview_obj *)__pyx_v_memviewslice.memview)->flags & PyBUF_WRITABLE) != 0);
  if (__pyx_t_1) {

    /* "View.MemoryView":1028
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:
 *         result.flags = PyBUF_RECORDS             # <<<<<<<<<<<<<<
 *     else:
 *         result.flags = PyBUF_RECORDS_RO
 */
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS;

    /* "View.MemoryView":1027
 *     Py_INCREF(Py_None)
 * 
 *     if (<memoryview>memviewslice.memview).flags & PyBUF_WRITABLE:             # <<<<<<<<<<<<<<
 *         result.flags = PyBUF_RECORDS
 *     else:
 */
    goto __pyx_L4;
  }

  /* "View.MemoryView":1030
 *         result.flags = PyBUF_RECORDS
 *     else:
 *         result.flags = PyBUF_RECORDS_RO             # <<<<<<<<<<<<<<
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 */
  /*else*/ {
    __pyx_v_result->__pyx_base.flags = PyBUF_RECORDS_RO;
  }
  __pyx_L4:;

  /* "View.MemoryView":1032
 *         result.flags = PyBUF_RECORDS_RO
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape             # <<<<<<<<<<<<<<
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides
 * 
 */
  __pyx_v_result->__pyx_base.view.shape = ((Py_ssize_t *)__pyx_v_result->from_slice.shape);

  /* "View.MemoryView":1033
 * 
 *     result.view.shape = <Py_ssize_t *> result.from_slice.shape
 *     result.view.strides = <Py_ssize_t *> result.from_slice.strides             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_result->__pyx_base.view.strides = ((Py_ssize_t *)__pyx_v_result->from_slice.strides);

  /* "View.MemoryView":1036
 * 
 * 
 *     result.view.suboffsets = NULL             # <<<<<<<<<<<<<<
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 */
  __pyx_v_result->__pyx_base.view.suboffsets = NULL;

  /* "View.MemoryView":1037
 * 
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:             # <<<<<<<<<<<<<<
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 */
  __pyx_t_7 = (__pyx_v_result->from_slice.suboffsets + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->from_slice.suboffsets; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_v_suboffset = (__pyx_t_6[0]);

    /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    __pyx_t_1 = (__pyx_v_suboffset >= 0);
    if (__pyx_t_1) {

      /* "View.MemoryView":1039
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_result->__pyx_base.view.suboffsets = ((Py_ssize_t *)__pyx_v_result->from_slice.suboffsets);

      /* "View.MemoryView":1040
 *         if suboffset >= 0:
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break             # <<<<<<<<<<<<<<
 * 
 *     result.view.len = result.view.itemsize
 */
      goto __pyx_L6_break;

      /* "View.MemoryView":1038
 *     result.view.suboffsets = NULL
 *     for suboffset in result.from_slice.suboffsets[:ndim]:
 *         if suboffset >= 0:             # <<<<<<<<<<<<<<
 *             result.view.suboffsets = <Py_ssize_t *> result.from_slice.suboffsets
 *             break
 */
    }
  }
  __pyx_L6_break:;

  /* "View.MemoryView":1042
 *             break
 * 
 *     result.view.len = result.view.itemsize             # <<<<<<<<<<<<<<
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length
 */
  __pyx_t_9 = __pyx_v_result->__pyx_base.view.itemsize;
  __pyx_v_result->__pyx_base.view.len = __pyx_t_9;

  /* "View.MemoryView":1043
 * 
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         result.view.len *= length
 * 
 */
  __pyx_t_7 = (__pyx_v_result->__pyx_base.view.shape + __pyx_v_ndim);
  for (__pyx_t_8 = __pyx_v_result->__pyx_base.view.shape; __pyx_t_8 < __pyx_t_7; __pyx_t_8++) {
    __pyx_t_6 = __pyx_t_8;
    __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_6[0])); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1043, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_length, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1044
 *     result.view.len = result.view.itemsize
 *     for length in result.view.shape[:ndim]:
 *         result.view.len *= length             # <<<<<<<<<<<<<<
 * 
 *     result.to_object_func = to_object_func
 */
    __pyx_t_2 = PyInt_FromSsize_t(__pyx_v_result->__pyx_base.view.len); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyNumber_InPlaceMultiply(__pyx_t_2, __pyx_v_length); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __Pyx_PyIndex_AsSsize_t(__pyx_t_3); if (unlikely((__pyx_t_9 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(2, 1044, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_result->__pyx_base.view.len = __pyx_t_9;
  }

  /* "View.MemoryView":1046
 *         result.view.len *= length
 * 
 *     result.to_object_func = to_object_func             # <<<<<<<<<<<<<<
 *     result.to_dtype_func = to_dtype_func
 * 
 */
  __pyx_v_result->to_object_func = __pyx_v_to_object_func;

  /* "View.MemoryView":1047
 * 
 *     result.to_object_func = to_object_func
 *     result.to_dtype_func = to_dtype_func             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  __pyx_v_result->to_dtype_func = __pyx_v_to_dtype_func;

  /* "View.MemoryView":1049
 *     result.to_dtype_func = to_dtype_func
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_result);
  __pyx_r = ((PyObject *)__pyx_v_result);
  goto __pyx_L0;

  /* "View.MemoryView":999
 * 
 * @cname('__pyx_memoryview_fromslice')
 * cdef memoryview_fromslice(__Pyx_memviewslice memviewslice,             # <<<<<<<<<<<<<<
 *                           int ndim,
 *                           object (*to_object_func)(char *),
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("View.MemoryView.memoryview_fromslice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_length);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

static __Pyx_memviewslice *__pyx_memoryview_get_slice_from_memoryview(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_mslice) {
  struct __pyx_memoryviewslice_obj *__pyx_v_obj = 0;
  __Pyx_memviewslice *__pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_slice_from_memview", 1);

  /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":1056
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview             # <<<<<<<<<<<<<<
 *         return &obj.from_slice
 *     else:
 */
    if (!(likely(((((PyObject *)__pyx_v_memview)) == Py_None) || likely(__Pyx_TypeTest(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type))))) __PYX_ERR(2, 1056, __pyx_L1_error)
    __pyx_t_2 = ((PyObject *)__pyx_v_memview);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v_obj = ((struct __pyx_memoryviewslice_obj *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "View.MemoryView":1057
 *     if isinstance(memview, _memoryviewslice):
 *         obj = memview
 *         return &obj.from_slice             # <<<<<<<<<<<<<<
 *     else:
 *         slice_copy(memview, mslice)
 */
    __pyx_r = (&__pyx_v_obj->from_slice);
    goto __pyx_L0;

    /* "View.MemoryView":1055
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         obj = memview
 *         return &obj.from_slice
 */
  }

  /* "View.MemoryView":1059
 *         return &obj.from_slice
 *     else:
 *         slice_copy(memview, mslice)             # <<<<<<<<<<<<<<
 *         return mslice
 * 
 */
  /*else*/ {
    __pyx_memoryview_slice_copy(__pyx_v_memview, __pyx_v_mslice);

    /* "View.MemoryView":1060
 *     else:
 *         slice_copy(memview, mslice)
 *         return mslice             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_slice_copy')
 */
    __pyx_r = __pyx_v_mslice;
    goto __pyx_L0;
  }

  /* "View.MemoryView":1052
 * 
 * @cname('__pyx_memoryview_get_slice_from_memoryview')
 * cdef __Pyx_memviewslice *get_slice_from_memview(memoryview memview,             # <<<<<<<<<<<<<<
 *                                                    __Pyx_memviewslice *mslice) except NULL:
 *     cdef _memoryviewslice obj
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView.get_slice_from_memview", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_obj);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst) noexcept:             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

static void __pyx_memoryview_slice_copy(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_dst) {
  int __pyx_v_dim;
  Py_ssize_t *__pyx_v_shape;
  Py_ssize_t *__pyx_v_strides;
  Py_ssize_t *__pyx_v_suboffsets;
  Py_ssize_t *__pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;

  /* "View.MemoryView":1067
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 * 
 *     shape = memview.view.shape             # <<<<<<<<<<<<<<
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets
 */
  __pyx_t_1 = __pyx_v_memview->view.shape;
  __pyx_v_shape = __pyx_t_1;

  /* "View.MemoryView":1068
 * 
 *     shape = memview.view.shape
 *     strides = memview.view.strides             # <<<<<<<<<<<<<<
 *     suboffsets = memview.view.suboffsets
 * 
 */
  __pyx_t_1 = __pyx_v_memview->view.strides;
  __pyx_v_strides = __pyx_t_1;

  /* "View.MemoryView":1069
 *     shape = memview.view.shape
 *     strides = memview.view.strides
 *     suboffsets = memview.view.suboffsets             # <<<<<<<<<<<<<<
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 */
  __pyx_t_1 = __pyx_v_memview->view.suboffsets;
  __pyx_v_suboffsets = __pyx_t_1;

  /* "View.MemoryView":1071
 *     suboffsets = memview.view.suboffsets
 * 
 *     dst.memview = <__pyx_memoryview *> memview             # <<<<<<<<<<<<<<
 *     dst.data = <char *> memview.view.buf
 * 
 */
  __pyx_v_dst->memview = ((struct __pyx_memoryview_obj *)__pyx_v_memview);

  /* "View.MemoryView":1072
 * 
 *     dst.memview = <__pyx_memoryview *> memview
 *     dst.data = <char *> memview.view.buf             # <<<<<<<<<<<<<<
 * 
 *     for dim in range(memview.view.ndim):
 */
  __pyx_v_dst->data = ((char *)__pyx_v_memview->view.buf);

  /* "View.MemoryView":1074
 *     dst.data = <char *> memview.view.buf
 * 
 *     for dim in range(memview.view.ndim):             # <<<<<<<<<<<<<<
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 */
  __pyx_t_2 = __pyx_v_memview->view.ndim;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_dim = __pyx_t_4;

    /* "View.MemoryView":1075
 * 
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]             # <<<<<<<<<<<<<<
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 */
    (__pyx_v_dst->shape[__pyx_v_dim]) = (__pyx_v_shape[__pyx_v_dim]);

    /* "View.MemoryView":1076
 *     for dim in range(memview.view.ndim):
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]             # <<<<<<<<<<<<<<
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1
 * 
 */
    (__pyx_v_dst->strides[__pyx_v_dim]) = (__pyx_v_strides[__pyx_v_dim]);

    /* "View.MemoryView":1077
 *         dst.shape[dim] = shape[dim]
 *         dst.strides[dim] = strides[dim]
 *         dst.suboffsets[dim] = suboffsets[dim] if suboffsets else -1             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object')
 */
    __pyx_t_6 = (__pyx_v_suboffsets != 0);
    if (__pyx_t_6) {
      __pyx_t_5 = (__pyx_v_suboffsets[__pyx_v_dim]);
    } else {
      __pyx_t_5 = -1L;
    }
    (__pyx_v_dst->suboffsets[__pyx_v_dim]) = __pyx_t_5;
  }

  /* "View.MemoryView":1063
 * 
 * @cname('__pyx_memoryview_slice_copy')
 * cdef void slice_copy(memoryview memview, __Pyx_memviewslice *dst) noexcept:             # <<<<<<<<<<<<<<
 *     cdef int dim
 *     cdef (Py_ssize_t*) shape, strides, suboffsets
 */

  /* function exit code */
}

/* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

static PyObject *__pyx_memoryview_copy_object(struct __pyx_memoryview_obj *__pyx_v_memview) {
  __Pyx_memviewslice __pyx_v_memviewslice;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy", 1);

  /* "View.MemoryView":1083
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)             # <<<<<<<<<<<<<<
 *     return memoryview_copy_from_slice(memview, &memviewslice)
 * 
 */
  __pyx_memoryview_slice_copy(__pyx_v_memview, (&__pyx_v_memviewslice));

  /* "View.MemoryView":1084
 *     cdef __Pyx_memviewslice memviewslice
 *     slice_copy(memview, &memviewslice)
 *     return memoryview_copy_from_slice(memview, &memviewslice)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_memoryview_copy_object_from_slice(__pyx_v_memview, (&__pyx_v_memviewslice)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1080
 * 
 * @cname('__pyx_memoryview_copy_object')
 * cdef memoryview_copy(memoryview memview):             # <<<<<<<<<<<<<<
 *     "Create a new memoryview object"
 *     cdef __Pyx_memviewslice memviewslice
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

static PyObject *__pyx_memoryview_copy_object_from_slice(struct __pyx_memoryview_obj *__pyx_v_memview, __Pyx_memviewslice *__pyx_v_memviewslice) {
  PyObject *(*__pyx_v_to_object_func)(char *);
  int (*__pyx_v_to_dtype_func)(char *, PyObject *);
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *(*__pyx_t_2)(char *);
  int (*__pyx_t_3)(char *, PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("memoryview_copy_from_slice", 1);

  /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
  __pyx_t_1 = __Pyx_TypeCheck(((PyObject *)__pyx_v_memview), __pyx_memoryviewslice_type); 
  if (__pyx_t_1) {

    /* "View.MemoryView":1095
 * 
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func             # <<<<<<<<<<<<<<
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 */
    __pyx_t_2 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_object_func;
    __pyx_v_to_object_func = __pyx_t_2;

    /* "View.MemoryView":1096
 *     if isinstance(memview, _memoryviewslice):
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func             # <<<<<<<<<<<<<<
 *     else:
 *         to_object_func = NULL
 */
    __pyx_t_3 = ((struct __pyx_memoryviewslice_obj *)__pyx_v_memview)->to_dtype_func;
    __pyx_v_to_dtype_func = __pyx_t_3;

    /* "View.MemoryView":1094
 *     cdef int (*to_dtype_func)(char *, object) except 0
 * 
 *     if isinstance(memview, _memoryviewslice):             # <<<<<<<<<<<<<<
 *         to_object_func = (<_memoryviewslice> memview).to_object_func
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1098
 *         to_dtype_func = (<_memoryviewslice> memview).to_dtype_func
 *     else:
 *         to_object_func = NULL             # <<<<<<<<<<<<<<
 *         to_dtype_func = NULL
 * 
 */
  /*else*/ {
    __pyx_v_to_object_func = NULL;

    /* "View.MemoryView":1099
 *     else:
 *         to_object_func = NULL
 *         to_dtype_func = NULL             # <<<<<<<<<<<<<<
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 */
    __pyx_v_to_dtype_func = NULL;
  }
  __pyx_L3:;

  /* "View.MemoryView":1101
 *         to_dtype_func = NULL
 * 
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,             # <<<<<<<<<<<<<<
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)
 */
  __Pyx_XDECREF(__pyx_r);

  /* "View.MemoryView":1103
 *     return memoryview_fromslice(memviewslice[0], memview.view.ndim,
 *                                 to_object_func, to_dtype_func,
 *                                 memview.dtype_is_object)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_4 = __pyx_memoryview_fromslice((__pyx_v_memviewslice[0]), __pyx_v_memview->view.ndim, __pyx_v_to_object_func, __pyx_v_to_dtype_func, __pyx_v_memview->dtype_is_object); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1087
 * 
 * @cname('__pyx_memoryview_copy_object_from_slice')
 * cdef memoryview_copy_from_slice(memoryview memview, __Pyx_memviewslice *memviewslice):             # <<<<<<<<<<<<<<
 *     """
 *     Create a new memoryview object from a given memoryview object and slice.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_from_slice", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:             # <<<<<<<<<<<<<<
 *     return -arg if arg < 0 else arg
 * 
 */

static Py_ssize_t abs_py_ssize_t(Py_ssize_t __pyx_v_arg) {
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;

  /* "View.MemoryView":1110
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:
 *     return -arg if arg < 0 else arg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_get_best_slice_order')
 */
  __pyx_t_2 = (__pyx_v_arg < 0);
  if (__pyx_t_2) {
    __pyx_t_1 = (-__pyx_v_arg);
  } else {
    __pyx_t_1 = __pyx_v_arg;
  }
  __pyx_r = __pyx_t_1;
  goto __pyx_L0;

  /* "View.MemoryView":1109
 * 
 * 
 * cdef Py_ssize_t abs_py_ssize_t(Py_ssize_t arg) noexcept nogil:             # <<<<<<<<<<<<<<
 *     return -arg if arg < 0 else arg
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1113
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

static char __pyx_get_best_slice_order(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim) {
  int __pyx_v_i;
  Py_ssize_t __pyx_v_c_stride;
  Py_ssize_t __pyx_v_f_stride;
  char __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1118
 *     """
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t f_stride = 0
 * 
 */
  __pyx_v_c_stride = 0;

  /* "View.MemoryView":1119
 *     cdef int i
 *     cdef Py_ssize_t c_stride = 0
 *     cdef Py_ssize_t f_stride = 0             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_f_stride = 0;

  /* "View.MemoryView":1121
 *     cdef Py_ssize_t f_stride = 0
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1122
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = ((__pyx_v_mslice->shape[__pyx_v_i]) > 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1123
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_c_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1124
 *         if mslice.shape[i] > 1:
 *             c_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
      goto __pyx_L4_break;

      /* "View.MemoryView":1122
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             c_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L4_break:;

  /* "View.MemoryView":1126
 *             break
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 */
  __pyx_t_1 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_1;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1127
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    __pyx_t_2 = ((__pyx_v_mslice->shape[__pyx_v_i]) > 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1128
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]             # <<<<<<<<<<<<<<
 *             break
 * 
 */
      __pyx_v_f_stride = (__pyx_v_mslice->strides[__pyx_v_i]);

      /* "View.MemoryView":1129
 *         if mslice.shape[i] > 1:
 *             f_stride = mslice.strides[i]
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 */
      goto __pyx_L7_break;

      /* "View.MemoryView":1127
 * 
 *     for i in range(ndim):
 *         if mslice.shape[i] > 1:             # <<<<<<<<<<<<<<
 *             f_stride = mslice.strides[i]
 *             break
 */
    }
  }
  __pyx_L7_break:;

  /* "View.MemoryView":1131
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  __pyx_t_2 = (abs_py_ssize_t(__pyx_v_c_stride) <= abs_py_ssize_t(__pyx_v_f_stride));
  if (__pyx_t_2) {

    /* "View.MemoryView":1132
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):
 *         return 'C'             # <<<<<<<<<<<<<<
 *     else:
 *         return 'F'
 */
    __pyx_r = 'C';
    goto __pyx_L0;

    /* "View.MemoryView":1131
 *             break
 * 
 *     if abs_py_ssize_t(c_stride) <= abs_py_ssize_t(f_stride):             # <<<<<<<<<<<<<<
 *         return 'C'
 *     else:
 */
  }

  /* "View.MemoryView":1134
 *         return 'C'
 *     else:
 *         return 'F'             # <<<<<<<<<<<<<<
 * 
 * @cython.cdivision(True)
 */
  /*else*/ {
    __pyx_r = 'F';
    goto __pyx_L0;
  }

  /* "View.MemoryView":1113
 * 
 * @cname('__pyx_get_best_slice_order')
 * cdef char get_best_order(__Pyx_memviewslice *mslice, int ndim) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     Figure out the best memory access order for a given slice.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1137
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

static void _copy_strided_to_strided(char *__pyx_v_src_data, Py_ssize_t *__pyx_v_src_strides, char *__pyx_v_dst_data, Py_ssize_t *__pyx_v_dst_strides, Py_ssize_t *__pyx_v_src_shape, Py_ssize_t *__pyx_v_dst_shape, int __pyx_v_ndim, size_t __pyx_v_itemsize) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  CYTHON_UNUSED Py_ssize_t __pyx_v_src_extent;
  Py_ssize_t __pyx_v_dst_extent;
  Py_ssize_t __pyx_v_src_stride;
  Py_ssize_t __pyx_v_dst_stride;
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;

  /* "View.MemoryView":1144
 * 
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 */
  __pyx_v_src_extent = (__pyx_v_src_shape[0]);

  /* "View.MemoryView":1145
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 */
  __pyx_v_dst_extent = (__pyx_v_dst_shape[0]);

  /* "View.MemoryView":1146
 *     cdef Py_ssize_t src_extent = src_shape[0]
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 */
  __pyx_v_src_stride = (__pyx_v_src_strides[0]);

  /* "View.MemoryView":1147
 *     cdef Py_ssize_t dst_extent = dst_shape[0]
 *     cdef Py_ssize_t src_stride = src_strides[0]
 *     cdef Py_ssize_t dst_stride = dst_strides[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_dst_stride = (__pyx_v_dst_strides[0]);

  /* "View.MemoryView":1149
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
  __pyx_t_1 = (__pyx_v_ndim == 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    __pyx_t_2 = (__pyx_v_src_stride > 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_2 = (__pyx_v_dst_stride > 0);
    if (__pyx_t_2) {
    } else {
      __pyx_t_1 = __pyx_t_2;
      goto __pyx_L5_bool_binop_done;
    }

    /* "View.MemoryView":1151
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):             # <<<<<<<<<<<<<<
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 *         else:
 */
    __pyx_t_2 = (((size_t)__pyx_v_src_stride) == __pyx_v_itemsize);
    if (__pyx_t_2) {
      __pyx_t_2 = (__pyx_v_itemsize == ((size_t)__pyx_v_dst_stride));
    }
    __pyx_t_1 = __pyx_t_2;
    __pyx_L5_bool_binop_done:;

    /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 */
    if (__pyx_t_1) {

      /* "View.MemoryView":1152
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)             # <<<<<<<<<<<<<<
 *         else:
 *             for i in range(dst_extent):
 */
      (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, (__pyx_v_itemsize * __pyx_v_dst_extent)));

      /* "View.MemoryView":1150
 * 
 *     if ndim == 1:
 *         if (src_stride > 0 and dst_stride > 0 and             # <<<<<<<<<<<<<<
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 */
      goto __pyx_L4;
    }

    /* "View.MemoryView":1154
 *             memcpy(dst_data, src_data, itemsize * dst_extent)
 *         else:
 *             for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride
 */
    /*else*/ {
      __pyx_t_3 = __pyx_v_dst_extent;
      __pyx_t_4 = __pyx_t_3;
      for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
        __pyx_v_i = __pyx_t_5;

        /* "View.MemoryView":1155
 *         else:
 *             for i in range(dst_extent):
 *                 memcpy(dst_data, src_data, itemsize)             # <<<<<<<<<<<<<<
 *                 src_data += src_stride
 *                 dst_data += dst_stride
 */
        (void)(memcpy(__pyx_v_dst_data, __pyx_v_src_data, __pyx_v_itemsize));

        /* "View.MemoryView":1156
 *             for i in range(dst_extent):
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride             # <<<<<<<<<<<<<<
 *                 dst_data += dst_stride
 *     else:
 */
        __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

        /* "View.MemoryView":1157
 *                 memcpy(dst_data, src_data, itemsize)
 *                 src_data += src_stride
 *                 dst_data += dst_stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(dst_extent):
 */
        __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
      }
    }
    __pyx_L4:;

    /* "View.MemoryView":1149
 *     cdef Py_ssize_t dst_stride = dst_strides[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         if (src_stride > 0 and dst_stride > 0 and
 *             <size_t> src_stride == itemsize == <size_t> dst_stride):
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1159
 *                 dst_data += dst_stride
 *     else:
 *         for i in range(dst_extent):             # <<<<<<<<<<<<<<
 *             _copy_strided_to_strided(src_data, src_strides + 1,
 *                                      dst_data, dst_strides + 1,
 */
  /*else*/ {
    __pyx_t_3 = __pyx_v_dst_extent;
    __pyx_t_4 = __pyx_t_3;
    for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_i = __pyx_t_5;

      /* "View.MemoryView":1160
 *     else:
 *         for i in range(dst_extent):
 *             _copy_strided_to_strided(src_data, src_strides + 1,             # <<<<<<<<<<<<<<
 *                                      dst_data, dst_strides + 1,
 *                                      src_shape + 1, dst_shape + 1,
 */
      _copy_strided_to_strided(__pyx_v_src_data, (__pyx_v_src_strides + 1), __pyx_v_dst_data, (__pyx_v_dst_strides + 1), (__pyx_v_src_shape + 1), (__pyx_v_dst_shape + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize);

      /* "View.MemoryView":1164
 *                                      src_shape + 1, dst_shape + 1,
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride             # <<<<<<<<<<<<<<
 *             dst_data += dst_stride
 * 
 */
      __pyx_v_src_data = (__pyx_v_src_data + __pyx_v_src_stride);

      /* "View.MemoryView":1165
 *                                      ndim - 1, itemsize)
 *             src_data += src_stride
 *             dst_data += dst_stride             # <<<<<<<<<<<<<<
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,
 */
      __pyx_v_dst_data = (__pyx_v_dst_data + __pyx_v_dst_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1137
 * 
 * @cython.cdivision(True)
 * cdef void _copy_strided_to_strided(char *src_data, Py_ssize_t *src_strides,             # <<<<<<<<<<<<<<
 *                                    char *dst_data, Py_ssize_t *dst_strides,
 *                                    Py_ssize_t *src_shape, Py_ssize_t *dst_shape,
 */

  /* function exit code */
}

/* "View.MemoryView":1167
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
 */

static void copy_strided_to_strided(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize) {

  /* "View.MemoryView":1170
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
 *     _copy_strided_to_strided(src.data, src.strides, dst.data, dst.strides,             # <<<<<<<<<<<<<<
 *                              src.shape, dst.shape, ndim, itemsize)
 * 
 */
  _copy_strided_to_strided(__pyx_v_src->data, __pyx_v_src->strides, __pyx_v_dst->data, __pyx_v_dst->strides, __pyx_v_src->shape, __pyx_v_dst->shape, __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1167
 *             dst_data += dst_stride
 * 
 * cdef void copy_strided_to_strided(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice *dst,
 *                                   int ndim, size_t itemsize) noexcept nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1174
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

static Py_ssize_t __pyx_memoryview_slice_get_size(__Pyx_memviewslice *__pyx_v_src, int __pyx_v_ndim) {
  Py_ssize_t __pyx_v_shape;
  Py_ssize_t __pyx_v_size;
  Py_ssize_t __pyx_r;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t *__pyx_t_2;
  Py_ssize_t *__pyx_t_3;
  Py_ssize_t *__pyx_t_4;

  /* "View.MemoryView":1176
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 * 
 *     for shape in src.shape[:ndim]:
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_size = __pyx_t_1;

  /* "View.MemoryView":1178
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 * 
 *     for shape in src.shape[:ndim]:             # <<<<<<<<<<<<<<
 *         size *= shape
 * 
 */
  __pyx_t_3 = (__pyx_v_src->shape + __pyx_v_ndim);
  for (__pyx_t_4 = __pyx_v_src->shape; __pyx_t_4 < __pyx_t_3; __pyx_t_4++) {
    __pyx_t_2 = __pyx_t_4;
    __pyx_v_shape = (__pyx_t_2[0]);

    /* "View.MemoryView":1179
 * 
 *     for shape in src.shape[:ndim]:
 *         size *= shape             # <<<<<<<<<<<<<<
 * 
 *     return size
 */
    __pyx_v_size = (__pyx_v_size * __pyx_v_shape);
  }

  /* "View.MemoryView":1181
 *         size *= shape
 * 
 *     return size             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_fill_contig_strides_array')
 */
  __pyx_r = __pyx_v_size;
  goto __pyx_L0;

  /* "View.MemoryView":1174
 * 
 * @cname('__pyx_memoryview_slice_get_size')
 * cdef Py_ssize_t slice_get_size(__Pyx_memviewslice *src, int ndim) noexcept nogil:             # <<<<<<<<<<<<<<
 *     "Return the size of the memory occupied by the slice in number of bytes"
 *     cdef Py_ssize_t shape, size = src.memview.view.itemsize
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1184
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) noexcept nogil:
 */

static Py_ssize_t __pyx_fill_contig_strides_array(Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, Py_ssize_t __pyx_v_stride, int __pyx_v_ndim, char __pyx_v_order) {
  int __pyx_v_idx;
  Py_ssize_t __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1193
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
  __pyx_t_1 = (__pyx_v_order == 'F');
  if (__pyx_t_1) {

    /* "View.MemoryView":1194
 * 
 *     if order == 'F':
 *         for idx in range(ndim):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
    __pyx_t_2 = __pyx_v_ndim;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_idx = __pyx_t_4;

      /* "View.MemoryView":1195
 *     if order == 'F':
 *         for idx in range(ndim):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 *     else:
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1196
 *         for idx in range(ndim):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }

    /* "View.MemoryView":1193
 *     cdef int idx
 * 
 *     if order == 'F':             # <<<<<<<<<<<<<<
 *         for idx in range(ndim):
 *             strides[idx] = stride
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1198
 *             stride *= shape[idx]
 *     else:
 *         for idx in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *             strides[idx] = stride
 *             stride *= shape[idx]
 */
  /*else*/ {
    for (__pyx_t_2 = (__pyx_v_ndim - 1); __pyx_t_2 > -1; __pyx_t_2-=1) {
      __pyx_v_idx = __pyx_t_2;

      /* "View.MemoryView":1199
 *     else:
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride             # <<<<<<<<<<<<<<
 *             stride *= shape[idx]
 * 
 */
      (__pyx_v_strides[__pyx_v_idx]) = __pyx_v_stride;

      /* "View.MemoryView":1200
 *         for idx in range(ndim - 1, -1, -1):
 *             strides[idx] = stride
 *             stride *= shape[idx]             # <<<<<<<<<<<<<<
 * 
 *     return stride
 */
      __pyx_v_stride = (__pyx_v_stride * (__pyx_v_shape[__pyx_v_idx]));
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1202
 *             stride *= shape[idx]
 * 
 *     return stride             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 */
  __pyx_r = __pyx_v_stride;
  goto __pyx_L0;

  /* "View.MemoryView":1184
 * 
 * @cname('__pyx_fill_contig_strides_array')
 * cdef Py_ssize_t fill_contig_strides_array(             # <<<<<<<<<<<<<<
 *                 Py_ssize_t *shape, Py_ssize_t *strides, Py_ssize_t stride,
 *                 int ndim, char order) noexcept nogil:
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1205
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

static void *__pyx_memoryview_copy_data_to_temp(__Pyx_memviewslice *__pyx_v_src, __Pyx_memviewslice *__pyx_v_tmpslice, char __pyx_v_order, int __pyx_v_ndim) {
  int __pyx_v_i;
  void *__pyx_v_result;
  size_t __pyx_v_itemsize;
  size_t __pyx_v_size;
  void *__pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  struct __pyx_memoryview_obj *__pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "View.MemoryView":1216
 *     cdef void *result
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 */
  __pyx_t_1 = __pyx_v_src->memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1217
 * 
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef size_t size = slice_get_size(src, ndim)             # <<<<<<<<<<<<<<
 * 
 *     result = malloc(size)
 */
  __pyx_v_size = __pyx_memoryview_slice_get_size(__pyx_v_src, __pyx_v_ndim);

  /* "View.MemoryView":1219
 *     cdef size_t size = slice_get_size(src, ndim)
 * 
 *     result = malloc(size)             # <<<<<<<<<<<<<<
 *     if not result:
 *         _err_no_memory()
 */
  __pyx_v_result = malloc(__pyx_v_size);

  /* "View.MemoryView":1220
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err_no_memory()
 * 
 */
  __pyx_t_2 = (!(__pyx_v_result != 0));
  if (__pyx_t_2) {

    /* "View.MemoryView":1221
 *     result = malloc(size)
 *     if not result:
 *         _err_no_memory()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_3 = __pyx_memoryview_err_no_memory(); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(2, 1221, __pyx_L1_error)

    /* "View.MemoryView":1220
 * 
 *     result = malloc(size)
 *     if not result:             # <<<<<<<<<<<<<<
 *         _err_no_memory()
 * 
 */
  }

  /* "View.MemoryView":1224
 * 
 * 
 *     tmpslice.data = <char *> result             # <<<<<<<<<<<<<<
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 */
  __pyx_v_tmpslice->data = ((char *)__pyx_v_result);

  /* "View.MemoryView":1225
 * 
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview             # <<<<<<<<<<<<<<
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 */
  __pyx_t_4 = __pyx_v_src->memview;
  __pyx_v_tmpslice->memview = __pyx_t_4;

  /* "View.MemoryView":1226
 *     tmpslice.data = <char *> result
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1227
 *     tmpslice.memview = src.memview
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]             # <<<<<<<<<<<<<<
 *         tmpslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_tmpslice->shape[__pyx_v_i]) = (__pyx_v_src->shape[__pyx_v_i]);

    /* "View.MemoryView":1228
 *     for i in range(ndim):
 *         tmpslice.shape[i] = src.shape[i]
 *         tmpslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize, ndim, order)
 */
    (__pyx_v_tmpslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1230
 *         tmpslice.suboffsets[i] = -1
 * 
 *     fill_contig_strides_array(&tmpslice.shape[0], &tmpslice.strides[0], itemsize, ndim, order)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  (void)(__pyx_fill_contig_strides_array((&(__pyx_v_tmpslice->shape[0])), (&(__pyx_v_tmpslice->strides[0])), __pyx_v_itemsize, __pyx_v_ndim, __pyx_v_order));

  /* "View.MemoryView":1233
 * 
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0
 */
  __pyx_t_3 = __pyx_v_ndim;
  __pyx_t_5 = __pyx_t_3;
  for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
    __pyx_v_i = __pyx_t_6;

    /* "View.MemoryView":1234
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    __pyx_t_2 = ((__pyx_v_tmpslice->shape[__pyx_v_i]) == 1);
    if (__pyx_t_2) {

      /* "View.MemoryView":1235
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:
 *             tmpslice.strides[i] = 0             # <<<<<<<<<<<<<<
 * 
 *     if slice_is_contig(src[0], order, ndim):
 */
      (__pyx_v_tmpslice->strides[__pyx_v_i]) = 0;

      /* "View.MemoryView":1234
 * 
 *     for i in range(ndim):
 *         if tmpslice.shape[i] == 1:             # <<<<<<<<<<<<<<
 *             tmpslice.strides[i] = 0
 * 
 */
    }
  }

  /* "View.MemoryView":1237
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
  __pyx_t_2 = __pyx_memviewslice_is_contig((__pyx_v_src[0]), __pyx_v_order, __pyx_v_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1238
 * 
 *     if slice_is_contig(src[0], order, ndim):
 *         memcpy(result, src.data, size)             # <<<<<<<<<<<<<<
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 */
    (void)(memcpy(__pyx_v_result, __pyx_v_src->data, __pyx_v_size));

    /* "View.MemoryView":1237
 *             tmpslice.strides[i] = 0
 * 
 *     if slice_is_contig(src[0], order, ndim):             # <<<<<<<<<<<<<<
 *         memcpy(result, src.data, size)
 *     else:
 */
    goto __pyx_L9;
  }

  /* "View.MemoryView":1240
 *         memcpy(result, src.data, size)
 *     else:
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)             # <<<<<<<<<<<<<<
 * 
 *     return result
 */
  /*else*/ {
    copy_strided_to_strided(__pyx_v_src, __pyx_v_tmpslice, __pyx_v_ndim, __pyx_v_itemsize);
  }
  __pyx_L9:;

  /* "View.MemoryView":1242
 *         copy_strided_to_strided(src, tmpslice, ndim, itemsize)
 * 
 *     return result             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_result;
  goto __pyx_L0;

  /* "View.MemoryView":1205
 * 
 * @cname('__pyx_memoryview_copy_data_to_temp')
 * cdef void *copy_data_to_temp(__Pyx_memviewslice *src,             # <<<<<<<<<<<<<<
 *                              __Pyx_memviewslice *tmpslice,
 *                              char order,
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("View.MemoryView.copy_data_to_temp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1247
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"
 */

static int __pyx_memoryview_err_extents(int __pyx_v_i, Py_ssize_t __pyx_v_extent1, Py_ssize_t __pyx_v_extent2) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_UCS4 __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_extents", 0);

  /* "View.MemoryView":1249
 * cdef int _err_extents(int i, Py_ssize_t extent1,
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_dim')
 */
  __pyx_t_1 = PyTuple_New(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_3 = 127;
  __Pyx_INCREF(__pyx_kp_u_got_differing_extents_in_dimensi);
  __pyx_t_2 += 35;
  __Pyx_GIVEREF(__pyx_kp_u_got_differing_extents_in_dimensi);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_got_differing_extents_in_dimensi);
  __pyx_t_4 = __Pyx_PyUnicode_From_int(__pyx_v_i, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_got);
  __pyx_t_2 += 6;
  __Pyx_GIVEREF(__pyx_kp_u_got);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_got);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_extent1, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u_and);
  __pyx_t_2 += 5;
  __Pyx_GIVEREF(__pyx_kp_u_and);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_and);
  __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_v_extent2, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__7);
  __pyx_t_2 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__7);
  PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__7);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_1, 7, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_builtin_ValueError, __pyx_t_4, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(2, 1249, __pyx_L1_error)

  /* "View.MemoryView":1247
 * 
 * @cname('__pyx_memoryview_err_extents')
 * cdef int _err_extents(int i, Py_ssize_t extent1,             # <<<<<<<<<<<<<<
 *                              Py_ssize_t extent2) except -1 with gil:
 *     raise ValueError, f"got differing extents in dimension {i} (got {extent1} and {extent2})"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView._err_extents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg % dim
 * 
 */

static int __pyx_memoryview_err_dim(PyObject *__pyx_v_error, PyObject *__pyx_v_msg, int __pyx_v_dim) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err_dim", 0);
  __Pyx_INCREF(__pyx_v_msg);

  /* "View.MemoryView":1253
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:
 *     raise <object>error, msg % dim             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err')
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_FormatSafe(__pyx_v_msg, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(((PyObject *)__pyx_v_error), __pyx_t_2, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(2, 1253, __pyx_L1_error)

  /* "View.MemoryView":1252
 * 
 * @cname('__pyx_memoryview_err_dim')
 * cdef int _err_dim(PyObject *error, str msg, int dim) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg % dim
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("View.MemoryView._err_dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1256
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg
 * 
 */

static int __pyx_memoryview_err(PyObject *__pyx_v_error, PyObject *__pyx_v_msg) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_RefNannySetupContext("_err", 0);
  __Pyx_INCREF(__pyx_v_msg);

  /* "View.MemoryView":1257
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:
 *     raise <object>error, msg             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 */
  __Pyx_Raise(((PyObject *)__pyx_v_error), __pyx_v_msg, 0, 0);
  __PYX_ERR(2, 1257, __pyx_L1_error)

  /* "View.MemoryView":1256
 * 
 * @cname('__pyx_memoryview_err')
 * cdef int _err(PyObject *error, str msg) except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise <object>error, msg
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._err", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_XDECREF(__pyx_v_msg);
  __Pyx_RefNannyFinishContext();
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1260
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise MemoryError
 * 
 */

static int __pyx_memoryview_err_no_memory(void) {
  int __pyx_r;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif

  /* "View.MemoryView":1261
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:
 *     raise MemoryError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  PyErr_NoMemory(); __PYX_ERR(2, 1261, __pyx_L1_error)

  /* "View.MemoryView":1260
 * 
 * @cname('__pyx_memoryview_err_no_memory')
 * cdef int _err_no_memory() except -1 with gil:             # <<<<<<<<<<<<<<
 *     raise MemoryError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("View.MemoryView._err_no_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  return __pyx_r;
}

/* "View.MemoryView":1265
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

static int __pyx_memoryview_copy_contents(__Pyx_memviewslice __pyx_v_src, __Pyx_memviewslice __pyx_v_dst, int __pyx_v_src_ndim, int __pyx_v_dst_ndim, int __pyx_v_dtype_is_object) {
  void *__pyx_v_tmpdata;
  size_t __pyx_v_itemsize;
  int __pyx_v_i;
  char __pyx_v_order;
  int __pyx_v_broadcasting;
  int __pyx_v_direct_copy;
  __Pyx_memviewslice __pyx_v_tmp;
  int __pyx_v_ndim;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  void *__pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save;
  #endif

  /* "View.MemoryView":1273
 *     Check for overlapping memory and verify the shapes.
 *     """
 *     cdef void *tmpdata = NULL             # <<<<<<<<<<<<<<
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 */
  __pyx_v_tmpdata = NULL;

  /* "View.MemoryView":1274
 *     """
 *     cdef void *tmpdata = NULL
 *     cdef size_t itemsize = src.memview.view.itemsize             # <<<<<<<<<<<<<<
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 */
  __pyx_t_1 = __pyx_v_src.memview->view.itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "View.MemoryView":1276
 *     cdef size_t itemsize = src.memview.view.itemsize
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)             # <<<<<<<<<<<<<<
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False
 */
  __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_src), __pyx_v_src_ndim);

  /* "View.MemoryView":1277
 *     cdef int i
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False             # <<<<<<<<<<<<<<
 *     cdef bint direct_copy = False
 *     cdef __Pyx_memviewslice tmp
 */
  __pyx_v_broadcasting = 0;

  /* "View.MemoryView":1278
 *     cdef char order = get_best_order(&src, src_ndim)
 *     cdef bint broadcasting = False
 *     cdef bint direct_copy = False             # <<<<<<<<<<<<<<
 *     cdef __Pyx_memviewslice tmp
 * 
 */
  __pyx_v_direct_copy = 0;

  /* "View.MemoryView":1281
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
  __pyx_t_2 = (__pyx_v_src_ndim < __pyx_v_dst_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1282
 * 
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_src), __pyx_v_src_ndim, __pyx_v_dst_ndim);

    /* "View.MemoryView":1281
 *     cdef __Pyx_memviewslice tmp
 * 
 *     if src_ndim < dst_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1283
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  __pyx_t_2 = (__pyx_v_dst_ndim < __pyx_v_src_ndim);
  if (__pyx_t_2) {

    /* "View.MemoryView":1284
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:
 *         broadcast_leading(&dst, dst_ndim, src_ndim)             # <<<<<<<<<<<<<<
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)
 */
    __pyx_memoryview_broadcast_leading((&__pyx_v_dst), __pyx_v_dst_ndim, __pyx_v_src_ndim);

    /* "View.MemoryView":1283
 *     if src_ndim < dst_ndim:
 *         broadcast_leading(&src, src_ndim, dst_ndim)
 *     elif dst_ndim < src_ndim:             # <<<<<<<<<<<<<<
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 */
  }
  __pyx_L3:;

  /* "View.MemoryView":1286
 *         broadcast_leading(&dst, dst_ndim, src_ndim)
 * 
 *     cdef int ndim = max(src_ndim, dst_ndim)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim):
 */
  __pyx_t_3 = __pyx_v_dst_ndim;
  __pyx_t_4 = __pyx_v_src_ndim;
  __pyx_t_2 = (__pyx_t_3 > __pyx_t_4);
  if (__pyx_t_2) {
    __pyx_t_5 = __pyx_t_3;
  } else {
    __pyx_t_5 = __pyx_t_4;
  }
  __pyx_v_ndim = __pyx_t_5;

  /* "View.MemoryView":1288
 *     cdef int ndim = max(src_ndim, dst_ndim)
 * 
 *     for i in range(ndim):             # <<<<<<<<<<<<<<
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 */
  __pyx_t_5 = __pyx_v_ndim;
  __pyx_t_3 = __pyx_t_5;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "View.MemoryView":1289
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    __pyx_t_2 = ((__pyx_v_src.shape[__pyx_v_i]) != (__pyx_v_dst.shape[__pyx_v_i]));
    if (__pyx_t_2) {

      /* "View.MemoryView":1290
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
      __pyx_t_2 = ((__pyx_v_src.shape[__pyx_v_i]) == 1);
      if (__pyx_t_2) {

        /* "View.MemoryView":1291
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:
 *                 broadcasting = True             # <<<<<<<<<<<<<<
 *                 src.strides[i] = 0
 *             else:
 */
        __pyx_v_broadcasting = 1;

        /* "View.MemoryView":1292
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 *                 src.strides[i] = 0             # <<<<<<<<<<<<<<
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 */
        (__pyx_v_src.strides[__pyx_v_i]) = 0;

        /* "View.MemoryView":1290
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:
 *             if src.shape[i] == 1:             # <<<<<<<<<<<<<<
 *                 broadcasting = True
 *                 src.strides[i] = 0
 */
        goto __pyx_L7;
      }

      /* "View.MemoryView":1294
 *                 src.strides[i] = 0
 *             else:
 *                 _err_extents(i, dst.shape[i], src.shape[i])             # <<<<<<<<<<<<<<
 * 
 *         if src.suboffsets[i] >= 0:
 */
      /*else*/ {
        __pyx_t_6 = __pyx_memoryview_err_extents(__pyx_v_i, (__pyx_v_dst.shape[__pyx_v_i]), (__pyx_v_src.shape[__pyx_v_i])); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 1294, __pyx_L1_error)
      }
      __pyx_L7:;

      /* "View.MemoryView":1289
 * 
 *     for i in range(ndim):
 *         if src.shape[i] != dst.shape[i]:             # <<<<<<<<<<<<<<
 *             if src.shape[i] == 1:
 *                 broadcasting = True
 */
    }

    /* "View.MemoryView":1296
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 */
    __pyx_t_2 = ((__pyx_v_src.suboffsets[__pyx_v_i]) >= 0);
    if (__pyx_t_2) {

      /* "View.MemoryView":1297
 * 
 *         if src.suboffsets[i] >= 0:
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)             # <<<<<<<<<<<<<<
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 */
      __pyx_t_6 = __pyx_memoryview_err_dim(PyExc_ValueError, __pyx_kp_s_Dimension_d_is_not_direct, __pyx_v_i); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(2, 1297, __pyx_L1_error)

      /* "View.MemoryView":1296
 *                 _err_extents(i, dst.shape[i], src.shape[i])
 * 
 *         if src.suboffsets[i] >= 0:             # <<<<<<<<<<<<<<
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 */
    }
  }

  /* "View.MemoryView":1299
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  __pyx_t_2 = __pyx_slices_overlap((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);
  if (__pyx_t_2) {

    /* "View.MemoryView":1301
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    __pyx_t_2 = (!__pyx_memviewslice_is_contig(__pyx_v_src, __pyx_v_order, __pyx_v_ndim));
    if (__pyx_t_2) {

      /* "View.MemoryView":1302
 * 
 *         if not slice_is_contig(src, order, ndim):
 *             order = get_best_order(&dst, ndim)             # <<<<<<<<<<<<<<
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 */
      __pyx_v_order = __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim);

      /* "View.MemoryView":1301
 *     if slices_overlap(&src, &dst, ndim, itemsize):
 * 
 *         if not slice_is_contig(src, order, ndim):             # <<<<<<<<<<<<<<
 *             order = get_best_order(&dst, ndim)
 * 
 */
    }

    /* "View.MemoryView":1304
 *             order = get_best_order(&dst, ndim)
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)             # <<<<<<<<<<<<<<
 *         src = tmp
 * 
 */
    __pyx_t_7 = __pyx_memoryview_copy_data_to_temp((&__pyx_v_src), (&__pyx_v_tmp), __pyx_v_order, __pyx_v_ndim); if (unlikely(__pyx_t_7 == ((void *)NULL))) __PYX_ERR(2, 1304, __pyx_L1_error)
    __pyx_v_tmpdata = __pyx_t_7;

    /* "View.MemoryView":1305
 * 
 *         tmpdata = copy_data_to_temp(&src, &tmp, order, ndim)
 *         src = tmp             # <<<<<<<<<<<<<<
 * 
 *     if not broadcasting:
 */
    __pyx_v_src = __pyx_v_tmp;

    /* "View.MemoryView":1299
 *             _err_dim(PyExc_ValueError, "Dimension %d is not direct", i)
 * 
 *     if slices_overlap(&src, &dst, ndim, itemsize):             # <<<<<<<<<<<<<<
 * 
 *         if not slice_is_contig(src, order, ndim):
 */
  }

  /* "View.MemoryView":1307
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (!__pyx_v_broadcasting);
  if (__pyx_t_2) {

    /* "View.MemoryView":1310
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
    __pyx_t_2 = __pyx_memviewslice_is_contig(__pyx_v_src, 'C', __pyx_v_ndim);
    if (__pyx_t_2) {

      /* "View.MemoryView":1311
 * 
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)             # <<<<<<<<<<<<<<
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'C', __pyx_v_ndim);

      /* "View.MemoryView":1310
 * 
 * 
 *         if slice_is_contig(src, 'C', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 */
      goto __pyx_L12;
    }

    /* "View.MemoryView":1312
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    __pyx_t_2 = __pyx_memviewslice_is_contig(__pyx_v_src, 'F', __pyx_v_ndim);
    if (__pyx_t_2) {

      /* "View.MemoryView":1313
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):
 *             direct_copy = slice_is_contig(dst, 'F', ndim)             # <<<<<<<<<<<<<<
 * 
 *         if direct_copy:
 */
      __pyx_v_direct_copy = __pyx_memviewslice_is_contig(__pyx_v_dst, 'F', __pyx_v_ndim);

      /* "View.MemoryView":1312
 *         if slice_is_contig(src, 'C', ndim):
 *             direct_copy = slice_is_contig(dst, 'C', ndim)
 *         elif slice_is_contig(src, 'F', ndim):             # <<<<<<<<<<<<<<
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 */
    }
    __pyx_L12:;

    /* "View.MemoryView":1315
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */
    if (__pyx_v_direct_copy) {

      /* "View.MemoryView":1317
 *         if direct_copy:
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

      /* "View.MemoryView":1318
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))             # <<<<<<<<<<<<<<
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)
 */
      (void)(memcpy(__pyx_v_dst.data, __pyx_v_src.data, __pyx_memoryview_slice_get_size((&__pyx_v_src), __pyx_v_ndim)));

      /* "View.MemoryView":1319
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 *             free(tmpdata)
 *             return 0
 */
      __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

      /* "View.MemoryView":1320
 *             memcpy(dst.data, src.data, slice_get_size(&src, ndim))
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)             # <<<<<<<<<<<<<<
 *             return 0
 * 
 */
      free(__pyx_v_tmpdata);

      /* "View.MemoryView":1321
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 *             free(tmpdata)
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):
 */
      __pyx_r = 0;
      goto __pyx_L0;

      /* "View.MemoryView":1315
 *             direct_copy = slice_is_contig(dst, 'F', ndim)
 * 
 *         if direct_copy:             # <<<<<<<<<<<<<<
 * 
 *             refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */
    }

    /* "View.MemoryView":1307
 *         src = tmp
 * 
 *     if not broadcasting:             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1323
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = (__pyx_v_order == 'F');
  if (__pyx_t_2) {
    __pyx_t_2 = ('F' == __pyx_get_best_slice_order((&__pyx_v_dst), __pyx_v_ndim));
  }
  if (__pyx_t_2) {

    /* "View.MemoryView":1326
 * 
 * 
 *         transpose_memslice(&src)             # <<<<<<<<<<<<<<
 *         transpose_memslice(&dst)
 * 
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_src)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 1326, __pyx_L1_error)

    /* "View.MemoryView":1327
 * 
 *         transpose_memslice(&src)
 *         transpose_memslice(&dst)             # <<<<<<<<<<<<<<
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 */
    __pyx_t_5 = __pyx_memslice_transpose((&__pyx_v_dst)); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(2, 1327, __pyx_L1_error)

    /* "View.MemoryView":1323
 *             return 0
 * 
 *     if order == 'F' == get_best_order(&dst, ndim):             # <<<<<<<<<<<<<<
 * 
 * 
 */
  }

  /* "View.MemoryView":1329
 *         transpose_memslice(&dst)
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1330
 * 
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)             # <<<<<<<<<<<<<<
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 * 
 */
  copy_strided_to_strided((&__pyx_v_src), (&__pyx_v_dst), __pyx_v_ndim, __pyx_v_itemsize);

  /* "View.MemoryView":1331
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=False)
 *     copy_strided_to_strided(&src, &dst, ndim, itemsize)
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 * 
 *     free(tmpdata)
 */
  __pyx_memoryview_refcount_copying((&__pyx_v_dst), __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1333
 *     refcount_copying(&dst, dtype_is_object, ndim, inc=True)
 * 
 *     free(tmpdata)             # <<<<<<<<<<<<<<
 *     return 0
 * 
 */
  free(__pyx_v_tmpdata);

  /* "View.MemoryView":1334
 * 
 *     free(tmpdata)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 */
  __pyx_r = 0;
  goto __pyx_L0;

  /* "View.MemoryView":1265
 * 
 * @cname('__pyx_memoryview_copy_contents')
 * cdef int memoryview_copy_contents(__Pyx_memviewslice src,             # <<<<<<<<<<<<<<
 *                                   __Pyx_memviewslice dst,
 *                                   int src_ndim, int dst_ndim,
 */

  /* function exit code */
  __pyx_L1_error:;
  #ifdef WITH_THREAD
  __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif
  __Pyx_AddTraceback("View.MemoryView.memoryview_copy_contents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
  __pyx_L0:;
  return __pyx_r;
}

/* "View.MemoryView":1337
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) noexcept nogil:
 */

static void __pyx_memoryview_broadcast_leading(__Pyx_memviewslice *__pyx_v_mslice, int __pyx_v_ndim, int __pyx_v_ndim_other) {
  int __pyx_v_i;
  int __pyx_v_offset;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;

  /* "View.MemoryView":1341
 *                             int ndim_other) noexcept nogil:
 *     cdef int i
 *     cdef int offset = ndim_other - ndim             # <<<<<<<<<<<<<<
 * 
 *     for i in range(ndim - 1, -1, -1):
 */
  __pyx_v_offset = (__pyx_v_ndim_other - __pyx_v_ndim);

  /* "View.MemoryView":1343
 *     cdef int offset = ndim_other - ndim
 * 
 *     for i in range(ndim - 1, -1, -1):             # <<<<<<<<<<<<<<
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 */
  for (__pyx_t_1 = (__pyx_v_ndim - 1); __pyx_t_1 > -1; __pyx_t_1-=1) {
    __pyx_v_i = __pyx_t_1;

    /* "View.MemoryView":1344
 * 
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]             # <<<<<<<<<<<<<<
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 */
    (__pyx_v_mslice->shape[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->shape[__pyx_v_i]);

    /* "View.MemoryView":1345
 *     for i in range(ndim - 1, -1, -1):
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 */
    (__pyx_v_mslice->strides[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->strides[__pyx_v_i]);

    /* "View.MemoryView":1346
 *         mslice.shape[i + offset] = mslice.shape[i]
 *         mslice.strides[i + offset] = mslice.strides[i]
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(offset):
 */
    (__pyx_v_mslice->suboffsets[(__pyx_v_i + __pyx_v_offset)]) = (__pyx_v_mslice->suboffsets[__pyx_v_i]);
  }

  /* "View.MemoryView":1348
 *         mslice.suboffsets[i + offset] = mslice.suboffsets[i]
 * 
 *     for i in range(offset):             # <<<<<<<<<<<<<<
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 */
  __pyx_t_1 = __pyx_v_offset;
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1349
 * 
 *     for i in range(offset):
 *         mslice.shape[i] = 1             # <<<<<<<<<<<<<<
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1
 */
    (__pyx_v_mslice->shape[__pyx_v_i]) = 1;

    /* "View.MemoryView":1350
 *     for i in range(offset):
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]             # <<<<<<<<<<<<<<
 *         mslice.suboffsets[i] = -1
 * 
 */
    (__pyx_v_mslice->strides[__pyx_v_i]) = (__pyx_v_mslice->strides[0]);

    /* "View.MemoryView":1351
 *         mslice.shape[i] = 1
 *         mslice.strides[i] = mslice.strides[0]
 *         mslice.suboffsets[i] = -1             # <<<<<<<<<<<<<<
 * 
 * 
 */
    (__pyx_v_mslice->suboffsets[__pyx_v_i]) = -1L;
  }

  /* "View.MemoryView":1337
 * 
 * @cname('__pyx_memoryview_broadcast_leading')
 * cdef void broadcast_leading(__Pyx_memviewslice *mslice,             # <<<<<<<<<<<<<<
 *                             int ndim,
 *                             int ndim_other) noexcept nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1359
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:             # <<<<<<<<<<<<<<
 * 
 *     if dtype_is_object:
 */

static void __pyx_memoryview_refcount_copying(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_dtype_is_object, int __pyx_v_ndim, int __pyx_v_inc) {

  /* "View.MemoryView":1361
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
 */
  if (__pyx_v_dtype_is_object) {

    /* "View.MemoryView":1362
 * 
 *     if dtype_is_object:
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 */
    __pyx_memoryview_refcount_objects_in_slice_with_gil(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_inc);

    /* "View.MemoryView":1361
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:
 * 
 *     if dtype_is_object:             # <<<<<<<<<<<<<<
 *         refcount_objects_in_slice_with_gil(dst.data, dst.shape, dst.strides, ndim, inc)
 * 
 */
  }

  /* "View.MemoryView":1359
 * 
 * @cname('__pyx_memoryview_refcount_copying')
 * cdef void refcount_copying(__Pyx_memviewslice *dst, bint dtype_is_object, int ndim, bint inc) noexcept nogil:             # <<<<<<<<<<<<<<
 * 
 *     if dtype_is_object:
 */

  /* function exit code */
}

/* "View.MemoryView":1365
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) noexcept with gil:
 */

static void __pyx_memoryview_refcount_objects_in_slice_with_gil(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  #ifdef WITH_THREAD
  PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
  #endif

  /* "View.MemoryView":1368
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) noexcept with gil:
 *     refcount_objects_in_slice(data, shape, strides, ndim, inc)             # <<<<<<<<<<<<<<
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 */
  __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, __pyx_v_shape, __pyx_v_strides, __pyx_v_ndim, __pyx_v_inc);

  /* "View.MemoryView":1365
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice_with_gil')
 * cdef void refcount_objects_in_slice_with_gil(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                              Py_ssize_t *strides, int ndim,
 *                                              bint inc) noexcept with gil:
 */

  /* function exit code */
  #ifdef WITH_THREAD
  __Pyx_PyGILState_Release(__pyx_gilstate_save);
  #endif
}

/* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
 *     cdef Py_ssize_t i
 */

static void __pyx_memoryview_refcount_objects_in_slice(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, int __pyx_v_inc) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;

  /* "View.MemoryView":1374
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 * 
 *     for i in range(shape[0]):
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1376
 *     cdef Py_ssize_t stride = strides[0]
 * 
 *     for i in range(shape[0]):             # <<<<<<<<<<<<<<
 *         if ndim == 1:
 *             if inc:
 */
  __pyx_t_1 = (__pyx_v_shape[0]);
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "View.MemoryView":1377
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
    __pyx_t_4 = (__pyx_v_ndim == 1);
    if (__pyx_t_4) {

      /* "View.MemoryView":1378
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
      if (__pyx_v_inc) {

        /* "View.MemoryView":1379
 *         if ndim == 1:
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])
 */
        Py_INCREF((((PyObject **)__pyx_v_data)[0]));

        /* "View.MemoryView":1378
 *     for i in range(shape[0]):
 *         if ndim == 1:
 *             if inc:             # <<<<<<<<<<<<<<
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 */
        goto __pyx_L6;
      }

      /* "View.MemoryView":1381
 *                 Py_INCREF((<PyObject **> data)[0])
 *             else:
 *                 Py_DECREF((<PyObject **> data)[0])             # <<<<<<<<<<<<<<
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)
 */
      /*else*/ {
        Py_DECREF((((PyObject **)__pyx_v_data)[0]));
      }
      __pyx_L6:;

      /* "View.MemoryView":1377
 * 
 *     for i in range(shape[0]):
 *         if ndim == 1:             # <<<<<<<<<<<<<<
 *             if inc:
 *                 Py_INCREF((<PyObject **> data)[0])
 */
      goto __pyx_L5;
    }

    /* "View.MemoryView":1383
 *                 Py_DECREF((<PyObject **> data)[0])
 *         else:
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)             # <<<<<<<<<<<<<<
 * 
 *         data += stride
 */
    /*else*/ {
      __pyx_memoryview_refcount_objects_in_slice(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_inc);
    }
    __pyx_L5:;

    /* "View.MemoryView":1385
 *             refcount_objects_in_slice(data, shape + 1, strides + 1, ndim - 1, inc)
 * 
 *         data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
  }

  /* "View.MemoryView":1371
 * 
 * @cname('__pyx_memoryview_refcount_objects_in_slice')
 * cdef void refcount_objects_in_slice(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                                     Py_ssize_t *strides, int ndim, bint inc) noexcept:
 *     cdef Py_ssize_t i
 */

  /* function exit code */
}

/* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) noexcept nogil:
 */

static void __pyx_memoryview_slice_assign_scalar(__Pyx_memviewslice *__pyx_v_dst, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item, int __pyx_v_dtype_is_object) {

  /* "View.MemoryView":1394
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) noexcept nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)             # <<<<<<<<<<<<<<
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 0);

  /* "View.MemoryView":1395
 *                               bint dtype_is_object) noexcept nogil:
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)             # <<<<<<<<<<<<<<
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)
 * 
 */
  __pyx_memoryview__slice_assign_scalar(__pyx_v_dst->data, __pyx_v_dst->shape, __pyx_v_dst->strides, __pyx_v_ndim, __pyx_v_itemsize, __pyx_v_item);

  /* "View.MemoryView":1396
 *     refcount_copying(dst, dtype_is_object, ndim, inc=False)
 *     _slice_assign_scalar(dst.data, dst.shape, dst.strides, ndim, itemsize, item)
 *     refcount_copying(dst, dtype_is_object, ndim, inc=True)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_memoryview_refcount_copying(__pyx_v_dst, __pyx_v_dtype_is_object, __pyx_v_ndim, 1);

  /* "View.MemoryView":1391
 * 
 * @cname('__pyx_memoryview_slice_assign_scalar')
 * cdef void slice_assign_scalar(__Pyx_memviewslice *dst, int ndim,             # <<<<<<<<<<<<<<
 *                               size_t itemsize, void *item,
 *                               bint dtype_is_object) noexcept nogil:
 */

  /* function exit code */
}

/* "View.MemoryView":1400
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) noexcept nogil:
 */

static void __pyx_memoryview__slice_assign_scalar(char *__pyx_v_data, Py_ssize_t *__pyx_v_shape, Py_ssize_t *__pyx_v_strides, int __pyx_v_ndim, size_t __pyx_v_itemsize, void *__pyx_v_item) {
  CYTHON_UNUSED Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_stride;
  Py_ssize_t __pyx_v_extent;
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;

  /* "View.MemoryView":1404
 *                               size_t itemsize, void *item) noexcept nogil:
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t extent = shape[0]
 * 
 */
  __pyx_v_stride = (__pyx_v_strides[0]);

  /* "View.MemoryView":1405
 *     cdef Py_ssize_t i
 *     cdef Py_ssize_t stride = strides[0]
 *     cdef Py_ssize_t extent = shape[0]             # <<<<<<<<<<<<<<
 * 
 *     if ndim == 1:
 */
  __pyx_v_extent = (__pyx_v_shape[0]);

  /* "View.MemoryView":1407
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
  __pyx_t_1 = (__pyx_v_ndim == 1);
  if (__pyx_t_1) {

    /* "View.MemoryView":1408
 * 
 *     if ndim == 1:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             memcpy(data, item, itemsize)
 *             data += stride
 */
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1409
 *     if ndim == 1:
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)             # <<<<<<<<<<<<<<
 *             data += stride
 *     else:
 */
      (void)(memcpy(__pyx_v_data, __pyx_v_item, __pyx_v_itemsize));

      /* "View.MemoryView":1410
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 *             data += stride             # <<<<<<<<<<<<<<
 *     else:
 *         for i in range(extent):
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }

    /* "View.MemoryView":1407
 *     cdef Py_ssize_t extent = shape[0]
 * 
 *     if ndim == 1:             # <<<<<<<<<<<<<<
 *         for i in range(extent):
 *             memcpy(data, item, itemsize)
 */
    goto __pyx_L3;
  }

  /* "View.MemoryView":1412
 *             data += stride
 *     else:
 *         for i in range(extent):             # <<<<<<<<<<<<<<
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)
 *             data += stride
 */
  /*else*/ {
    __pyx_t_2 = __pyx_v_extent;
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "View.MemoryView":1413
 *     else:
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)             # <<<<<<<<<<<<<<
 *             data += stride
 * 
 */
      __pyx_memoryview__slice_assign_scalar(__pyx_v_data, (__pyx_v_shape + 1), (__pyx_v_strides + 1), (__pyx_v_ndim - 1), __pyx_v_itemsize, __pyx_v_item);

      /* "View.MemoryView":1414
 *         for i in range(extent):
 *             _slice_assign_scalar(data, shape + 1, strides + 1, ndim - 1, itemsize, item)
 *             data += stride             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_v_data = (__pyx_v_data + __pyx_v_stride);
    }
  }
  __pyx_L3:;

  /* "View.MemoryView":1400
 * 
 * @cname('__pyx_memoryview__slice_assign_scalar')
 * cdef void _slice_assign_scalar(char *data, Py_ssize_t *shape,             # <<<<<<<<<<<<<<
 *                               Py_ssize_t *strides, int ndim,
 *                               size_t itemsize, void *item) noexcept nogil:
 */

  /* function exit code */
}

/* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum = {"__pyx_unpickle_Enum", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_15View_dot_MemoryView_1__pyx_unpickle_Enum(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 1); __PYX_ERR(2, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, 2); __PYX_ERR(2, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_Enum") < 0)) __PYX_ERR(2, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(2, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_Enum", 1, 3, 3, __pyx_nargs); __PYX_ERR(2, 1, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_15View_dot_MemoryView___pyx_unpickle_Enum(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum", 1);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_tuple__8, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 */
    __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    if (__Pyx_PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PickleError)) __PYX_ERR(2, 5, __pyx_L1_error);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_t_1);
    __pyx_v___pyx_PickleError = __pyx_t_1;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_1, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_MemviewEnum_type), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  #if CYTHON_UNPACK_METHODS
  if (likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_2 = (__pyx_v___pyx_state != Py_None);
  if (__pyx_t_2) {

    /* "(tree fragment)":9
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(2, 9, __pyx_L1_error)
    __pyx_t_1 = __pyx_unpickle_Enum__set_state(((struct __pyx_MemviewEnum_obj *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 *     __pyx_result = Enum.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_unpickle_Enum__set_state(struct __pyx_MemviewEnum_obj *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_Enum__set_state", 1);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(2, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v___pyx_result->name);
  __Pyx_DECREF(__pyx_v___pyx_result->name);
  __pyx_v___pyx_result->name = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(2, 13, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_4 = (__pyx_t_3 > 1);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 13, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "(tree fragment)":14
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[1])             # <<<<<<<<<<<<<<
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_update); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(2, 14, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    #if CYTHON_UNPACK_METHODS
    if (likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[1])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_Enum__set_state(<Enum> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_Enum__set_state(Enum __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result.name = __pyx_state[0]
 *     if len(__pyx_state) > 1 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("View.MemoryView.__pyx_unpickle_Enum__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":287
 * 
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ELSIZE(self)
 * 
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_8itemsize_itemsize(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":288
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:
 *             return PyDataType_ELSIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDataType_ELSIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":287
 * 
 *         @property
 *         cdef inline npy_intp itemsize(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ELSIZE(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":291
 * 
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ALIGNMENT(self)
 * 
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_5dtype_9alignment_alignment(PyArray_Descr *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":292
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:
 *             return PyDataType_ALIGNMENT(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use fields/names with care as they may be NULL.  You must check
 */
  __pyx_r = PyDataType_ALIGNMENT(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":291
 * 
 *         @property
 *         cdef inline npy_intp alignment(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_ALIGNMENT(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":297
 *         # for this using PyDataType_HASFIELDS.
 *         @property
 *         cdef inline object fields(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDataType_FIELDS(self)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_6fields_fields(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("fields", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":298
 *         @property
 *         cdef inline object fields(self):
 *             return <object>PyDataType_FIELDS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_FIELDS(__pyx_v_self);
  __Pyx_INCREF(((PyObject *)__pyx_t_1));
  __pyx_r = ((PyObject *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":297
 *         # for this using PyDataType_HASFIELDS.
 *         @property
 *         cdef inline object fields(self):             # <<<<<<<<<<<<<<
 *             return <object>PyDataType_FIELDS(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":301
 * 
 *         @property
 *         cdef inline tuple names(self):             # <<<<<<<<<<<<<<
 *             return <tuple>PyDataType_NAMES(self)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_5dtype_5names_names(PyArray_Descr *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1;
  __Pyx_RefNannySetupContext("names", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":302
 *         @property
 *         cdef inline tuple names(self):
 *             return <tuple>PyDataType_NAMES(self)             # <<<<<<<<<<<<<<
 * 
 *         # Use PyDataType_HASSUBARRAY to test whether this field is
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyDataType_NAMES(__pyx_v_self);
  __Pyx_INCREF(((PyObject*)__pyx_t_1));
  __pyx_r = ((PyObject*)__pyx_t_1);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":301
 * 
 *         @property
 *         cdef inline tuple names(self):             # <<<<<<<<<<<<<<
 *             return <tuple>PyDataType_NAMES(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":308
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_SUBARRAY(self)
 * 
 */

static CYTHON_INLINE PyArray_ArrayDescr *__pyx_f_5numpy_5dtype_8subarray_subarray(PyArray_Descr *__pyx_v_self) {
  PyArray_ArrayDescr *__pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":309
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:
 *             return PyDataType_SUBARRAY(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyDataType_SUBARRAY(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":308
 *         # this field via the inline helper method PyDataType_SHAPE.
 *         @property
 *         cdef inline PyArray_ArrayDescr* subarray(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             return PyDataType_SUBARRAY(self)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":312
 * 
 *         @property
 *         cdef inline npy_uint64 flags(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)
 */

static CYTHON_INLINE npy_uint64 __pyx_f_5numpy_5dtype_5flags_flags(PyArray_Descr *__pyx_v_self) {
  npy_uint64 __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":314
 *         cdef inline npy_uint64 flags(self) noexcept nogil:
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyDataType_FLAGS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":312
 * 
 *         @property
 *         cdef inline npy_uint64 flags(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The data types flags."""
 *             return PyDataType_FLAGS(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":324
 * 
 *         @property
 *         cdef inline int numiter(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)
 */

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_7numiter_numiter(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":326
 *         cdef inline int numiter(self) noexcept nogil:
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_NUMITER(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":324
 * 
 *         @property
 *         cdef inline int numiter(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of arrays that need to be broadcast to the same shape."""
 *             return PyArray_MultiIter_NUMITER(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":329
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_4size_size(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":331
 *         cdef inline npy_intp size(self) noexcept nogil:
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":329
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The total broadcasted size."""
 *             return PyArray_MultiIter_SIZE(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":334
 * 
 *         @property
 *         cdef inline npy_intp index(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_9broadcast_5index_index(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":336
 *         cdef inline npy_intp index(self) noexcept nogil:
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_INDEX(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":334
 * 
 *         @property
 *         cdef inline npy_intp index(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The current (1-d) index into the broadcasted result."""
 *             return PyArray_MultiIter_INDEX(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":339
 * 
 *         @property
 *         cdef inline int nd(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)
 */

static CYTHON_INLINE int __pyx_f_5numpy_9broadcast_2nd_nd(PyArrayMultiIterObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":341
 *         cdef inline int nd(self) noexcept nogil:
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":339
 * 
 *         @property
 *         cdef inline int nd(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The number of dimensions in the broadcasted result."""
 *             return PyArray_MultiIter_NDIM(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":344
 * 
 *         @property
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_9broadcast_10dimensions_dimensions(PyArrayMultiIterObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":346
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_MultiIter_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":344
 * 
 *         @property
 *         cdef inline npy_intp* dimensions(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The shape of the broadcasted result."""
 *             return PyArray_MultiIter_DIMS(self)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":349
 * 
 *         @property
 *         cdef inline void** iters(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 */

static CYTHON_INLINE void **__pyx_f_5numpy_9broadcast_5iters_iters(PyArrayMultiIterObject *__pyx_v_self) {
  void **__pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":352
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 *             return PyArray_MultiIter_ITERS(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyArray_MultiIter_ITERS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":349
 * 
 *         @property
 *         cdef inline void** iters(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """An array of iterator objects that holds the iterators for the arrays to be broadcast together.
 *             On return, the iterators are adjusted for broadcasting."""
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":367
 * 
 *         @property
 *         cdef inline PyObject* base(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":370
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":367
 * 
 *         @property
 *         cdef inline PyObject* base(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":373
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":376
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":373
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":379
 * 
 *         @property
 *         cdef inline int ndim(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":382
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":379
 * 
 *         @property
 *         cdef inline int ndim(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":385
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":390
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":385
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":393
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":397
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":393
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":400
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":403
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":400
 * 
 *         @property
 *         cdef inline npy_intp size(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":406
 * 
 *         @property
 *         cdef inline char* data(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":412
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":406
 * 
 *         @property
 *         cdef inline char* data(self) noexcept nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":824
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":825
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":824
 * ctypedef long double complex clongdouble_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":827
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":828
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":827
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":830
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":831
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":830
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":833
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":834
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":833
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":836
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":837
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":836
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":839
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":840
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = PyDataType_HASSUBARRAY(__pyx_v_d);
  if (__pyx_t_1) {

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":841
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __pyx_f_5numpy_5dtype_8subarray_subarray(__pyx_v_d)->shape;
    __Pyx_INCREF(((PyObject*)__pyx_t_2));
    __pyx_r = ((PyObject*)__pyx_t_2);
    goto __pyx_L0;

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":840
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":843
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":839
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1027
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1028
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1029
 * cdef inline void set_array_base(ndarray arr, object base) except *:
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_t_1 = PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 1029, __pyx_L1_error)

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1027
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base) except *:             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("numpy.set_array_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1031
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1032
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1033
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = (__pyx_v_base == NULL);
  if (__pyx_t_1) {

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1034
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1033
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1035
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1031
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1039
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1040
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1041
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1041, __pyx_L3_error)

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1040
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1042
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1042, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1043
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1043, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1043, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1040
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1039
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1045
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1047
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1047, __pyx_L3_error)

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1048
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1048, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1049
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1049, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1049, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1046
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1045
 *         raise ImportError("numpy._core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1051
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 1);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1052
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1053
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(3, 1053, __pyx_L3_error)

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1052
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1054
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(3, 1054, __pyx_L5_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1055
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 1055, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 1055, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;

    /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1052
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1051
 *         raise ImportError("numpy._core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1058
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1070
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1058
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1073
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1085
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1073
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj) noexcept:             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1088
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1095
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1088
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1098
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1102
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1098
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1105
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1109
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1105
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) noexcept nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "PygameShader/Palette.pyx":1269
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cpdef void palette_change(             # <<<<<<<<<<<<<<
 *         object image_surface,
 *         object color_palette,
 */

static PyObject *__pyx_pw_12PygameShader_7Palette_1palette_change(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static void __pyx_f_12PygameShader_7Palette_palette_change(PyObject *__pyx_v_image_surface, PyObject *__pyx_v_color_palette, PyObject *__pyx_v_temp_buffer, CYTHON_UNUSED int __pyx_skip_dispatch) {
  __Pyx_memviewslice __pyx_v_rgb_array = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_palette = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_v_tmp_buffer = { 0, 0, { 0 }, { 0 }, { 0 } };
  Py_ssize_t __pyx_v_w;
  Py_ssize_t __pyx_v_h;
  Py_ssize_t __pyx_v_p_length;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_memviewslice __pyx_t_9 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  unsigned int __pyx_t_13;
  __Pyx_memviewslice __pyx_t_14 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("palette_change", 1);

  /* "PygameShader/Palette.pyx":1339
 *     """
 * 
 *     if not isinstance(image_surface, Surface):             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             f"Invalid type for argument 'rgb_array'. Expected a valid pygame.Surface instance, "
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Surface); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_image_surface, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 1339, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "PygameShader/Palette.pyx":1341
 *     if not isinstance(image_surface, Surface):
 *         raise TypeError(
 *             f"Invalid type for argument 'rgb_array'. Expected a valid pygame.Surface instance, "             # <<<<<<<<<<<<<<
 *             f"but got {type(image_surface).__name__}. Please ensure you pass a valid Pygame Surface object."
 *         )
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_type_for_argument_rgb_ar);
    __pyx_t_4 += 89;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_type_for_argument_rgb_ar);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_type_for_argument_rgb_ar);

    /* "PygameShader/Palette.pyx":1342
 *         raise TypeError(
 *             f"Invalid type for argument 'rgb_array'. Expected a valid pygame.Surface instance, "
 *             f"but got {type(image_surface).__name__}. Please ensure you pass a valid Pygame Surface object."             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_image_surface)), __pyx_n_s_name_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1342, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_Please_ensure_you_pass_a_valid);
    __pyx_t_4 += 55;
    __Pyx_GIVEREF(__pyx_kp_u_Please_ensure_you_pass_a_valid);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Please_ensure_you_pass_a_valid);

    /* "PygameShader/Palette.pyx":1341
 *     if not isinstance(image_surface, Surface):
 *         raise TypeError(
 *             f"Invalid type for argument 'rgb_array'. Expected a valid pygame.Surface instance, "             # <<<<<<<<<<<<<<
 *             f"but got {type(image_surface).__name__}. Please ensure you pass a valid Pygame Surface object."
 *         )
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PygameShader/Palette.pyx":1340
 * 
 *     if not isinstance(image_surface, Surface):
 *         raise TypeError(             # <<<<<<<<<<<<<<
 *             f"Invalid type for argument 'rgb_array'. Expected a valid pygame.Surface instance, "
 *             f"but got {type(image_surface).__name__}. Please ensure you pass a valid Pygame Surface object."
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1340, __pyx_L1_error)

    /* "PygameShader/Palette.pyx":1339
 *     """
 * 
 *     if not isinstance(image_surface, Surface):             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             f"Invalid type for argument 'rgb_array'. Expected a valid pygame.Surface instance, "
 */
  }

  /* "PygameShader/Palette.pyx":1345
 *         )
 * 
 *     if not isinstance(color_palette, ndarray):             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             f"Invalid type for argument 'color_palette'. Expected a numpy.ndarray, "
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_color_palette, __pyx_t_1); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(1, 1345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_2 = (!__pyx_t_3);
  if (unlikely(__pyx_t_2)) {

    /* "PygameShader/Palette.pyx":1347
 *     if not isinstance(color_palette, ndarray):
 *         raise TypeError(
 *             f"Invalid type for argument 'color_palette'. Expected a numpy.ndarray, "             # <<<<<<<<<<<<<<
 *             f"but got {type(color_palette).__name__}. Please provide a numpy array containing the color palette."
 *         )
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_type_for_argument_color);
    __pyx_t_4 += 77;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_type_for_argument_color);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_type_for_argument_color);

    /* "PygameShader/Palette.pyx":1348
 *         raise TypeError(
 *             f"Invalid type for argument 'color_palette'. Expected a numpy.ndarray, "
 *             f"but got {type(color_palette).__name__}. Please provide a numpy array containing the color palette."             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_color_palette)), __pyx_n_s_name_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1348, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_Please_provide_a_numpy_array_co);
    __pyx_t_4 += 60;
    __Pyx_GIVEREF(__pyx_kp_u_Please_provide_a_numpy_array_co);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Please_provide_a_numpy_array_co);

    /* "PygameShader/Palette.pyx":1347
 *     if not isinstance(color_palette, ndarray):
 *         raise TypeError(
 *             f"Invalid type for argument 'color_palette'. Expected a numpy.ndarray, "             # <<<<<<<<<<<<<<
 *             f"but got {type(color_palette).__name__}. Please provide a numpy array containing the color palette."
 *         )
 */
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PygameShader/Palette.pyx":1346
 * 
 *     if not isinstance(color_palette, ndarray):
 *         raise TypeError(             # <<<<<<<<<<<<<<
 *             f"Invalid type for argument 'color_palette'. Expected a numpy.ndarray, "
 *             f"but got {type(color_palette).__name__}. Please provide a numpy array containing the color palette."
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1346, __pyx_L1_error)

    /* "PygameShader/Palette.pyx":1345
 *         )
 * 
 *     if not isinstance(color_palette, ndarray):             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             f"Invalid type for argument 'color_palette'. Expected a numpy.ndarray, "
 */
  }

  /* "PygameShader/Palette.pyx":1351
 *         )
 * 
 *     if not isinstance(temp_buffer, ndarray):             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             f"Invalid type for argument 'temp_buffer'. Expected a numpy.ndarray, "
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1351, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_temp_buffer, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(1, 1351, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (unlikely(__pyx_t_3)) {

    /* "PygameShader/Palette.pyx":1353
 *     if not isinstance(temp_buffer, ndarray):
 *         raise TypeError(
 *             f"Invalid type for argument 'temp_buffer'. Expected a numpy.ndarray, "             # <<<<<<<<<<<<<<
 *             f"but got {type(temp_buffer).__name__}. Please pass a numpy array for the temporary buffer."
 *         )
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Invalid_type_for_argument_temp_b);
    __pyx_t_4 += 75;
    __Pyx_GIVEREF(__pyx_kp_u_Invalid_type_for_argument_temp_b);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_type_for_argument_temp_b);

    /* "PygameShader/Palette.pyx":1354
 *         raise TypeError(
 *             f"Invalid type for argument 'temp_buffer'. Expected a numpy.ndarray, "
 *             f"but got {type(temp_buffer).__name__}. Please pass a numpy array for the temporary buffer."             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_v_temp_buffer)), __pyx_n_s_name_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1354, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_Please_pass_a_numpy_array_for_t);
    __pyx_t_4 += 53;
    __Pyx_GIVEREF(__pyx_kp_u_Please_pass_a_numpy_array_for_t);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Please_pass_a_numpy_array_for_t);

    /* "PygameShader/Palette.pyx":1353
 *     if not isinstance(temp_buffer, ndarray):
 *         raise TypeError(
 *             f"Invalid type for argument 'temp_buffer'. Expected a numpy.ndarray, "             # <<<<<<<<<<<<<<
 *             f"but got {type(temp_buffer).__name__}. Please pass a numpy array for the temporary buffer."
 *         )
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "PygameShader/Palette.pyx":1352
 * 
 *     if not isinstance(temp_buffer, ndarray):
 *         raise TypeError(             # <<<<<<<<<<<<<<
 *             f"Invalid type for argument 'temp_buffer'. Expected a numpy.ndarray, "
 *             f"but got {type(temp_buffer).__name__}. Please pass a numpy array for the temporary buffer."
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_7); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1352, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 1352, __pyx_L1_error)

    /* "PygameShader/Palette.pyx":1351
 *         )
 * 
 *     if not isinstance(temp_buffer, ndarray):             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             f"Invalid type for argument 'temp_buffer'. Expected a numpy.ndarray, "
 */
  }

  /* "PygameShader/Palette.pyx":1357
 *         )
 * 
 *     if not temp_buffer.flags[ 'C_CONTIGUOUS' ]:             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             "Argument 'temp_buffer' must be a contiguous array (C_CONTIGUOUS). "
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_temp_buffer, __pyx_n_s_flags); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_Dict_GetItem(__pyx_t_1, __pyx_n_u_C_CONTIGUOUS); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_2 = (!__pyx_t_3);
  if (unlikely(__pyx_t_2)) {

    /* "PygameShader/Palette.pyx":1358
 * 
 *     if not temp_buffer.flags[ 'C_CONTIGUOUS' ]:
 *         raise TypeError(             # <<<<<<<<<<<<<<
 *             "Argument 'temp_buffer' must be a contiguous array (C_CONTIGUOUS). "
 *             "This means the memory layout must be contiguous, which is required for optimal performance. "
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(1, 1358, __pyx_L1_error)

    /* "PygameShader/Palette.pyx":1357
 *         )
 * 
 *     if not temp_buffer.flags[ 'C_CONTIGUOUS' ]:             # <<<<<<<<<<<<<<
 *         raise TypeError(
 *             "Argument 'temp_buffer' must be a contiguous array (C_CONTIGUOUS). "
 */
  }

  /* "PygameShader/Palette.pyx":1365
 * 
 *     # Ensure both 'temp_buffer' and 'color_palette' are of dtype float32
 *     if temp_buffer.dtype != float32 or color_palette.dtype != float32:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Both 'temp_buffer' and 'color_palette' must be of type numpy.float32. "
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_temp_buffer, __pyx_n_s_dtype); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_7, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (!__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_color_palette, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_float32); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(1, 1365, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_2 = __pyx_t_3;
  __pyx_L8_bool_binop_done:;
  if (unlikely(__pyx_t_2)) {

    /* "PygameShader/Palette.pyx":1367
 *     if temp_buffer.dtype != float32 or color_palette.dtype != float32:
 *         raise ValueError(
 *             "Both 'temp_buffer' and 'color_palette' must be of type numpy.float32. "             # <<<<<<<<<<<<<<
 *             "Found 'temp_buffer' dtype: '%s', and 'color_palette' dtype: '%s'." %
 *             (temp_buffer.dtype, color_palette.dtype)
 */
    __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Both_temp_buffer_and_color_palet);
    __pyx_t_4 += 98;
    __Pyx_GIVEREF(__pyx_kp_u_Both_temp_buffer_and_color_palet);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Both_temp_buffer_and_color_palet);

    /* "PygameShader/Palette.pyx":1369
 *             "Both 'temp_buffer' and 'color_palette' must be of type numpy.float32. "
 *             "Found 'temp_buffer' dtype: '%s', and 'color_palette' dtype: '%s'." %
 *             (temp_buffer.dtype, color_palette.dtype)             # <<<<<<<<<<<<<<
 *         )
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_temp_buffer, __pyx_n_s_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_1), __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_and_color_palette_dtype);
    __pyx_t_4 += 31;
    __Pyx_GIVEREF(__pyx_kp_u_and_color_palette_dtype);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_and_color_palette_dtype);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_color_palette, __pyx_n_s_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_FormatSimpleAndDecref(PyObject_Unicode(__pyx_t_6), __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1369, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u__12);
    __pyx_t_4 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__12);
    PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_kp_u__12);

    /* "PygameShader/Palette.pyx":1367
 *     if temp_buffer.dtype != float32 or color_palette.dtype != float32:
 *         raise ValueError(
 *             "Both 'temp_buffer' and 'color_palette' must be of type numpy.float32. "             # <<<<<<<<<<<<<<
 *             "Found 'temp_buffer' dtype: '%s', and 'color_palette' dtype: '%s'." %
 *             (temp_buffer.dtype, color_palette.dtype)
 */
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_7, 5, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PygameShader/Palette.pyx":1366
 *     # Ensure both 'temp_buffer' and 'color_palette' are of dtype float32
 *     if temp_buffer.dtype != float32 or color_palette.dtype != float32:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Both 'temp_buffer' and 'color_palette' must be of type numpy.float32. "
 *             "Found 'temp_buffer' dtype: '%s', and 'color_palette' dtype: '%s'." %
 */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(1, 1366, __pyx_L1_error)

    /* "PygameShader/Palette.pyx":1365
 * 
 *     # Ensure both 'temp_buffer' and 'color_palette' are of dtype float32
 *     if temp_buffer.dtype != float32 or color_palette.dtype != float32:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Both 'temp_buffer' and 'color_palette' must be of type numpy.float32. "
 */
  }

  /* "PygameShader/Palette.pyx":1374
 *     cdef:
 *         unsigned char [:, :, :] rgb_array
 *         float [:, :] palette = color_palette             # <<<<<<<<<<<<<<
 *         float[:, ::1] tmp_buffer = temp_buffer
 *         Py_ssize_t w, h, p_length
 */
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsds_float(__pyx_v_color_palette, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1374, __pyx_L1_error)
  __pyx_v_palette = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "PygameShader/Palette.pyx":1375
 *         unsigned char [:, :, :] rgb_array
 *         float [:, :] palette = color_palette
 *         float[:, ::1] tmp_buffer = temp_buffer             # <<<<<<<<<<<<<<
 *         Py_ssize_t w, h, p_length
 * 
 */
  __pyx_t_9 = __Pyx_PyObject_to_MemoryviewSlice_d_dc_float(__pyx_v_temp_buffer, PyBUF_WRITABLE); if (unlikely(!__pyx_t_9.memview)) __PYX_ERR(1, 1375, __pyx_L1_error)
  __pyx_v_tmp_buffer = __pyx_t_9;
  __pyx_t_9.memview = NULL;
  __pyx_t_9.data = NULL;

  /* "PygameShader/Palette.pyx":1378
 *         Py_ssize_t w, h, p_length
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         rgb_array = image_surface.get_view('3')
 *     except (pygame.error, ValueError):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_10, &__pyx_t_11, &__pyx_t_12);
    __Pyx_XGOTREF(__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_11);
    __Pyx_XGOTREF(__pyx_t_12);
    /*try:*/ {

      /* "PygameShader/Palette.pyx":1379
 * 
 *     try:
 *         rgb_array = image_surface.get_view('3')             # <<<<<<<<<<<<<<
 *     except (pygame.error, ValueError):
 *         raise ValueError(
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_image_surface, __pyx_n_s_get_view); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1379, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = NULL;
      __pyx_t_13 = 0;
      #if CYTHON_UNPACK_METHODS
      if (likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_13 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u_3};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1379, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_14 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_unsigned_char(__pyx_t_7, PyBUF_WRITABLE); if (unlikely(!__pyx_t_14.memview)) __PYX_ERR(1, 1379, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_rgb_array = __pyx_t_14;
      __pyx_t_14.memview = NULL;
      __pyx_t_14.data = NULL;

      /* "PygameShader/Palette.pyx":1378
 *         Py_ssize_t w, h, p_length
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         rgb_array = image_surface.get_view('3')
 *     except (pygame.error, ValueError):
 */
    }
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    goto __pyx_L15_try_end;
    __pyx_L10_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_XCLEAR_MEMVIEW(&__pyx_t_14, 1);
    __pyx_t_14.memview = NULL; __pyx_t_14.data = NULL;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_XCLEAR_MEMVIEW(&__pyx_t_8, 1);
    __pyx_t_8.memview = NULL; __pyx_t_8.data = NULL;
    __PYX_XCLEAR_MEMVIEW(&__pyx_t_9, 1);
    __pyx_t_9.memview = NULL; __pyx_t_9.data = NULL;

    /* "PygameShader/Palette.pyx":1380
 *     try:
 *         rgb_array = image_surface.get_view('3')
 *     except (pygame.error, ValueError):             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             "Failed to get a valid view from 'rgb_array'. Ensure the surface is a valid "
 */
    __Pyx_ErrFetch(&__pyx_t_7, &__pyx_t_1, &__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_pygame); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1380, __pyx_L12_except_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_error); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1380, __pyx_L12_except_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_17 = __Pyx_PyErr_GivenExceptionMatches2(__pyx_t_7, __pyx_t_16, __pyx_builtin_ValueError);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_ErrRestore(__pyx_t_7, __pyx_t_1, __pyx_t_6);
    __pyx_t_7 = 0; __pyx_t_1 = 0; __pyx_t_6 = 0;
    if (__pyx_t_17) {
      __Pyx_AddTraceback("PygameShader.Palette.palette_change", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_1, &__pyx_t_7) < 0) __PYX_ERR(1, 1380, __pyx_L12_except_error)
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "PygameShader/Palette.pyx":1381
 *         rgb_array = image_surface.get_view('3')
 *     except (pygame.error, ValueError):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Failed to get a valid view from 'rgb_array'. Ensure the surface is a valid "
 *             "Pygame Surface with a compatible format."
 */
      __pyx_t_16 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1381, __pyx_L12_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_Raise(__pyx_t_16, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __PYX_ERR(1, 1381, __pyx_L12_except_error)
    }
    goto __pyx_L12_except_error;

    /* "PygameShader/Palette.pyx":1378
 *         Py_ssize_t w, h, p_length
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         rgb_array = image_surface.get_view('3')
 *     except (pygame.error, ValueError):
 */
    __pyx_L12_except_error:;
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_XGIVEREF(__pyx_t_11);
    __Pyx_XGIVEREF(__pyx_t_12);
    __Pyx_ExceptionReset(__pyx_t_10, __pyx_t_11, __pyx_t_12);
    goto __pyx_L1_error;
    __pyx_L15_try_end:;
  }

  /* "PygameShader/Palette.pyx":1386
 *         )
 * 
 *     w, h = rgb_array.shape[ 0 ], rgb_array.shape[ 1 ]             # <<<<<<<<<<<<<<
 *     p_length = <object> color_palette.shape[ 0 ]
 * 
 */
  __pyx_t_4 = (__pyx_v_rgb_array.shape[0]);
  __pyx_t_18 = (__pyx_v_rgb_array.shape[1]);
  __pyx_v_w = __pyx_t_4;
  __pyx_v_h = __pyx_t_18;

  /* "PygameShader/Palette.pyx":1387
 * 
 *     w, h = rgb_array.shape[ 0 ], rgb_array.shape[ 1 ]
 *     p_length = <object> color_palette.shape[ 0 ]             # <<<<<<<<<<<<<<
 * 
 *     # Check if the dimensions of the 'rgb_array' and 'tmp_buffer' match
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_color_palette, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_18 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_18 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 1387, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_p_length = __pyx_t_18;

  /* "PygameShader/Palette.pyx":1390
 * 
 *     # Check if the dimensions of the 'rgb_array' and 'tmp_buffer' match
 *     if w * h!= temp_buffer.shape[ 0 ]:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             f"Dimension mismatch between 'rgb_array' and 'temp_buffer'. "
 */
  __pyx_t_1 = PyInt_FromSsize_t((__pyx_v_w * __pyx_v_h)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_temp_buffer, __pyx_n_s_shape); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = PyObject_RichCompare(__pyx_t_1, __pyx_t_6, Py_NE); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(1, 1390, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "PygameShader/Palette.pyx":1392
 *     if w * h!= temp_buffer.shape[ 0 ]:
 *         raise ValueError(
 *             f"Dimension mismatch between 'rgb_array' and 'temp_buffer'. "             # <<<<<<<<<<<<<<
 *             f"The 'rgb_array' array has shape {(<object>rgb_array).shape} while the 'temp_buffer' array has shape "
 *             f"{(<object>temp_buffer).shape}. "
 */
    __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_18 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_Dimension_mismatch_between_rgb_a);
    __pyx_t_18 += 90;
    __Pyx_GIVEREF(__pyx_kp_u_Dimension_mismatch_between_rgb_a);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_Dimension_mismatch_between_rgb_a);

    /* "PygameShader/Palette.pyx":1393
 *         raise ValueError(
 *             f"Dimension mismatch between 'rgb_array' and 'temp_buffer'. "
 *             f"The 'rgb_array' array has shape {(<object>rgb_array).shape} while the 'temp_buffer' array has shape "             # <<<<<<<<<<<<<<
 *             f"{(<object>temp_buffer).shape}. "
 *             f"Please ensure both arrays have the same height, width, and number of dimensions."
 */
    __pyx_t_6 = __pyx_memoryview_fromslice(__pyx_v_rgb_array, 3, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_char, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_char, 0);; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1393, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_while_the_temp_buffer_array_has);
    __pyx_t_18 += 41;
    __Pyx_GIVEREF(__pyx_kp_u_while_the_temp_buffer_array_has);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_while_the_temp_buffer_array_has);

    /* "PygameShader/Palette.pyx":1394
 *             f"Dimension mismatch between 'rgb_array' and 'temp_buffer'. "
 *             f"The 'rgb_array' array has shape {(<object>rgb_array).shape} while the 'temp_buffer' array has shape "
 *             f"{(<object>temp_buffer).shape}. "             # <<<<<<<<<<<<<<
 *             f"Please ensure both arrays have the same height, width, and number of dimensions."
 *         )
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_temp_buffer, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1394, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_5;
    __pyx_t_18 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u_Please_ensure_both_arrays_have);
    __pyx_t_18 += 82;
    __Pyx_GIVEREF(__pyx_kp_u_Please_ensure_both_arrays_have);
    PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_kp_u_Please_ensure_both_arrays_have);

    /* "PygameShader/Palette.pyx":1392
 *     if w * h!= temp_buffer.shape[ 0 ]:
 *         raise ValueError(
 *             f"Dimension mismatch between 'rgb_array' and 'temp_buffer'. "             # <<<<<<<<<<<<<<
 *             f"The 'rgb_array' array has shape {(<object>rgb_array).shape} while the 'temp_buffer' array has shape "
 *             f"{(<object>temp_buffer).shape}. "
 */
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_7, 5, __pyx_t_18, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PygameShader/Palette.pyx":1391
 *     # Check if the dimensions of the 'rgb_array' and 'tmp_buffer' match
 *     if w * h!= temp_buffer.shape[ 0 ]:
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             f"Dimension mismatch between 'rgb_array' and 'temp_buffer'. "
 *             f"The 'rgb_array' array has shape {(<object>rgb_array).shape} while the 'temp_buffer' array has shape "
 */
    __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1391, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(1, 1391, __pyx_L1_error)

    /* "PygameShader/Palette.pyx":1390
 * 
 *     # Check if the dimensions of the 'rgb_array' and 'tmp_buffer' match
 *     if w * h!= temp_buffer.shape[ 0 ]:             # <<<<<<<<<<<<<<
 *         raise ValueError(
 *             f"Dimension mismatch between 'rgb_array' and 'temp_buffer'. "
 */
  }

  /* "PygameShader/Palette.pyx":1399
 * 
 *     # Now call the palette change function
 *     palette_change_c(w, h, p_length, rgb_array, palette, tmp_buffer)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_f_12PygameShader_7Palette_palette_change_c(__pyx_v_w, __pyx_v_h, __pyx_v_p_length, __pyx_v_rgb_array, __pyx_v_palette, __pyx_v_tmp_buffer); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1399, __pyx_L1_error)

  /* "PygameShader/Palette.pyx":1269
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cpdef void palette_change(             # <<<<<<<<<<<<<<
 *         object image_surface,
 *         object color_palette,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_8, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_9, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_14, 1);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("PygameShader.Palette.palette_change", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_rgb_array, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_palette, 1);
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_tmp_buffer, 1);
  __Pyx_RefNannyFinishContext();
}

/* Python wrapper */
static PyObject *__pyx_pw_12PygameShader_7Palette_1palette_change(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_12PygameShader_7Palette_palette_change, "\n    Apply a color palette transformation to an image in-place.\n\n    This function modifies an image by changing its color palette. It uses a given palette \n    to substitute the colors of the input image (represented by a Pygame surface) with new \n    colors from the palette. The process is done in-place, meaning the original image is directly \n    updated without the need for a new surface to be created.\n\n    The available palettes are stored in `LIST_PALETTES` within the PygameShader project.\n\n    Example usage:\n    ```python\n    from PygameShader.Palette import LIST_PALETTES\n    print(LIST_PALETTES.keys())\n    ```\n\n    To optimize performance, the function requires a temporary array (`temp_buffer`) that should be pre-declared \n    before each function call. This temporary array improves efficiency by avoiding the need to allocate memory \n    during each frame.\n\n    Example of temporary array declaration:\n    ```python\n    temp_buffer = numpy.ascontiguousarray(numpy.ndarray(\n        (SURFACE.get_width() * SURFACE.get_height(), IRIDESCENTCRYSTAL.shape[0]),\n        dtype=float32\n    ))\n    ```\n\n    :param image_surface: \n        The Pygame surface (`pygame.Surface`) representing the image to be modified.\n        It is the input image on which the color palette will be applied.\n\n    :param color_palette: \n        A `numpy.ndarray` containing the colors to use for the palette transformation.\n        The array format should be (w, 3), where `w` is the number of colors, and the type should be `float` \n        with values in the range [0.0, 255.0].\n\n        Example:\n        ```python\n        from PygameShader import IRIDESCENTCRYSTAL\n        ```\n\n    :param temp_buffer: \n        A temporary `numpy.ndarray` (contiguous array) used for optimization. \n        It should have the shape `(rgb_array.get_width() * rgb_array.get_height(), \n        len(color_palette.shape[0]))` \n        and type `float32`. This array should be pre-all""ocated before calling the function to improve performance \n        by avoiding reallocation every frame.\n\n        Example:\n        ```python\n        temp_buffer = numpy.ascontiguousarray(numpy.ndarray(\n            (SURFACE.get_width() * SURFACE.get_height(), IRIDESCENTCRYSTAL.shape[0]),\n            dtype=float32\n        ))\n        ```\n\n    :return: \n        None. This function modifies the `rgb_array` in-place.\n\n    :raises ValueError: \n        If the input surface is not compatible or if an invalid palette is provided.\n    :raises TypeError:    \n    ");
static PyObject *__pyx_pw_12PygameShader_7Palette_1palette_change(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_image_surface = 0;
  PyObject *__pyx_v_color_palette = 0;
  PyObject *__pyx_v_temp_buffer = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("palette_change (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_image_surface,&__pyx_n_s_color_palette,&__pyx_n_s_temp_buffer,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_image_surface)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1269, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_color_palette)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1269, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("palette_change", 1, 3, 3, 1); __PYX_ERR(1, 1269, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_temp_buffer)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1269, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("palette_change", 1, 3, 3, 2); __PYX_ERR(1, 1269, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "palette_change") < 0)) __PYX_ERR(1, 1269, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v_image_surface = values[0];
    __pyx_v_color_palette = values[1];
    __pyx_v_temp_buffer = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("palette_change", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1269, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("PygameShader.Palette.palette_change", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12PygameShader_7Palette_palette_change(__pyx_self, __pyx_v_image_surface, __pyx_v_color_palette, __pyx_v_temp_buffer);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12PygameShader_7Palette_palette_change(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_image_surface, PyObject *__pyx_v_color_palette, PyObject *__pyx_v_temp_buffer) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("palette_change", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_f_12PygameShader_7Palette_palette_change(__pyx_v_image_surface, __pyx_v_color_palette, __pyx_v_temp_buffer, 0); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1269, __pyx_L1_error)
  __pyx_t_1 = __Pyx_void_to_None(NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PygameShader.Palette.palette_change", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PygameShader/Palette.pyx":1411
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cdef inline void palette_change_c(             # <<<<<<<<<<<<<<
 *         const Py_ssize_t w,
 *         const Py_ssize_t h,
 */

static CYTHON_INLINE void __pyx_f_12PygameShader_7Palette_palette_change_c(Py_ssize_t const __pyx_v_w, CYTHON_UNUSED Py_ssize_t const __pyx_v_h, Py_ssize_t const __pyx_v_p_length, __Pyx_memviewslice __pyx_v_rgb_array, __Pyx_memviewslice __pyx_v_color_palette, __Pyx_memviewslice __pyx_v_temp_buffer) {
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  Py_ssize_t __pyx_v_k;
  float const *__pyx_v_p2;
  float *__pyx_v_p3;
  float __pyx_v_min_v;
  unsigned int __pyx_v_index;
  unsigned int __pyx_v_tmp_index;
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  size_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  Py_ssize_t __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  Py_ssize_t __pyx_t_19;
  int __pyx_t_20;

  /* "PygameShader/Palette.pyx":1474
 * 
 *     # Parallelize the pixel processing across multiple threads
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for j in prange(h, schedule=SCHEDULE, num_threads=THREADS):  # Process each row (y-axis)
 * 
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      if (PyGILState_Check()) {
        Py_UNBLOCK_THREADS
      }
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "PygameShader/Palette.pyx":1475
 *     # Parallelize the pixel processing across multiple threads
 *     with nogil:
 *         for j in prange(h, schedule=SCHEDULE, num_threads=THREADS):  # Process each row (y-axis)             # <<<<<<<<<<<<<<
 * 
 *             for i in range(w):  # Process each column (x-axis)
 */
        __pyx_t_1 = __pyx_v_h;
        {
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_3 = (__pyx_t_1 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_3 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel num_threads(__pyx_v_12PygameShader_7Palette_THREADS) private(__pyx_t_10, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_i) lastprivate(__pyx_v_index) firstprivate(__pyx_v_j) lastprivate(__pyx_v_j) lastprivate(__pyx_v_k) lastprivate(__pyx_v_min_v) lastprivate(__pyx_v_p2) lastprivate(__pyx_v_p3) lastprivate(__pyx_v_tmp_index) schedule(static)
                    #endif /* _OPENMP */
                    for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_3; __pyx_t_2++){
                        {
                            __pyx_v_j = (Py_ssize_t)(0 + 1 * __pyx_t_2);
                            /* Initialize private variables to invalid values */
                            __pyx_v_i = ((Py_ssize_t)0xbad0bad0);
                            __pyx_v_index = ((unsigned int)0xbad0bad0);
                            __pyx_v_k = ((Py_ssize_t)0xbad0bad0);
                            __pyx_v_min_v = ((float)__PYX_NAN());
                            __pyx_v_p2 = ((float const *)1);
                            __pyx_v_p3 = ((float *)1);
                            __pyx_v_tmp_index = ((unsigned int)0xbad0bad0);

                            /* "PygameShader/Palette.pyx":1477
 *         for j in prange(h, schedule=SCHEDULE, num_threads=THREADS):  # Process each row (y-axis)
 * 
 *             for i in range(w):  # Process each column (x-axis)             # <<<<<<<<<<<<<<
 * 
 *                 tmp_index = j * w + i  # Flatten 2D coordinates (i, j) into 1D index
 */
                            __pyx_t_4 = __pyx_v_w;
                            __pyx_t_5 = __pyx_t_4;
                            for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
                              __pyx_v_i = __pyx_t_6;

                              /* "PygameShader/Palette.pyx":1479
 *             for i in range(w):  # Process each column (x-axis)
 * 
 *                 tmp_index = j * w + i  # Flatten 2D coordinates (i, j) into 1D index             # <<<<<<<<<<<<<<
 * 
 *                 # Retrieve the RGB values for the current pixel
 */
                              __pyx_v_tmp_index = ((__pyx_v_j * __pyx_v_w) + __pyx_v_i);

                              /* "PygameShader/Palette.pyx":1482
 * 
 *                 # Retrieve the RGB values for the current pixel
 *                 p3 = &temp_buffer[ tmp_index, 0 ]             # <<<<<<<<<<<<<<
 * 
 *                 for k in range(p_length): #, schedule=SCHEDULE, num_threads=THREADS):
 */
                              __pyx_t_7 = __pyx_v_tmp_index;
                              __pyx_t_8 = 0;
                              __pyx_v_p3 = (&(*((float *) ( /* dim=1 */ ((char *) (((float *) ( /* dim=0 */ (__pyx_v_temp_buffer.data + __pyx_t_7 * __pyx_v_temp_buffer.strides[0]) )) + __pyx_t_8)) ))));

                              /* "PygameShader/Palette.pyx":1484
 *                 p3 = &temp_buffer[ tmp_index, 0 ]
 * 
 *                 for k in range(p_length): #, schedule=SCHEDULE, num_threads=THREADS):             # <<<<<<<<<<<<<<
 * 
 *                     p2 = &color_palette[ k, 0 ]
 */
                              __pyx_t_9 = __pyx_v_p_length;
                              __pyx_t_10 = __pyx_t_9;
                              for (__pyx_t_11 = 0; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
                                __pyx_v_k = __pyx_t_11;

                                /* "PygameShader/Palette.pyx":1486
 *                 for k in range(p_length): #, schedule=SCHEDULE, num_threads=THREADS):
 * 
 *                     p2 = &color_palette[ k, 0 ]             # <<<<<<<<<<<<<<
 * 
 *                     (p3 + k)[ 0 ] = (<float>rgb_array[ i, j, 0 ] - <float>p2[ 0 ]) ** 2 + \
 */
                                __pyx_t_8 = __pyx_v_k;
                                __pyx_t_12 = 0;
                                __pyx_v_p2 = (&(*((float const  *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_color_palette.data + __pyx_t_8 * __pyx_v_color_palette.strides[0]) ) + __pyx_t_12 * __pyx_v_color_palette.strides[1]) ))));

                                /* "PygameShader/Palette.pyx":1488
 *                     p2 = &color_palette[ k, 0 ]
 * 
 *                     (p3 + k)[ 0 ] = (<float>rgb_array[ i, j, 0 ] - <float>p2[ 0 ]) ** 2 + \             # <<<<<<<<<<<<<<
 *                                          (<float>rgb_array[ i, j, 1 ] - <float>(p2 + 1)[ 0 ]) ** 2 + \
 *                                          (<float>rgb_array[ i, j, 2 ] - <float>(p2 + 2)[ 0 ]) ** 2
 */
                                __pyx_t_12 = __pyx_v_i;
                                __pyx_t_8 = __pyx_v_j;
                                __pyx_t_13 = 0;

                                /* "PygameShader/Palette.pyx":1489
 * 
 *                     (p3 + k)[ 0 ] = (<float>rgb_array[ i, j, 0 ] - <float>p2[ 0 ]) ** 2 + \
 *                                          (<float>rgb_array[ i, j, 1 ] - <float>(p2 + 1)[ 0 ]) ** 2 + \             # <<<<<<<<<<<<<<
 *                                          (<float>rgb_array[ i, j, 2 ] - <float>(p2 + 2)[ 0 ]) ** 2
 * 
 */
                                __pyx_t_14 = __pyx_v_i;
                                __pyx_t_15 = __pyx_v_j;
                                __pyx_t_16 = 1;

                                /* "PygameShader/Palette.pyx":1490
 *                     (p3 + k)[ 0 ] = (<float>rgb_array[ i, j, 0 ] - <float>p2[ 0 ]) ** 2 + \
 *                                          (<float>rgb_array[ i, j, 1 ] - <float>(p2 + 1)[ 0 ]) ** 2 + \
 *                                          (<float>rgb_array[ i, j, 2 ] - <float>(p2 + 2)[ 0 ]) ** 2             # <<<<<<<<<<<<<<
 * 
 *                 # Find the index of the closest color in the palette by checking the minimum distance
 */
                                __pyx_t_17 = __pyx_v_i;
                                __pyx_t_18 = __pyx_v_j;
                                __pyx_t_19 = 2;

                                /* "PygameShader/Palette.pyx":1488
 *                     p2 = &color_palette[ k, 0 ]
 * 
 *                     (p3 + k)[ 0 ] = (<float>rgb_array[ i, j, 0 ] - <float>p2[ 0 ]) ** 2 + \             # <<<<<<<<<<<<<<
 *                                          (<float>rgb_array[ i, j, 1 ] - <float>(p2 + 1)[ 0 ]) ** 2 + \
 *                                          (<float>rgb_array[ i, j, 2 ] - <float>(p2 + 2)[ 0 ]) ** 2
 */
                                ((__pyx_v_p3 + __pyx_v_k)[0]) = ((powf((((float)(*((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rgb_array.data + __pyx_t_12 * __pyx_v_rgb_array.strides[0]) ) + __pyx_t_8 * __pyx_v_rgb_array.strides[1]) ) + __pyx_t_13 * __pyx_v_rgb_array.strides[2]) )))) - ((float)(__pyx_v_p2[0]))), 2.0) + powf((((float)(*((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rgb_array.data + __pyx_t_14 * __pyx_v_rgb_array.strides[0]) ) + __pyx_t_15 * __pyx_v_rgb_array.strides[1]) ) + __pyx_t_16 * __pyx_v_rgb_array.strides[2]) )))) - ((float)((__pyx_v_p2 + 1)[0]))), 2.0)) + powf((((float)(*((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rgb_array.data + __pyx_t_17 * __pyx_v_rgb_array.strides[0]) ) + __pyx_t_18 * __pyx_v_rgb_array.strides[1]) ) + __pyx_t_19 * __pyx_v_rgb_array.strides[2]) )))) - ((float)((__pyx_v_p2 + 2)[0]))), 2.0));
                              }

                              /* "PygameShader/Palette.pyx":1493
 * 
 *                 # Find the index of the closest color in the palette by checking the minimum distance
 *                 index = 0             # <<<<<<<<<<<<<<
 * 
 *                 min_v = p3[0]
 */
                              __pyx_v_index = 0;

                              /* "PygameShader/Palette.pyx":1495
 *                 index = 0
 * 
 *                 min_v = p3[0]             # <<<<<<<<<<<<<<
 *                 for k in range(1, p_length):  # Start from the second color, as the first is already selected
 * 
 */
                              __pyx_v_min_v = (__pyx_v_p3[0]);

                              /* "PygameShader/Palette.pyx":1496
 * 
 *                 min_v = p3[0]
 *                 for k in range(1, p_length):  # Start from the second color, as the first is already selected             # <<<<<<<<<<<<<<
 * 
 *                     if (p3 + k)[ 0 ] < min_v:
 */
                              __pyx_t_9 = __pyx_v_p_length;
                              __pyx_t_10 = __pyx_t_9;
                              for (__pyx_t_11 = 1; __pyx_t_11 < __pyx_t_10; __pyx_t_11+=1) {
                                __pyx_v_k = __pyx_t_11;

                                /* "PygameShader/Palette.pyx":1498
 *                 for k in range(1, p_length):  # Start from the second color, as the first is already selected
 * 
 *                     if (p3 + k)[ 0 ] < min_v:             # <<<<<<<<<<<<<<
 *                         min_v = (p3 + k)[ 0 ]
 *                         index = k
 */
                                __pyx_t_20 = (((__pyx_v_p3 + __pyx_v_k)[0]) < __pyx_v_min_v);
                                if (__pyx_t_20) {

                                  /* "PygameShader/Palette.pyx":1499
 * 
 *                     if (p3 + k)[ 0 ] < min_v:
 *                         min_v = (p3 + k)[ 0 ]             # <<<<<<<<<<<<<<
 *                         index = k
 * 
 */
                                  __pyx_v_min_v = ((__pyx_v_p3 + __pyx_v_k)[0]);

                                  /* "PygameShader/Palette.pyx":1500
 *                     if (p3 + k)[ 0 ] < min_v:
 *                         min_v = (p3 + k)[ 0 ]
 *                         index = k             # <<<<<<<<<<<<<<
 * 
 *                 # Replace the current pixel's RGB values with the closest palette color
 */
                                  __pyx_v_index = __pyx_v_k;

                                  /* "PygameShader/Palette.pyx":1498
 *                 for k in range(1, p_length):  # Start from the second color, as the first is already selected
 * 
 *                     if (p3 + k)[ 0 ] < min_v:             # <<<<<<<<<<<<<<
 *                         min_v = (p3 + k)[ 0 ]
 *                         index = k
 */
                                }
                              }

                              /* "PygameShader/Palette.pyx":1503
 * 
 *                 # Replace the current pixel's RGB values with the closest palette color
 *                 rgb_array[ i, j, 0 ] = <unsigned char>color_palette[index, 0]             # <<<<<<<<<<<<<<
 *                 rgb_array[ i, j, 1 ] = <unsigned char>color_palette[index, 1]
 *                 rgb_array[ i, j, 2 ] = <unsigned char>color_palette[index, 2]
 */
                              __pyx_t_7 = __pyx_v_index;
                              __pyx_t_19 = 0;
                              __pyx_t_18 = __pyx_v_i;
                              __pyx_t_17 = __pyx_v_j;
                              __pyx_t_16 = 0;
                              *((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rgb_array.data + __pyx_t_18 * __pyx_v_rgb_array.strides[0]) ) + __pyx_t_17 * __pyx_v_rgb_array.strides[1]) ) + __pyx_t_16 * __pyx_v_rgb_array.strides[2]) )) = ((unsigned char)(*((float const  *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_color_palette.data + __pyx_t_7 * __pyx_v_color_palette.strides[0]) ) + __pyx_t_19 * __pyx_v_color_palette.strides[1]) ))));

                              /* "PygameShader/Palette.pyx":1504
 *                 # Replace the current pixel's RGB values with the closest palette color
 *                 rgb_array[ i, j, 0 ] = <unsigned char>color_palette[index, 0]
 *                 rgb_array[ i, j, 1 ] = <unsigned char>color_palette[index, 1]             # <<<<<<<<<<<<<<
 *                 rgb_array[ i, j, 2 ] = <unsigned char>color_palette[index, 2]
 * 
 */
                              __pyx_t_7 = __pyx_v_index;
                              __pyx_t_19 = 1;
                              __pyx_t_16 = __pyx_v_i;
                              __pyx_t_17 = __pyx_v_j;
                              __pyx_t_18 = 1;
                              *((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rgb_array.data + __pyx_t_16 * __pyx_v_rgb_array.strides[0]) ) + __pyx_t_17 * __pyx_v_rgb_array.strides[1]) ) + __pyx_t_18 * __pyx_v_rgb_array.strides[2]) )) = ((unsigned char)(*((float const  *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_color_palette.data + __pyx_t_7 * __pyx_v_color_palette.strides[0]) ) + __pyx_t_19 * __pyx_v_color_palette.strides[1]) ))));

                              /* "PygameShader/Palette.pyx":1505
 *                 rgb_array[ i, j, 0 ] = <unsigned char>color_palette[index, 0]
 *                 rgb_array[ i, j, 1 ] = <unsigned char>color_palette[index, 1]
 *                 rgb_array[ i, j, 2 ] = <unsigned char>color_palette[index, 2]             # <<<<<<<<<<<<<<
 * 
 * 
 */
                              __pyx_t_7 = __pyx_v_index;
                              __pyx_t_19 = 2;
                              __pyx_t_18 = __pyx_v_i;
                              __pyx_t_17 = __pyx_v_j;
                              __pyx_t_16 = 2;
                              *((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_rgb_array.data + __pyx_t_18 * __pyx_v_rgb_array.strides[0]) ) + __pyx_t_17 * __pyx_v_rgb_array.strides[1]) ) + __pyx_t_16 * __pyx_v_rgb_array.strides[2]) )) = ((unsigned char)(*((float const  *) ( /* dim=1 */ (( /* dim=0 */ (__pyx_v_color_palette.data + __pyx_t_7 * __pyx_v_color_palette.strides[0]) ) + __pyx_t_19 * __pyx_v_color_palette.strides[1]) ))));
                            }
                        }
                    }
                }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "PygameShader/Palette.pyx":1474
 * 
 *     # Parallelize the pixel processing across multiple threads
 *     with nogil:             # <<<<<<<<<<<<<<
 *         for j in prange(h, schedule=SCHEDULE, num_threads=THREADS):  # Process each row (y-axis)
 * 
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          if (_save) {
            Py_BLOCK_THREADS
          }
          #endif
          goto __pyx_L5;
        }
        __pyx_L5:;
      }
  }

  /* "PygameShader/Palette.pyx":1411
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cdef inline void palette_change_c(             # <<<<<<<<<<<<<<
 *         const Py_ssize_t w,
 *         const Py_ssize_t h,
 */

  /* function exit code */
}

/* "PygameShader/Palette.pyx":1518
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cpdef inline object make_palette(             # <<<<<<<<<<<<<<
 *         const int width,
 *         const float fh,
 */

static PyObject *__pyx_pw_12PygameShader_7Palette_3make_palette(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static CYTHON_INLINE PyObject *__pyx_f_12PygameShader_7Palette_make_palette(int const __pyx_v_width, float const __pyx_v_fh, float const __pyx_v_fs, float const __pyx_v_fl, CYTHON_UNUSED int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_memviewslice __pyx_t_3 = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  unsigned int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_palette", 1);

  /* "PygameShader/Palette.pyx":1564
 *     """
 * 
 *     return asarray(make_palette_c(width, fh, fs, fl))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_asarray); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_f_12PygameShader_7Palette_make_palette_c(__pyx_v_width, __pyx_v_fh, __pyx_v_fs, __pyx_v_fl); if (unlikely(!__pyx_t_3.memview)) __PYX_ERR(1, 1564, __pyx_L1_error)
  __pyx_t_4 = __pyx_memoryview_fromslice(__pyx_t_3, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_3, 1);
  __pyx_t_3.memview = NULL; __pyx_t_3.data = NULL;
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1564, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "PygameShader/Palette.pyx":1518
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cpdef inline object make_palette(             # <<<<<<<<<<<<<<
 *         const int width,
 *         const float fh,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_3, 1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("PygameShader.Palette.make_palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12PygameShader_7Palette_3make_palette(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_12PygameShader_7Palette_2make_palette, "\n    Create a palette of rgb color values mapped from hsl\n\n    This function generates a palette of RGB colors based on the given parameters.\n    The colors are derived from HSL (Hue, Saturation, Lightness) space and then converted to RGB.\n    Each color's hue is scaled by the `fh` factor, saturation is clipped to a maximum of \n    `fs` (with a maximum value of 255.0), and lightness is clipped to a maximum of `fl`\n    (also with a maximum value of 255.0).\n\n    Example:\n        # Create a palette of 256 colors where:\n        # - Hue is scaled by a factor of 6\n        # - Saturation is fixed at 255\n        # - Lightness is scaled by a factor of 2\n        palette = make_palette(256, 6, 255, 2)\n\n        # Another palette with different settings:\n        palette = make_palette(256, 4, 255, 2)\n\n    :param width  : \n        int, The number of colors (palette size) to generate.\n    \n    :param fh     : \n        float, A factor by which to scale the hue value for each color.\n        \n    :param fs     : \n        float, The saturation value, which must be in the range (0.0 ... 255.0). \n        This limits the saturation intensity.\n        \n    :param fl     : \n        float, A factor by which to scale the lightness value for each color.\n        \n    :return       : \n        numpy.ndarray, A 1D array of RGB color values corresponding to the generated palette.\n\n    Notes:\n        The function relies on converting from HSL to RGB, applying the specified factors and clipping values.\n        The output is a NumPy array, which can be directly used for visualization or further processing.\n    ");
static PyObject *__pyx_pw_12PygameShader_7Palette_3make_palette(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_width;
  float __pyx_v_fh;
  float __pyx_v_fs;
  float __pyx_v_fl;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("make_palette (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_width,&__pyx_n_s_fh,&__pyx_n_s_fs,&__pyx_n_s_fl,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_width)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1518, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fh)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[1]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1518, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("make_palette", 1, 4, 4, 1); __PYX_ERR(1, 1518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fs)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[2]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1518, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("make_palette", 1, 4, 4, 2); __PYX_ERR(1, 1518, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_fl)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[3]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1518, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("make_palette", 1, 4, 4, 3); __PYX_ERR(1, 1518, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "make_palette") < 0)) __PYX_ERR(1, 1518, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_width = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_width == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 1519, __pyx_L3_error)
    __pyx_v_fh = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_fh == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1520, __pyx_L3_error)
    __pyx_v_fs = __pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_fs == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1521, __pyx_L3_error)
    __pyx_v_fl = __pyx_PyFloat_AsFloat(values[3]); if (unlikely((__pyx_v_fl == (float)-1) && PyErr_Occurred())) __PYX_ERR(1, 1522, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("make_palette", 1, 4, 4, __pyx_nargs); __PYX_ERR(1, 1518, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_AddTraceback("PygameShader.Palette.make_palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12PygameShader_7Palette_2make_palette(__pyx_self, __pyx_v_width, __pyx_v_fh, __pyx_v_fs, __pyx_v_fl);

  /* function exit code */
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12PygameShader_7Palette_2make_palette(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_width, float __pyx_v_fh, float __pyx_v_fs, float __pyx_v_fl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_palette", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12PygameShader_7Palette_make_palette(__pyx_v_width, __pyx_v_fh, __pyx_v_fs, __pyx_v_fl, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PygameShader.Palette.make_palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PygameShader/Palette.pyx":1576
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cdef inline unsigned int [::1] make_palette_c(             # <<<<<<<<<<<<<<
 *         const int width,
 *         const float fh,
 */

static CYTHON_INLINE __Pyx_memviewslice __pyx_f_12PygameShader_7Palette_make_palette_c(int const __pyx_v_width, float const __pyx_v_fh, float const __pyx_v_fs, float const __pyx_v_fl) {
  __Pyx_memviewslice __pyx_v_palette = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_v_x;
  float __pyx_v_h;
  float __pyx_v_s;
  float __pyx_v_l;
  struct rgb __pyx_v_rgb_;
  __Pyx_memviewslice __pyx_r = { 0, 0, { 0 }, { 0 }, { 0 } };
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  unsigned int __pyx_t_7;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  float __pyx_t_12;
  float __pyx_t_13;
  float __pyx_t_14;
  float __pyx_t_15;
  float __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("make_palette_c", 1);

  /* "PygameShader/Palette.pyx":1626
 * 
 *     # Ensure the width is a positive integer
 *     assert width > 0, "Argument width should be > 0, got %s" % width             # <<<<<<<<<<<<<<
 * 
 *     # Declare local variables and set up the palette array to store RGB values
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_width > 0);
    if (unlikely(!__pyx_t_1)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_Argument_width_should_be_0_got_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1626, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_t_3, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(1, 1626, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(1, 1626, __pyx_L1_error)
  #endif

  /* "PygameShader/Palette.pyx":1630
 *     # Declare local variables and set up the palette array to store RGB values
 *     cdef:
 *         unsigned int [::1] palette = empty(width, uint32)             # <<<<<<<<<<<<<<
 *         int x
 *         float h, s, l
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_empty); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_width); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_4, __pyx_t_5};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1630, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dc_unsigned_int(__pyx_t_3, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1630, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_palette = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "PygameShader/Palette.pyx":1636
 * 
 *     # Perform the palette creation inside a 'with nogil' block to release the GIL
 *     with nogil:             # <<<<<<<<<<<<<<
 *         # Loop through the palette indices in parallel using prange
 *         for x in prange(width, schedule=SCHEDULE, num_threads=THREADS):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "PygameShader/Palette.pyx":1638
 *     with nogil:
 *         # Loop through the palette indices in parallel using prange
 *         for x in prange(width, schedule=SCHEDULE, num_threads=THREADS):             # <<<<<<<<<<<<<<
 *             # Calculate hue, saturation, and lightness for the current color index
 *             h, s, l = <float>x * fh, min(fs, <float>255.0), min(<float>x * fl, <float>255.0)
 */
        __pyx_t_9 = __pyx_v_width;
        {
            float __pyx_parallel_temp0 = ((float)__PYX_NAN());
            float __pyx_parallel_temp1 = ((float)__PYX_NAN());
            struct rgb __pyx_parallel_temp2;
            float __pyx_parallel_temp3 = ((float)__PYX_NAN());
            int __pyx_parallel_temp4 = ((int)0xbad0bad0);
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_11 = (__pyx_t_9 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_11 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel num_threads(__pyx_v_12PygameShader_7Palette_THREADS) private(__pyx_t_1, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_7) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    Py_BEGIN_ALLOW_THREADS
                    #endif /* _OPENMP */
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_h) lastprivate(__pyx_v_l) lastprivate(__pyx_v_rgb_) lastprivate(__pyx_v_s) firstprivate(__pyx_v_x) lastprivate(__pyx_v_x) schedule(static)
                    #endif /* _OPENMP */
                    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_11; __pyx_t_10++){
                        if (__pyx_parallel_why < 2)
                        {
                            __pyx_v_x = (int)(0 + 1 * __pyx_t_10);
                            /* Initialize private variables to invalid values */
                            __pyx_v_h = ((float)__PYX_NAN());
                            __pyx_v_l = ((float)__PYX_NAN());
                            __pyx_v_s = ((float)__PYX_NAN());

                            /* "PygameShader/Palette.pyx":1640
 *         for x in prange(width, schedule=SCHEDULE, num_threads=THREADS):
 *             # Calculate hue, saturation, and lightness for the current color index
 *             h, s, l = <float>x * fh, min(fs, <float>255.0), min(<float>x * fl, <float>255.0)             # <<<<<<<<<<<<<<
 * 
 *             # Convert the HSL values to RGB using the struct_hsl_to_rgb function
 */
                            __pyx_t_12 = (((float)__pyx_v_x) * __pyx_v_fh);
                            __pyx_t_13 = ((float)255.0);
                            __pyx_t_14 = __pyx_v_fs;
                            __pyx_t_1 = (__pyx_t_13 < __pyx_t_14);
                            if (__pyx_t_1) {
                              __pyx_t_15 = __pyx_t_13;
                            } else {
                              __pyx_t_15 = __pyx_t_14;
                            }
                            __pyx_t_13 = __pyx_t_15;
                            __pyx_t_15 = ((float)255.0);
                            __pyx_t_14 = (((float)__pyx_v_x) * __pyx_v_fl);
                            __pyx_t_1 = (__pyx_t_15 < __pyx_t_14);
                            if (__pyx_t_1) {
                              __pyx_t_16 = __pyx_t_15;
                            } else {
                              __pyx_t_16 = __pyx_t_14;
                            }
                            __pyx_t_15 = __pyx_t_16;
                            __pyx_v_h = __pyx_t_12;
                            __pyx_v_s = __pyx_t_13;
                            __pyx_v_l = __pyx_t_15;

                            /* "PygameShader/Palette.pyx":1643
 * 
 *             # Convert the HSL values to RGB using the struct_hsl_to_rgb function
 *             rgb_ = struct_hsl_to_rgb(h * <float>ONE_360, s * <float>ONE_255, l * <float>ONE_255)             # <<<<<<<<<<<<<<
 * 
 *             # Store the RGB value as a 32-bit integer in the palette array
 */
                            __pyx_v_rgb_ = struct_hsl_to_rgb((__pyx_v_h * ((float)0.002777777777777778)), (__pyx_v_s * ((float)0.00392156862745098)), (__pyx_v_l * ((float)0.00392156862745098)));

                            /* "PygameShader/Palette.pyx":1646
 * 
 *             # Store the RGB value as a 32-bit integer in the palette array
 *             palette[x] = rgb_to_int_c(             # <<<<<<<<<<<<<<
 *                 <unsigned int>(rgb_.r * <float>255.0),
 *                 <unsigned int>(rgb_.g * <float>255.0),
 */
                            __pyx_t_7 = __pyx_f_12PygameShader_4misc_rgb_to_int_c(((unsigned int)(__pyx_v_rgb_.r * ((float)255.0))), ((unsigned int)(__pyx_v_rgb_.g * ((float)255.0))), ((unsigned int)((__pyx_v_rgb_.b * ((float)255.0)) * ((float)0.5)))); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(1, 1646, __pyx_L8_error)
                            __pyx_t_17 = __pyx_v_x;
                            *((unsigned int *) ( /* dim=0 */ ((char *) (((unsigned int *) __pyx_v_palette.data) + __pyx_t_17)) )) = __pyx_t_7;
                            goto __pyx_L11;
                            __pyx_L8_error:;
                            {
                                #ifdef WITH_THREAD
                                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                #endif
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_exc_type)
                                #endif /* _OPENMP */
                                if (!__pyx_parallel_exc_type) {
                                  __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                  __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                  __Pyx_GOTREF(__pyx_parallel_exc_type);
                                }
                                #ifdef WITH_THREAD
                                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                #endif
                            }
                            __pyx_parallel_why = 4;
                            goto __pyx_L10;
                            __pyx_L10:;
                            #ifdef _OPENMP
                            #pragma omp critical(__pyx_parallel_lastprivates2)
                            #endif /* _OPENMP */
                            {
                                __pyx_parallel_temp0 = __pyx_v_h;
                                __pyx_parallel_temp1 = __pyx_v_l;
                                __pyx_parallel_temp2 = __pyx_v_rgb_;
                                __pyx_parallel_temp3 = __pyx_v_s;
                                __pyx_parallel_temp4 = __pyx_v_x;
                            }
                            __pyx_L11:;
                            #ifdef _OPENMP
                            #pragma omp flush(__pyx_parallel_why)
                            #endif /* _OPENMP */
                        }
                    }
                    #ifdef _OPENMP
                    Py_END_ALLOW_THREADS
                    #else
{
#ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #endif /* _OPENMP */
                    /* Clean up any temporaries */
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    #ifndef _OPENMP
}
#endif /* _OPENMP */
                }
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              __pyx_v_h = __pyx_parallel_temp0;
              __pyx_v_l = __pyx_parallel_temp1;
              __pyx_v_rgb_ = __pyx_parallel_temp2;
              __pyx_v_s = __pyx_parallel_temp3;
              __pyx_v_x = __pyx_parallel_temp4;
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L4_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "PygameShader/Palette.pyx":1636
 * 
 *     # Perform the palette creation inside a 'with nogil' block to release the GIL
 *     with nogil:             # <<<<<<<<<<<<<<
 *         # Loop through the palette indices in parallel using prange
 *         for x in prange(width, schedule=SCHEDULE, num_threads=THREADS):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L5;
        }
        __pyx_L4_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L5:;
      }
  }

  /* "PygameShader/Palette.pyx":1653
 * 
 *     # Return the palette of RGB values
 *     return palette             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __PYX_INC_MEMVIEW(&__pyx_v_palette, 1);
  __pyx_r = __pyx_v_palette;
  goto __pyx_L0;

  /* "PygameShader/Palette.pyx":1576
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cdef inline unsigned int [::1] make_palette_c(             # <<<<<<<<<<<<<<
 *         const int width,
 *         const float fh,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_8, 1);
  __pyx_r.data = NULL;
  __pyx_r.memview = NULL;
  __Pyx_AddTraceback("PygameShader.Palette.make_palette_c", __pyx_clineno, __pyx_lineno, __pyx_filename);
  goto __pyx_L2;
  __pyx_L0:;
  if (unlikely(!__pyx_r.memview)) {
    PyErr_SetString(PyExc_TypeError, "Memoryview return value is not initialized");
  }
  __pyx_L2:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_palette, 1);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "PygameShader/Palette.pyx":1665
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cpdef object create_surface_from_palette(unsigned int [::1] palette_c):             # <<<<<<<<<<<<<<
 *     """
 *     Converts a 1D array of RGB palette colors into a Pygame Surface (line).
 */

static PyObject *__pyx_pw_12PygameShader_7Palette_5create_surface_from_palette(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyObject *__pyx_f_12PygameShader_7Palette_create_surface_from_palette(__Pyx_memviewslice __pyx_v_palette_c, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_v_i;
  int __pyx_v_s;
  unsigned char __pyx_v_r;
  unsigned char __pyx_v_g;
  unsigned char __pyx_v_b;
  __Pyx_memviewslice __pyx_v_palette_array = { 0, 0, { 0 }, { 0 }, { 0 } };
  PyObject *__pyx_v_surface = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_memviewslice __pyx_t_8 = { 0, 0, { 0 }, { 0 }, { 0 } };
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  __pyx_ctuple_eaedd6__unsigned__space_char__and_unsigned__space_char__etc __pyx_t_13;
  unsigned char __pyx_t_14;
  unsigned char __pyx_t_15;
  unsigned char __pyx_t_16;
  Py_ssize_t __pyx_t_17;
  Py_ssize_t __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  unsigned int __pyx_t_24;
  char const *__pyx_t_25;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_surface_from_palette", 1);

  /* "PygameShader/Palette.pyx":1698
 * 
 *     # Validate input
 *     if not (isinstance(palette_c, ndarray) or is_type_memoryview(palette_c)):             # <<<<<<<<<<<<<<
 *         raise TypeError("Expected input type numpy.ndarray or memoryviewslice, "
 *                         "but got %s" % type(palette_c).__name__)
 */
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_IsInstance(__pyx_t_2, __pyx_t_3); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __pyx_f_12PygameShader_4misc_is_type_memoryview(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __pyx_t_4 = (!__pyx_t_1);
  if (unlikely(__pyx_t_4)) {

    /* "PygameShader/Palette.pyx":1700
 *     if not (isinstance(palette_c, ndarray) or is_type_memoryview(palette_c)):
 *         raise TypeError("Expected input type numpy.ndarray or memoryviewslice, "
 *                         "but got %s" % type(palette_c).__name__)             # <<<<<<<<<<<<<<
 * 
 *     if not is_type_memoryview(palette_c):
 */
    __pyx_t_3 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)Py_TYPE(__pyx_t_3)), __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Expected_input_type_numpy_ndarra, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1700, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "PygameShader/Palette.pyx":1699
 *     # Validate input
 *     if not (isinstance(palette_c, ndarray) or is_type_memoryview(palette_c)):
 *         raise TypeError("Expected input type numpy.ndarray or memoryviewslice, "             # <<<<<<<<<<<<<<
 *                         "but got %s" % type(palette_c).__name__)
 * 
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 1699, __pyx_L1_error)

    /* "PygameShader/Palette.pyx":1698
 * 
 *     # Validate input
 *     if not (isinstance(palette_c, ndarray) or is_type_memoryview(palette_c)):             # <<<<<<<<<<<<<<
 *         raise TypeError("Expected input type numpy.ndarray or memoryviewslice, "
 *                         "but got %s" % type(palette_c).__name__)
 */
  }

  /* "PygameShader/Palette.pyx":1702
 *                         "but got %s" % type(palette_c).__name__)
 * 
 *     if not is_type_memoryview(palette_c):             # <<<<<<<<<<<<<<
 *         if palette_c.dtype != uint32:
 *             raise TypeError("Expected input array with dtype 'numpy.uint32', but got %s" % palette_c.dtype)
 */
  __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_f_12PygameShader_4misc_is_type_memoryview(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1702, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = (!__pyx_t_4);
  if (__pyx_t_1) {

    /* "PygameShader/Palette.pyx":1703
 * 
 *     if not is_type_memoryview(palette_c):
 *         if palette_c.dtype != uint32:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected input array with dtype 'numpy.uint32', but got %s" % palette_c.dtype)
 * 
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_uint32); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1703, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1703, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1703, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_1)) {

      /* "PygameShader/Palette.pyx":1704
 *     if not is_type_memoryview(palette_c):
 *         if palette_c.dtype != uint32:
 *             raise TypeError("Expected input array with dtype 'numpy.uint32', but got %s" % palette_c.dtype)             # <<<<<<<<<<<<<<
 * 
 *         if not palette_c.flags['C_CONTIGUOUS']:
 */
      __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_dtype); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyUnicode_FormatSafe(__pyx_kp_u_Expected_input_array_with_dtype, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_TypeError, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1704, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 1704, __pyx_L1_error)

      /* "PygameShader/Palette.pyx":1703
 * 
 *     if not is_type_memoryview(palette_c):
 *         if palette_c.dtype != uint32:             # <<<<<<<<<<<<<<
 *             raise TypeError("Expected input array with dtype 'numpy.uint32', but got %s" % palette_c.dtype)
 * 
 */
    }

    /* "PygameShader/Palette.pyx":1706
 *             raise TypeError("Expected input array with dtype 'numpy.uint32', but got %s" % palette_c.dtype)
 * 
 *         if not palette_c.flags['C_CONTIGUOUS']:             # <<<<<<<<<<<<<<
 *             raise ValueError("Input palette must be a contiguous array. The given array is not contiguous.")
 * 
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_flags); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_C_CONTIGUOUS); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1706, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(1, 1706, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (!__pyx_t_1);
    if (unlikely(__pyx_t_4)) {

      /* "PygameShader/Palette.pyx":1707
 * 
 *         if not palette_c.flags['C_CONTIGUOUS']:
 *             raise ValueError("Input palette must be a contiguous array. The given array is not contiguous.")             # <<<<<<<<<<<<<<
 * 
 *         if palette_c.size == 0:
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1707, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __PYX_ERR(1, 1707, __pyx_L1_error)

      /* "PygameShader/Palette.pyx":1706
 *             raise TypeError("Expected input array with dtype 'numpy.uint32', but got %s" % palette_c.dtype)
 * 
 *         if not palette_c.flags['C_CONTIGUOUS']:             # <<<<<<<<<<<<<<
 *             raise ValueError("Input palette must be a contiguous array. The given array is not contiguous.")
 * 
 */
    }

    /* "PygameShader/Palette.pyx":1709
 *             raise ValueError("Input palette must be a contiguous array. The given array is not contiguous.")
 * 
 *         if palette_c.size == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Input palette is empty. The palette should contain at least one color.")
 * 
 */
    __pyx_t_2 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1709, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__Pyx_PyInt_BoolEqObjC(__pyx_t_5, __pyx_int_0, 0, 0)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(1, 1709, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__pyx_t_4)) {

      /* "PygameShader/Palette.pyx":1710
 * 
 *         if palette_c.size == 0:
 *             raise ValueError("Input palette is empty. The palette should contain at least one color.")             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1710, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 1710, __pyx_L1_error)

      /* "PygameShader/Palette.pyx":1709
 *             raise ValueError("Input palette must be a contiguous array. The given array is not contiguous.")
 * 
 *         if palette_c.size == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Input palette is empty. The palette should contain at least one color.")
 * 
 */
    }

    /* "PygameShader/Palette.pyx":1702
 *                         "but got %s" % type(palette_c).__name__)
 * 
 *     if not is_type_memoryview(palette_c):             # <<<<<<<<<<<<<<
 *         if palette_c.dtype != uint32:
 *             raise TypeError("Expected input array with dtype 'numpy.uint32', but got %s" % palette_c.dtype)
 */
    goto __pyx_L6;
  }

  /* "PygameShader/Palette.pyx":1713
 * 
 *     else:
 *         if len(palette_c) == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Input palette is empty. The palette should contain at least one color.")
 * 
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_MemoryView_Len(__pyx_v_palette_c); 
    __pyx_t_4 = (__pyx_t_6 == 0);
    if (unlikely(__pyx_t_4)) {

      /* "PygameShader/Palette.pyx":1714
 *     else:
 *         if len(palette_c) == 0:
 *             raise ValueError("Input palette is empty. The palette should contain at least one color.")             # <<<<<<<<<<<<<<
 * 
 *     # Initialize variables
 */
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(1, 1714, __pyx_L1_error)

      /* "PygameShader/Palette.pyx":1713
 * 
 *     else:
 *         if len(palette_c) == 0:             # <<<<<<<<<<<<<<
 *             raise ValueError("Input palette is empty. The palette should contain at least one color.")
 * 
 */
    }
  }
  __pyx_L6:;

  /* "PygameShader/Palette.pyx":1718
 *     # Initialize variables
 *     cdef:
 *         int i = 0             # <<<<<<<<<<<<<<
 *         int s = len(<object>palette_c)  # Get the length of the palette array
 *         unsigned char r, g, b   # Variable to store the RGB color extracted from the palette
 */
  __pyx_v_i = 0;

  /* "PygameShader/Palette.pyx":1719
 *     cdef:
 *         int i = 0
 *         int s = len(<object>palette_c)  # Get the length of the palette array             # <<<<<<<<<<<<<<
 *         unsigned char r, g, b   # Variable to store the RGB color extracted from the palette
 *         unsigned char [:, :, :] palette_array = empty((s, 1, 3), dtype=uint8)
 */
  __pyx_t_5 = __pyx_memoryview_fromslice(__pyx_v_palette_c, 1, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_int, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_int, 0);; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(1, 1719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_s = __pyx_t_6;

  /* "PygameShader/Palette.pyx":1721
 *         int s = len(<object>palette_c)  # Get the length of the palette array
 *         unsigned char r, g, b   # Variable to store the RGB color extracted from the palette
 *         unsigned char [:, :, :] palette_array = empty((s, 1, 3), dtype=uint8)             # <<<<<<<<<<<<<<
 *         # 2D array to store RGB values in uint8 format
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_s); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2)) __PYX_ERR(1, 1721, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_1)) __PYX_ERR(1, 1721, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_3);
  __Pyx_GIVEREF(__pyx_int_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_int_3)) __PYX_ERR(1, 1721, __pyx_L1_error);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3)) __PYX_ERR(1, 1721, __pyx_L1_error);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_uint8); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_to_MemoryviewSlice_dsdsds_unsigned_char(__pyx_t_7, PyBUF_WRITABLE); if (unlikely(!__pyx_t_8.memview)) __PYX_ERR(1, 1721, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_palette_array = __pyx_t_8;
  __pyx_t_8.memview = NULL;
  __pyx_t_8.data = NULL;

  /* "PygameShader/Palette.pyx":1725
 * 
 *     # Process the palette in parallel using 'with nogil' to release the Global Interpreter Lock (GIL)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         # Loop through the palette array in parallel
 *         for i in prange(s, schedule=SCHEDULE, num_threads=THREADS):
 */
  {
      #ifdef WITH_THREAD
      PyThreadState *_save;
      _save = NULL;
      Py_UNBLOCK_THREADS
      __Pyx_FastGIL_Remember();
      #endif
      /*try:*/ {

        /* "PygameShader/Palette.pyx":1727
 *     with nogil:
 *         # Loop through the palette array in parallel
 *         for i in prange(s, schedule=SCHEDULE, num_threads=THREADS):             # <<<<<<<<<<<<<<
 *             # Convert each palette color (32-bit ARGB) into RGB components
 * 
 */
        __pyx_t_9 = __pyx_v_s;
        {
            unsigned char __pyx_parallel_temp0 = ((unsigned char)'?');
            unsigned char __pyx_parallel_temp1 = ((unsigned char)'?');
            int __pyx_parallel_temp2 = ((int)0xbad0bad0);
            unsigned char __pyx_parallel_temp3 = ((unsigned char)'?');
            const char *__pyx_parallel_filename = NULL; int __pyx_parallel_lineno = 0, __pyx_parallel_clineno = 0;
            PyObject *__pyx_parallel_exc_type = NULL, *__pyx_parallel_exc_value = NULL, *__pyx_parallel_exc_tb = NULL;
            int __pyx_parallel_why;
            __pyx_parallel_why = 0;
            #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
                #undef likely
                #undef unlikely
                #define likely(x)   (x)
                #define unlikely(x) (x)
            #endif
            __pyx_t_11 = (__pyx_t_9 - 0 + 1 - 1/abs(1)) / 1;
            if (__pyx_t_11 > 0)
            {
                #ifdef _OPENMP
                #pragma omp parallel num_threads(__pyx_v_12PygameShader_7Palette_THREADS) private(__pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17, __pyx_t_18) private(__pyx_filename, __pyx_lineno, __pyx_clineno) shared(__pyx_parallel_why, __pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb)
                #endif /* _OPENMP */
                {
                    #ifdef _OPENMP
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    Py_BEGIN_ALLOW_THREADS
                    #endif /* _OPENMP */
                    #ifdef _OPENMP
                    #pragma omp for lastprivate(__pyx_v_b) lastprivate(__pyx_v_g) firstprivate(__pyx_v_i) lastprivate(__pyx_v_i) lastprivate(__pyx_v_r) schedule(static)
                    #endif /* _OPENMP */
                    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_11; __pyx_t_10++){
                        if (__pyx_parallel_why < 2)
                        {
                            __pyx_v_i = (int)(0 + 1 * __pyx_t_10);
                            /* Initialize private variables to invalid values */
                            __pyx_v_b = ((unsigned char)'?');
                            __pyx_v_g = ((unsigned char)'?');
                            __pyx_v_r = ((unsigned char)'?');

                            /* "PygameShader/Palette.pyx":1730
 *             # Convert each palette color (32-bit ARGB) into RGB components
 * 
 *             r,g,b = int_to_rgb_c(palette_c[i])             # <<<<<<<<<<<<<<
 * 
 *             # Store the individual RGB components in the 2D array
 */
                            __pyx_t_12 = __pyx_v_i;
                            __pyx_t_13 = __pyx_f_12PygameShader_4misc_int_to_rgb_c((*((unsigned int *) ( /* dim=0 */ ((char *) (((unsigned int *) __pyx_v_palette_c.data) + __pyx_t_12)) )))); if (unlikely(__Pyx_ErrOccurredWithGIL())) __PYX_ERR(1, 1730, __pyx_L16_error)
                            __pyx_t_14 = __pyx_t_13.f0;
                            __pyx_t_15 = __pyx_t_13.f1;
                            __pyx_t_16 = __pyx_t_13.f2;
                            __pyx_v_r = __pyx_t_14;
                            __pyx_v_g = __pyx_t_15;
                            __pyx_v_b = __pyx_t_16;

                            /* "PygameShader/Palette.pyx":1733
 * 
 *             # Store the individual RGB components in the 2D array
 *             palette_array[i, 0, 0] = <unsigned char>r  # Red channel             # <<<<<<<<<<<<<<
 *             palette_array[i, 0, 1] = <unsigned char>g  # Green channel
 *             palette_array[i, 0, 2] = <unsigned char>b  # Blue channel
 */
                            __pyx_t_12 = __pyx_v_i;
                            __pyx_t_17 = 0;
                            __pyx_t_18 = 0;
                            *((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_palette_array.data + __pyx_t_12 * __pyx_v_palette_array.strides[0]) ) + __pyx_t_17 * __pyx_v_palette_array.strides[1]) ) + __pyx_t_18 * __pyx_v_palette_array.strides[2]) )) = ((unsigned char)__pyx_v_r);

                            /* "PygameShader/Palette.pyx":1734
 *             # Store the individual RGB components in the 2D array
 *             palette_array[i, 0, 0] = <unsigned char>r  # Red channel
 *             palette_array[i, 0, 1] = <unsigned char>g  # Green channel             # <<<<<<<<<<<<<<
 *             palette_array[i, 0, 2] = <unsigned char>b  # Blue channel
 * 
 */
                            __pyx_t_18 = __pyx_v_i;
                            __pyx_t_17 = 0;
                            __pyx_t_12 = 1;
                            *((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_palette_array.data + __pyx_t_18 * __pyx_v_palette_array.strides[0]) ) + __pyx_t_17 * __pyx_v_palette_array.strides[1]) ) + __pyx_t_12 * __pyx_v_palette_array.strides[2]) )) = ((unsigned char)__pyx_v_g);

                            /* "PygameShader/Palette.pyx":1735
 *             palette_array[i, 0, 0] = <unsigned char>r  # Red channel
 *             palette_array[i, 0, 1] = <unsigned char>g  # Green channel
 *             palette_array[i, 0, 2] = <unsigned char>b  # Blue channel             # <<<<<<<<<<<<<<
 * 
 *     # Convert the array to a numpy array and pass it to the make_surface function to create a Pygame surface
 */
                            __pyx_t_12 = __pyx_v_i;
                            __pyx_t_17 = 0;
                            __pyx_t_18 = 2;
                            *((unsigned char *) ( /* dim=2 */ (( /* dim=1 */ (( /* dim=0 */ (__pyx_v_palette_array.data + __pyx_t_12 * __pyx_v_palette_array.strides[0]) ) + __pyx_t_17 * __pyx_v_palette_array.strides[1]) ) + __pyx_t_18 * __pyx_v_palette_array.strides[2]) )) = ((unsigned char)__pyx_v_b);
                            goto __pyx_L19;
                            __pyx_L16_error:;
                            {
                                #ifdef WITH_THREAD
                                PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                                #endif
                                #ifdef _OPENMP
                                #pragma omp flush(__pyx_parallel_exc_type)
                                #endif /* _OPENMP */
                                if (!__pyx_parallel_exc_type) {
                                  __Pyx_ErrFetchWithState(&__pyx_parallel_exc_type, &__pyx_parallel_exc_value, &__pyx_parallel_exc_tb);
                                  __pyx_parallel_filename = __pyx_filename; __pyx_parallel_lineno = __pyx_lineno; __pyx_parallel_clineno = __pyx_clineno;
                                  __Pyx_GOTREF(__pyx_parallel_exc_type);
                                }
                                #ifdef WITH_THREAD
                                __Pyx_PyGILState_Release(__pyx_gilstate_save);
                                #endif
                            }
                            __pyx_parallel_why = 4;
                            goto __pyx_L18;
                            __pyx_L18:;
                            #ifdef _OPENMP
                            #pragma omp critical(__pyx_parallel_lastprivates3)
                            #endif /* _OPENMP */
                            {
                                __pyx_parallel_temp0 = __pyx_v_b;
                                __pyx_parallel_temp1 = __pyx_v_g;
                                __pyx_parallel_temp2 = __pyx_v_i;
                                __pyx_parallel_temp3 = __pyx_v_r;
                            }
                            __pyx_L19:;
                            #ifdef _OPENMP
                            #pragma omp flush(__pyx_parallel_why)
                            #endif /* _OPENMP */
                        }
                    }
                    #ifdef _OPENMP
                    Py_END_ALLOW_THREADS
                    #else
{
#ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    #endif /* _OPENMP */
                    /* Clean up any temporaries */
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                    #ifndef _OPENMP
}
#endif /* _OPENMP */
                }
            }
            if (__pyx_parallel_exc_type) {
              /* This may have been overridden by a continue, break or return in another thread. Prefer the error. */
              __pyx_parallel_why = 4;
            }
            if (__pyx_parallel_why) {
              __pyx_v_b = __pyx_parallel_temp0;
              __pyx_v_g = __pyx_parallel_temp1;
              __pyx_v_i = __pyx_parallel_temp2;
              __pyx_v_r = __pyx_parallel_temp3;
              switch (__pyx_parallel_why) {
                    case 4:
                {
                    #ifdef WITH_THREAD
                    PyGILState_STATE __pyx_gilstate_save = __Pyx_PyGILState_Ensure();
                    #endif
                    __Pyx_GIVEREF(__pyx_parallel_exc_type);
                    __Pyx_ErrRestoreWithState(__pyx_parallel_exc_type, __pyx_parallel_exc_value, __pyx_parallel_exc_tb);
                    __pyx_filename = __pyx_parallel_filename; __pyx_lineno = __pyx_parallel_lineno; __pyx_clineno = __pyx_parallel_clineno;
                    #ifdef WITH_THREAD
                    __Pyx_PyGILState_Release(__pyx_gilstate_save);
                    #endif
                }
                goto __pyx_L12_error;
              }
            }
        }
        #if ((defined(__APPLE__) || defined(__OSX__)) && (defined(__GNUC__) && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))))
            #undef likely
            #undef unlikely
            #define likely(x)   __builtin_expect(!!(x), 1)
            #define unlikely(x) __builtin_expect(!!(x), 0)
        #endif
      }

      /* "PygameShader/Palette.pyx":1725
 * 
 *     # Process the palette in parallel using 'with nogil' to release the Global Interpreter Lock (GIL)
 *     with nogil:             # <<<<<<<<<<<<<<
 *         # Loop through the palette array in parallel
 *         for i in prange(s, schedule=SCHEDULE, num_threads=THREADS):
 */
      /*finally:*/ {
        /*normal exit:*/{
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L13;
        }
        __pyx_L12_error: {
          #ifdef WITH_THREAD
          __Pyx_FastGIL_Forget();
          Py_BLOCK_THREADS
          #endif
          goto __pyx_L1_error;
        }
        __pyx_L13:;
      }
  }

  /* "PygameShader/Palette.pyx":1738
 * 
 *     # Convert the array to a numpy array and pass it to the make_surface function to create a Pygame surface
 *     try:             # <<<<<<<<<<<<<<
 *         surface = make_surface(asarray(palette_array))
 *     except Exception as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_19, &__pyx_t_20, &__pyx_t_21);
    __Pyx_XGOTREF(__pyx_t_19);
    __Pyx_XGOTREF(__pyx_t_20);
    __Pyx_XGOTREF(__pyx_t_21);
    /*try:*/ {

      /* "PygameShader/Palette.pyx":1739
 *     # Convert the array to a numpy array and pass it to the make_surface function to create a Pygame surface
 *     try:
 *         surface = make_surface(asarray(palette_array))             # <<<<<<<<<<<<<<
 *     except Exception as e:
 *         raise RuntimeError(f"Error creating Pygame surface: {str(e)}")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_make_surface); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 1739, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1739, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_22 = __pyx_memoryview_fromslice(__pyx_v_palette_array, 3, (PyObject *(*)(char *)) __pyx_memview_get_unsigned_char, (int (*)(char *, PyObject *)) __pyx_memview_set_unsigned_char, 0);; if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1739, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_22);
      __pyx_t_23 = NULL;
      __pyx_t_24 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_23)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_23);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_24 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_23, __pyx_t_22};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_24, 1+__pyx_t_24);
        __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1739, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_5 = NULL;
      __pyx_t_24 = 0;
      #if CYTHON_UNPACK_METHODS
      if (unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_24 = 1;
        }
      }
      #endif
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_2};
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_24, 1+__pyx_t_24);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1739, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_v_surface = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "PygameShader/Palette.pyx":1738
 * 
 *     # Convert the array to a numpy array and pass it to the make_surface function to create a Pygame surface
 *     try:             # <<<<<<<<<<<<<<
 *         surface = make_surface(asarray(palette_array))
 *     except Exception as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
    __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
    __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
    goto __pyx_L25_try_end;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_XCLEAR_MEMVIEW(&__pyx_t_8, 1);
    __pyx_t_8.memview = NULL; __pyx_t_8.data = NULL;

    /* "PygameShader/Palette.pyx":1740
 *     try:
 *         surface = make_surface(asarray(palette_array))
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(f"Error creating Pygame surface: {str(e)}")
 * 
 */
    __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_11) {
      __Pyx_AddTraceback("PygameShader.Palette.create_surface_from_palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(1, 1740, __pyx_L22_except_error)
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __pyx_v_e = __pyx_t_3;
      /*try:*/ {

        /* "PygameShader/Palette.pyx":1741
 *         surface = make_surface(asarray(palette_array))
 *     except Exception as e:
 *         raise RuntimeError(f"Error creating Pygame surface: {str(e)}")             # <<<<<<<<<<<<<<
 * 
 *     return surface
 */
        __pyx_t_5 = __Pyx_PyObject_Unicode(__pyx_v_e); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1741, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_22 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Error_creating_Pygame_surface, __pyx_t_5); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1741, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_22);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_RuntimeError, __pyx_t_22); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1741, __pyx_L31_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __Pyx_Raise(__pyx_t_5, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(1, 1741, __pyx_L31_error)
      }

      /* "PygameShader/Palette.pyx":1740
 *     try:
 *         surface = make_surface(asarray(palette_array))
 *     except Exception as e:             # <<<<<<<<<<<<<<
 *         raise RuntimeError(f"Error creating Pygame surface: {str(e)}")
 * 
 */
      /*finally:*/ {
        __pyx_L31_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_declare
          __Pyx_PyThreadState_assign
          __pyx_t_26 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0;
          __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
          __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __PYX_XCLEAR_MEMVIEW(&__pyx_t_8, 1);
          __pyx_t_8.memview = NULL; __pyx_t_8.data = NULL;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_29, &__pyx_t_30, &__pyx_t_31);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_26, &__pyx_t_27, &__pyx_t_28) < 0)) __Pyx_ErrFetch(&__pyx_t_26, &__pyx_t_27, &__pyx_t_28);
          __Pyx_XGOTREF(__pyx_t_26);
          __Pyx_XGOTREF(__pyx_t_27);
          __Pyx_XGOTREF(__pyx_t_28);
          __Pyx_XGOTREF(__pyx_t_29);
          __Pyx_XGOTREF(__pyx_t_30);
          __Pyx_XGOTREF(__pyx_t_31);
          __pyx_t_11 = __pyx_lineno; __pyx_t_10 = __pyx_clineno; __pyx_t_25 = __pyx_filename;
          {
            __Pyx_DECREF(__pyx_v_e); __pyx_v_e = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_29);
            __Pyx_XGIVEREF(__pyx_t_30);
            __Pyx_XGIVEREF(__pyx_t_31);
            __Pyx_ExceptionReset(__pyx_t_29, __pyx_t_30, __pyx_t_31);
          }
          __Pyx_XGIVEREF(__pyx_t_26);
          __Pyx_XGIVEREF(__pyx_t_27);
          __Pyx_XGIVEREF(__pyx_t_28);
          __Pyx_ErrRestore(__pyx_t_26, __pyx_t_27, __pyx_t_28);
          __pyx_t_26 = 0; __pyx_t_27 = 0; __pyx_t_28 = 0; __pyx_t_29 = 0; __pyx_t_30 = 0; __pyx_t_31 = 0;
          __pyx_lineno = __pyx_t_11; __pyx_clineno = __pyx_t_10; __pyx_filename = __pyx_t_25;
          goto __pyx_L22_except_error;
        }
      }
    }
    goto __pyx_L22_except_error;

    /* "PygameShader/Palette.pyx":1738
 * 
 *     # Convert the array to a numpy array and pass it to the make_surface function to create a Pygame surface
 *     try:             # <<<<<<<<<<<<<<
 *         surface = make_surface(asarray(palette_array))
 *     except Exception as e:
 */
    __pyx_L22_except_error:;
    __Pyx_XGIVEREF(__pyx_t_19);
    __Pyx_XGIVEREF(__pyx_t_20);
    __Pyx_XGIVEREF(__pyx_t_21);
    __Pyx_ExceptionReset(__pyx_t_19, __pyx_t_20, __pyx_t_21);
    goto __pyx_L1_error;
    __pyx_L25_try_end:;
  }

  /* "PygameShader/Palette.pyx":1743
 *         raise RuntimeError(f"Error creating Pygame surface: {str(e)}")
 * 
 *     return surface             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_surface);
  __pyx_r = __pyx_v_surface;
  goto __pyx_L0;

  /* "PygameShader/Palette.pyx":1665
 * @cython.initializedcheck(False)
 * @cython.exceptval(check=False)
 * cpdef object create_surface_from_palette(unsigned int [::1] palette_c):             # <<<<<<<<<<<<<<
 *     """
 *     Converts a 1D array of RGB palette colors into a Pygame Surface (line).
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __PYX_XCLEAR_MEMVIEW(&__pyx_t_8, 1);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_AddTraceback("PygameShader.Palette.create_surface_from_palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_palette_array, 1);
  __Pyx_XDECREF(__pyx_v_surface);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_12PygameShader_7Palette_5create_surface_from_palette(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_12PygameShader_7Palette_4create_surface_from_palette, "\n    Converts a 1D array of RGB palette colors into a Pygame Surface (line).\n\n    This function takes a 1D array of RGB colors, typically generated by the\n    `make_palette` function (where each color is stored as a 32-bit unsigned\n    integer), and converts it into a Pygame `Surface` object. The colors are\n    extracted and placed into a 2D array format suitable for Pygame's surface\n    creation.\n\n    Example:\n    # Assuming 'palette' is a palette generated with make_palette:\n    surface = create_surface_from_palette(palette)\n\n    :param palette_c: \n        numpy.ndarray, A 1D array containing the palette of colors.\n        The array should have `unsigned int` type, where each color is represented as a\n        32-bit unsigned integer (ARGB format).\n\n    :return: \n        object, A Pygame Surface object created from the palette.\n\n    :raises TypeError: If `palette_c` is not a numpy ndarray or has an incorrect dtype.\n    :raises ValueError: If `palette_c` is empty, not contiguous, or has invalid size.\n\n    Notes:\n    - The function assumes that the input palette contains RGB values packed into a 32-bit integer.\n    - The function processes each color in the palette in parallel for performance optimization.\n    - The output is a Pygame Surface object, which can be used for rendering or visualization.\n    \n    ");
static PyObject *__pyx_pw_12PygameShader_7Palette_5create_surface_from_palette(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  __Pyx_memviewslice __pyx_v_palette_c = { 0, 0, { 0 }, { 0 }, { 0 } };
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_surface_from_palette (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_MACROS
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_palette_c,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_palette_c)) != 0)) {
          (void)__Pyx_Arg_NewRef_FASTCALL(values[0]);
          kw_args--;
        }
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1665, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "create_surface_from_palette") < 0)) __PYX_ERR(1, 1665, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_palette_c = __Pyx_PyObject_to_MemoryviewSlice_dc_unsigned_int(values[0], PyBUF_WRITABLE); if (unlikely(!__pyx_v_palette_c.memview)) __PYX_ERR(1, 1665, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("create_surface_from_palette", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 1665, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_palette_c, 1);
  __Pyx_AddTraceback("PygameShader.Palette.create_surface_from_palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_12PygameShader_7Palette_4create_surface_from_palette(__pyx_self, __pyx_v_palette_c);

  /* function exit code */
  __PYX_XCLEAR_MEMVIEW(&__pyx_v_palette_c, 1);
  {
    Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
      __Pyx_Arg_XDECREF_FASTCALL(values[__pyx_temp]);
    }
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_12PygameShader_7Palette_4create_surface_from_palette(CYTHON_UNUSED PyObject *__pyx_self, __Pyx_memviewslice __pyx_v_palette_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_surface_from_palette", 1);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_f_12PygameShader_7Palette_create_surface_from_palette(__pyx_v_palette_c, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PygameShader.Palette.create_surface_from_palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_array __pyx_vtable_array;

static PyObject *__pyx_tp_new_array(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_array_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_array_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_array;
  p->mode = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_format = ((PyObject*)Py_None); Py_INCREF(Py_None);
  if (unlikely(__pyx_array___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_array(PyObject *o) {
  struct __pyx_array_obj *p = (struct __pyx_array_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_array) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_array___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->mode);
  Py_CLEAR(p->_format);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}
static PyObject *__pyx_sq_item_array(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_array(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_array___setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static PyObject *__pyx_tp_getattro_array(PyObject *o, PyObject *n) {
  PyObject *v = __Pyx_PyObject_GenericGetAttr(o, n);
  if (!v && PyErr_ExceptionMatches(PyExc_AttributeError)) {
    PyErr_Clear();
    v = __pyx_array___getattr__(o, n);
  }
  return v;
}

static PyObject *__pyx_getprop___pyx_array_memview(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_5array_7memview_1__get__(o);
}

static PyMethodDef __pyx_methods_array[] = {
  {"__getattr__", (PyCFunction)__pyx_array___getattr__, METH_O|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_array_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_array_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_array[] = {
  {(char *)"memview", __pyx_getprop___pyx_array_memview, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
#if !CYTHON_COMPILING_IN_LIMITED_API

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};
#endif
static PyType_Slot __pyx_type___pyx_array_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_array},
  {Py_sq_length, (void *)__pyx_array___len__},
  {Py_sq_item, (void *)__pyx_sq_item_array},
  {Py_mp_length, (void *)__pyx_array___len__},
  {Py_mp_subscript, (void *)__pyx_array___getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_array},
  {Py_tp_getattro, (void *)__pyx_tp_getattro_array},
  #if defined(Py_bf_getbuffer)
  {Py_bf_getbuffer, (void *)__pyx_array_getbuffer},
  #endif
  {Py_tp_methods, (void *)__pyx_methods_array},
  {Py_tp_getset, (void *)__pyx_getsets_array},
  {Py_tp_new, (void *)__pyx_tp_new_array},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_array_spec = {
  "PygameShader.Palette.array",
  sizeof(struct __pyx_array_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_SEQUENCE,
  __pyx_type___pyx_array_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_array = {
  __pyx_array___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_array, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_array = {
  __pyx_array___len__, /*mp_length*/
  __pyx_array___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_array, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_array = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_array_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_array = {
  PyVarObject_HEAD_INIT(0, 0)
  "PygameShader.Palette.""array", /*tp_name*/
  sizeof(struct __pyx_array_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_array, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_array, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_array, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  __pyx_tp_getattro_array, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_array, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_SEQUENCE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_array, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_array, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_array, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_Enum(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_MemviewEnum_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_MemviewEnum_obj *)o);
  p->name = Py_None; Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_Enum(PyObject *o) {
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_Enum) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->name);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_Enum(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  if (p->name) {
    e = (*v)(p->name, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_Enum(PyObject *o) {
  PyObject* tmp;
  struct __pyx_MemviewEnum_obj *p = (struct __pyx_MemviewEnum_obj *)o;
  tmp = ((PyObject*)p->name);
  p->name = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_specialmethod___pyx_MemviewEnum___repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_MemviewEnum___repr__(self);
}

static PyMethodDef __pyx_methods_Enum[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_MemviewEnum___repr__, METH_NOARGS|METH_COEXIST, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_MemviewEnum_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_MemviewEnum_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type___pyx_MemviewEnum_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_Enum},
  {Py_tp_repr, (void *)__pyx_MemviewEnum___repr__},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_Enum},
  {Py_tp_clear, (void *)__pyx_tp_clear_Enum},
  {Py_tp_methods, (void *)__pyx_methods_Enum},
  {Py_tp_init, (void *)__pyx_MemviewEnum___init__},
  {Py_tp_new, (void *)__pyx_tp_new_Enum},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_MemviewEnum_spec = {
  "PygameShader.Palette.Enum",
  sizeof(struct __pyx_MemviewEnum_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type___pyx_MemviewEnum_slots,
};
#else

static PyTypeObject __pyx_type___pyx_MemviewEnum = {
  PyVarObject_HEAD_INIT(0, 0)
  "PygameShader.Palette.""Enum", /*tp_name*/
  sizeof(struct __pyx_MemviewEnum_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_Enum, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_MemviewEnum___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_Enum, /*tp_traverse*/
  __pyx_tp_clear_Enum, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_Enum, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  __pyx_MemviewEnum___init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_Enum, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_memoryview __pyx_vtable_memoryview;

static PyObject *__pyx_tp_new_memoryview(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryview_obj *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_memoryview_obj *)o);
  p->__pyx_vtab = __pyx_vtabptr_memoryview;
  p->obj = Py_None; Py_INCREF(Py_None);
  p->_size = Py_None; Py_INCREF(Py_None);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  p->view.obj = NULL;
  if (unlikely(__pyx_memoryview___cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_memoryview(PyObject *o) {
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_memoryview) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryview___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  Py_CLEAR(p->obj);
  Py_CLEAR(p->_size);
  Py_CLEAR(p->_array_interface);
  #if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static int __pyx_tp_traverse_memoryview(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  if (p->obj) {
    e = (*v)(p->obj, a); if (e) return e;
  }
  if (p->_size) {
    e = (*v)(p->_size, a); if (e) return e;
  }
  if (p->_array_interface) {
    e = (*v)(p->_array_interface, a); if (e) return e;
  }
  if (p->view.obj) {
    e = (*v)(p->view.obj, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_memoryview(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryview_obj *p = (struct __pyx_memoryview_obj *)o;
  tmp = ((PyObject*)p->obj);
  p->obj = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_size);
  p->_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_array_interface);
  p->_array_interface = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  Py_CLEAR(p->view.obj);
  return 0;
}
static PyObject *__pyx_sq_item_memoryview(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_memoryview(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_memoryview___setitem__(o, i, v);
  }
  else {
    __Pyx_TypeName o_type_name;
    o_type_name = __Pyx_PyType_GetName(Py_TYPE(o));
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by " __Pyx_FMT_TYPENAME, o_type_name);
    __Pyx_DECREF_TypeName(o_type_name);
    return -1;
  }
}

static PyObject *__pyx_getprop___pyx_memoryview_T(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_1T_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_base(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4base_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_shape(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_5shape_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_strides(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_7strides_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_suboffsets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_10suboffsets_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_ndim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4ndim_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_itemsize(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_8itemsize_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_nbytes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_6nbytes_1__get__(o);
}

static PyObject *__pyx_getprop___pyx_memoryview_size(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_15View_dot_MemoryView_10memoryview_4size_1__get__(o);
}

static PyObject *__pyx_specialmethod___pyx_memoryview___repr__(PyObject *self, CYTHON_UNUSED PyObject *arg) {
  return __pyx_memoryview___repr__(self);
}

static PyMethodDef __pyx_methods_memoryview[] = {
  {"__repr__", (PyCFunction)__pyx_specialmethod___pyx_memoryview___repr__, METH_NOARGS|METH_COEXIST, 0},
  {"is_c_contig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_is_c_contig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"is_f_contig", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_is_f_contig, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"copy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_copy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"copy_fortran", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_memoryview_copy_fortran, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryview_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryview_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_memoryview[] = {
  {(char *)"T", __pyx_getprop___pyx_memoryview_T, 0, (char *)0, 0},
  {(char *)"base", __pyx_getprop___pyx_memoryview_base, 0, (char *)0, 0},
  {(char *)"shape", __pyx_getprop___pyx_memoryview_shape, 0, (char *)0, 0},
  {(char *)"strides", __pyx_getprop___pyx_memoryview_strides, 0, (char *)0, 0},
  {(char *)"suboffsets", __pyx_getprop___pyx_memoryview_suboffsets, 0, (char *)0, 0},
  {(char *)"ndim", __pyx_getprop___pyx_memoryview_ndim, 0, (char *)0, 0},
  {(char *)"itemsize", __pyx_getprop___pyx_memoryview_itemsize, 0, (char *)0, 0},
  {(char *)"nbytes", __pyx_getprop___pyx_memoryview_nbytes, 0, (char *)0, 0},
  {(char *)"size", __pyx_getprop___pyx_memoryview_size, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
#if !CYTHON_COMPILING_IN_LIMITED_API

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};
#endif
static PyType_Slot __pyx_type___pyx_memoryview_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_memoryview},
  {Py_tp_repr, (void *)__pyx_memoryview___repr__},
  {Py_sq_length, (void *)__pyx_memoryview___len__},
  {Py_sq_item, (void *)__pyx_sq_item_memoryview},
  {Py_mp_length, (void *)__pyx_memoryview___len__},
  {Py_mp_subscript, (void *)__pyx_memoryview___getitem__},
  {Py_mp_ass_subscript, (void *)__pyx_mp_ass_subscript_memoryview},
  {Py_tp_str, (void *)__pyx_memoryview___str__},
  #if defined(Py_bf_getbuffer)
  {Py_bf_getbuffer, (void *)__pyx_memoryview_getbuffer},
  #endif
  {Py_tp_traverse, (void *)__pyx_tp_traverse_memoryview},
  {Py_tp_clear, (void *)__pyx_tp_clear_memoryview},
  {Py_tp_methods, (void *)__pyx_methods_memoryview},
  {Py_tp_getset, (void *)__pyx_getsets_memoryview},
  {Py_tp_new, (void *)__pyx_tp_new_memoryview},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_memoryview_spec = {
  "PygameShader.Palette.memoryview",
  sizeof(struct __pyx_memoryview_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type___pyx_memoryview_slots,
};
#else

static PySequenceMethods __pyx_tp_as_sequence_memoryview = {
  __pyx_memoryview___len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_memoryview, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_memoryview = {
  __pyx_memoryview___len__, /*mp_length*/
  __pyx_memoryview___getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_memoryview, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_memoryview = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  __pyx_memoryview_getbuffer, /*bf_getbuffer*/
  0, /*bf_releasebuffer*/
};

static PyTypeObject __pyx_type___pyx_memoryview = {
  PyVarObject_HEAD_INIT(0, 0)
  "PygameShader.Palette.""memoryview", /*tp_name*/
  sizeof(struct __pyx_memoryview_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_memoryview, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_memoryview___repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_memoryview, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_memoryview, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_memoryview___str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_memoryview, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_memoryview, /*tp_traverse*/
  __pyx_tp_clear_memoryview, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_memoryview, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_memoryview, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_memoryview, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct__memoryviewslice __pyx_vtable__memoryviewslice;

static PyObject *__pyx_tp_new__memoryviewslice(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_memoryviewslice_obj *p;
  PyObject *o = __pyx_tp_new_memoryview(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_memoryviewslice_obj *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_memoryview*)__pyx_vtabptr__memoryviewslice;
  new((void*)&(p->from_slice)) __Pyx_memviewslice();
  p->from_object = Py_None; Py_INCREF(Py_None);
  p->from_slice.memview = NULL;
  return o;
}

static void __pyx_tp_dealloc__memoryviewslice(PyObject *o) {
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && !__Pyx_PyObject_GC_IsFinalized(o)) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc__memoryviewslice) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  PyObject_GC_UnTrack(o);
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) + 1);
    __pyx_memoryviewslice___dealloc__(o);
    __Pyx_SET_REFCNT(o, Py_REFCNT(o) - 1);
    PyErr_Restore(etype, eval, etb);
  }
  __Pyx_call_destructor(p->from_slice);
  Py_CLEAR(p->from_object);
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_memoryview(o);
}

static int __pyx_tp_traverse__memoryviewslice(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  e = __pyx_tp_traverse_memoryview(o, v, a); if (e) return e;
  if (p->from_object) {
    e = (*v)(p->from_object, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear__memoryviewslice(PyObject *o) {
  PyObject* tmp;
  struct __pyx_memoryviewslice_obj *p = (struct __pyx_memoryviewslice_obj *)o;
  __pyx_tp_clear_memoryview(o);
  tmp = ((PyObject*)p->from_object);
  p->from_object = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  __PYX_XCLEAR_MEMVIEW(&p->from_slice, 1);
  return 0;
}

static PyMethodDef __pyx_methods__memoryviewslice[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryviewslice_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw___pyx_memoryviewslice_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type___pyx_memoryviewslice_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc__memoryviewslice},
  {Py_tp_doc, (void *)PyDoc_STR("Internal class for passing memoryview slices to Python")},
  {Py_tp_traverse, (void *)__pyx_tp_traverse__memoryviewslice},
  {Py_tp_clear, (void *)__pyx_tp_clear__memoryviewslice},
  {Py_tp_methods, (void *)__pyx_methods__memoryviewslice},
  {Py_tp_new, (void *)__pyx_tp_new__memoryviewslice},
  {0, 0},
};
static PyType_Spec __pyx_type___pyx_memoryviewslice_spec = {
  "PygameShader.Palette._memoryviewslice",
  sizeof(struct __pyx_memoryviewslice_obj),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_SEQUENCE,
  __pyx_type___pyx_memoryviewslice_slots,
};
#else

static PyTypeObject __pyx_type___pyx_memoryviewslice = {
  PyVarObject_HEAD_INIT(0, 0)
  "PygameShader.Palette.""_memoryviewslice", /*tp_name*/
  sizeof(struct __pyx_memoryviewslice_obj), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc__memoryviewslice, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_memoryview___repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  #if CYTHON_COMPILING_IN_PYPY || 0
  __pyx_memoryview___str__, /*tp_str*/
  #else
  0, /*tp_str*/
  #endif
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC|Py_TPFLAGS_SEQUENCE, /*tp_flags*/
  PyDoc_STR("Internal class for passing memoryview slices to Python"), /*tp_doc*/
  __pyx_tp_traverse__memoryviewslice, /*tp_traverse*/
  __pyx_tp_clear__memoryviewslice, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods__memoryviewslice, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new__memoryviewslice, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {"palette_change", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_12PygameShader_7Palette_1palette_change, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_12PygameShader_7Palette_palette_change},
  {"make_palette", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_12PygameShader_7Palette_3make_palette, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_12PygameShader_7Palette_2make_palette},
  {"create_surface_from_palette", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_12PygameShader_7Palette_5create_surface_from_palette, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_12PygameShader_7Palette_4create_surface_from_palette},
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static int __Pyx_CreateStringTabAndInitStrings(void) {
  __Pyx_StringTabEntry __pyx_string_tab[] = {
    {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
    {&__pyx_kp_u_128_colors_Created_by_Adigun_A_P, __pyx_k_128_colors_Created_by_Adigun_A_P, sizeof(__pyx_k_128_colors_Created_by_Adigun_A_P), 0, 1, 0, 0},
    {&__pyx_kp_u_24_colors_palette_Created_by_Vin, __pyx_k_24_colors_palette_Created_by_Vin, sizeof(__pyx_k_24_colors_palette_Created_by_Vin), 0, 1, 0, 0},
    {&__pyx_kp_u_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 1, 0, 0},
    {&__pyx_kp_u_46_colors_palette_by_AdamCYounis, __pyx_k_46_colors_palette_by_AdamCYounis, sizeof(__pyx_k_46_colors_palette_by_AdamCYounis), 0, 1, 0, 0},
    {&__pyx_kp_u_64_colors_palette_by_Adigun_Pola, __pyx_k_64_colors_palette_by_Adigun_Pola, sizeof(__pyx_k_64_colors_palette_by_Adigun_Pola), 0, 1, 0, 0},
    {&__pyx_kp_u_76_colors_palette_Created_by_Ker, __pyx_k_76_colors_palette_Created_by_Ker, sizeof(__pyx_k_76_colors_palette_Created_by_Ker), 0, 1, 0, 0},
    {&__pyx_kp_u_8_colors_palette_Created_by_Sham, __pyx_k_8_colors_palette_Created_by_Sham, sizeof(__pyx_k_8_colors_palette_Created_by_Sham), 0, 1, 0, 0},
    {&__pyx_n_s_AAP64, __pyx_k_AAP64, sizeof(__pyx_k_AAP64), 0, 0, 1, 1},
    {&__pyx_n_u_AAP64, __pyx_k_AAP64, sizeof(__pyx_k_AAP64), 0, 1, 0, 1},
    {&__pyx_n_s_AAP64_NORMALIZED, __pyx_k_AAP64_NORMALIZED, sizeof(__pyx_k_AAP64_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_AAPSPLENDOR128, __pyx_k_AAPSPLENDOR128, sizeof(__pyx_k_AAPSPLENDOR128), 0, 0, 1, 1},
    {&__pyx_n_u_AAPSPLENDOR128, __pyx_k_AAPSPLENDOR128, sizeof(__pyx_k_AAPSPLENDOR128), 0, 1, 0, 1},
    {&__pyx_n_s_AAPSPLENDOR128_NORMALIZED, __pyx_k_AAPSPLENDOR128_NORMALIZED, sizeof(__pyx_k_AAPSPLENDOR128_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_AMSTRAD_CPC, __pyx_k_AMSTRAD_CPC, sizeof(__pyx_k_AMSTRAD_CPC), 0, 0, 1, 1},
    {&__pyx_n_u_AMSTRAD_CPC, __pyx_k_AMSTRAD_CPC, sizeof(__pyx_k_AMSTRAD_CPC), 0, 1, 0, 1},
    {&__pyx_n_s_AMSTRAD_CPC_NORMALIZED, __pyx_k_AMSTRAD_CPC_NORMALIZED, sizeof(__pyx_k_AMSTRAD_CPC_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_APOLLO, __pyx_k_APOLLO, sizeof(__pyx_k_APOLLO), 0, 0, 1, 1},
    {&__pyx_n_u_APOLLO, __pyx_k_APOLLO, sizeof(__pyx_k_APOLLO), 0, 1, 0, 1},
    {&__pyx_n_s_APOLLO_NORMALIZED, __pyx_k_APOLLO_NORMALIZED, sizeof(__pyx_k_APOLLO_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_APPLE_II, __pyx_k_APPLE_II, sizeof(__pyx_k_APPLE_II), 0, 0, 1, 1},
    {&__pyx_n_u_APPLE_II, __pyx_k_APPLE_II, sizeof(__pyx_k_APPLE_II), 0, 1, 0, 1},
    {&__pyx_n_s_APPLE_II_HIGH, __pyx_k_APPLE_II_HIGH, sizeof(__pyx_k_APPLE_II_HIGH), 0, 0, 1, 1},
    {&__pyx_n_u_APPLE_II_HIGH, __pyx_k_APPLE_II_HIGH, sizeof(__pyx_k_APPLE_II_HIGH), 0, 1, 0, 1},
    {&__pyx_n_s_APPLE_II_HIGH_NORMALIZED, __pyx_k_APPLE_II_HIGH_NORMALIZED, sizeof(__pyx_k_APPLE_II_HIGH_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_APPLE_II_LOW, __pyx_k_APPLE_II_LOW, sizeof(__pyx_k_APPLE_II_LOW), 0, 0, 1, 1},
    {&__pyx_n_u_APPLE_II_LOW, __pyx_k_APPLE_II_LOW, sizeof(__pyx_k_APPLE_II_LOW), 0, 1, 0, 1},
    {&__pyx_n_s_APPLE_II_LOW_NORMALIZED, __pyx_k_APPLE_II_LOW_NORMALIZED, sizeof(__pyx_k_APPLE_II_LOW_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_APPLE_II_NORMALIZED, __pyx_k_APPLE_II_NORMALIZED, sizeof(__pyx_k_APPLE_II_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_ASCII, __pyx_k_ASCII, sizeof(__pyx_k_ASCII), 0, 0, 1, 1},
    {&__pyx_kp_s_All_dimensions_preceding_dimensi, __pyx_k_All_dimensions_preceding_dimensi, sizeof(__pyx_k_All_dimensions_preceding_dimensi), 0, 0, 1, 0},
    {&__pyx_kp_u_Argument_temp_buffer_must_be_a_c, __pyx_k_Argument_temp_buffer_must_be_a_c, sizeof(__pyx_k_Argument_temp_buffer_must_be_a_c), 0, 1, 0, 0},
    {&__pyx_kp_u_Argument_width_should_be_0_got_s, __pyx_k_Argument_width_should_be_0_got_s, sizeof(__pyx_k_Argument_width_should_be_0_got_s), 0, 1, 0, 0},
    {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
    {&__pyx_n_s_BBC_MICRO, __pyx_k_BBC_MICRO, sizeof(__pyx_k_BBC_MICRO), 0, 0, 1, 1},
    {&__pyx_n_u_BBC_MICRO, __pyx_k_BBC_MICRO, sizeof(__pyx_k_BBC_MICRO), 0, 1, 0, 1},
    {&__pyx_kp_u_BBC_Micro_has_8_display_modes_wi, __pyx_k_BBC_Micro_has_8_display_modes_wi, sizeof(__pyx_k_BBC_Micro_has_8_display_modes_wi), 0, 1, 0, 0},
    {&__pyx_kp_u_Both_temp_buffer_and_color_palet, __pyx_k_Both_temp_buffer_and_color_palet, sizeof(__pyx_k_Both_temp_buffer_and_color_palet), 0, 1, 0, 0},
    {&__pyx_kp_s_Buffer_view_does_not_expose_stri, __pyx_k_Buffer_view_does_not_expose_stri, sizeof(__pyx_k_Buffer_view_does_not_expose_stri), 0, 0, 1, 0},
    {&__pyx_n_s_CGA_MODE4_PAL1_HIGH, __pyx_k_CGA_MODE4_PAL1_HIGH, sizeof(__pyx_k_CGA_MODE4_PAL1_HIGH), 0, 0, 1, 1},
    {&__pyx_n_u_CGA_MODE4_PAL1_HIGH, __pyx_k_CGA_MODE4_PAL1_HIGH, sizeof(__pyx_k_CGA_MODE4_PAL1_HIGH), 0, 1, 0, 1},
    {&__pyx_n_s_CGA_MODE4_PAL1_LOW, __pyx_k_CGA_MODE4_PAL1_LOW, sizeof(__pyx_k_CGA_MODE4_PAL1_LOW), 0, 0, 1, 1},
    {&__pyx_n_u_CGA_MODE4_PAL1_LOW, __pyx_k_CGA_MODE4_PAL1_LOW, sizeof(__pyx_k_CGA_MODE4_PAL1_LOW), 0, 1, 0, 1},
    {&__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_HIGH, __pyx_k_CGA_MODE4_PAL1_NORMALIZED_HIGH, sizeof(__pyx_k_CGA_MODE4_PAL1_NORMALIZED_HIGH), 0, 0, 1, 1},
    {&__pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_LOW, __pyx_k_CGA_MODE4_PAL1_NORMALIZED_LOW, sizeof(__pyx_k_CGA_MODE4_PAL1_NORMALIZED_LOW), 0, 0, 1, 1},
    {&__pyx_n_s_CGA_MODE4_PAL2_HIGH, __pyx_k_CGA_MODE4_PAL2_HIGH, sizeof(__pyx_k_CGA_MODE4_PAL2_HIGH), 0, 0, 1, 1},
    {&__pyx_n_u_CGA_MODE4_PAL2_HIGH, __pyx_k_CGA_MODE4_PAL2_HIGH, sizeof(__pyx_k_CGA_MODE4_PAL2_HIGH), 0, 1, 0, 1},
    {&__pyx_n_s_CGA_MODE4_PAL2_LOW, __pyx_k_CGA_MODE4_PAL2_LOW, sizeof(__pyx_k_CGA_MODE4_PAL2_LOW), 0, 0, 1, 1},
    {&__pyx_n_u_CGA_MODE4_PAL2_LOW, __pyx_k_CGA_MODE4_PAL2_LOW, sizeof(__pyx_k_CGA_MODE4_PAL2_LOW), 0, 1, 0, 1},
    {&__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_HIGH, __pyx_k_CGA_MODE4_PAL2_NORMALIZED_HIGH, sizeof(__pyx_k_CGA_MODE4_PAL2_NORMALIZED_HIGH), 0, 0, 1, 1},
    {&__pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_LOW, __pyx_k_CGA_MODE4_PAL2_NORMALIZED_LOW, sizeof(__pyx_k_CGA_MODE4_PAL2_NORMALIZED_LOW), 0, 0, 1, 1},
    {&__pyx_n_s_CGA_MODE5_HIGH, __pyx_k_CGA_MODE5_HIGH, sizeof(__pyx_k_CGA_MODE5_HIGH), 0, 0, 1, 1},
    {&__pyx_n_u_CGA_MODE5_HIGH, __pyx_k_CGA_MODE5_HIGH, sizeof(__pyx_k_CGA_MODE5_HIGH), 0, 1, 0, 1},
    {&__pyx_n_s_CGA_MODE5_LOW, __pyx_k_CGA_MODE5_LOW, sizeof(__pyx_k_CGA_MODE5_LOW), 0, 0, 1, 1},
    {&__pyx_n_u_CGA_MODE5_LOW, __pyx_k_CGA_MODE5_LOW, sizeof(__pyx_k_CGA_MODE5_LOW), 0, 1, 0, 1},
    {&__pyx_n_s_CGA_MODE5_NORMALIZED_HIGH, __pyx_k_CGA_MODE5_NORMALIZED_HIGH, sizeof(__pyx_k_CGA_MODE5_NORMALIZED_HIGH), 0, 0, 1, 1},
    {&__pyx_n_s_CGA_MODE5_NORMALIZED_LOW, __pyx_k_CGA_MODE5_NORMALIZED_LOW, sizeof(__pyx_k_CGA_MODE5_NORMALIZED_LOW), 0, 0, 1, 1},
    {&__pyx_n_s_CGA_TEST, __pyx_k_CGA_TEST, sizeof(__pyx_k_CGA_TEST), 0, 0, 1, 1},
    {&__pyx_n_s_COMMODORE_64, __pyx_k_COMMODORE_64, sizeof(__pyx_k_COMMODORE_64), 0, 0, 1, 1},
    {&__pyx_n_u_COMMODORE_64, __pyx_k_COMMODORE_64, sizeof(__pyx_k_COMMODORE_64), 0, 1, 0, 1},
    {&__pyx_n_s_COMMODORE_64_NORMALIZED, __pyx_k_COMMODORE_64_NORMALIZED, sizeof(__pyx_k_COMMODORE_64_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_u_C_CONTIGUOUS, __pyx_k_C_CONTIGUOUS, sizeof(__pyx_k_C_CONTIGUOUS), 0, 1, 0, 1},
    {&__pyx_kp_s_Can_only_create_a_buffer_that_is, __pyx_k_Can_only_create_a_buffer_that_is, sizeof(__pyx_k_Can_only_create_a_buffer_that_is), 0, 0, 1, 0},
    {&__pyx_kp_s_Cannot_assign_to_read_only_memor, __pyx_k_Cannot_assign_to_read_only_memor, sizeof(__pyx_k_Cannot_assign_to_read_only_memor), 0, 0, 1, 0},
    {&__pyx_kp_s_Cannot_create_writable_memory_vi, __pyx_k_Cannot_create_writable_memory_vi, sizeof(__pyx_k_Cannot_create_writable_memory_vi), 0, 0, 1, 0},
    {&__pyx_kp_u_Cannot_index_with_type, __pyx_k_Cannot_index_with_type, sizeof(__pyx_k_Cannot_index_with_type), 0, 1, 0, 0},
    {&__pyx_kp_s_Cannot_transpose_memoryview_with, __pyx_k_Cannot_transpose_memoryview_with, sizeof(__pyx_k_Cannot_transpose_memoryview_with), 0, 0, 1, 0},
    {&__pyx_kp_u_Created_by_Arne_as_part_of_his_F, __pyx_k_Created_by_Arne_as_part_of_his_F, sizeof(__pyx_k_Created_by_Arne_as_part_of_his_F), 0, 1, 0, 0},
    {&__pyx_kp_u_Created_by_LostInIndigo, __pyx_k_Created_by_LostInIndigo, sizeof(__pyx_k_Created_by_LostInIndigo), 0, 1, 0, 0},
    {&__pyx_kp_u_Created_by_Okee, __pyx_k_Created_by_Okee, sizeof(__pyx_k_Created_by_Okee), 0, 1, 0, 0},
    {&__pyx_kp_s_Dimension_d_is_not_direct, __pyx_k_Dimension_d_is_not_direct, sizeof(__pyx_k_Dimension_d_is_not_direct), 0, 0, 1, 0},
    {&__pyx_kp_u_Dimension_mismatch_between_rgb_a, __pyx_k_Dimension_mismatch_between_rgb_a, sizeof(__pyx_k_Dimension_mismatch_between_rgb_a), 0, 1, 0, 0},
    {&__pyx_n_s_Ellipsis, __pyx_k_Ellipsis, sizeof(__pyx_k_Ellipsis), 0, 0, 1, 1},
    {&__pyx_kp_s_Empty_shape_tuple_for_cython_arr, __pyx_k_Empty_shape_tuple_for_cython_arr, sizeof(__pyx_k_Empty_shape_tuple_for_cython_arr), 0, 0, 1, 0},
    {&__pyx_kp_u_Error_creating_Pygame_surface, __pyx_k_Error_creating_Pygame_surface, sizeof(__pyx_k_Error_creating_Pygame_surface), 0, 1, 0, 0},
    {&__pyx_kp_u_Every_pixel_on_PICO_8_is_stored, __pyx_k_Every_pixel_on_PICO_8_is_stored, sizeof(__pyx_k_Every_pixel_on_PICO_8_is_stored), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_input_array_with_dtype, __pyx_k_Expected_input_array_with_dtype, sizeof(__pyx_k_Expected_input_array_with_dtype), 0, 1, 0, 0},
    {&__pyx_kp_u_Expected_input_type_numpy_ndarra, __pyx_k_Expected_input_type_numpy_ndarra, sizeof(__pyx_k_Expected_input_type_numpy_ndarra), 0, 1, 0, 0},
    {&__pyx_n_s_FAMICUBE, __pyx_k_FAMICUBE, sizeof(__pyx_k_FAMICUBE), 0, 0, 1, 1},
    {&__pyx_n_u_FAMICUBE, __pyx_k_FAMICUBE, sizeof(__pyx_k_FAMICUBE), 0, 1, 0, 1},
    {&__pyx_n_s_FAMICUBE_NORMALIZED, __pyx_k_FAMICUBE_NORMALIZED, sizeof(__pyx_k_FAMICUBE_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_FUNKYFUTURE, __pyx_k_FUNKYFUTURE, sizeof(__pyx_k_FUNKYFUTURE), 0, 0, 1, 1},
    {&__pyx_n_u_FUNKYFUTURE, __pyx_k_FUNKYFUTURE, sizeof(__pyx_k_FUNKYFUTURE), 0, 1, 0, 1},
    {&__pyx_n_s_FUNKYFUTURE_NORMALIZED, __pyx_k_FUNKYFUTURE_NORMALIZED, sizeof(__pyx_k_FUNKYFUTURE_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_kp_u_Failed_to_get_a_valid_view_from, __pyx_k_Failed_to_get_a_valid_view_from, sizeof(__pyx_k_Failed_to_get_a_valid_view_from), 0, 1, 0, 0},
    {&__pyx_kp_u_For_Thomson_computers_a_popular, __pyx_k_For_Thomson_computers_a_popular, sizeof(__pyx_k_For_Thomson_computers_a_popular), 0, 1, 0, 0},
    {&__pyx_n_s_FutureWarning, __pyx_k_FutureWarning, sizeof(__pyx_k_FutureWarning), 0, 0, 1, 1},
    {&__pyx_n_s_IRIDESCENTCRYSTAL, __pyx_k_IRIDESCENTCRYSTAL, sizeof(__pyx_k_IRIDESCENTCRYSTAL), 0, 0, 1, 1},
    {&__pyx_n_u_IRIDESCENTCRYSTAL, __pyx_k_IRIDESCENTCRYSTAL, sizeof(__pyx_k_IRIDESCENTCRYSTAL), 0, 1, 0, 1},
    {&__pyx_n_s_IRIDESCENTCRYSTAL_NORMALIZED, __pyx_k_IRIDESCENTCRYSTAL_NORMALIZED, sizeof(__pyx_k_IRIDESCENTCRYSTAL_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
    {&__pyx_n_s_ImportWarning, __pyx_k_ImportWarning, sizeof(__pyx_k_ImportWarning), 0, 0, 1, 1},
    {&__pyx_kp_s_Incompatible_checksums_0x_x_vs_0, __pyx_k_Incompatible_checksums_0x_x_vs_0, sizeof(__pyx_k_Incompatible_checksums_0x_x_vs_0), 0, 0, 1, 0},
    {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
    {&__pyx_kp_s_Index_out_of_bounds_axis_d, __pyx_k_Index_out_of_bounds_axis_d, sizeof(__pyx_k_Index_out_of_bounds_axis_d), 0, 0, 1, 0},
    {&__pyx_kp_s_Indirect_dimensions_not_supporte, __pyx_k_Indirect_dimensions_not_supporte, sizeof(__pyx_k_Indirect_dimensions_not_supporte), 0, 0, 1, 0},
    {&__pyx_kp_u_Input_palette_is_empty_The_palet, __pyx_k_Input_palette_is_empty_The_palet, sizeof(__pyx_k_Input_palette_is_empty_The_palet), 0, 1, 0, 0},
    {&__pyx_kp_u_Input_palette_must_be_a_contiguo, __pyx_k_Input_palette_must_be_a_contiguo, sizeof(__pyx_k_Input_palette_must_be_a_contiguo), 0, 1, 0, 0},
    {&__pyx_kp_u_Invalid_mode_expected_c_or_fortr, __pyx_k_Invalid_mode_expected_c_or_fortr, sizeof(__pyx_k_Invalid_mode_expected_c_or_fortr), 0, 1, 0, 0},
    {&__pyx_kp_u_Invalid_shape_in_axis, __pyx_k_Invalid_shape_in_axis, sizeof(__pyx_k_Invalid_shape_in_axis), 0, 1, 0, 0},
    {&__pyx_kp_u_Invalid_type_for_argument_color, __pyx_k_Invalid_type_for_argument_color, sizeof(__pyx_k_Invalid_type_for_argument_color), 0, 1, 0, 0},
    {&__pyx_kp_u_Invalid_type_for_argument_rgb_ar, __pyx_k_Invalid_type_for_argument_rgb_ar, sizeof(__pyx_k_Invalid_type_for_argument_rgb_ar), 0, 1, 0, 0},
    {&__pyx_kp_u_Invalid_type_for_argument_temp_b, __pyx_k_Invalid_type_for_argument_temp_b, sizeof(__pyx_k_Invalid_type_for_argument_temp_b), 0, 1, 0, 0},
    {&__pyx_n_s_LIST_PALETTES, __pyx_k_LIST_PALETTES, sizeof(__pyx_k_LIST_PALETTES), 0, 0, 1, 1},
    {&__pyx_n_s_LOSPEC500, __pyx_k_LOSPEC500, sizeof(__pyx_k_LOSPEC500), 0, 0, 1, 1},
    {&__pyx_n_u_LOSPEC500, __pyx_k_LOSPEC500, sizeof(__pyx_k_LOSPEC500), 0, 1, 0, 1},
    {&__pyx_n_s_LOSPEC500_NORMALIZED, __pyx_k_LOSPEC500_NORMALIZED, sizeof(__pyx_k_LOSPEC500_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_MICROSOFT_WINDOWS_16, __pyx_k_MICROSOFT_WINDOWS_16, sizeof(__pyx_k_MICROSOFT_WINDOWS_16), 0, 0, 1, 1},
    {&__pyx_n_u_MICROSOFT_WINDOWS_16, __pyx_k_MICROSOFT_WINDOWS_16, sizeof(__pyx_k_MICROSOFT_WINDOWS_16), 0, 1, 0, 1},
    {&__pyx_n_s_MICROSOFT_WINDOWS_16_NORMALIZED, __pyx_k_MICROSOFT_WINDOWS_16_NORMALIZED, sizeof(__pyx_k_MICROSOFT_WINDOWS_16_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_MICROSOFT_WINDOWS_20, __pyx_k_MICROSOFT_WINDOWS_20, sizeof(__pyx_k_MICROSOFT_WINDOWS_20), 0, 0, 1, 1},
    {&__pyx_n_u_MICROSOFT_WINDOWS_20, __pyx_k_MICROSOFT_WINDOWS_20, sizeof(__pyx_k_MICROSOFT_WINDOWS_20), 0, 1, 0, 1},
    {&__pyx_n_s_MICROSOFT_WINDOWS_20_NORMALIZED, __pyx_k_MICROSOFT_WINDOWS_20_NORMALIZED, sizeof(__pyx_k_MICROSOFT_WINDOWS_20_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_MICROSOFT_WINDOWS_PAINT, __pyx_k_MICROSOFT_WINDOWS_PAINT, sizeof(__pyx_k_MICROSOFT_WINDOWS_PAINT), 0, 0, 1, 1},
    {&__pyx_n_u_MICROSOFT_WINDOWS_PAINT, __pyx_k_MICROSOFT_WINDOWS_PAINT, sizeof(__pyx_k_MICROSOFT_WINDOWS_PAINT), 0, 1, 0, 1},
    {&__pyx_n_s_MICROSOFT_WINDOWS_PAINT_NORMALI, __pyx_k_MICROSOFT_WINDOWS_PAINT_NORMALI, sizeof(__pyx_k_MICROSOFT_WINDOWS_PAINT_NORMALI), 0, 0, 1, 1},
    {&__pyx_kp_u_MONOCHROME_2_amber_colors, __pyx_k_MONOCHROME_2_amber_colors, sizeof(__pyx_k_MONOCHROME_2_amber_colors), 0, 1, 0, 0},
    {&__pyx_kp_u_MONOCHROME_2_green_colors, __pyx_k_MONOCHROME_2_green_colors, sizeof(__pyx_k_MONOCHROME_2_green_colors), 0, 1, 0, 0},
    {&__pyx_n_s_MONO_PHOSPHOR_AMBER, __pyx_k_MONO_PHOSPHOR_AMBER, sizeof(__pyx_k_MONO_PHOSPHOR_AMBER), 0, 0, 1, 1},
    {&__pyx_n_u_MONO_PHOSPHOR_AMBER, __pyx_k_MONO_PHOSPHOR_AMBER, sizeof(__pyx_k_MONO_PHOSPHOR_AMBER), 0, 1, 0, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_AMBER_NORMALIZED, __pyx_k_MONO_PHOSPHOR_AMBER_NORMALIZED, sizeof(__pyx_k_MONO_PHOSPHOR_AMBER_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_GREEN1, __pyx_k_MONO_PHOSPHOR_GREEN1, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN1), 0, 0, 1, 1},
    {&__pyx_n_u_MONO_PHOSPHOR_GREEN1, __pyx_k_MONO_PHOSPHOR_GREEN1, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN1), 0, 1, 0, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_GREEN1_NORMALIZED, __pyx_k_MONO_PHOSPHOR_GREEN1_NORMALIZED, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN1_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_GREEN2, __pyx_k_MONO_PHOSPHOR_GREEN2, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN2), 0, 0, 1, 1},
    {&__pyx_n_u_MONO_PHOSPHOR_GREEN2, __pyx_k_MONO_PHOSPHOR_GREEN2, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN2), 0, 1, 0, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_GREEN2_NORMALIZED, __pyx_k_MONO_PHOSPHOR_GREEN2_NORMALIZED, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN2_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_GREEN3, __pyx_k_MONO_PHOSPHOR_GREEN3, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN3), 0, 0, 1, 1},
    {&__pyx_n_u_MONO_PHOSPHOR_GREEN3, __pyx_k_MONO_PHOSPHOR_GREEN3, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN3), 0, 1, 0, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_GREEN3_NORMALIZED, __pyx_k_MONO_PHOSPHOR_GREEN3_NORMALIZED, sizeof(__pyx_k_MONO_PHOSPHOR_GREEN3_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_LTAMBER, __pyx_k_MONO_PHOSPHOR_LTAMBER, sizeof(__pyx_k_MONO_PHOSPHOR_LTAMBER), 0, 0, 1, 1},
    {&__pyx_n_u_MONO_PHOSPHOR_LTAMBER, __pyx_k_MONO_PHOSPHOR_LTAMBER, sizeof(__pyx_k_MONO_PHOSPHOR_LTAMBER), 0, 1, 0, 1},
    {&__pyx_n_s_MONO_PHOSPHOR_LTAMBER_NORMALIZE, __pyx_k_MONO_PHOSPHOR_LTAMBER_NORMALIZE, sizeof(__pyx_k_MONO_PHOSPHOR_LTAMBER_NORMALIZE), 0, 0, 1, 1},
    {&__pyx_n_s_MSX, __pyx_k_MSX, sizeof(__pyx_k_MSX), 0, 0, 1, 1},
    {&__pyx_n_u_MSX, __pyx_k_MSX, sizeof(__pyx_k_MSX), 0, 1, 0, 1},
    {&__pyx_n_s_MSX_NORMALIZED, __pyx_k_MSX_NORMALIZED, sizeof(__pyx_k_MSX_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_MemoryError, __pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 0, 1, 1},
    {&__pyx_kp_s_MemoryView_of_r_at_0x_x, __pyx_k_MemoryView_of_r_at_0x_x, sizeof(__pyx_k_MemoryView_of_r_at_0x_x), 0, 0, 1, 0},
    {&__pyx_kp_s_MemoryView_of_r_object, __pyx_k_MemoryView_of_r_object, sizeof(__pyx_k_MemoryView_of_r_object), 0, 0, 1, 0},
    {&__pyx_kp_u_Microsoft_Windows_and_IBM_OS_2_d, __pyx_k_Microsoft_Windows_and_IBM_OS_2_d, sizeof(__pyx_k_Microsoft_Windows_and_IBM_OS_2_d), 0, 1, 0, 0},
    {&__pyx_kp_u_Microsoft_Windows_default_20_col, __pyx_k_Microsoft_Windows_default_20_col, sizeof(__pyx_k_Microsoft_Windows_default_20_col), 0, 1, 0, 0},
    {&__pyx_kp_u_Microsoft_paint_color_palette, __pyx_k_Microsoft_paint_color_palette, sizeof(__pyx_k_Microsoft_paint_color_palette), 0, 1, 0, 0},
    {&__pyx_n_b_O, __pyx_k_O, sizeof(__pyx_k_O), 0, 0, 0, 1},
    {&__pyx_n_s_OPENMP, __pyx_k_OPENMP, sizeof(__pyx_k_OPENMP), 0, 0, 1, 1},
    {&__pyx_kp_u_Out_of_bounds_on_buffer_access_a, __pyx_k_Out_of_bounds_on_buffer_access_a, sizeof(__pyx_k_Out_of_bounds_on_buffer_access_a), 0, 1, 0, 0},
    {&__pyx_n_s_PICO_8, __pyx_k_PICO_8, sizeof(__pyx_k_PICO_8), 0, 0, 1, 1},
    {&__pyx_n_u_PICO_8, __pyx_k_PICO_8, sizeof(__pyx_k_PICO_8), 0, 1, 0, 1},
    {&__pyx_n_s_PICO_8_CUSTOM, __pyx_k_PICO_8_CUSTOM, sizeof(__pyx_k_PICO_8_CUSTOM), 0, 0, 1, 1},
    {&__pyx_n_u_PICO_8_CUSTOM, __pyx_k_PICO_8_CUSTOM, sizeof(__pyx_k_PICO_8_CUSTOM), 0, 1, 0, 1},
    {&__pyx_n_s_PICO_8_CUSTOM_NORMALIZED, __pyx_k_PICO_8_CUSTOM_NORMALIZED, sizeof(__pyx_k_PICO_8_CUSTOM_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_PICO_8_NORMALIZED, __pyx_k_PICO_8_NORMALIZED, sizeof(__pyx_k_PICO_8_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_u_PYGAME_HIDE_SUPPORT_PROMPT, __pyx_k_PYGAME_HIDE_SUPPORT_PROMPT, sizeof(__pyx_k_PYGAME_HIDE_SUPPORT_PROMPT), 0, 1, 0, 1},
    {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
    {&__pyx_kp_u_Please_ensure_both_arrays_have, __pyx_k_Please_ensure_both_arrays_have, sizeof(__pyx_k_Please_ensure_both_arrays_have), 0, 1, 0, 0},
    {&__pyx_kp_u_Please_ensure_you_pass_a_valid, __pyx_k_Please_ensure_you_pass_a_valid, sizeof(__pyx_k_Please_ensure_you_pass_a_valid), 0, 1, 0, 0},
    {&__pyx_kp_u_Please_pass_a_numpy_array_for_t, __pyx_k_Please_pass_a_numpy_array_for_t, sizeof(__pyx_k_Please_pass_a_numpy_array_for_t), 0, 1, 0, 0},
    {&__pyx_kp_u_Please_provide_a_numpy_array_co, __pyx_k_Please_provide_a_numpy_array_co, sizeof(__pyx_k_Please_provide_a_numpy_array_co), 0, 1, 0, 0},
    {&__pyx_n_s_PygameShader_config, __pyx_k_PygameShader_config, sizeof(__pyx_k_PygameShader_config), 0, 0, 1, 1},
    {&__pyx_kp_u_Pygame_library_is_missing_on_yo, __pyx_k_Pygame_library_is_missing_on_yo, sizeof(__pyx_k_Pygame_library_is_missing_on_yo), 0, 1, 0, 0},
    {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
    {&__pyx_n_s_RuntimeWarning, __pyx_k_RuntimeWarning, sizeof(__pyx_k_RuntimeWarning), 0, 0, 1, 1},
    {&__pyx_n_s_SILVER, __pyx_k_SILVER, sizeof(__pyx_k_SILVER), 0, 0, 1, 1},
    {&__pyx_n_u_SILVER, __pyx_k_SILVER, sizeof(__pyx_k_SILVER), 0, 1, 0, 1},
    {&__pyx_n_s_SILVER_NORMALIZED, __pyx_k_SILVER_NORMALIZED, sizeof(__pyx_k_SILVER_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_Sequence, __pyx_k_Sequence, sizeof(__pyx_k_Sequence), 0, 0, 1, 1},
    {&__pyx_kp_s_Step_may_not_be_zero_axis_d, __pyx_k_Step_may_not_be_zero_axis_d, sizeof(__pyx_k_Step_may_not_be_zero_axis_d), 0, 0, 1, 0},
    {&__pyx_n_s_Surface, __pyx_k_Surface, sizeof(__pyx_k_Surface), 0, 0, 1, 1},
    {&__pyx_n_s_TELETEXT, __pyx_k_TELETEXT, sizeof(__pyx_k_TELETEXT), 0, 0, 1, 1},
    {&__pyx_n_u_TELETEXT, __pyx_k_TELETEXT, sizeof(__pyx_k_TELETEXT), 0, 1, 0, 1},
    {&__pyx_n_s_TELETEXT_NORMALIZED, __pyx_k_TELETEXT_NORMALIZED, sizeof(__pyx_k_TELETEXT_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_THREAD_NUMBER, __pyx_k_THREAD_NUMBER, sizeof(__pyx_k_THREAD_NUMBER), 0, 0, 1, 1},
    {&__pyx_n_s_TO7, __pyx_k_TO7, sizeof(__pyx_k_TO7), 0, 0, 1, 1},
    {&__pyx_n_u_TO7, __pyx_k_TO7, sizeof(__pyx_k_TO7), 0, 1, 0, 1},
    {&__pyx_n_s_TO7_NORMALIZED, __pyx_k_TO7_NORMALIZED, sizeof(__pyx_k_TO7_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_TWILIOQUEST76, __pyx_k_TWILIOQUEST76, sizeof(__pyx_k_TWILIOQUEST76), 0, 0, 1, 1},
    {&__pyx_n_u_TWILIOQUEST76, __pyx_k_TWILIOQUEST76, sizeof(__pyx_k_TWILIOQUEST76), 0, 1, 0, 1},
    {&__pyx_n_s_TWILIOQUEST76_NORMALIZED, __pyx_k_TWILIOQUEST76_NORMALIZED, sizeof(__pyx_k_TWILIOQUEST76_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_kp_u_The_Amstrad_CPC_464_664_6128_ser, __pyx_k_The_Amstrad_CPC_464_664_6128_ser, sizeof(__pyx_k_The_Amstrad_CPC_464_664_6128_ser), 0, 1, 0, 0},
    {&__pyx_kp_u_The_Apple_II_series_features_a_1, __pyx_k_The_Apple_II_series_features_a_1, sizeof(__pyx_k_The_Apple_II_series_features_a_1), 0, 1, 0, 0},
    {&__pyx_kp_u_The_Color_Graphics_Adapter_CGA_o, __pyx_k_The_Color_Graphics_Adapter_CGA_o, sizeof(__pyx_k_The_Color_Graphics_Adapter_CGA_o), 0, 1, 0, 0},
    {&__pyx_kp_u_The_Commodore_64_has_two_graphic, __pyx_k_The_Commodore_64_has_two_graphic, sizeof(__pyx_k_The_Commodore_64_has_two_graphic), 0, 1, 0, 0},
    {&__pyx_kp_u_The_MSX_series_has_two_graphic_m, __pyx_k_The_MSX_series_has_two_graphic_m, sizeof(__pyx_k_The_MSX_series_has_two_graphic_m), 0, 1, 0, 0},
    {&__pyx_kp_u_The_ZX_Spectrum_and_compatible_c, __pyx_k_The_ZX_Spectrum_and_compatible_c, sizeof(__pyx_k_The_ZX_Spectrum_and_compatible_c), 0, 1, 0, 0},
    {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
    {&__pyx_kp_s_Unable_to_convert_item_to_object, __pyx_k_Unable_to_convert_item_to_object, sizeof(__pyx_k_Unable_to_convert_item_to_object), 0, 0, 1, 0},
    {&__pyx_n_s_VERSION, __pyx_k_VERSION, sizeof(__pyx_k_VERSION), 0, 0, 1, 1},
    {&__pyx_n_s_VINIK24, __pyx_k_VINIK24, sizeof(__pyx_k_VINIK24), 0, 0, 1, 1},
    {&__pyx_n_u_VINIK24, __pyx_k_VINIK24, sizeof(__pyx_k_VINIK24), 0, 1, 0, 1},
    {&__pyx_n_s_VINIK24_NORMALIZED, __pyx_k_VINIK24_NORMALIZED, sizeof(__pyx_k_VINIK24_NORMALIZED), 0, 0, 1, 1},
    {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
    {&__pyx_n_s_View_MemoryView, __pyx_k_View_MemoryView, sizeof(__pyx_k_View_MemoryView), 0, 0, 1, 1},
    {&__pyx_kp_u_World_System_Teletext_Level_1_19, __pyx_k_World_System_Teletext_Level_1_19, sizeof(__pyx_k_World_System_Teletext_Level_1_19), 0, 1, 0, 0},
    {&__pyx_n_s_ZX_SPECTRUM_HIGH, __pyx_k_ZX_SPECTRUM_HIGH, sizeof(__pyx_k_ZX_SPECTRUM_HIGH), 0, 0, 1, 1},
    {&__pyx_n_u_ZX_SPECTRUM_HIGH, __pyx_k_ZX_SPECTRUM_HIGH, sizeof(__pyx_k_ZX_SPECTRUM_HIGH), 0, 1, 0, 1},
    {&__pyx_n_s_ZX_SPECTRUM_LOW, __pyx_k_ZX_SPECTRUM_LOW, sizeof(__pyx_k_ZX_SPECTRUM_LOW), 0, 0, 1, 1},
    {&__pyx_n_u_ZX_SPECTRUM_LOW, __pyx_k_ZX_SPECTRUM_LOW, sizeof(__pyx_k_ZX_SPECTRUM_LOW), 0, 1, 0, 1},
    {&__pyx_n_s_ZX_SPECTRUM_NORMALIZED_HIGH, __pyx_k_ZX_SPECTRUM_NORMALIZED_HIGH, sizeof(__pyx_k_ZX_SPECTRUM_NORMALIZED_HIGH), 0, 0, 1, 1},
    {&__pyx_n_s_ZX_SPECTRUM_NORMALIZED_LOW, __pyx_k_ZX_SPECTRUM_NORMALIZED_LOW, sizeof(__pyx_k_ZX_SPECTRUM_NORMALIZED_LOW), 0, 0, 1, 1},
    {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
    {&__pyx_kp_u__2, __pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0, 0},
    {&__pyx_n_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 1},
    {&__pyx_n_s__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 0, 1, 1},
    {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
    {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
    {&__pyx_n_s_abc, __pyx_k_abc, sizeof(__pyx_k_abc), 0, 0, 1, 1},
    {&__pyx_n_s_allocate_buffer, __pyx_k_allocate_buffer, sizeof(__pyx_k_allocate_buffer), 0, 0, 1, 1},
    {&__pyx_kp_u_and, __pyx_k_and, sizeof(__pyx_k_and), 0, 1, 0, 0},
    {&__pyx_kp_u_and_color_palette_dtype, __pyx_k_and_color_palette_dtype, sizeof(__pyx_k_and_color_palette_dtype), 0, 1, 0, 0},
    {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
    {&__pyx_n_s_array3d, __pyx_k_array3d, sizeof(__pyx_k_array3d), 0, 0, 1, 1},
    {&__pyx_n_s_array_alpha, __pyx_k_array_alpha, sizeof(__pyx_k_array_alpha), 0, 0, 1, 1},
    {&__pyx_n_s_asarray, __pyx_k_asarray, sizeof(__pyx_k_asarray), 0, 0, 1, 1},
    {&__pyx_n_s_ascontiguousarray, __pyx_k_ascontiguousarray, sizeof(__pyx_k_ascontiguousarray), 0, 0, 1, 1},
    {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
    {&__pyx_n_s_blit_array, __pyx_k_blit_array, sizeof(__pyx_k_blit_array), 0, 0, 1, 1},
    {&__pyx_n_s_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 0, 1, 1},
    {&__pyx_n_u_c, __pyx_k_c, sizeof(__pyx_k_c), 0, 1, 0, 1},
    {&__pyx_n_s_category, __pyx_k_category, sizeof(__pyx_k_category), 0, 0, 1, 1},
    {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
    {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
    {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
    {&__pyx_n_s_collections, __pyx_k_collections, sizeof(__pyx_k_collections), 0, 0, 1, 1},
    {&__pyx_kp_s_collections_abc, __pyx_k_collections_abc, sizeof(__pyx_k_collections_abc), 0, 0, 1, 0},
    {&__pyx_n_s_color_palette, __pyx_k_color_palette, sizeof(__pyx_k_color_palette), 0, 0, 1, 1},
    {&__pyx_kp_s_contiguous_and_direct, __pyx_k_contiguous_and_direct, sizeof(__pyx_k_contiguous_and_direct), 0, 0, 1, 0},
    {&__pyx_kp_s_contiguous_and_indirect, __pyx_k_contiguous_and_indirect, sizeof(__pyx_k_contiguous_and_indirect), 0, 0, 1, 0},
    {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
    {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
    {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
    {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
    {&__pyx_n_s_dtype_is_object, __pyx_k_dtype_is_object, sizeof(__pyx_k_dtype_is_object), 0, 0, 1, 1},
    {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
    {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
    {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
    {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
    {&__pyx_n_s_environ, __pyx_k_environ, sizeof(__pyx_k_environ), 0, 0, 1, 1},
    {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
    {&__pyx_n_s_fh, __pyx_k_fh, sizeof(__pyx_k_fh), 0, 0, 1, 1},
    {&__pyx_n_s_filterwarnings, __pyx_k_filterwarnings, sizeof(__pyx_k_filterwarnings), 0, 0, 1, 1},
    {&__pyx_n_s_fl, __pyx_k_fl, sizeof(__pyx_k_fl), 0, 0, 1, 1},
    {&__pyx_n_s_flags, __pyx_k_flags, sizeof(__pyx_k_flags), 0, 0, 1, 1},
    {&__pyx_n_s_float32, __pyx_k_float32, sizeof(__pyx_k_float32), 0, 0, 1, 1},
    {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
    {&__pyx_n_s_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 0, 1, 1},
    {&__pyx_n_u_fortran, __pyx_k_fortran, sizeof(__pyx_k_fortran), 0, 1, 0, 1},
    {&__pyx_n_s_fs, __pyx_k_fs, sizeof(__pyx_k_fs), 0, 0, 1, 1},
    {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
    {&__pyx_n_s_get_view, __pyx_k_get_view, sizeof(__pyx_k_get_view), 0, 0, 1, 1},
    {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
    {&__pyx_kp_u_got, __pyx_k_got, sizeof(__pyx_k_got), 0, 1, 0, 0},
    {&__pyx_kp_u_got_differing_extents_in_dimensi, __pyx_k_got_differing_extents_in_dimensi, sizeof(__pyx_k_got_differing_extents_in_dimensi), 0, 1, 0, 0},
    {&__pyx_n_u_hide, __pyx_k_hide, sizeof(__pyx_k_hide), 0, 1, 0, 1},
    {&__pyx_kp_u_https_lospec_com_palette_list_lo, __pyx_k_https_lospec_com_palette_list_lo, sizeof(__pyx_k_https_lospec_com_palette_list_lo), 0, 1, 0, 0},
    {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
    {&__pyx_n_u_ignore, __pyx_k_ignore, sizeof(__pyx_k_ignore), 0, 1, 0, 1},
    {&__pyx_n_s_image_surface, __pyx_k_image_surface, sizeof(__pyx_k_image_surface), 0, 0, 1, 1},
    {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
    {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
    {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
    {&__pyx_n_s_int32, __pyx_k_int32, sizeof(__pyx_k_int32), 0, 0, 1, 1},
    {&__pyx_n_s_int8, __pyx_k_int8, sizeof(__pyx_k_int8), 0, 0, 1, 1},
    {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
    {&__pyx_n_s_itemsize, __pyx_k_itemsize, sizeof(__pyx_k_itemsize), 0, 0, 1, 1},
    {&__pyx_kp_s_itemsize_0_for_cython_array, __pyx_k_itemsize_0_for_cython_array, sizeof(__pyx_k_itemsize_0_for_cython_array), 0, 0, 1, 0},
    {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
    {&__pyx_n_s_make_surface, __pyx_k_make_surface, sizeof(__pyx_k_make_surface), 0, 0, 1, 1},
    {&__pyx_n_s_memview, __pyx_k_memview, sizeof(__pyx_k_memview), 0, 0, 1, 1},
    {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
    {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
    {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
    {&__pyx_n_s_ndarray, __pyx_k_ndarray, sizeof(__pyx_k_ndarray), 0, 0, 1, 1},
    {&__pyx_n_s_ndim, __pyx_k_ndim, sizeof(__pyx_k_ndim), 0, 0, 1, 1},
    {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
    {&__pyx_kp_s_no_default___reduce___due_to_non, __pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 0, 1, 0},
    {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
    {&__pyx_kp_u_numpy__core_multiarray_failed_to, __pyx_k_numpy__core_multiarray_failed_to, sizeof(__pyx_k_numpy__core_multiarray_failed_to), 0, 1, 0, 0},
    {&__pyx_kp_u_numpy__core_umath_failed_to_impo, __pyx_k_numpy__core_umath_failed_to_impo, sizeof(__pyx_k_numpy__core_umath_failed_to_impo), 0, 1, 0, 0},
    {&__pyx_kp_u_numpy_library_is_missing_on_you, __pyx_k_numpy_library_is_missing_on_you, sizeof(__pyx_k_numpy_library_is_missing_on_you), 0, 1, 0, 0},
    {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
    {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
    {&__pyx_n_s_pack, __pyx_k_pack, sizeof(__pyx_k_pack), 0, 0, 1, 1},
    {&__pyx_n_s_palette_c, __pyx_k_palette_c, sizeof(__pyx_k_palette_c), 0, 0, 1, 1},
    {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
    {&__pyx_n_s_pixels3d, __pyx_k_pixels3d, sizeof(__pyx_k_pixels3d), 0, 0, 1, 1},
    {&__pyx_n_s_pixels_alpha, __pyx_k_pixels_alpha, sizeof(__pyx_k_pixels_alpha), 0, 0, 1, 1},
    {&__pyx_n_s_pygame, __pyx_k_pygame, sizeof(__pyx_k_pygame), 0, 0, 1, 1},
    {&__pyx_n_s_pygame_surfarray, __pyx_k_pygame_surfarray, sizeof(__pyx_k_pygame_surfarray), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_unpickle_Enum, __pyx_k_pyx_unpickle_Enum, sizeof(__pyx_k_pyx_unpickle_Enum), 0, 0, 1, 1},
    {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
    {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
    {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
    {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
    {&__pyx_n_s_register, __pyx_k_register, sizeof(__pyx_k_register), 0, 0, 1, 1},
    {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
    {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
    {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
    {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
    {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
    {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
    {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
    {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
    {&__pyx_kp_s_strided_and_direct, __pyx_k_strided_and_direct, sizeof(__pyx_k_strided_and_direct), 0, 0, 1, 0},
    {&__pyx_kp_s_strided_and_direct_or_indirect, __pyx_k_strided_and_direct_or_indirect, sizeof(__pyx_k_strided_and_direct_or_indirect), 0, 0, 1, 0},
    {&__pyx_kp_s_strided_and_indirect, __pyx_k_strided_and_indirect, sizeof(__pyx_k_strided_and_indirect), 0, 0, 1, 0},
    {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
    {&__pyx_n_s_struct, __pyx_k_struct, sizeof(__pyx_k_struct), 0, 0, 1, 1},
    {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
    {&__pyx_n_s_temp_buffer, __pyx_k_temp_buffer, sizeof(__pyx_k_temp_buffer), 0, 0, 1, 1},
    {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
    {&__pyx_n_s_uint32, __pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 0, 1, 1},
    {&__pyx_n_s_uint8, __pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 0, 1, 1},
    {&__pyx_kp_s_unable_to_allocate_array_data, __pyx_k_unable_to_allocate_array_data, sizeof(__pyx_k_unable_to_allocate_array_data), 0, 0, 1, 0},
    {&__pyx_kp_s_unable_to_allocate_shape_and_str, __pyx_k_unable_to_allocate_shape_and_str, sizeof(__pyx_k_unable_to_allocate_shape_and_str), 0, 0, 1, 0},
    {&__pyx_n_s_unpack, __pyx_k_unpack, sizeof(__pyx_k_unpack), 0, 0, 1, 1},
    {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
    {&__pyx_n_s_version_info, __pyx_k_version_info, sizeof(__pyx_k_version_info), 0, 0, 1, 1},
    {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
    {&__pyx_kp_u_while_the_temp_buffer_array_has, __pyx_k_while_the_temp_buffer_array_has, sizeof(__pyx_k_while_the_temp_buffer_array_has), 0, 1, 0, 0},
    {&__pyx_n_s_width, __pyx_k_width, sizeof(__pyx_k_width), 0, 0, 1, 1},
    {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
    {0, 0, 0, 0, 0, 0, 0}
  };
  return __Pyx_InitStrings(__pyx_string_tab);
}
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_FutureWarning = __Pyx_GetBuiltinName(__pyx_n_s_FutureWarning); if (!__pyx_builtin_FutureWarning) __PYX_ERR(0, 39, __pyx_L1_error)
  __pyx_builtin_RuntimeWarning = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeWarning); if (!__pyx_builtin_RuntimeWarning) __PYX_ERR(0, 40, __pyx_L1_error)
  __pyx_builtin_ImportWarning = __Pyx_GetBuiltinName(__pyx_n_s_ImportWarning); if (!__pyx_builtin_ImportWarning) __PYX_ERR(0, 41, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(1, 44, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 1340, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(1, 1366, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 1477, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(1, 1626, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(1, 1741, __pyx_L1_error)
  __pyx_builtin___import__ = __Pyx_GetBuiltinName(__pyx_n_s_import); if (!__pyx_builtin___import__) __PYX_ERR(2, 100, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_n_s_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(2, 156, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(2, 159, __pyx_L1_error)
  __pyx_builtin_Ellipsis = __Pyx_GetBuiltinName(__pyx_n_s_Ellipsis); if (!__pyx_builtin_Ellipsis) __PYX_ERR(2, 408, __pyx_L1_error)
  __pyx_builtin_id = __Pyx_GetBuiltinName(__pyx_n_s_id); if (!__pyx_builtin_id) __PYX_ERR(2, 618, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(2, 914, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "View.MemoryView":582
 *     def suboffsets(self):
 *         if self.view.suboffsets == NULL:
 *             return (-1,) * self.view.ndim             # <<<<<<<<<<<<<<
 * 
 *         return tuple([suboffset for suboffset in self.view.suboffsets[:self.view.ndim]])
 */
  __pyx_tuple__4 = PyTuple_New(1); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(2, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_INCREF(__pyx_int_neg_1);
  __Pyx_GIVEREF(__pyx_int_neg_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_tuple__4, 0, __pyx_int_neg_1)) __PYX_ERR(2, 582, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "View.MemoryView":679
 *     tup = <tuple>index if isinstance(index, tuple) else (index,)
 * 
 *     result = [slice(None)] * ndim             # <<<<<<<<<<<<<<
 *     have_slices = False
 *     seen_ellipsis = False
 */
  __pyx_slice__5 = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice__5)) __PYX_ERR(2, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__5);
  __Pyx_GIVEREF(__pyx_slice__5);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum not in (0x82a3537, 0x6ae9995, 0xb068931):             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (0x%x vs (0x82a3537, 0x6ae9995, 0xb068931) = (name))" % __pyx_checksum
 */
  __pyx_tuple__8 = PyTuple_Pack(3, __pyx_int_136983863, __pyx_int_112105877, __pyx_int_184977713); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(2, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1043
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy._core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_numpy__core_multiarray_failed_to); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(3, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "../../AppData/Roaming/Python/Python313/site-packages/numpy/__init__.cython-30.pxd":1049
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy._core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_u_numpy__core_umath_failed_to_impo); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(3, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "PygameShader/Palette.pyx":1358
 * 
 *     if not temp_buffer.flags[ 'C_CONTIGUOUS' ]:
 *         raise TypeError(             # <<<<<<<<<<<<<<
 *             "Argument 'temp_buffer' must be a contiguous array (C_CONTIGUOUS). "
 *             "This means the memory layout must be contiguous, which is required for optimal performance. "
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_u_Argument_temp_buffer_must_be_a_c); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(1, 1358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "PygameShader/Palette.pyx":1381
 *         rgb_array = image_surface.get_view('3')
 *     except (pygame.error, ValueError):
 *         raise ValueError(             # <<<<<<<<<<<<<<
 *             "Failed to get a valid view from 'rgb_array'. Ensure the surface is a valid "
 *             "Pygame Surface with a compatible format."
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_u_Failed_to_get_a_valid_view_from); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(1, 1381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "PygameShader/Palette.pyx":1707
 * 
 *         if not palette_c.flags['C_CONTIGUOUS']:
 *             raise ValueError("Input palette must be a contiguous array. The given array is not contiguous.")             # <<<<<<<<<<<<<<
 * 
 *         if palette_c.size == 0:
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Input_palette_must_be_a_contiguo); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(1, 1707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "PygameShader/Palette.pyx":1710
 * 
 *         if palette_c.size == 0:
 *             raise ValueError("Input palette is empty. The palette should contain at least one color.")             # <<<<<<<<<<<<<<
 * 
 *     else:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_Input_palette_is_empty_The_palet); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(1, 1710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_n_s_sys); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(2, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(2, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "View.MemoryView":101
 * try:
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence             # <<<<<<<<<<<<<<
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_collections_abc); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(2, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "View.MemoryView":103
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence             # <<<<<<<<<<<<<<
 * except:
 * 
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_n_s_collections); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(2, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "View.MemoryView":309
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct_or_indirect); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(2, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "View.MemoryView":310
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_strided_and_direct); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(2, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "View.MemoryView":311
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_strided_and_indirect); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(2, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "View.MemoryView":314
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_direct); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(2, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "View.MemoryView":315
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_contiguous_and_indirect); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(2, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__25 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_Enum, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(2, 1, __pyx_L1_error)

  /* "PygameShader/Palette.pyx":33
 * import warnings
 * 
 * warnings.filterwarnings("ignore", category=FutureWarning)             # <<<<<<<<<<<<<<
 * warnings.filterwarnings("ignore", category=RuntimeWarning)
 * warnings.filterwarnings("ignore", category=ImportWarning)
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_n_u_ignore); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "PygameShader/Palette.pyx":56
 * 
 * except ImportError:
 *     raise ImportError("\n<Pygame> library is missing on your system."             # <<<<<<<<<<<<<<
 *           "\nTry: \n   C:\\pip install pygame on a window command prompt.")
 * 
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_u_Pygame_library_is_missing_on_yo); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(1, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "PygameShader/Palette.pyx":63
 *         ascontiguousarray, zeros, uint32, int32, int8, array, ndarray
 * except ImportError:
 *     raise ImportError("\n<numpy> library is missing on your system."             # <<<<<<<<<<<<<<
 *           "\nTry: \n   C:\\pip install numpy on a window command prompt.")
 * 
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_numpy_library_is_missing_on_you); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(1, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitConstants(void) {
  if (__Pyx_CreateStringTabAndInitStrings() < 0) __PYX_ERR(1, 1, __pyx_L1_error);
  __pyx_float_0_ = PyFloat_FromDouble(0.); if (unlikely(!__pyx_float_0_)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_1_ = PyFloat_FromDouble(1.); if (unlikely(!__pyx_float_1_)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2 = PyFloat_FromDouble(0.2); if (unlikely(!__pyx_float_0_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4 = PyFloat_FromDouble(0.4); if (unlikely(!__pyx_float_0_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6 = PyFloat_FromDouble(0.6); if (unlikely(!__pyx_float_0_6)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8 = PyFloat_FromDouble(0.8); if (unlikely(!__pyx_float_0_8)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6666 = PyFloat_FromDouble(0.6666); if (unlikely(!__pyx_float_0_6666)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_66666 = PyFloat_FromDouble(0.66666); if (unlikely(!__pyx_float_0_66666)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_0745098 = PyFloat_FromDouble(0.0745098); if (unlikely(!__pyx_float_0_0745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8627451 = PyFloat_FromDouble(0.8627451); if (unlikely(!__pyx_float_0_8627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_00392157 = PyFloat_FromDouble(0.00392157); if (unlikely(!__pyx_float_0_00392157)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_00784314 = PyFloat_FromDouble(0.00784314); if (unlikely(!__pyx_float_0_00784314)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_01176471 = PyFloat_FromDouble(0.01176471); if (unlikely(!__pyx_float_0_01176471)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_01568627 = PyFloat_FromDouble(0.01568627); if (unlikely(!__pyx_float_0_01568627)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_04705882 = PyFloat_FromDouble(0.04705882); if (unlikely(!__pyx_float_0_04705882)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_09803922 = PyFloat_FromDouble(0.09803922); if (unlikely(!__pyx_float_0_09803922)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_14509804 = PyFloat_FromDouble(0.14509804); if (unlikely(!__pyx_float_0_14509804)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_15686275 = PyFloat_FromDouble(0.15686275); if (unlikely(!__pyx_float_0_15686275)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_17254902 = PyFloat_FromDouble(0.17254902); if (unlikely(!__pyx_float_0_17254902)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_19607843 = PyFloat_FromDouble(0.19607843); if (unlikely(!__pyx_float_0_19607843)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_21960784 = PyFloat_FromDouble(0.21960784); if (unlikely(!__pyx_float_0_21960784)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_22352941 = PyFloat_FromDouble(0.22352941); if (unlikely(!__pyx_float_0_22352941)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_25098039 = PyFloat_FromDouble(0.25098039); if (unlikely(!__pyx_float_0_25098039)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_47843137 = PyFloat_FromDouble(0.47843137); if (unlikely(!__pyx_float_0_47843137)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_48235294 = PyFloat_FromDouble(0.48235294); if (unlikely(!__pyx_float_0_48235294)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_50196078 = PyFloat_FromDouble(0.50196078); if (unlikely(!__pyx_float_0_50196078)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_62745098 = PyFloat_FromDouble(0.62745098); if (unlikely(!__pyx_float_0_62745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_64313725 = PyFloat_FromDouble(0.64313725); if (unlikely(!__pyx_float_0_64313725)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_65098039 = PyFloat_FromDouble(0.65098039); if (unlikely(!__pyx_float_0_65098039)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_69019608 = PyFloat_FromDouble(0.69019608); if (unlikely(!__pyx_float_0_69019608)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_74117647 = PyFloat_FromDouble(0.74117647); if (unlikely(!__pyx_float_0_74117647)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_75294118 = PyFloat_FromDouble(0.75294118); if (unlikely(!__pyx_float_0_75294118)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_79215686 = PyFloat_FromDouble(0.79215686); if (unlikely(!__pyx_float_0_79215686)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_94117647 = PyFloat_FromDouble(0.94117647); if (unlikely(!__pyx_float_0_94117647)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_97647059 = PyFloat_FromDouble(0.97647059); if (unlikely(!__pyx_float_0_97647059)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_98039216 = PyFloat_FromDouble(0.98039216); if (unlikely(!__pyx_float_0_98039216)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_98431373 = PyFloat_FromDouble(0.98431373); if (unlikely(!__pyx_float_0_98431373)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_98823529 = PyFloat_FromDouble(0.98823529); if (unlikely(!__pyx_float_0_98823529)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_99215686 = PyFloat_FromDouble(0.99215686); if (unlikely(!__pyx_float_0_99215686)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_99607843 = PyFloat_FromDouble(0.99607843); if (unlikely(!__pyx_float_0_99607843)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_396078431372549 = PyFloat_FromDouble(0.396078431372549); if (unlikely(!__pyx_float_0_396078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_403921568627451 = PyFloat_FromDouble(0.403921568627451); if (unlikely(!__pyx_float_0_403921568627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_592156862745098 = PyFloat_FromDouble(0.592156862745098); if (unlikely(!__pyx_float_0_592156862745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_596078431372549 = PyFloat_FromDouble(0.596078431372549); if (unlikely(!__pyx_float_0_596078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_611764705882353 = PyFloat_FromDouble(0.611764705882353); if (unlikely(!__pyx_float_0_611764705882353)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_615686274509804 = PyFloat_FromDouble(0.615686274509804); if (unlikely(!__pyx_float_0_615686274509804)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_788235294117647 = PyFloat_FromDouble(0.788235294117647); if (unlikely(!__pyx_float_0_788235294117647)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_792156862745098 = PyFloat_FromDouble(0.792156862745098); if (unlikely(!__pyx_float_0_792156862745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_796078431372549 = PyFloat_FromDouble(0.796078431372549); if (unlikely(!__pyx_float_0_796078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_803921568627451 = PyFloat_FromDouble(0.803921568627451); if (unlikely(!__pyx_float_0_803921568627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_807843137254902 = PyFloat_FromDouble(0.807843137254902); if (unlikely(!__pyx_float_0_807843137254902)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_984313725490196 = PyFloat_FromDouble(0.984313725490196); if (unlikely(!__pyx_float_0_984313725490196)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_996078431372549 = PyFloat_FromDouble(0.996078431372549); if (unlikely(!__pyx_float_0_996078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_0196078431372549 = PyFloat_FromDouble(0.0196078431372549); if (unlikely(!__pyx_float_0_0196078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_0392156862745098 = PyFloat_FromDouble(0.0392156862745098); if (unlikely(!__pyx_float_0_0392156862745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_0784313725490196 = PyFloat_FromDouble(0.0784313725490196); if (unlikely(!__pyx_float_0_0784313725490196)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1411764705882353 = PyFloat_FromDouble(0.1411764705882353); if (unlikely(!__pyx_float_0_1411764705882353)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1450980392156863 = PyFloat_FromDouble(0.1450980392156863); if (unlikely(!__pyx_float_0_1450980392156863)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1568627450980392 = PyFloat_FromDouble(0.1568627450980392); if (unlikely(!__pyx_float_0_1568627450980392)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1607843137254902 = PyFloat_FromDouble(0.1607843137254902); if (unlikely(!__pyx_float_0_1607843137254902)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1803921568627451 = PyFloat_FromDouble(0.1803921568627451); if (unlikely(!__pyx_float_0_1803921568627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_1843137254901961 = PyFloat_FromDouble(0.1843137254901961); if (unlikely(!__pyx_float_0_1843137254901961)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2196078431372549 = PyFloat_FromDouble(0.2196078431372549); if (unlikely(!__pyx_float_0_2196078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2235294117647059 = PyFloat_FromDouble(0.2235294117647059); if (unlikely(!__pyx_float_0_2235294117647059)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2549019607843137 = PyFloat_FromDouble(0.2549019607843137); if (unlikely(!__pyx_float_0_2549019607843137)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2627450980392157 = PyFloat_FromDouble(0.2627450980392157); if (unlikely(!__pyx_float_0_2627450980392157)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2784313725490196 = PyFloat_FromDouble(0.2784313725490196); if (unlikely(!__pyx_float_0_2784313725490196)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2823529411764706 = PyFloat_FromDouble(0.2823529411764706); if (unlikely(!__pyx_float_0_2823529411764706)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2901960784313726 = PyFloat_FromDouble(0.2901960784313726); if (unlikely(!__pyx_float_0_2901960784313726)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_2980392156862745 = PyFloat_FromDouble(0.2980392156862745); if (unlikely(!__pyx_float_0_2980392156862745)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3058823529411765 = PyFloat_FromDouble(0.3058823529411765); if (unlikely(!__pyx_float_0_3058823529411765)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3137254901960784 = PyFloat_FromDouble(0.3137254901960784); if (unlikely(!__pyx_float_0_3137254901960784)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3176470588235294 = PyFloat_FromDouble(0.3176470588235294); if (unlikely(!__pyx_float_0_3176470588235294)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3215686274509804 = PyFloat_FromDouble(0.3215686274509804); if (unlikely(!__pyx_float_0_3215686274509804)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3254901960784314 = PyFloat_FromDouble(0.3254901960784314); if (unlikely(!__pyx_float_0_3254901960784314)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3333333333333333 = PyFloat_FromDouble(0.3333333333333333); if (unlikely(!__pyx_float_0_3333333333333333)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3411764705882353 = PyFloat_FromDouble(0.3411764705882353); if (unlikely(!__pyx_float_0_3411764705882353)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3568627450980392 = PyFloat_FromDouble(0.3568627450980392); if (unlikely(!__pyx_float_0_3568627450980392)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3607843137254902 = PyFloat_FromDouble(0.3607843137254902); if (unlikely(!__pyx_float_0_3607843137254902)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3686274509803922 = PyFloat_FromDouble(0.3686274509803922); if (unlikely(!__pyx_float_0_3686274509803922)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3764705882352941 = PyFloat_FromDouble(0.3764705882352941); if (unlikely(!__pyx_float_0_3764705882352941)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3803921568627451 = PyFloat_FromDouble(0.3803921568627451); if (unlikely(!__pyx_float_0_3803921568627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_3843137254901961 = PyFloat_FromDouble(0.3843137254901961); if (unlikely(!__pyx_float_0_3843137254901961)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4117647058823529 = PyFloat_FromDouble(0.4117647058823529); if (unlikely(!__pyx_float_0_4117647058823529)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4196078431372549 = PyFloat_FromDouble(0.4196078431372549); if (unlikely(!__pyx_float_0_4196078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4235294117647059 = PyFloat_FromDouble(0.4235294117647059); if (unlikely(!__pyx_float_0_4235294117647059)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4392156862745098 = PyFloat_FromDouble(0.4392156862745098); if (unlikely(!__pyx_float_0_4392156862745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4470588235294118 = PyFloat_FromDouble(0.4470588235294118); if (unlikely(!__pyx_float_0_4470588235294118)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4549019607843137 = PyFloat_FromDouble(0.4549019607843137); if (unlikely(!__pyx_float_0_4549019607843137)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4588235294117647 = PyFloat_FromDouble(0.4588235294117647); if (unlikely(!__pyx_float_0_4588235294117647)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4627450980392157 = PyFloat_FromDouble(0.4627450980392157); if (unlikely(!__pyx_float_0_4627450980392157)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4666666666666667 = PyFloat_FromDouble(0.4666666666666667); if (unlikely(!__pyx_float_0_4666666666666667)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4745098039215686 = PyFloat_FromDouble(0.4745098039215686); if (unlikely(!__pyx_float_0_4745098039215686)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4823529411764706 = PyFloat_FromDouble(0.4823529411764706); if (unlikely(!__pyx_float_0_4823529411764706)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_4980392156862745 = PyFloat_FromDouble(0.4980392156862745); if (unlikely(!__pyx_float_0_4980392156862745)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5019607843137255 = PyFloat_FromDouble(0.5019607843137255); if (unlikely(!__pyx_float_0_5019607843137255)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5058823529411764 = PyFloat_FromDouble(0.5058823529411764); if (unlikely(!__pyx_float_0_5058823529411764)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5098039215686274 = PyFloat_FromDouble(0.5098039215686274); if (unlikely(!__pyx_float_0_5098039215686274)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5137254901960784 = PyFloat_FromDouble(0.5137254901960784); if (unlikely(!__pyx_float_0_5137254901960784)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5176470588235295 = PyFloat_FromDouble(0.5176470588235295); if (unlikely(!__pyx_float_0_5176470588235295)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5215686274509804 = PyFloat_FromDouble(0.5215686274509804); if (unlikely(!__pyx_float_0_5215686274509804)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5254901960784314 = PyFloat_FromDouble(0.5254901960784314); if (unlikely(!__pyx_float_0_5254901960784314)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5294117647058824 = PyFloat_FromDouble(0.5294117647058824); if (unlikely(!__pyx_float_0_5294117647058824)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5333333333333333 = PyFloat_FromDouble(0.5333333333333333); if (unlikely(!__pyx_float_0_5333333333333333)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5372549019607843 = PyFloat_FromDouble(0.5372549019607843); if (unlikely(!__pyx_float_0_5372549019607843)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5411764705882353 = PyFloat_FromDouble(0.5411764705882353); if (unlikely(!__pyx_float_0_5411764705882353)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5450980392156862 = PyFloat_FromDouble(0.5450980392156862); if (unlikely(!__pyx_float_0_5450980392156862)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5490196078431373 = PyFloat_FromDouble(0.5490196078431373); if (unlikely(!__pyx_float_0_5490196078431373)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5529411764705883 = PyFloat_FromDouble(0.5529411764705883); if (unlikely(!__pyx_float_0_5529411764705883)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5568627450980392 = PyFloat_FromDouble(0.5568627450980392); if (unlikely(!__pyx_float_0_5568627450980392)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5607843137254902 = PyFloat_FromDouble(0.5607843137254902); if (unlikely(!__pyx_float_0_5607843137254902)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5647058823529412 = PyFloat_FromDouble(0.5647058823529412); if (unlikely(!__pyx_float_0_5647058823529412)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5686274509803921 = PyFloat_FromDouble(0.5686274509803921); if (unlikely(!__pyx_float_0_5686274509803921)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5725490196078431 = PyFloat_FromDouble(0.5725490196078431); if (unlikely(!__pyx_float_0_5725490196078431)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5764705882352941 = PyFloat_FromDouble(0.5764705882352941); if (unlikely(!__pyx_float_0_5764705882352941)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5803921568627451 = PyFloat_FromDouble(0.5803921568627451); if (unlikely(!__pyx_float_0_5803921568627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5843137254901961 = PyFloat_FromDouble(0.5843137254901961); if (unlikely(!__pyx_float_0_5843137254901961)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_5882352941176471 = PyFloat_FromDouble(0.5882352941176471); if (unlikely(!__pyx_float_0_5882352941176471)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6039215686274509 = PyFloat_FromDouble(0.6039215686274509); if (unlikely(!__pyx_float_0_6039215686274509)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6078431372549019 = PyFloat_FromDouble(0.6078431372549019); if (unlikely(!__pyx_float_0_6078431372549019)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6196078431372549 = PyFloat_FromDouble(0.6196078431372549); if (unlikely(!__pyx_float_0_6196078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6235294117647059 = PyFloat_FromDouble(0.6235294117647059); if (unlikely(!__pyx_float_0_6235294117647059)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6274509803921569 = PyFloat_FromDouble(0.6274509803921569); if (unlikely(!__pyx_float_0_6274509803921569)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6313725490196078 = PyFloat_FromDouble(0.6313725490196078); if (unlikely(!__pyx_float_0_6313725490196078)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6352941176470588 = PyFloat_FromDouble(0.6352941176470588); if (unlikely(!__pyx_float_0_6352941176470588)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6392156862745098 = PyFloat_FromDouble(0.6392156862745098); if (unlikely(!__pyx_float_0_6392156862745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6431372549019608 = PyFloat_FromDouble(0.6431372549019608); if (unlikely(!__pyx_float_0_6431372549019608)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6470588235294118 = PyFloat_FromDouble(0.6470588235294118); if (unlikely(!__pyx_float_0_6470588235294118)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6509803921568628 = PyFloat_FromDouble(0.6509803921568628); if (unlikely(!__pyx_float_0_6509803921568628)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6549019607843137 = PyFloat_FromDouble(0.6549019607843137); if (unlikely(!__pyx_float_0_6549019607843137)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6588235294117647 = PyFloat_FromDouble(0.6588235294117647); if (unlikely(!__pyx_float_0_6588235294117647)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6627450980392157 = PyFloat_FromDouble(0.6627450980392157); if (unlikely(!__pyx_float_0_6627450980392157)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6666666666666666 = PyFloat_FromDouble(0.6666666666666666); if (unlikely(!__pyx_float_0_6666666666666666)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6705882352941176 = PyFloat_FromDouble(0.6705882352941176); if (unlikely(!__pyx_float_0_6705882352941176)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6745098039215687 = PyFloat_FromDouble(0.6745098039215687); if (unlikely(!__pyx_float_0_6745098039215687)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6784313725490196 = PyFloat_FromDouble(0.6784313725490196); if (unlikely(!__pyx_float_0_6784313725490196)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6823529411764706 = PyFloat_FromDouble(0.6823529411764706); if (unlikely(!__pyx_float_0_6823529411764706)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6862745098039216 = PyFloat_FromDouble(0.6862745098039216); if (unlikely(!__pyx_float_0_6862745098039216)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6901960784313725 = PyFloat_FromDouble(0.6901960784313725); if (unlikely(!__pyx_float_0_6901960784313725)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6941176470588235 = PyFloat_FromDouble(0.6941176470588235); if (unlikely(!__pyx_float_0_6941176470588235)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_6980392156862745 = PyFloat_FromDouble(0.6980392156862745); if (unlikely(!__pyx_float_0_6980392156862745)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7019607843137254 = PyFloat_FromDouble(0.7019607843137254); if (unlikely(!__pyx_float_0_7019607843137254)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7058823529411765 = PyFloat_FromDouble(0.7058823529411765); if (unlikely(!__pyx_float_0_7058823529411765)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7098039215686275 = PyFloat_FromDouble(0.7098039215686275); if (unlikely(!__pyx_float_0_7098039215686275)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7137254901960784 = PyFloat_FromDouble(0.7137254901960784); if (unlikely(!__pyx_float_0_7137254901960784)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7176470588235294 = PyFloat_FromDouble(0.7176470588235294); if (unlikely(!__pyx_float_0_7176470588235294)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7215686274509804 = PyFloat_FromDouble(0.7215686274509804); if (unlikely(!__pyx_float_0_7215686274509804)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7254901960784313 = PyFloat_FromDouble(0.7254901960784313); if (unlikely(!__pyx_float_0_7254901960784313)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7294117647058823 = PyFloat_FromDouble(0.7294117647058823); if (unlikely(!__pyx_float_0_7294117647058823)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7333333333333333 = PyFloat_FromDouble(0.7333333333333333); if (unlikely(!__pyx_float_0_7333333333333333)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7372549019607844 = PyFloat_FromDouble(0.7372549019607844); if (unlikely(!__pyx_float_0_7372549019607844)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7411764705882353 = PyFloat_FromDouble(0.7411764705882353); if (unlikely(!__pyx_float_0_7411764705882353)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7450980392156863 = PyFloat_FromDouble(0.7450980392156863); if (unlikely(!__pyx_float_0_7450980392156863)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7490196078431373 = PyFloat_FromDouble(0.7490196078431373); if (unlikely(!__pyx_float_0_7490196078431373)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7529411764705882 = PyFloat_FromDouble(0.7529411764705882); if (unlikely(!__pyx_float_0_7529411764705882)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7568627450980392 = PyFloat_FromDouble(0.7568627450980392); if (unlikely(!__pyx_float_0_7568627450980392)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7607843137254902 = PyFloat_FromDouble(0.7607843137254902); if (unlikely(!__pyx_float_0_7607843137254902)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7647058823529411 = PyFloat_FromDouble(0.7647058823529411); if (unlikely(!__pyx_float_0_7647058823529411)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7686274509803922 = PyFloat_FromDouble(0.7686274509803922); if (unlikely(!__pyx_float_0_7686274509803922)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7725490196078432 = PyFloat_FromDouble(0.7725490196078432); if (unlikely(!__pyx_float_0_7725490196078432)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7764705882352941 = PyFloat_FromDouble(0.7764705882352941); if (unlikely(!__pyx_float_0_7764705882352941)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7803921568627451 = PyFloat_FromDouble(0.7803921568627451); if (unlikely(!__pyx_float_0_7803921568627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_7843137254901961 = PyFloat_FromDouble(0.7843137254901961); if (unlikely(!__pyx_float_0_7843137254901961)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8117647058823529 = PyFloat_FromDouble(0.8117647058823529); if (unlikely(!__pyx_float_0_8117647058823529)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8156862745098039 = PyFloat_FromDouble(0.8156862745098039); if (unlikely(!__pyx_float_0_8156862745098039)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8196078431372549 = PyFloat_FromDouble(0.8196078431372549); if (unlikely(!__pyx_float_0_8196078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8235294117647058 = PyFloat_FromDouble(0.8235294117647058); if (unlikely(!__pyx_float_0_8235294117647058)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8274509803921568 = PyFloat_FromDouble(0.8274509803921568); if (unlikely(!__pyx_float_0_8274509803921568)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8313725490196079 = PyFloat_FromDouble(0.8313725490196079); if (unlikely(!__pyx_float_0_8313725490196079)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8352941176470589 = PyFloat_FromDouble(0.8352941176470589); if (unlikely(!__pyx_float_0_8352941176470589)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8392156862745098 = PyFloat_FromDouble(0.8392156862745098); if (unlikely(!__pyx_float_0_8392156862745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8431372549019608 = PyFloat_FromDouble(0.8431372549019608); if (unlikely(!__pyx_float_0_8431372549019608)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8470588235294118 = PyFloat_FromDouble(0.8470588235294118); if (unlikely(!__pyx_float_0_8470588235294118)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8549019607843137 = PyFloat_FromDouble(0.8549019607843137); if (unlikely(!__pyx_float_0_8549019607843137)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8588235294117647 = PyFloat_FromDouble(0.8588235294117647); if (unlikely(!__pyx_float_0_8588235294117647)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8627450980392157 = PyFloat_FromDouble(0.8627450980392157); if (unlikely(!__pyx_float_0_8627450980392157)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8666666666666667 = PyFloat_FromDouble(0.8666666666666667); if (unlikely(!__pyx_float_0_8666666666666667)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8705882352941177 = PyFloat_FromDouble(0.8705882352941177); if (unlikely(!__pyx_float_0_8705882352941177)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8745098039215686 = PyFloat_FromDouble(0.8745098039215686); if (unlikely(!__pyx_float_0_8745098039215686)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8784313725490196 = PyFloat_FromDouble(0.8784313725490196); if (unlikely(!__pyx_float_0_8784313725490196)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8823529411764706 = PyFloat_FromDouble(0.8823529411764706); if (unlikely(!__pyx_float_0_8823529411764706)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8862745098039215 = PyFloat_FromDouble(0.8862745098039215); if (unlikely(!__pyx_float_0_8862745098039215)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8901960784313725 = PyFloat_FromDouble(0.8901960784313725); if (unlikely(!__pyx_float_0_8901960784313725)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_8941176470588236 = PyFloat_FromDouble(0.8941176470588236); if (unlikely(!__pyx_float_0_8941176470588236)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9019607843137255 = PyFloat_FromDouble(0.9019607843137255); if (unlikely(!__pyx_float_0_9019607843137255)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9058823529411765 = PyFloat_FromDouble(0.9058823529411765); if (unlikely(!__pyx_float_0_9058823529411765)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9098039215686274 = PyFloat_FromDouble(0.9098039215686274); if (unlikely(!__pyx_float_0_9098039215686274)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9137254901960784 = PyFloat_FromDouble(0.9137254901960784); if (unlikely(!__pyx_float_0_9137254901960784)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9176470588235294 = PyFloat_FromDouble(0.9176470588235294); if (unlikely(!__pyx_float_0_9176470588235294)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9215686274509803 = PyFloat_FromDouble(0.9215686274509803); if (unlikely(!__pyx_float_0_9215686274509803)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9254901960784314 = PyFloat_FromDouble(0.9254901960784314); if (unlikely(!__pyx_float_0_9254901960784314)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9294117647058824 = PyFloat_FromDouble(0.9294117647058824); if (unlikely(!__pyx_float_0_9294117647058824)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9333333333333333 = PyFloat_FromDouble(0.9333333333333333); if (unlikely(!__pyx_float_0_9333333333333333)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9372549019607843 = PyFloat_FromDouble(0.9372549019607843); if (unlikely(!__pyx_float_0_9372549019607843)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9411764705882353 = PyFloat_FromDouble(0.9411764705882353); if (unlikely(!__pyx_float_0_9411764705882353)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9450980392156862 = PyFloat_FromDouble(0.9450980392156862); if (unlikely(!__pyx_float_0_9450980392156862)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9490196078431372 = PyFloat_FromDouble(0.9490196078431372); if (unlikely(!__pyx_float_0_9490196078431372)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9529411764705882 = PyFloat_FromDouble(0.9529411764705882); if (unlikely(!__pyx_float_0_9529411764705882)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9568627450980393 = PyFloat_FromDouble(0.9568627450980393); if (unlikely(!__pyx_float_0_9568627450980393)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9607843137254902 = PyFloat_FromDouble(0.9607843137254902); if (unlikely(!__pyx_float_0_9607843137254902)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9647058823529412 = PyFloat_FromDouble(0.9647058823529412); if (unlikely(!__pyx_float_0_9647058823529412)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9686274509803922 = PyFloat_FromDouble(0.9686274509803922); if (unlikely(!__pyx_float_0_9686274509803922)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9725490196078431 = PyFloat_FromDouble(0.9725490196078431); if (unlikely(!__pyx_float_0_9725490196078431)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9764705882352941 = PyFloat_FromDouble(0.9764705882352941); if (unlikely(!__pyx_float_0_9764705882352941)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9803921568627451 = PyFloat_FromDouble(0.9803921568627451); if (unlikely(!__pyx_float_0_9803921568627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9882352941176471 = PyFloat_FromDouble(0.9882352941176471); if (unlikely(!__pyx_float_0_9882352941176471)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_9921568627450981 = PyFloat_FromDouble(0.9921568627450981); if (unlikely(!__pyx_float_0_9921568627450981)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_00784313725490196 = PyFloat_FromDouble(0.00784313725490196); if (unlikely(!__pyx_float_0_00784313725490196)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_01568627450980392 = PyFloat_FromDouble(0.01568627450980392); if (unlikely(!__pyx_float_0_01568627450980392)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_03137254901960784 = PyFloat_FromDouble(0.03137254901960784); if (unlikely(!__pyx_float_0_03137254901960784)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_03529411764705882 = PyFloat_FromDouble(0.03529411764705882); if (unlikely(!__pyx_float_0_03529411764705882)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_06274509803921569 = PyFloat_FromDouble(0.06274509803921569); if (unlikely(!__pyx_float_0_06274509803921569)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_07058823529411765 = PyFloat_FromDouble(0.07058823529411765); if (unlikely(!__pyx_float_0_07058823529411765)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_07450980392156863 = PyFloat_FromDouble(0.07450980392156863); if (unlikely(!__pyx_float_0_07450980392156863)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_08235294117647059 = PyFloat_FromDouble(0.08235294117647059); if (unlikely(!__pyx_float_0_08235294117647059)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_08627450980392157 = PyFloat_FromDouble(0.08627450980392157); if (unlikely(!__pyx_float_0_08627450980392157)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_09019607843137255 = PyFloat_FromDouble(0.09019607843137255); if (unlikely(!__pyx_float_0_09019607843137255)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_09411764705882353 = PyFloat_FromDouble(0.09411764705882353); if (unlikely(!__pyx_float_0_09411764705882353)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_09803921568627451 = PyFloat_FromDouble(0.09803921568627451); if (unlikely(!__pyx_float_0_09803921568627451)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_10196078431372549 = PyFloat_FromDouble(0.10196078431372549); if (unlikely(!__pyx_float_0_10196078431372549)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_10588235294117647 = PyFloat_FromDouble(0.10588235294117647); if (unlikely(!__pyx_float_0_10588235294117647)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_10980392156862745 = PyFloat_FromDouble(0.10980392156862745); if (unlikely(!__pyx_float_0_10980392156862745)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_11372549019607843 = PyFloat_FromDouble(0.11372549019607843); if (unlikely(!__pyx_float_0_11372549019607843)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_11764705882352941 = PyFloat_FromDouble(0.11764705882352941); if (unlikely(!__pyx_float_0_11764705882352941)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_12156862745098039 = PyFloat_FromDouble(0.12156862745098039); if (unlikely(!__pyx_float_0_12156862745098039)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_12549019607843137 = PyFloat_FromDouble(0.12549019607843137); if (unlikely(!__pyx_float_0_12549019607843137)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_12941176470588237 = PyFloat_FromDouble(0.12941176470588237); if (unlikely(!__pyx_float_0_12941176470588237)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_13333333333333333 = PyFloat_FromDouble(0.13333333333333333); if (unlikely(!__pyx_float_0_13333333333333333)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_13725490196078433 = PyFloat_FromDouble(0.13725490196078433); if (unlikely(!__pyx_float_0_13725490196078433)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_14901960784313725 = PyFloat_FromDouble(0.14901960784313725); if (unlikely(!__pyx_float_0_14901960784313725)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_15294117647058825 = PyFloat_FromDouble(0.15294117647058825); if (unlikely(!__pyx_float_0_15294117647058825)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_16470588235294117 = PyFloat_FromDouble(0.16470588235294117); if (unlikely(!__pyx_float_0_16470588235294117)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_16862745098039217 = PyFloat_FromDouble(0.16862745098039217); if (unlikely(!__pyx_float_0_16862745098039217)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_17254901960784313 = PyFloat_FromDouble(0.17254901960784313); if (unlikely(!__pyx_float_0_17254901960784313)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_17647058823529413 = PyFloat_FromDouble(0.17647058823529413); if (unlikely(!__pyx_float_0_17647058823529413)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_18823529411764706 = PyFloat_FromDouble(0.18823529411764706); if (unlikely(!__pyx_float_0_18823529411764706)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_19215686274509805 = PyFloat_FromDouble(0.19215686274509805); if (unlikely(!__pyx_float_0_19215686274509805)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_19607843137254902 = PyFloat_FromDouble(0.19607843137254902); if (unlikely(!__pyx_float_0_19607843137254902)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_20392156862745098 = PyFloat_FromDouble(0.20392156862745098); if (unlikely(!__pyx_float_0_20392156862745098)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_20784313725490197 = PyFloat_FromDouble(0.20784313725490197); if (unlikely(!__pyx_float_0_20784313725490197)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_21176470588235294 = PyFloat_FromDouble(0.21176470588235294); if (unlikely(!__pyx_float_0_21176470588235294)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_21568627450980393 = PyFloat_FromDouble(0.21568627450980393); if (unlikely(!__pyx_float_0_21568627450980393)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_22745098039215686 = PyFloat_FromDouble(0.22745098039215686); if (unlikely(!__pyx_float_0_22745098039215686)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_23137254901960785 = PyFloat_FromDouble(0.23137254901960785); if (unlikely(!__pyx_float_0_23137254901960785)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_23529411764705882 = PyFloat_FromDouble(0.23529411764705882); if (unlikely(!__pyx_float_0_23529411764705882)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_23921568627450981 = PyFloat_FromDouble(0.23921568627450981); if (unlikely(!__pyx_float_0_23921568627450981)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_24313725490196078 = PyFloat_FromDouble(0.24313725490196078); if (unlikely(!__pyx_float_0_24313725490196078)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_24705882352941178 = PyFloat_FromDouble(0.24705882352941178); if (unlikely(!__pyx_float_0_24705882352941178)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_25098039215686274 = PyFloat_FromDouble(0.25098039215686274); if (unlikely(!__pyx_float_0_25098039215686274)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_25882352941176473 = PyFloat_FromDouble(0.25882352941176473); if (unlikely(!__pyx_float_0_25882352941176473)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_26666666666666666 = PyFloat_FromDouble(0.26666666666666666); if (unlikely(!__pyx_float_0_26666666666666666)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_27058823529411763 = PyFloat_FromDouble(0.27058823529411763); if (unlikely(!__pyx_float_0_27058823529411763)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_27450980392156865 = PyFloat_FromDouble(0.27450980392156865); if (unlikely(!__pyx_float_0_27450980392156865)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_28627450980392155 = PyFloat_FromDouble(0.28627450980392155); if (unlikely(!__pyx_float_0_28627450980392155)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_29411764705882354 = PyFloat_FromDouble(0.29411764705882354); if (unlikely(!__pyx_float_0_29411764705882354)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_30196078431372547 = PyFloat_FromDouble(0.30196078431372547); if (unlikely(!__pyx_float_0_30196078431372547)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_30980392156862746 = PyFloat_FromDouble(0.30980392156862746); if (unlikely(!__pyx_float_0_30980392156862746)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_32941176470588235 = PyFloat_FromDouble(0.32941176470588235); if (unlikely(!__pyx_float_0_32941176470588235)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_33725490196078434 = PyFloat_FromDouble(0.33725490196078434); if (unlikely(!__pyx_float_0_33725490196078434)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_34509803921568627 = PyFloat_FromDouble(0.34509803921568627); if (unlikely(!__pyx_float_0_34509803921568627)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_34901960784313724 = PyFloat_FromDouble(0.34901960784313724); if (unlikely(!__pyx_float_0_34901960784313724)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_35294117647058826 = PyFloat_FromDouble(0.35294117647058826); if (unlikely(!__pyx_float_0_35294117647058826)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_36470588235294116 = PyFloat_FromDouble(0.36470588235294116); if (unlikely(!__pyx_float_0_36470588235294116)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_37254901960784315 = PyFloat_FromDouble(0.37254901960784315); if (unlikely(!__pyx_float_0_37254901960784315)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_38823529411764707 = PyFloat_FromDouble(0.38823529411764707); if (unlikely(!__pyx_float_0_38823529411764707)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_39215686274509803 = PyFloat_FromDouble(0.39215686274509803); if (unlikely(!__pyx_float_0_39215686274509803)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_40784313725490196 = PyFloat_FromDouble(0.40784313725490196); if (unlikely(!__pyx_float_0_40784313725490196)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_41568627450980394 = PyFloat_FromDouble(0.41568627450980394); if (unlikely(!__pyx_float_0_41568627450980394)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_42745098039215684 = PyFloat_FromDouble(0.42745098039215684); if (unlikely(!__pyx_float_0_42745098039215684)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_43137254901960786 = PyFloat_FromDouble(0.43137254901960786); if (unlikely(!__pyx_float_0_43137254901960786)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_43529411764705883 = PyFloat_FromDouble(0.43529411764705883); if (unlikely(!__pyx_float_0_43529411764705883)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_44313725490196076 = PyFloat_FromDouble(0.44313725490196076); if (unlikely(!__pyx_float_0_44313725490196076)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_45098039215686275 = PyFloat_FromDouble(0.45098039215686275); if (unlikely(!__pyx_float_0_45098039215686275)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_47058823529411764 = PyFloat_FromDouble(0.47058823529411764); if (unlikely(!__pyx_float_0_47058823529411764)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_47843137254901963 = PyFloat_FromDouble(0.47843137254901963); if (unlikely(!__pyx_float_0_47843137254901963)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_48627450980392156 = PyFloat_FromDouble(0.48627450980392156); if (unlikely(!__pyx_float_0_48627450980392156)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_49019607843137253 = PyFloat_FromDouble(0.49019607843137253); if (unlikely(!__pyx_float_0_49019607843137253)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_49411764705882355 = PyFloat_FromDouble(0.49411764705882355); if (unlikely(!__pyx_float_0_49411764705882355)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_011764705882352941 = PyFloat_FromDouble(0.011764705882352941); if (unlikely(!__pyx_float_0_011764705882352941)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_023529411764705882 = PyFloat_FromDouble(0.023529411764705882); if (unlikely(!__pyx_float_0_023529411764705882)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_027450980392156862 = PyFloat_FromDouble(0.027450980392156862); if (unlikely(!__pyx_float_0_027450980392156862)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_043137254901960784 = PyFloat_FromDouble(0.043137254901960784); if (unlikely(!__pyx_float_0_043137254901960784)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_047058823529411764 = PyFloat_FromDouble(0.047058823529411764); if (unlikely(!__pyx_float_0_047058823529411764)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_050980392156862744 = PyFloat_FromDouble(0.050980392156862744); if (unlikely(!__pyx_float_0_050980392156862744)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_054901960784313725 = PyFloat_FromDouble(0.054901960784313725); if (unlikely(!__pyx_float_0_054901960784313725)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_float_0_058823529411764705 = PyFloat_FromDouble(0.058823529411764705); if (unlikely(!__pyx_float_0_058823529411764705)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_112105877 = PyInt_FromLong(112105877L); if (unlikely(!__pyx_int_112105877)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_136983863 = PyInt_FromLong(136983863L); if (unlikely(!__pyx_int_136983863)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_184977713 = PyInt_FromLong(184977713L); if (unlikely(!__pyx_int_184977713)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L1_error)

  /* InitThreads.init */
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __pyx_collections_abc_Sequence = Py_None; Py_INCREF(Py_None);
  generic = Py_None; Py_INCREF(Py_None);
  strided = Py_None; Py_INCREF(Py_None);
  indirect = Py_None; Py_INCREF(Py_None);
  contiguous = Py_None; Py_INCREF(Py_None);
  indirect_contiguous = Py_None; Py_INCREF(Py_None);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("palette_change", (void (*)(void))__pyx_f_12PygameShader_7Palette_palette_change, "void (PyObject *, PyObject *, PyObject *, int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("palette_change_c", (void (*)(void))__pyx_f_12PygameShader_7Palette_palette_change_c, "void (Py_ssize_t const , Py_ssize_t const , Py_ssize_t const , __Pyx_memviewslice, __Pyx_memviewslice, __Pyx_memviewslice)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_palette", (void (*)(void))__pyx_f_12PygameShader_7Palette_make_palette, "PyObject *(int const , float const , float const , float const , int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("make_palette_c", (void (*)(void))__pyx_f_12PygameShader_7Palette_make_palette_c, "__Pyx_memviewslice (int const , float const , float const , float const )") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ExportFunction("create_surface_from_palette", (void (*)(void))__pyx_f_12PygameShader_7Palette_create_surface_from_palette, "PyObject *(__Pyx_memviewslice, int __pyx_skip_dispatch)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_array = &__pyx_vtable_array;
  __pyx_vtable_array.get_memview = (PyObject *(*)(struct __pyx_array_obj *))__pyx_array_get_memview;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_array_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_array_spec, NULL); if (unlikely(!__pyx_array_type)) __PYX_ERR(2, 114, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_array_type->tp_as_buffer = &__pyx_tp_as_buffer_array;
  if (!__pyx_array_type->tp_as_buffer->bf_releasebuffer && __pyx_array_type->tp_base->tp_as_buffer && __pyx_array_type->tp_base->tp_as_buffer->bf_releasebuffer) {
    __pyx_array_type->tp_as_buffer->bf_releasebuffer = __pyx_array_type->tp_base->tp_as_buffer->bf_releasebuffer;
  }
  #elif defined(Py_bf_getbuffer) && defined(Py_bf_releasebuffer)
  /* PY_VERSION_HEX >= 0x03090000 || Py_LIMITED_API >= 0x030B0000 */
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API < 3.11.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API < 3.11."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_array_spec, __pyx_array_type) < 0) __PYX_ERR(2, 114, __pyx_L1_error)
  #else
  __pyx_array_type = &__pyx_type___pyx_array;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_array_type) < 0) __PYX_ERR(2, 114, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_array_type->tp_print = 0;
  #endif
  if (__Pyx_SetVtable(__pyx_array_type, __pyx_vtabptr_array) < 0) __PYX_ERR(2, 114, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_array_type) < 0) __PYX_ERR(2, 114, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_array_type) < 0) __PYX_ERR(2, 114, __pyx_L1_error)
  #endif
  #if CYTHON_USE_TYPE_SPECS
  __pyx_MemviewEnum_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_MemviewEnum_spec, NULL); if (unlikely(!__pyx_MemviewEnum_type)) __PYX_ERR(2, 302, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_MemviewEnum_spec, __pyx_MemviewEnum_type) < 0) __PYX_ERR(2, 302, __pyx_L1_error)
  #else
  __pyx_MemviewEnum_type = &__pyx_type___pyx_MemviewEnum;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_MemviewEnum_type) < 0) __PYX_ERR(2, 302, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_MemviewEnum_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_MemviewEnum_type->tp_dictoffset && __pyx_MemviewEnum_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_MemviewEnum_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_MemviewEnum_type) < 0) __PYX_ERR(2, 302, __pyx_L1_error)
  #endif
  __pyx_vtabptr_memoryview = &__pyx_vtable_memoryview;
  __pyx_vtable_memoryview.get_item_pointer = (char *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_get_item_pointer;
  __pyx_vtable_memoryview.is_slice = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_is_slice;
  __pyx_vtable_memoryview.setitem_slice_assignment = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_slice_assignment;
  __pyx_vtable_memoryview.setitem_slice_assign_scalar = (PyObject *(*)(struct __pyx_memoryview_obj *, struct __pyx_memoryview_obj *, PyObject *))__pyx_memoryview_setitem_slice_assign_scalar;
  __pyx_vtable_memoryview.setitem_indexed = (PyObject *(*)(struct __pyx_memoryview_obj *, PyObject *, PyObject *))__pyx_memoryview_setitem_indexed;
  __pyx_vtable_memoryview.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryview_convert_item_to_object;
  __pyx_vtable_memoryview.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryview_assign_item_from_object;
  __pyx_vtable_memoryview._get_base = (PyObject *(*)(struct __pyx_memoryview_obj *))__pyx_memoryview__get_base;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_memoryview_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_memoryview_spec, NULL); if (unlikely(!__pyx_memoryview_type)) __PYX_ERR(2, 337, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_memoryview_type->tp_as_buffer = &__pyx_tp_as_buffer_memoryview;
  if (!__pyx_memoryview_type->tp_as_buffer->bf_releasebuffer && __pyx_memoryview_type->tp_base->tp_as_buffer && __pyx_memoryview_type->tp_base->tp_as_buffer->bf_releasebuffer) {
    __pyx_memoryview_type->tp_as_buffer->bf_releasebuffer = __pyx_memoryview_type->tp_base->tp_as_buffer->bf_releasebuffer;
  }
  #elif defined(Py_bf_getbuffer) && defined(Py_bf_releasebuffer)
  /* PY_VERSION_HEX >= 0x03090000 || Py_LIMITED_API >= 0x030B0000 */
  #elif defined(_MSC_VER)
  #pragma message ("The buffer protocol is not supported in the Limited C-API < 3.11.")
  #else
  #warning "The buffer protocol is not supported in the Limited C-API < 3.11."
  #endif
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_memoryview_spec, __pyx_memoryview_type) < 0) __PYX_ERR(2, 337, __pyx_L1_error)
  #else
  __pyx_memoryview_type = &__pyx_type___pyx_memoryview;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_memoryview_type) < 0) __PYX_ERR(2, 337, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_memoryview_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_memoryview_type->tp_dictoffset && __pyx_memoryview_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_memoryview_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_memoryview_type, __pyx_vtabptr_memoryview) < 0) __PYX_ERR(2, 337, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_memoryview_type) < 0) __PYX_ERR(2, 337, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_memoryview_type) < 0) __PYX_ERR(2, 337, __pyx_L1_error)
  #endif
  __pyx_vtabptr__memoryviewslice = &__pyx_vtable__memoryviewslice;
  __pyx_vtable__memoryviewslice.__pyx_base = *__pyx_vtabptr_memoryview;
  __pyx_vtable__memoryviewslice.__pyx_base.convert_item_to_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *))__pyx_memoryviewslice_convert_item_to_object;
  __pyx_vtable__memoryviewslice.__pyx_base.assign_item_from_object = (PyObject *(*)(struct __pyx_memoryview_obj *, char *, PyObject *))__pyx_memoryviewslice_assign_item_from_object;
  __pyx_vtable__memoryviewslice.__pyx_base._get_base = (PyObject *(*)(struct __pyx_memoryview_obj *))__pyx_memoryviewslice__get_base;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_memoryview_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_memoryviewslice_type = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type___pyx_memoryviewslice_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_memoryviewslice_type)) __PYX_ERR(2, 952, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type___pyx_memoryviewslice_spec, __pyx_memoryviewslice_type) < 0) __PYX_ERR(2, 952, __pyx_L1_error)
  #else
  __pyx_memoryviewslice_type = &__pyx_type___pyx_memoryviewslice;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_memoryviewslice_type->tp_base = __pyx_memoryview_type;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_memoryviewslice_type) < 0) __PYX_ERR(2, 952, __pyx_L1_error)
  #endif
  #if PY_MAJOR_VERSION < 3
  __pyx_memoryviewslice_type->tp_print = 0;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_memoryviewslice_type->tp_dictoffset && __pyx_memoryviewslice_type->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_memoryviewslice_type->tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_memoryviewslice_type, __pyx_vtabptr__memoryviewslice) < 0) __PYX_ERR(2, 952, __pyx_L1_error)
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_MergeVtables(__pyx_memoryviewslice_type) < 0) __PYX_ERR(2, 952, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject *) __pyx_memoryviewslice_type) < 0) __PYX_ERR(2, 952, __pyx_L1_error)
  #endif
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_0_12(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyArray_Descr),__Pyx_ImportType_CheckSize_Ignore_3_0_12); if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(3, 272, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyArrayIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_12); if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(3, 317, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyArrayMultiIterObject),__Pyx_ImportType_CheckSize_Ignore_3_0_12); if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(3, 321, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyArrayObject),__Pyx_ImportType_CheckSize_Ignore_3_0_12); if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(3, 360, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_generic) __PYX_ERR(3, 865, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "number", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_number) __PYX_ERR(3, 867, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_integer) __PYX_ERR(3, 869, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(3, 871, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(3, 873, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(3, 875, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_floating) __PYX_ERR(3, 877, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(3, 879, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(3, 881, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "character", sizeof(PyObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyObject),__Pyx_ImportType_CheckSize_Warn_3_0_12); if (!__pyx_ptype_5numpy_character) __PYX_ERR(3, 883, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType_3_0_12(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __PYX_GET_STRUCT_ALIGNMENT_3_0_12(PyUFuncObject),__Pyx_ImportType_CheckSize_Ignore_3_0_12); if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(3, 947, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __pyx_t_1 = PyImport_ImportModule("PygameShader.misc"); if (!__pyx_t_1) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (__Pyx_ImportFunction_3_0_12(__pyx_t_1, "rgb_to_int_c", (void (**)(void))&__pyx_f_12PygameShader_4misc_rgb_to_int_c, "unsigned int (unsigned char const , unsigned char const , unsigned char const )") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_12(__pyx_t_1, "int_to_rgb_c", (void (**)(void))&__pyx_f_12PygameShader_4misc_int_to_rgb_c, "__pyx_ctuple_eaedd6__unsigned__space_char__and_unsigned__space_char__etc (unsigned int const )") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  if (__Pyx_ImportFunction_3_0_12(__pyx_t_1, "is_type_memoryview", (void (**)(void))&__pyx_f_12PygameShader_4misc_is_type_memoryview, "int (PyObject *)") < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_Palette(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_Palette},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "Palette",
      __pyx_k_Library_Overview_The_functions, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initPalette(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initPalette(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_Palette(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_Palette(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_Palette(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  static PyThread_type_lock __pyx_t_8[8];
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  PyObject *__pyx_t_27 = NULL;
  PyObject *__pyx_t_28 = NULL;
  PyObject *__pyx_t_29 = NULL;
  PyObject *__pyx_t_30 = NULL;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  PyObject *__pyx_t_33 = NULL;
  PyObject *__pyx_t_34 = NULL;
  PyObject *__pyx_t_35 = NULL;
  PyObject *__pyx_t_36 = NULL;
  PyObject *__pyx_t_37 = NULL;
  PyObject *__pyx_t_38 = NULL;
  PyObject *__pyx_t_39 = NULL;
  PyObject *__pyx_t_40 = NULL;
  PyObject *__pyx_t_41 = NULL;
  PyObject *__pyx_t_42 = NULL;
  PyObject *__pyx_t_43 = NULL;
  PyObject *__pyx_t_44 = NULL;
  PyObject *__pyx_t_45 = NULL;
  PyObject *__pyx_t_46 = NULL;
  PyObject *__pyx_t_47 = NULL;
  PyObject *__pyx_t_48 = NULL;
  PyObject *__pyx_t_49 = NULL;
  PyObject *__pyx_t_50 = NULL;
  PyObject *__pyx_t_51 = NULL;
  PyObject *__pyx_t_52 = NULL;
  PyObject *__pyx_t_53 = NULL;
  PyObject *__pyx_t_54 = NULL;
  PyObject *__pyx_t_55 = NULL;
  PyObject *__pyx_t_56 = NULL;
  PyObject *__pyx_t_57 = NULL;
  PyObject *__pyx_t_58 = NULL;
  PyObject *__pyx_t_59 = NULL;
  PyObject *__pyx_t_60 = NULL;
  PyObject *__pyx_t_61 = NULL;
  PyObject *__pyx_t_62 = NULL;
  PyObject *__pyx_t_63 = NULL;
  PyObject *__pyx_t_64 = NULL;
  PyObject *__pyx_t_65 = NULL;
  PyObject *__pyx_t_66 = NULL;
  PyObject *__pyx_t_67 = NULL;
  PyObject *__pyx_t_68 = NULL;
  PyObject *__pyx_t_69 = NULL;
  PyObject *__pyx_t_70 = NULL;
  PyObject *__pyx_t_71 = NULL;
  PyObject *__pyx_t_72 = NULL;
  PyObject *__pyx_t_73 = NULL;
  PyObject *__pyx_t_74 = NULL;
  PyObject *__pyx_t_75 = NULL;
  PyObject *__pyx_t_76 = NULL;
  PyObject *__pyx_t_77 = NULL;
  PyObject *__pyx_t_78 = NULL;
  PyObject *__pyx_t_79 = NULL;
  PyObject *__pyx_t_80 = NULL;
  PyObject *__pyx_t_81 = NULL;
  PyObject *__pyx_t_82 = NULL;
  PyObject *__pyx_t_83 = NULL;
  PyObject *__pyx_t_84 = NULL;
  PyObject *__pyx_t_85 = NULL;
  PyObject *__pyx_t_86 = NULL;
  PyObject *__pyx_t_87 = NULL;
  PyObject *__pyx_t_88 = NULL;
  PyObject *__pyx_t_89 = NULL;
  PyObject *__pyx_t_90 = NULL;
  PyObject *__pyx_t_91 = NULL;
  PyObject *__pyx_t_92 = NULL;
  PyObject *__pyx_t_93 = NULL;
  PyObject *__pyx_t_94 = NULL;
  PyObject *__pyx_t_95 = NULL;
  PyObject *__pyx_t_96 = NULL;
  PyObject *__pyx_t_97 = NULL;
  PyObject *__pyx_t_98 = NULL;
  PyObject *__pyx_t_99 = NULL;
  PyObject *__pyx_t_100 = NULL;
  PyObject *__pyx_t_101 = NULL;
  PyObject *__pyx_t_102 = NULL;
  PyObject *__pyx_t_103 = NULL;
  PyObject *__pyx_t_104 = NULL;
  PyObject *__pyx_t_105 = NULL;
  PyObject *__pyx_t_106 = NULL;
  PyObject *__pyx_t_107 = NULL;
  PyObject *__pyx_t_108 = NULL;
  PyObject *__pyx_t_109 = NULL;
  PyObject *__pyx_t_110 = NULL;
  PyObject *__pyx_t_111 = NULL;
  PyObject *__pyx_t_112 = NULL;
  PyObject *__pyx_t_113 = NULL;
  PyObject *__pyx_t_114 = NULL;
  PyObject *__pyx_t_115 = NULL;
  PyObject *__pyx_t_116 = NULL;
  PyObject *__pyx_t_117 = NULL;
  PyObject *__pyx_t_118 = NULL;
  PyObject *__pyx_t_119 = NULL;
  PyObject *__pyx_t_120 = NULL;
  PyObject *__pyx_t_121 = NULL;
  PyObject *__pyx_t_122 = NULL;
  PyObject *__pyx_t_123 = NULL;
  PyObject *__pyx_t_124 = NULL;
  PyObject *__pyx_t_125 = NULL;
  PyObject *__pyx_t_126 = NULL;
  PyObject *__pyx_t_127 = NULL;
  PyObject *__pyx_t_128 = NULL;
  PyObject *__pyx_t_129 = NULL;
  PyObject *__pyx_t_130 = NULL;
  PyObject *__pyx_t_131 = NULL;
  PyObject *__pyx_t_132 = NULL;
  PyObject *__pyx_t_133 = NULL;
  PyObject *__pyx_t_134 = NULL;
  PyObject *__pyx_t_135 = NULL;
  PyObject *__pyx_t_136 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'Palette' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("Palette", __pyx_methods, __pyx_k_Library_Overview_The_functions, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #elif CYTHON_USE_MODULE_STATE
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  {
    int add_module_result = PyState_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "Palette" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #endif
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(1, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_cython_runtime = __Pyx_PyImport_AddModuleRef((const char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(1, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_Palette(void)", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(1, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init(__pyx_m) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_PygameShader__Palette) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(1, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "PygameShader.Palette")) {
      if (unlikely((PyDict_SetItemString(modules, "PygameShader.Palette", __pyx_m) < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely((__Pyx_modinit_function_export_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  if (unlikely((__Pyx_modinit_function_import_code() < 0))) __PYX_ERR(1, 1, __pyx_L1_error)
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  #endif

  /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 100, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_version_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 100, __pyx_L2_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_tuple__17, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 100, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(2, 100, __pyx_L2_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {

        /* "View.MemoryView":101
 * try:
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence             # <<<<<<<<<<<<<<
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 101, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_abc); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 101, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 101, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XGOTREF(__pyx_collections_abc_Sequence);
        __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        __pyx_t_4 = 0;

        /* "View.MemoryView":100
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:
 *     if __import__("sys").version_info >= (3, 3):             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 */
        goto __pyx_L8;
      }

      /* "View.MemoryView":103
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence             # <<<<<<<<<<<<<<
 * except:
 * 
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin___import__, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 103, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Sequence); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 103, __pyx_L2_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_collections_abc_Sequence);
        __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
      }
      __pyx_L8:;

      /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L7_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "View.MemoryView":104
 *     else:
 *         __pyx_collections_abc_Sequence = __import__("collections").Sequence
 * except:             # <<<<<<<<<<<<<<
 * 
 *     __pyx_collections_abc_Sequence = None
 */
    /*except:*/ {
      __Pyx_AddTraceback("View.MemoryView", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_7) < 0) __PYX_ERR(2, 104, __pyx_L4_except_error)
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "View.MemoryView":106
 * except:
 * 
 *     __pyx_collections_abc_Sequence = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __Pyx_INCREF(Py_None);
      __Pyx_XGOTREF(__pyx_collections_abc_Sequence);
      __Pyx_DECREF_SET(__pyx_collections_abc_Sequence, Py_None);
      __Pyx_GIVEREF(Py_None);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L3_exception_handled;
    }

    /* "View.MemoryView":99
 * 
 * cdef object __pyx_collections_abc_Sequence "__pyx_collections_abc_Sequence"
 * try:             # <<<<<<<<<<<<<<
 *     if __import__("sys").version_info >= (3, 3):
 *         __pyx_collections_abc_Sequence = __import__("collections.abc").abc.Sequence
 */
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L7_try_end:;
  }

  /* "View.MemoryView":241
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "View.MemoryView":242
 * 
 *     try:
 *         count = __pyx_collections_abc_Sequence.count             # <<<<<<<<<<<<<<
 *         index = __pyx_collections_abc_Sequence.index
 *     except:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 242, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_SetItemOnTypeDict(__pyx_array_type, __pyx_n_s_count, __pyx_t_7) < 0) __PYX_ERR(2, 242, __pyx_L11_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      PyType_Modified(__pyx_array_type);

      /* "View.MemoryView":243
 *     try:
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 243, __pyx_L11_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_SetItemOnTypeDict(__pyx_array_type, __pyx_n_s_index, __pyx_t_7) < 0) __PYX_ERR(2, 243, __pyx_L11_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      PyType_Modified(__pyx_array_type);

      /* "View.MemoryView":241
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":244
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L12_exception_handled;
    }
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L16_try_end:;
  }

  /* "View.MemoryView":309
 *         return self.name
 * 
 * cdef generic = Enum("<strided and direct or indirect>")             # <<<<<<<<<<<<<<
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(generic);
  __Pyx_DECREF_SET(generic, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":310
 * 
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default             # <<<<<<<<<<<<<<
 * cdef indirect = Enum("<strided and indirect>")
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(strided);
  __Pyx_DECREF_SET(strided, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":311
 * cdef generic = Enum("<strided and direct or indirect>")
 * cdef strided = Enum("<strided and direct>") # default
 * cdef indirect = Enum("<strided and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(indirect);
  __Pyx_DECREF_SET(indirect, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":314
 * 
 * 
 * cdef contiguous = Enum("<contiguous and direct>")             # <<<<<<<<<<<<<<
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(contiguous);
  __Pyx_DECREF_SET(contiguous, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":315
 * 
 * cdef contiguous = Enum("<contiguous and direct>")
 * cdef indirect_contiguous = Enum("<contiguous and indirect>")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = __Pyx_PyObject_Call(((PyObject *)__pyx_MemviewEnum_type), __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_XGOTREF(indirect_contiguous);
  __Pyx_DECREF_SET(indirect_contiguous, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_7);
  __pyx_t_7 = 0;

  /* "View.MemoryView":323
 * 
 * 
 * cdef int __pyx_memoryview_thread_locks_used = 0             # <<<<<<<<<<<<<<
 * cdef PyThread_type_lock[8] __pyx_memoryview_thread_locks = [
 *     PyThread_allocate_lock(),
 */
  __pyx_memoryview_thread_locks_used = 0;

  /* "View.MemoryView":324
 * 
 * cdef int __pyx_memoryview_thread_locks_used = 0
 * cdef PyThread_type_lock[8] __pyx_memoryview_thread_locks = [             # <<<<<<<<<<<<<<
 *     PyThread_allocate_lock(),
 *     PyThread_allocate_lock(),
 */
  __pyx_t_8[0] = PyThread_allocate_lock();
  __pyx_t_8[1] = PyThread_allocate_lock();
  __pyx_t_8[2] = PyThread_allocate_lock();
  __pyx_t_8[3] = PyThread_allocate_lock();
  __pyx_t_8[4] = PyThread_allocate_lock();
  __pyx_t_8[5] = PyThread_allocate_lock();
  __pyx_t_8[6] = PyThread_allocate_lock();
  __pyx_t_8[7] = PyThread_allocate_lock();
  memcpy(&(__pyx_memoryview_thread_locks[0]), __pyx_t_8, sizeof(__pyx_memoryview_thread_locks[0]) * (8));

  /* "View.MemoryView":982
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "View.MemoryView":983
 * 
 *     try:
 *         count = __pyx_collections_abc_Sequence.count             # <<<<<<<<<<<<<<
 *         index = __pyx_collections_abc_Sequence.index
 *     except:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_count); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 983, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_SetItemOnTypeDict(__pyx_memoryviewslice_type, __pyx_n_s_count, __pyx_t_7) < 0) __PYX_ERR(2, 983, __pyx_L17_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      PyType_Modified(__pyx_memoryviewslice_type);

      /* "View.MemoryView":984
 *     try:
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 984, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_SetItemOnTypeDict(__pyx_memoryviewslice_type, __pyx_n_s_index, __pyx_t_7) < 0) __PYX_ERR(2, 984, __pyx_L17_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      PyType_Modified(__pyx_memoryviewslice_type);

      /* "View.MemoryView":982
 * 
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L22_try_end;
    __pyx_L17_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":985
 *         count = __pyx_collections_abc_Sequence.count
 *         index = __pyx_collections_abc_Sequence.index
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L18_exception_handled;
    }
    __pyx_L18_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L22_try_end:;
  }

  /* "View.MemoryView":988
 *         pass
 * 
 * try:             # <<<<<<<<<<<<<<
 *     if __pyx_collections_abc_Sequence:
 * 
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "View.MemoryView":989
 * 
 * try:
 *     if __pyx_collections_abc_Sequence:             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_collections_abc_Sequence); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(2, 989, __pyx_L23_error)
      if (__pyx_t_6) {

        /* "View.MemoryView":993
 * 
 * 
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)             # <<<<<<<<<<<<<<
 *         __pyx_collections_abc_Sequence.register(array)
 * except:
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_register); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 993, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_7, ((PyObject *)__pyx_memoryviewslice_type)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 993, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "View.MemoryView":994
 * 
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)
 *         __pyx_collections_abc_Sequence.register(array)             # <<<<<<<<<<<<<<
 * except:
 *     pass  # ignore failure, it's a minor issue
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_collections_abc_Sequence, __pyx_n_s_register); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 994, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __Pyx_PyObject_CallOneArg(__pyx_t_4, ((PyObject *)__pyx_array_type)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 994, __pyx_L23_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "View.MemoryView":989
 * 
 * try:
 *     if __pyx_collections_abc_Sequence:             # <<<<<<<<<<<<<<
 * 
 * 
 */
      }

      /* "View.MemoryView":988
 *         pass
 * 
 * try:             # <<<<<<<<<<<<<<
 *     if __pyx_collections_abc_Sequence:
 * 
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L28_try_end;
    __pyx_L23_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "View.MemoryView":995
 *         __pyx_collections_abc_Sequence.register(_memoryviewslice)
 *         __pyx_collections_abc_Sequence.register(array)
 * except:             # <<<<<<<<<<<<<<
 *     pass  # ignore failure, it's a minor issue
 * 
 */
    /*except:*/ {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L24_exception_handled;
    }
    __pyx_L24_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L28_try_end:;
  }

  /* "(tree fragment)":1
 * def __pyx_unpickle_Enum(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_7 = PyCFunction_NewEx(&__pyx_mdef_15View_dot_MemoryView_1__pyx_unpickle_Enum, NULL, __pyx_n_s_View_MemoryView); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_Enum, __pyx_t_7) < 0) __PYX_ERR(2, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":28
 * """
 * 
 * from PygameShader.config import __VERSION__             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_VERSION);
  __Pyx_GIVEREF(__pyx_n_s_VERSION);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_VERSION)) __PYX_ERR(1, 28, __pyx_L1_error);
  __pyx_t_4 = __Pyx_Import(__pyx_n_s_PygameShader_config, __pyx_t_7, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_VERSION); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERSION, __pyx_t_7) < 0) __PYX_ERR(1, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":31
 * 
 * 
 * import warnings             # <<<<<<<<<<<<<<
 * 
 * warnings.filterwarnings("ignore", category=FutureWarning)
 */
  __pyx_t_4 = __Pyx_ImportDottedModule(__pyx_n_s_warnings, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_4) < 0) __PYX_ERR(1, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":33
 * import warnings
 * 
 * warnings.filterwarnings("ignore", category=FutureWarning)             # <<<<<<<<<<<<<<
 * warnings.filterwarnings("ignore", category=RuntimeWarning)
 * warnings.filterwarnings("ignore", category=ImportWarning)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_filterwarnings); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_category, __pyx_builtin_FutureWarning) < 0) __PYX_ERR(1, 33, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__27, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":34
 * 
 * warnings.filterwarnings("ignore", category=FutureWarning)
 * warnings.filterwarnings("ignore", category=RuntimeWarning)             # <<<<<<<<<<<<<<
 * warnings.filterwarnings("ignore", category=ImportWarning)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_warnings); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_filterwarnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_category, __pyx_builtin_RuntimeWarning) < 0) __PYX_ERR(1, 34, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__27, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":35
 * warnings.filterwarnings("ignore", category=FutureWarning)
 * warnings.filterwarnings("ignore", category=RuntimeWarning)
 * warnings.filterwarnings("ignore", category=ImportWarning)             # <<<<<<<<<<<<<<
 * 
 * import os
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_warnings); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_filterwarnings); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_category, __pyx_builtin_ImportWarning) < 0) __PYX_ERR(1, 35, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__27, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":37
 * warnings.filterwarnings("ignore", category=ImportWarning)
 * 
 * import os             # <<<<<<<<<<<<<<
 * os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
 * 
 */
  __pyx_t_4 = __Pyx_ImportDottedModule(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_4) < 0) __PYX_ERR(1, 37, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":38
 * 
 * import os
 * os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"             # <<<<<<<<<<<<<<
 * 
 * try:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_os); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_environ); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely((PyObject_SetItem(__pyx_t_7, __pyx_n_u_PYGAME_HIDE_SUPPORT_PROMPT, __pyx_n_u_hide) < 0))) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":40
 * os.environ['PYGAME_HIDE_SUPPORT_PROMPT'] = "hide"
 * 
 * try:             # <<<<<<<<<<<<<<
 *     cimport cython
 *     from cython.parallel cimport prange, parallel
 */
  {
    (void)__pyx_t_1; (void)__pyx_t_2; (void)__pyx_t_3; /* mark used */
    /*try:*/ {

      /* "PygameShader/Palette.pyx":42
 * try:
 *     cimport cython
 *     from cython.parallel cimport prange, parallel             # <<<<<<<<<<<<<<
 * 
 * except ImportError:
 */
    }
  }

  /* "PygameShader/Palette.pyx":49
 * 
 * 
 * try:             # <<<<<<<<<<<<<<
 *     import pygame
 *     from pygame import Surface
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "PygameShader/Palette.pyx":50
 * 
 * try:
 *     import pygame             # <<<<<<<<<<<<<<
 *     from pygame import Surface
 *     from pygame.surfarray import pixels3d, array_alpha, pixels_alpha, array3d, \
 */
      __pyx_t_7 = __Pyx_ImportDottedModule(__pyx_n_s_pygame, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 50, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_pygame, __pyx_t_7) < 0) __PYX_ERR(1, 50, __pyx_L36_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "PygameShader/Palette.pyx":51
 * try:
 *     import pygame
 *     from pygame import Surface             # <<<<<<<<<<<<<<
 *     from pygame.surfarray import pixels3d, array_alpha, pixels_alpha, array3d, \
 *         make_surface, blit_array
 */
      __pyx_t_7 = PyList_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 51, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_n_s_Surface);
      __Pyx_GIVEREF(__pyx_n_s_Surface);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_Surface)) __PYX_ERR(1, 51, __pyx_L36_error);
      __pyx_t_4 = __Pyx_Import(__pyx_n_s_pygame, __pyx_t_7, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 51, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_Surface); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 51, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_Surface, __pyx_t_7) < 0) __PYX_ERR(1, 51, __pyx_L36_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PygameShader/Palette.pyx":52
 *     import pygame
 *     from pygame import Surface
 *     from pygame.surfarray import pixels3d, array_alpha, pixels_alpha, array3d, \             # <<<<<<<<<<<<<<
 *         make_surface, blit_array
 * 
 */
      __pyx_t_4 = PyList_New(6); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_n_s_pixels3d);
      __Pyx_GIVEREF(__pyx_n_s_pixels3d);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_s_pixels3d)) __PYX_ERR(1, 52, __pyx_L36_error);
      __Pyx_INCREF(__pyx_n_s_array_alpha);
      __Pyx_GIVEREF(__pyx_n_s_array_alpha);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_n_s_array_alpha)) __PYX_ERR(1, 52, __pyx_L36_error);
      __Pyx_INCREF(__pyx_n_s_pixels_alpha);
      __Pyx_GIVEREF(__pyx_n_s_pixels_alpha);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_n_s_pixels_alpha)) __PYX_ERR(1, 52, __pyx_L36_error);
      __Pyx_INCREF(__pyx_n_s_array3d);
      __Pyx_GIVEREF(__pyx_n_s_array3d);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 3, __pyx_n_s_array3d)) __PYX_ERR(1, 52, __pyx_L36_error);
      __Pyx_INCREF(__pyx_n_s_make_surface);
      __Pyx_GIVEREF(__pyx_n_s_make_surface);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 4, __pyx_n_s_make_surface)) __PYX_ERR(1, 52, __pyx_L36_error);
      __Pyx_INCREF(__pyx_n_s_blit_array);
      __Pyx_GIVEREF(__pyx_n_s_blit_array);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 5, __pyx_n_s_blit_array)) __PYX_ERR(1, 52, __pyx_L36_error);
      __pyx_t_7 = __Pyx_Import(__pyx_n_s_pygame_surfarray, __pyx_t_4, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_pixels3d); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixels3d, __pyx_t_4) < 0) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_array_alpha); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_array_alpha, __pyx_t_4) < 0) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_pixels_alpha); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_pixels_alpha, __pyx_t_4) < 0) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_array3d); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_array3d, __pyx_t_4) < 0) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_make_surface); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_make_surface, __pyx_t_4) < 0) __PYX_ERR(1, 53, __pyx_L36_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_ImportFrom(__pyx_t_7, __pyx_n_s_blit_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 52, __pyx_L36_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_blit_array, __pyx_t_4) < 0) __PYX_ERR(1, 53, __pyx_L36_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "PygameShader/Palette.pyx":49
 * 
 * 
 * try:             # <<<<<<<<<<<<<<
 *     import pygame
 *     from pygame import Surface
 */
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L41_try_end;
    __pyx_L36_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PygameShader/Palette.pyx":55
 *         make_surface, blit_array
 * 
 * except ImportError:             # <<<<<<<<<<<<<<
 *     raise ImportError("\n<Pygame> library is missing on your system."
 *           "\nTry: \n   C:\\pip install pygame on a window command prompt.")
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("PygameShader.Palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_4, &__pyx_t_5) < 0) __PYX_ERR(1, 55, __pyx_L38_except_error)
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);

      /* "PygameShader/Palette.pyx":56
 * 
 * except ImportError:
 *     raise ImportError("\n<Pygame> library is missing on your system."             # <<<<<<<<<<<<<<
 *           "\nTry: \n   C:\\pip install pygame on a window command prompt.")
 * 
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 56, __pyx_L38_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 56, __pyx_L38_except_error)
    }
    goto __pyx_L38_except_error;

    /* "PygameShader/Palette.pyx":49
 * 
 * 
 * try:             # <<<<<<<<<<<<<<
 *     import pygame
 *     from pygame import Surface
 */
    __pyx_L38_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L41_try_end:;
  }

  /* "PygameShader/Palette.pyx":59
 *           "\nTry: \n   C:\\pip install pygame on a window command prompt.")
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from numpy import empty, uint8, float32, asarray, \
 *         ascontiguousarray, zeros, uint32, int32, int8, array, ndarray
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "PygameShader/Palette.pyx":60
 * 
 * try:
 *     from numpy import empty, uint8, float32, asarray, \             # <<<<<<<<<<<<<<
 *         ascontiguousarray, zeros, uint32, int32, int8, array, ndarray
 * except ImportError:
 */
      __pyx_t_5 = PyList_New(11); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_INCREF(__pyx_n_s_empty);
      __Pyx_GIVEREF(__pyx_n_s_empty);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_n_s_empty)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_uint8);
      __Pyx_GIVEREF(__pyx_n_s_uint8);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_n_s_uint8)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_float32);
      __Pyx_GIVEREF(__pyx_n_s_float32);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_n_s_float32)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_asarray);
      __Pyx_GIVEREF(__pyx_n_s_asarray);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 3, __pyx_n_s_asarray)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_ascontiguousarray);
      __Pyx_GIVEREF(__pyx_n_s_ascontiguousarray);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 4, __pyx_n_s_ascontiguousarray)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_zeros);
      __Pyx_GIVEREF(__pyx_n_s_zeros);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 5, __pyx_n_s_zeros)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_uint32);
      __Pyx_GIVEREF(__pyx_n_s_uint32);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 6, __pyx_n_s_uint32)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_int32);
      __Pyx_GIVEREF(__pyx_n_s_int32);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 7, __pyx_n_s_int32)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_int8);
      __Pyx_GIVEREF(__pyx_n_s_int8);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 8, __pyx_n_s_int8)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_array);
      __Pyx_GIVEREF(__pyx_n_s_array);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 9, __pyx_n_s_array)) __PYX_ERR(1, 60, __pyx_L44_error);
      __Pyx_INCREF(__pyx_n_s_ndarray);
      __Pyx_GIVEREF(__pyx_n_s_ndarray);
      if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 10, __pyx_n_s_ndarray)) __PYX_ERR(1, 60, __pyx_L44_error);
      __pyx_t_4 = __Pyx_Import(__pyx_n_s_numpy, __pyx_t_5, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_empty); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_empty, __pyx_t_5) < 0) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_uint8); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_uint8, __pyx_t_5) < 0) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_float32, __pyx_t_5) < 0) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_asarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_asarray, __pyx_t_5) < 0) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_ascontiguousarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_ascontiguousarray, __pyx_t_5) < 0) __PYX_ERR(1, 61, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_zeros, __pyx_t_5) < 0) __PYX_ERR(1, 61, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_uint32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_uint32, __pyx_t_5) < 0) __PYX_ERR(1, 61, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_int32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_int32, __pyx_t_5) < 0) __PYX_ERR(1, 61, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_int8); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_int8, __pyx_t_5) < 0) __PYX_ERR(1, 61, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_array, __pyx_t_5) < 0) __PYX_ERR(1, 61, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_ImportFrom(__pyx_t_4, __pyx_n_s_ndarray); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 60, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_ndarray, __pyx_t_5) < 0) __PYX_ERR(1, 61, __pyx_L44_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "PygameShader/Palette.pyx":59
 *           "\nTry: \n   C:\\pip install pygame on a window command prompt.")
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from numpy import empty, uint8, float32, asarray, \
 *         ascontiguousarray, zeros, uint32, int32, int8, array, ndarray
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L49_try_end;
    __pyx_L44_error:;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "PygameShader/Palette.pyx":62
 *     from numpy import empty, uint8, float32, asarray, \
 *         ascontiguousarray, zeros, uint32, int32, int8, array, ndarray
 * except ImportError:             # <<<<<<<<<<<<<<
 *     raise ImportError("\n<numpy> library is missing on your system."
 *           "\nTry: \n   C:\\pip install numpy on a window command prompt.")
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ImportError);
    if (__pyx_t_9) {
      __Pyx_AddTraceback("PygameShader.Palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_7) < 0) __PYX_ERR(1, 62, __pyx_L46_except_error)
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_7);

      /* "PygameShader/Palette.pyx":63
 *         ascontiguousarray, zeros, uint32, int32, int8, array, ndarray
 * except ImportError:
 *     raise ImportError("\n<numpy> library is missing on your system."             # <<<<<<<<<<<<<<
 *           "\nTry: \n   C:\\pip install numpy on a window command prompt.")
 * 
 */
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 63, __pyx_L46_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_Raise(__pyx_t_10, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __PYX_ERR(1, 63, __pyx_L46_except_error)
    }
    goto __pyx_L46_except_error;

    /* "PygameShader/Palette.pyx":59
 *           "\nTry: \n   C:\\pip install pygame on a window command prompt.")
 * 
 * try:             # <<<<<<<<<<<<<<
 *     from numpy import empty, uint8, float32, asarray, \
 *         ascontiguousarray, zeros, uint32, int32, int8, array, ndarray
 */
    __pyx_L46_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L49_try_end:;
  }

  /* "PygameShader/Palette.pyx":69
 * from PygameShader.misc cimport is_type_memoryview
 * 
 * from PygameShader.config import OPENMP, THREAD_NUMBER, __VERSION__             # <<<<<<<<<<<<<<
 * from libc.string cimport memcpy
 * 
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_n_s_OPENMP);
  __Pyx_GIVEREF(__pyx_n_s_OPENMP);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_n_s_OPENMP)) __PYX_ERR(1, 69, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_THREAD_NUMBER);
  __Pyx_GIVEREF(__pyx_n_s_THREAD_NUMBER);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_n_s_THREAD_NUMBER)) __PYX_ERR(1, 69, __pyx_L1_error);
  __Pyx_INCREF(__pyx_n_s_VERSION);
  __Pyx_GIVEREF(__pyx_n_s_VERSION);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_n_s_VERSION)) __PYX_ERR(1, 69, __pyx_L1_error);
  __pyx_t_5 = __Pyx_Import(__pyx_n_s_PygameShader_config, __pyx_t_7, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_OPENMP); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OPENMP, __pyx_t_7) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_THREAD_NUMBER); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_THREAD_NUMBER, __pyx_t_7) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_ImportFrom(__pyx_t_5, __pyx_n_s_VERSION); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VERSION, __pyx_t_7) < 0) __PYX_ERR(1, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":73
 * 
 * 
 * cdef int THREADS = 1             # <<<<<<<<<<<<<<
 * 
 * if OPENMP:
 */
  __pyx_v_12PygameShader_7Palette_THREADS = 1;

  /* "PygameShader/Palette.pyx":75
 * cdef int THREADS = 1
 * 
 * if OPENMP:             # <<<<<<<<<<<<<<
 *      THREADS = THREAD_NUMBER
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_OPENMP); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(1, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {

    /* "PygameShader/Palette.pyx":76
 * 
 * if OPENMP:
 *      THREADS = THREAD_NUMBER             # <<<<<<<<<<<<<<
 * 
 * DEF SCHEDULE = 'static'
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_THREAD_NUMBER); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 76, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_12PygameShader_7Palette_THREADS = __pyx_t_9;

    /* "PygameShader/Palette.pyx":75
 * cdef int THREADS = 1
 * 
 * if OPENMP:             # <<<<<<<<<<<<<<
 *      THREADS = THREAD_NUMBER
 * 
 */
  }

  /* "PygameShader/Palette.pyx":146
 * # SILVER
 * 
 * _CGA_TEST = "The Color Graphics Adapter (CGA) outputs what IBM called digital RGB[1] " \             # <<<<<<<<<<<<<<
 *            "(that is, the R, G, B (and I) signals from the graphics card to the monitor " \
 *            "can each only have two states: on or off). CGA supports a maximum of 16 colors." \
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_TEST, __pyx_kp_u_The_Color_Graphics_Adapter_CGA_o) < 0) __PYX_ERR(1, 146, __pyx_L1_error)

  /* "PygameShader/Palette.pyx":166
 * 
 * LIST_PALETTES = {
 *     "TELETEXT" :             # <<<<<<<<<<<<<<
 *         "World System Teletext Level 1 (1976) uses a 3-bit RGB, 8-color palette."
 *         " Teletext has 4025 characters per page of which the first row is reserved"
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(37); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_TELETEXT, __pyx_kp_u_World_System_Teletext_Level_1_19) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_BBC_MICRO, __pyx_kp_u_BBC_Micro_has_8_display_modes_wi) < 0) __PYX_ERR(1, 166, __pyx_L1_error)

  /* "PygameShader/Palette.pyx":183
 * 
 * 
 *     "CGA_MODE4_PAL1_LOW" : _CGA_TEST,             # <<<<<<<<<<<<<<
 *     "CGA_MODE4_PAL1_HIGH": _CGA_TEST,
 *     "CGA_MODE4_PAL2_LOW" : _CGA_TEST,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_CGA_TEST); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_CGA_MODE4_PAL1_LOW, __pyx_t_7) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":184
 * 
 *     "CGA_MODE4_PAL1_LOW" : _CGA_TEST,
 *     "CGA_MODE4_PAL1_HIGH": _CGA_TEST,             # <<<<<<<<<<<<<<
 *     "CGA_MODE4_PAL2_LOW" : _CGA_TEST,
 *     "CGA_MODE4_PAL2_HIGH": _CGA_TEST,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_CGA_TEST); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_CGA_MODE4_PAL1_HIGH, __pyx_t_7) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":185
 *     "CGA_MODE4_PAL1_LOW" : _CGA_TEST,
 *     "CGA_MODE4_PAL1_HIGH": _CGA_TEST,
 *     "CGA_MODE4_PAL2_LOW" : _CGA_TEST,             # <<<<<<<<<<<<<<
 *     "CGA_MODE4_PAL2_HIGH": _CGA_TEST,
 *     "CGA_MODE5_LOW"      : _CGA_TEST,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_CGA_TEST); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_CGA_MODE4_PAL2_LOW, __pyx_t_7) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":186
 *     "CGA_MODE4_PAL1_HIGH": _CGA_TEST,
 *     "CGA_MODE4_PAL2_LOW" : _CGA_TEST,
 *     "CGA_MODE4_PAL2_HIGH": _CGA_TEST,             # <<<<<<<<<<<<<<
 *     "CGA_MODE5_LOW"      : _CGA_TEST,
 *     "CGA_MODE5_HIGH"     : _CGA_TEST,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_CGA_TEST); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_CGA_MODE4_PAL2_HIGH, __pyx_t_7) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":187
 *     "CGA_MODE4_PAL2_LOW" : _CGA_TEST,
 *     "CGA_MODE4_PAL2_HIGH": _CGA_TEST,
 *     "CGA_MODE5_LOW"      : _CGA_TEST,             # <<<<<<<<<<<<<<
 *     "CGA_MODE5_HIGH"     : _CGA_TEST,
 *     "ZX_SPECTRUM_LOW"    :
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_CGA_TEST); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_CGA_MODE5_LOW, __pyx_t_7) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":188
 *     "CGA_MODE4_PAL2_HIGH": _CGA_TEST,
 *     "CGA_MODE5_LOW"      : _CGA_TEST,
 *     "CGA_MODE5_HIGH"     : _CGA_TEST,             # <<<<<<<<<<<<<<
 *     "ZX_SPECTRUM_LOW"    :
 *         "The ZX Spectrum (and compatible) computers use a variation of the 4-bit RGBI palette"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_CGA_TEST); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_CGA_MODE5_HIGH, __pyx_t_7) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_ZX_SPECTRUM_LOW, __pyx_kp_u_The_ZX_Spectrum_and_compatible_c) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_ZX_SPECTRUM_HIGH, __pyx_kp_u_The_ZX_Spectrum_and_compatible_c) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_APPLE_II_LOW, __pyx_kp_u_The_Apple_II_series_features_a_1) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_APPLE_II_HIGH, __pyx_kp_u_The_Apple_II_series_features_a_1) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_APPLE_II, __pyx_kp_u_The_Apple_II_series_features_a_1) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_COMMODORE_64, __pyx_kp_u_The_Commodore_64_has_two_graphic) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_AMSTRAD_CPC, __pyx_kp_u_The_Amstrad_CPC_464_664_6128_ser) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MSX, __pyx_kp_u_The_MSX_series_has_two_graphic_m) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_TO7, __pyx_kp_u_For_Thomson_computers_a_popular) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_PICO_8, __pyx_kp_u_Every_pixel_on_PICO_8_is_stored) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_PICO_8_CUSTOM, __pyx_kp_u_Every_pixel_on_PICO_8_is_stored) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MICROSOFT_WINDOWS_16, __pyx_kp_u_Microsoft_Windows_and_IBM_OS_2_d) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MICROSOFT_WINDOWS_20, __pyx_kp_u_Microsoft_Windows_default_20_col) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MICROSOFT_WINDOWS_PAINT, __pyx_kp_u_Microsoft_paint_color_palette) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MONO_PHOSPHOR_AMBER, __pyx_kp_u_MONOCHROME_2_amber_colors) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MONO_PHOSPHOR_LTAMBER, __pyx_kp_u_MONOCHROME_2_amber_colors) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MONO_PHOSPHOR_GREEN1, __pyx_kp_u_MONOCHROME_2_green_colors) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MONO_PHOSPHOR_GREEN2, __pyx_kp_u_MONOCHROME_2_green_colors) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_MONO_PHOSPHOR_GREEN3, __pyx_kp_u_MONOCHROME_2_green_colors) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_AAP64, __pyx_kp_u_64_colors_palette_by_Adigun_Pola) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_APOLLO, __pyx_kp_u_46_colors_palette_by_AdamCYounis) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_FUNKYFUTURE, __pyx_kp_u_8_colors_palette_Created_by_Sham) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_VINIK24, __pyx_kp_u_24_colors_palette_Created_by_Vin) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_TWILIOQUEST76, __pyx_kp_u_76_colors_palette_Created_by_Ker) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_IRIDESCENTCRYSTAL, __pyx_kp_u_Created_by_LostInIndigo) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_AAPSPLENDOR128, __pyx_kp_u_128_colors_Created_by_Adigun_A_P) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_LOSPEC500, __pyx_kp_u_https_lospec_com_palette_list_lo) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_FAMICUBE, __pyx_kp_u_Created_by_Arne_as_part_of_his_F) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_u_SILVER, __pyx_kp_u_Created_by_Okee) < 0) __PYX_ERR(1, 166, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LIST_PALETTES, __pyx_t_5) < 0) __PYX_ERR(1, 165, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":305
 * 
 * 
 * _TELETEXT_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0., 0., 255.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "PygameShader/Palette.pyx":306
 * 
 * _TELETEXT_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 0., 255.0/255.0 ],
 *     [ 255.0/255.0, 0.0, 0.0 ],
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_float_0_)) __PYX_ERR(1, 306, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_float_0_)) __PYX_ERR(1, 306, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_)) __PYX_ERR(1, 306, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":307
 * _TELETEXT_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 0., 0., 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 0.0, 0.0 ],
 *     [ 255.0/255.0, 0.0, 255.0/255.0 ],
 */
  __pyx_t_4 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_)) __PYX_ERR(1, 307, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_)) __PYX_ERR(1, 307, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_4)) __PYX_ERR(1, 307, __pyx_L1_error);
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":308
 *     [ 0., 0., 0. ],
 *     [ 0., 0., 255.0/255.0 ],
 *     [ 255.0/255.0, 0.0, 0.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 0.0, 255.0/255.0 ],
 *     [ 0., 255.0/255.0, 0.0 ],
 */
  __pyx_t_4 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_4)) __PYX_ERR(1, 308, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_0)) __PYX_ERR(1, 308, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_0_0)) __PYX_ERR(1, 308, __pyx_L1_error);
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":309
 *     [ 0., 0., 255.0/255.0 ],
 *     [ 255.0/255.0, 0.0, 0.0 ],
 *     [ 255.0/255.0, 0.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 0., 255.0/255.0, 0.0 ],
 *     [ 0.0, 255.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_4 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_4)) __PYX_ERR(1, 309, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_float_0_0)) __PYX_ERR(1, 309, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_12)) __PYX_ERR(1, 309, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":310
 *     [ 255.0/255.0, 0.0, 0.0 ],
 *     [ 255.0/255.0, 0.0, 255.0/255.0 ],
 *     [ 0., 255.0/255.0, 0.0 ],             # <<<<<<<<<<<<<<
 *     [ 0.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 0.0 ],
 */
  __pyx_t_12 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_)) __PYX_ERR(1, 310, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_12)) __PYX_ERR(1, 310, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_0)) __PYX_ERR(1, 310, __pyx_L1_error);
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":311
 *     [ 255.0/255.0, 0.0, 255.0/255.0 ],
 *     [ 0., 255.0/255.0, 0.0 ],
 *     [ 0.0, 255.0/255.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 0.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 */
  __pyx_t_12 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_14 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_0)) __PYX_ERR(1, 311, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_12)) __PYX_ERR(1, 311, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_14)) __PYX_ERR(1, 311, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_14 = 0;

  /* "PygameShader/Palette.pyx":312
 *     [ 0., 255.0/255.0, 0.0 ],
 *     [ 0.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 0.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)
 */
  __pyx_t_14 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_12 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_14)) __PYX_ERR(1, 312, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_12)) __PYX_ERR(1, 312, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_0)) __PYX_ERR(1, 312, __pyx_L1_error);
  __pyx_t_14 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":313
 *     [ 0.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 0.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * TELETEXT =_TELETEXT_NORMALIZED * <float>255.0
 */
  __pyx_t_12 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_14 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_17 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_t_12)) __PYX_ERR(1, 313, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_t_14)) __PYX_ERR(1, 313, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_t_17)) __PYX_ERR(1, 313, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_14 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":305
 * 
 * 
 * _TELETEXT_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0., 0., 255.0/255.0 ],
 */
  __pyx_t_17 = PyList_New(8); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_7)) __PYX_ERR(1, 305, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_10)) __PYX_ERR(1, 305, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_11)) __PYX_ERR(1, 305, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_13)) __PYX_ERR(1, 305, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_4)) __PYX_ERR(1, 305, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 5, __pyx_t_15)) __PYX_ERR(1, 305, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 6, __pyx_t_16)) __PYX_ERR(1, 305, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 7, __pyx_t_18)) __PYX_ERR(1, 305, __pyx_L1_error);
  __pyx_t_7 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_13 = 0;
  __pyx_t_4 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_18 = 0;
  __pyx_t_18 = PyTuple_New(1); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_17)) __PYX_ERR(1, 305, __pyx_L1_error);
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":314
 *     [ 255.0/255.0, 255.0/255.0, 0.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * TELETEXT =_TELETEXT_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_17 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_float32); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 314, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_dtype, __pyx_t_16) < 0) __PYX_ERR(1, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":305
 * 
 * 
 * _TELETEXT_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0., 0., 255.0/255.0 ],
 */
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_18, __pyx_t_17); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TELETEXT_NORMALIZED, __pyx_t_16) < 0) __PYX_ERR(1, 305, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":315
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)
 * TELETEXT =_TELETEXT_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * BBC_MICRO = TELETEXT
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_TELETEXT_NORMALIZED); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyNumber_Multiply(__pyx_t_16, __pyx_t_17); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TELETEXT, __pyx_t_18) < 0) __PYX_ERR(1, 315, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":317
 * TELETEXT =_TELETEXT_NORMALIZED * <float>255.0
 * 
 * BBC_MICRO = TELETEXT             # <<<<<<<<<<<<<<
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_LOW = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_TELETEXT); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BBC_MICRO, __pyx_t_18) < 0) __PYX_ERR(1, 317, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":319
 * BBC_MICRO = TELETEXT
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0., 0.66666, 0.6666 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_array); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);

  /* "PygameShader/Palette.pyx":320
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_LOW = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 0.66666, 0.6666 ],
 *     [ 0.66666, 0., 0.6666 ],
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_)) __PYX_ERR(1, 320, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_)) __PYX_ERR(1, 320, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_)) __PYX_ERR(1, 320, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":321
 * _CGA_MODE4_PAL1_NORMALIZED_LOW = array([
 *     [ 0., 0., 0. ],
 *     [ 0., 0.66666, 0.6666 ],             # <<<<<<<<<<<<<<
 *     [ 0.66666, 0., 0.6666 ],
 *     [ 0.66666, 0.6666, 0.66666 ]
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_)) __PYX_ERR(1, 321, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_66666);
  __Pyx_GIVEREF(__pyx_float_0_66666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_66666)) __PYX_ERR(1, 321, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6666);
  __Pyx_GIVEREF(__pyx_float_0_6666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_6666)) __PYX_ERR(1, 321, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":322
 *     [ 0., 0., 0. ],
 *     [ 0., 0.66666, 0.6666 ],
 *     [ 0.66666, 0., 0.6666 ],             # <<<<<<<<<<<<<<
 *     [ 0.66666, 0.6666, 0.66666 ]
 * ], dtype=float32)
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 322, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_66666);
  __Pyx_GIVEREF(__pyx_float_0_66666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_0_66666)) __PYX_ERR(1, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_)) __PYX_ERR(1, 322, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6666);
  __Pyx_GIVEREF(__pyx_float_0_6666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_6666)) __PYX_ERR(1, 322, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":323
 *     [ 0., 0.66666, 0.6666 ],
 *     [ 0.66666, 0., 0.6666 ],
 *     [ 0.66666, 0.6666, 0.66666 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * CGA_MODE4_PAL1_LOW =_CGA_MODE4_PAL1_NORMALIZED_LOW * <float>255.0
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_66666);
  __Pyx_GIVEREF(__pyx_float_0_66666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_66666)) __PYX_ERR(1, 323, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6666);
  __Pyx_GIVEREF(__pyx_float_0_6666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_6666)) __PYX_ERR(1, 323, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_66666);
  __Pyx_GIVEREF(__pyx_float_0_66666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_66666)) __PYX_ERR(1, 323, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":319
 * BBC_MICRO = TELETEXT
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0., 0.66666, 0.6666 ],
 */
  __pyx_t_4 = PyList_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_17)) __PYX_ERR(1, 319, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_16)) __PYX_ERR(1, 319, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_5)) __PYX_ERR(1, 319, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_15)) __PYX_ERR(1, 319, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_16 = 0;
  __pyx_t_5 = 0;
  __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_4)) __PYX_ERR(1, 319, __pyx_L1_error);
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":324
 *     [ 0.66666, 0., 0.6666 ],
 *     [ 0.66666, 0.6666, 0.66666 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * CGA_MODE4_PAL1_LOW =_CGA_MODE4_PAL1_NORMALIZED_LOW * <float>255.0
 * 
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":319
 * BBC_MICRO = TELETEXT
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0., 0.66666, 0.6666 ],
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_15, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_LOW, __pyx_t_5) < 0) __PYX_ERR(1, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":325
 *     [ 0.66666, 0.6666, 0.66666 ]
 * ], dtype=float32)
 * CGA_MODE4_PAL1_LOW =_CGA_MODE4_PAL1_NORMALIZED_LOW * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_HIGH = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_LOW); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = PyNumber_Multiply(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE4_PAL1_LOW, __pyx_t_15) < 0) __PYX_ERR(1, 325, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":327
 * CGA_MODE4_PAL1_LOW =_CGA_MODE4_PAL1_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_array); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);

  /* "PygameShader/Palette.pyx":328
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_HIGH = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 85.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_)) __PYX_ERR(1, 328, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_)) __PYX_ERR(1, 328, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_)) __PYX_ERR(1, 328, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":329
 * _CGA_MODE4_PAL1_NORMALIZED_HIGH = array([
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 85.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 */
  __pyx_t_5 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_18 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_16 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_5)) __PYX_ERR(1, 329, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_18)) __PYX_ERR(1, 329, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_16)) __PYX_ERR(1, 329, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_18 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":330
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 85.0/255.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_16 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_18 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_5 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_16)) __PYX_ERR(1, 330, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_18)) __PYX_ERR(1, 330, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_5)) __PYX_ERR(1, 330, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_18 = 0;
  __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":331
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 85.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * CGA_MODE4_PAL1_HIGH =_CGA_MODE4_PAL1_NORMALIZED_HIGH * <float>255.0
 */
  __pyx_t_5 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_18 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_16 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_5)) __PYX_ERR(1, 331, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_18)) __PYX_ERR(1, 331, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_16)) __PYX_ERR(1, 331, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_18 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":327
 * CGA_MODE4_PAL1_LOW =_CGA_MODE4_PAL1_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_16 = PyList_New(4); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_4)) __PYX_ERR(1, 327, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_17)) __PYX_ERR(1, 327, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_13)) __PYX_ERR(1, 327, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_t_11)) __PYX_ERR(1, 327, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_17 = 0;
  __pyx_t_13 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_16)) __PYX_ERR(1, 327, __pyx_L1_error);
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":332
 *     [ 255.0/255.0, 85.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * CGA_MODE4_PAL1_HIGH =_CGA_MODE4_PAL1_NORMALIZED_HIGH * <float>255.0
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_float32); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(1, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":327
 * CGA_MODE4_PAL1_LOW =_CGA_MODE4_PAL1_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE4_PAL1_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_11, __pyx_t_16); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_HIGH, __pyx_t_13) < 0) __PYX_ERR(1, 327, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":333
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)
 * CGA_MODE4_PAL1_HIGH =_CGA_MODE4_PAL1_NORMALIZED_HIGH * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_CGA_MODE4_PAL1_NORMALIZED_HIGH); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_16 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_11 = PyNumber_Multiply(__pyx_t_13, __pyx_t_16); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE4_PAL1_HIGH, __pyx_t_11) < 0) __PYX_ERR(1, 333, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":336
 * 
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0, 170.0/255.0, 0.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "PygameShader/Palette.pyx":337
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_LOW = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0.0, 170.0/255.0, 0.0 ],
 *     [ 170.0/255.0, 0.0, 0.0 ],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 337, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_)) __PYX_ERR(1, 337, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_)) __PYX_ERR(1, 337, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_)) __PYX_ERR(1, 337, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":338
 * _CGA_MODE4_PAL2_NORMALIZED_LOW = array([
 *     [ 0., 0., 0. ],
 *     [ 0.0, 170.0/255.0, 0.0 ],             # <<<<<<<<<<<<<<
 *     [ 170.0/255.0, 0.0, 0.0 ],
 *     [ 170.0/255.0, 85.0/255.0, 0.0 ]
 */
  __pyx_t_13 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_0)) __PYX_ERR(1, 338, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_13)) __PYX_ERR(1, 338, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_0)) __PYX_ERR(1, 338, __pyx_L1_error);
  __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":339
 *     [ 0., 0., 0. ],
 *     [ 0.0, 170.0/255.0, 0.0 ],
 *     [ 170.0/255.0, 0.0, 0.0 ],             # <<<<<<<<<<<<<<
 *     [ 170.0/255.0, 85.0/255.0, 0.0 ]
 * ], dtype=float32)
 */
  __pyx_t_13 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_13)) __PYX_ERR(1, 339, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_0)) __PYX_ERR(1, 339, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_0)) __PYX_ERR(1, 339, __pyx_L1_error);
  __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":340
 *     [ 0.0, 170.0/255.0, 0.0 ],
 *     [ 170.0/255.0, 0.0, 0.0 ],
 *     [ 170.0/255.0, 85.0/255.0, 0.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * CGA_MODE4_PAL2_LOW =_CGA_MODE4_PAL2_NORMALIZED_LOW * <float>255.0
 */
  __pyx_t_13 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_4 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_t_13)) __PYX_ERR(1, 340, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_t_4)) __PYX_ERR(1, 340, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_float_0_0)) __PYX_ERR(1, 340, __pyx_L1_error);
  __pyx_t_13 = 0;
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":336
 * 
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0, 170.0/255.0, 0.0 ],
 */
  __pyx_t_4 = PyList_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_16)) __PYX_ERR(1, 336, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_15)) __PYX_ERR(1, 336, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_17)) __PYX_ERR(1, 336, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_18)) __PYX_ERR(1, 336, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_15 = 0;
  __pyx_t_17 = 0;
  __pyx_t_18 = 0;
  __pyx_t_18 = PyTuple_New(1); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_18, 0, __pyx_t_4)) __PYX_ERR(1, 336, __pyx_L1_error);
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":341
 *     [ 170.0/255.0, 0.0, 0.0 ],
 *     [ 170.0/255.0, 85.0/255.0, 0.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * CGA_MODE4_PAL2_LOW =_CGA_MODE4_PAL2_NORMALIZED_LOW * <float>255.0
 * 
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_float32); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_17) < 0) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":336
 * 
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0, 170.0/255.0, 0.0 ],
 */
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_18, __pyx_t_4); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_LOW, __pyx_t_17) < 0) __PYX_ERR(1, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":342
 *     [ 170.0/255.0, 85.0/255.0, 0.0 ]
 * ], dtype=float32)
 * CGA_MODE4_PAL2_LOW =_CGA_MODE4_PAL2_NORMALIZED_LOW * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_HIGH = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_LOW); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_4 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_18 = PyNumber_Multiply(__pyx_t_17, __pyx_t_4); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE4_PAL2_LOW, __pyx_t_18) < 0) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":344
 * CGA_MODE4_PAL2_LOW =_CGA_MODE4_PAL2_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 85.0/255.0],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_array); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);

  /* "PygameShader/Palette.pyx":345
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_HIGH = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 85.0/255.0, 255.0/255.0, 85.0/255.0],
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_)) __PYX_ERR(1, 345, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_)) __PYX_ERR(1, 345, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_)) __PYX_ERR(1, 345, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":346
 * _CGA_MODE4_PAL2_NORMALIZED_HIGH = array([
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 85.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 85.0/255.0 ]
 */
  __pyx_t_17 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_11 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_15 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_17)) __PYX_ERR(1, 346, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_11)) __PYX_ERR(1, 346, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_15)) __PYX_ERR(1, 346, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":347
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 85.0/255.0],
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 85.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_15 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_11 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_15)) __PYX_ERR(1, 347, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_11)) __PYX_ERR(1, 347, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_17)) __PYX_ERR(1, 347, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_11 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":348
 *     [ 85.0/255.0, 255.0/255.0, 85.0/255.0],
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 85.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * CGA_MODE4_PAL2_HIGH =_CGA_MODE4_PAL2_NORMALIZED_HIGH * <float>255.0
 */
  __pyx_t_17 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_11 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_15 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_17)) __PYX_ERR(1, 348, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_11)) __PYX_ERR(1, 348, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_15)) __PYX_ERR(1, 348, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":344
 * CGA_MODE4_PAL2_LOW =_CGA_MODE4_PAL2_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 85.0/255.0],
 */
  __pyx_t_15 = PyList_New(4); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_4)) __PYX_ERR(1, 344, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_16)) __PYX_ERR(1, 344, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_13)) __PYX_ERR(1, 344, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 3, __pyx_t_5)) __PYX_ERR(1, 344, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_16 = 0;
  __pyx_t_13 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_15)) __PYX_ERR(1, 344, __pyx_L1_error);
  __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":349
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 85.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * CGA_MODE4_PAL2_HIGH =_CGA_MODE4_PAL2_NORMALIZED_HIGH * <float>255.0
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_float32); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(1, 349, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":344
 * CGA_MODE4_PAL2_LOW =_CGA_MODE4_PAL2_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE4_PAL2_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 85.0/255.0],
 */
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_18, __pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_HIGH, __pyx_t_13) < 0) __PYX_ERR(1, 344, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":350
 *     [ 255.0/255.0, 255.0/255.0, 85.0/255.0 ]
 * ], dtype=float32)
 * CGA_MODE4_PAL2_HIGH =_CGA_MODE4_PAL2_NORMALIZED_HIGH * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_CGA_MODE4_PAL2_NORMALIZED_HIGH); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_15 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_13, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE4_PAL2_HIGH, __pyx_t_5) < 0) __PYX_ERR(1, 350, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":353
 * 
 * 
 * _CGA_MODE5_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 170.0/255.0, 170./255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "PygameShader/Palette.pyx":354
 * 
 * _CGA_MODE5_NORMALIZED_LOW = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0.0/255.0, 170.0/255.0, 170./255.0 ],
 *     [ 170.0/255.0, 0.0, 0.0 ],
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_)) __PYX_ERR(1, 354, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_)) __PYX_ERR(1, 354, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_)) __PYX_ERR(1, 354, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":355
 * _CGA_MODE5_NORMALIZED_LOW = array([
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 170.0/255.0, 170./255.0 ],             # <<<<<<<<<<<<<<
 *     [ 170.0/255.0, 0.0, 0.0 ],
 *     [ 170.0/255.0, 170.0/255.0, 170.0/255.0 ]
 */
  __pyx_t_13 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_18 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_16 = PyFloat_FromDouble((170. / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_13)) __PYX_ERR(1, 355, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_18)) __PYX_ERR(1, 355, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_16)) __PYX_ERR(1, 355, __pyx_L1_error);
  __pyx_t_13 = 0;
  __pyx_t_18 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":356
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 170.0/255.0, 170./255.0 ],
 *     [ 170.0/255.0, 0.0, 0.0 ],             # <<<<<<<<<<<<<<
 *     [ 170.0/255.0, 170.0/255.0, 170.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_16 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_t_16)) __PYX_ERR(1, 356, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_float_0_0)) __PYX_ERR(1, 356, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_float_0_0)) __PYX_ERR(1, 356, __pyx_L1_error);
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":357
 *     [ 0.0/255.0, 170.0/255.0, 170./255.0 ],
 *     [ 170.0/255.0, 0.0, 0.0 ],
 *     [ 170.0/255.0, 170.0/255.0, 170.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * CGA_MODE5_LOW =_CGA_MODE5_NORMALIZED_LOW * <float>255.0
 */
  __pyx_t_16 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_13 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_11 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_16)) __PYX_ERR(1, 357, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_13)) __PYX_ERR(1, 357, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_11)) __PYX_ERR(1, 357, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_13 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":353
 * 
 * 
 * _CGA_MODE5_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 170.0/255.0, 170./255.0 ],
 */
  __pyx_t_11 = PyList_New(4); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_15)) __PYX_ERR(1, 353, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_4)) __PYX_ERR(1, 353, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_18)) __PYX_ERR(1, 353, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 3, __pyx_t_17)) __PYX_ERR(1, 353, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_4 = 0;
  __pyx_t_18 = 0;
  __pyx_t_17 = 0;
  __pyx_t_17 = PyTuple_New(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_11)) __PYX_ERR(1, 353, __pyx_L1_error);
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":358
 *     [ 170.0/255.0, 0.0, 0.0 ],
 *     [ 170.0/255.0, 170.0/255.0, 170.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * CGA_MODE5_LOW =_CGA_MODE5_NORMALIZED_LOW * <float>255.0
 * 
 */
  __pyx_t_11 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_float32); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_dtype, __pyx_t_18) < 0) __PYX_ERR(1, 358, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":353
 * 
 * 
 * _CGA_MODE5_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 170.0/255.0, 170./255.0 ],
 */
  __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_17, __pyx_t_11); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE5_NORMALIZED_LOW, __pyx_t_18) < 0) __PYX_ERR(1, 353, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":359
 *     [ 170.0/255.0, 170.0/255.0, 170.0/255.0 ]
 * ], dtype=float32)
 * CGA_MODE5_LOW =_CGA_MODE5_NORMALIZED_LOW * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _CGA_MODE5_NORMALIZED_HIGH = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_CGA_MODE5_NORMALIZED_LOW); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_11 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_17 = PyNumber_Multiply(__pyx_t_18, __pyx_t_11); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE5_LOW, __pyx_t_17) < 0) __PYX_ERR(1, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":361
 * CGA_MODE5_LOW =_CGA_MODE5_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE5_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_array); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);

  /* "PygameShader/Palette.pyx":362
 * 
 * _CGA_MODE5_NORMALIZED_HIGH = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],
 */
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 362, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_float_0_)) __PYX_ERR(1, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_)) __PYX_ERR(1, 362, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_0_)) __PYX_ERR(1, 362, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":363
 * _CGA_MODE5_NORMALIZED_HIGH = array([
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 */
  __pyx_t_18 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_5 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 363, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_18)) __PYX_ERR(1, 363, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_5)) __PYX_ERR(1, 363, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_4)) __PYX_ERR(1, 363, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":364
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_4 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_18 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_4)) __PYX_ERR(1, 364, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_5)) __PYX_ERR(1, 364, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_18)) __PYX_ERR(1, 364, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":365
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * CGA_MODE5_HIGH =_CGA_MODE5_NORMALIZED_HIGH * <float>255.0
 */
  __pyx_t_18 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_5 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 365, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_18)) __PYX_ERR(1, 365, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_5)) __PYX_ERR(1, 365, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_4)) __PYX_ERR(1, 365, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":361
 * CGA_MODE5_LOW =_CGA_MODE5_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE5_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0],
 */
  __pyx_t_4 = PyList_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_11)) __PYX_ERR(1, 361, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_15)) __PYX_ERR(1, 361, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_13)) __PYX_ERR(1, 361, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 3, __pyx_t_16)) __PYX_ERR(1, 361, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;
  __pyx_t_13 = 0;
  __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_4)) __PYX_ERR(1, 361, __pyx_L1_error);
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":366
 *     [ 255.0/255.0, 85.0/255.0, 85.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * CGA_MODE5_HIGH =_CGA_MODE5_NORMALIZED_HIGH * <float>255.0
 * 
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_float32); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 366, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_13) < 0) __PYX_ERR(1, 366, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":361
 * CGA_MODE5_LOW =_CGA_MODE5_NORMALIZED_LOW * <float>255.0
 * 
 * _CGA_MODE5_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 85.0/255.0, 255.0/255.0, 255.0/255.0],
 */
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_16, __pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE5_NORMALIZED_HIGH, __pyx_t_13) < 0) __PYX_ERR(1, 361, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":367
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)
 * CGA_MODE5_HIGH =_CGA_MODE5_NORMALIZED_HIGH * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_CGA_MODE5_NORMALIZED_HIGH); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_4 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_16 = PyNumber_Multiply(__pyx_t_13, __pyx_t_4); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 367, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CGA_MODE5_HIGH, __pyx_t_16) < 0) __PYX_ERR(1, 367, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":370
 * 
 * 
 * _ZX_SPECTRUM_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 192.0/255.0 ] ,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_array); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);

  /* "PygameShader/Palette.pyx":371
 * 
 * _ZX_SPECTRUM_NORMALIZED_LOW = array([
 *      [ 0., 0., 0. ] ,             # <<<<<<<<<<<<<<
 *      [ 0., 0.0, 192.0/255.0 ] ,
 *      [ 192.0/255.0, 0.0, 0.0 ] ,
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_)) __PYX_ERR(1, 371, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_)) __PYX_ERR(1, 371, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_)) __PYX_ERR(1, 371, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":372
 * _ZX_SPECTRUM_NORMALIZED_LOW = array([
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 192.0/255.0 ] ,             # <<<<<<<<<<<<<<
 *      [ 192.0/255.0, 0.0, 0.0 ] ,
 *      [ 192.0/255.0, 0.0, 192.0/255.0 ] ,
 */
  __pyx_t_13 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 372, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_)) __PYX_ERR(1, 372, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_0)) __PYX_ERR(1, 372, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_13)) __PYX_ERR(1, 372, __pyx_L1_error);
  __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":373
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 192.0/255.0 ] ,
 *      [ 192.0/255.0, 0.0, 0.0 ] ,             # <<<<<<<<<<<<<<
 *      [ 192.0/255.0, 0.0, 192.0/255.0 ] ,
 *      [ 0., 192.0/255.0, 0.0 ],
 */
  __pyx_t_13 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_13)) __PYX_ERR(1, 373, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_0)) __PYX_ERR(1, 373, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_0)) __PYX_ERR(1, 373, __pyx_L1_error);
  __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":374
 *      [ 0., 0.0, 192.0/255.0 ] ,
 *      [ 192.0/255.0, 0.0, 0.0 ] ,
 *      [ 192.0/255.0, 0.0, 192.0/255.0 ] ,             # <<<<<<<<<<<<<<
 *      [ 0., 192.0/255.0, 0.0 ],
 *      [ 0., 192.0/255.0, 192.0/255.0 ],
 */
  __pyx_t_13 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_11 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_13)) __PYX_ERR(1, 374, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_0)) __PYX_ERR(1, 374, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_11)) __PYX_ERR(1, 374, __pyx_L1_error);
  __pyx_t_13 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":375
 *      [ 192.0/255.0, 0.0, 0.0 ] ,
 *      [ 192.0/255.0, 0.0, 192.0/255.0 ] ,
 *      [ 0., 192.0/255.0, 0.0 ],             # <<<<<<<<<<<<<<
 *      [ 0., 192.0/255.0, 192.0/255.0 ],
 *      [ 192.0/255.0, 192.0/255.0, 0.0 ],
 */
  __pyx_t_11 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 375, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_float_0_)) __PYX_ERR(1, 375, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_11)) __PYX_ERR(1, 375, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_float_0_0)) __PYX_ERR(1, 375, __pyx_L1_error);
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":376
 *      [ 192.0/255.0, 0.0, 192.0/255.0 ] ,
 *      [ 0., 192.0/255.0, 0.0 ],
 *      [ 0., 192.0/255.0, 192.0/255.0 ],             # <<<<<<<<<<<<<<
 *      [ 192.0/255.0, 192.0/255.0, 0.0 ],
 *      [ 192.0/255.0, 192.0/255.0, 192.0/255.0 ]
 */
  __pyx_t_11 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_18 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_)) __PYX_ERR(1, 376, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_11)) __PYX_ERR(1, 376, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_18)) __PYX_ERR(1, 376, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":377
 *      [ 0., 192.0/255.0, 0.0 ],
 *      [ 0., 192.0/255.0, 192.0/255.0 ],
 *      [ 192.0/255.0, 192.0/255.0, 0.0 ],             # <<<<<<<<<<<<<<
 *      [ 192.0/255.0, 192.0/255.0, 192.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_18 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_11 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_18)) __PYX_ERR(1, 377, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_11)) __PYX_ERR(1, 377, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_0)) __PYX_ERR(1, 377, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":378
 *      [ 0., 192.0/255.0, 192.0/255.0 ],
 *      [ 192.0/255.0, 192.0/255.0, 0.0 ],
 *      [ 192.0/255.0, 192.0/255.0, 192.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * ZX_SPECTRUM_LOW =_ZX_SPECTRUM_NORMALIZED_LOW * <float>255.0
 */
  __pyx_t_11 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_18 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_14 = PyFloat_FromDouble((192.0 / 255.0)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 378, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_11)) __PYX_ERR(1, 378, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_18)) __PYX_ERR(1, 378, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_14)) __PYX_ERR(1, 378, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_18 = 0;
  __pyx_t_14 = 0;

  /* "PygameShader/Palette.pyx":370
 * 
 * 
 * _ZX_SPECTRUM_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 192.0/255.0 ] ,
 */
  __pyx_t_14 = PyList_New(8); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_4)) __PYX_ERR(1, 370, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_17)) __PYX_ERR(1, 370, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_15)) __PYX_ERR(1, 370, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 3, __pyx_t_5)) __PYX_ERR(1, 370, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 4, __pyx_t_13)) __PYX_ERR(1, 370, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 5, __pyx_t_10)) __PYX_ERR(1, 370, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 6, __pyx_t_7)) __PYX_ERR(1, 370, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 7, __pyx_t_12)) __PYX_ERR(1, 370, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_17 = 0;
  __pyx_t_15 = 0;
  __pyx_t_5 = 0;
  __pyx_t_13 = 0;
  __pyx_t_10 = 0;
  __pyx_t_7 = 0;
  __pyx_t_12 = 0;
  __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_14)) __PYX_ERR(1, 370, __pyx_L1_error);
  __pyx_t_14 = 0;

  /* "PygameShader/Palette.pyx":379
 *      [ 192.0/255.0, 192.0/255.0, 0.0 ],
 *      [ 192.0/255.0, 192.0/255.0, 192.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * ZX_SPECTRUM_LOW =_ZX_SPECTRUM_NORMALIZED_LOW * <float>255.0
 * 
 */
  __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_float32); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_dtype, __pyx_t_7) < 0) __PYX_ERR(1, 379, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":370
 * 
 * 
 * _ZX_SPECTRUM_NORMALIZED_LOW = array([             # <<<<<<<<<<<<<<
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 192.0/255.0 ] ,
 */
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_12, __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZX_SPECTRUM_NORMALIZED_LOW, __pyx_t_7) < 0) __PYX_ERR(1, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":380
 *      [ 192.0/255.0, 192.0/255.0, 192.0/255.0 ]
 * ], dtype=float32)
 * ZX_SPECTRUM_LOW =_ZX_SPECTRUM_NORMALIZED_LOW * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_ZX_SPECTRUM_NORMALIZED_LOW); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_14 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_12 = PyNumber_Multiply(__pyx_t_7, __pyx_t_14); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZX_SPECTRUM_LOW, __pyx_t_12) < 0) __PYX_ERR(1, 380, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":383
 * 
 * 
 * _ZX_SPECTRUM_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 255.0/255.0 ] ,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_array); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);

  /* "PygameShader/Palette.pyx":384
 * 
 * _ZX_SPECTRUM_NORMALIZED_HIGH = array([
 *      [ 0., 0., 0. ] ,             # <<<<<<<<<<<<<<
 *      [ 0., 0.0, 255.0/255.0 ] ,
 *      [ 255.0/255.0, 0.0, 0.0 ] ,
 */
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_float_0_)) __PYX_ERR(1, 384, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_float_0_)) __PYX_ERR(1, 384, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_float_0_)) __PYX_ERR(1, 384, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":385
 * _ZX_SPECTRUM_NORMALIZED_HIGH = array([
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 255.0/255.0 ] ,             # <<<<<<<<<<<<<<
 *      [ 255.0/255.0, 0.0, 0.0 ] ,
 *      [ 255.0/255.0, 0.0, 255.0/255.0 ] ,
 */
  __pyx_t_7 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_)) __PYX_ERR(1, 385, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_0)) __PYX_ERR(1, 385, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_7)) __PYX_ERR(1, 385, __pyx_L1_error);
  __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":386
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 255.0/255.0 ] ,
 *      [ 255.0/255.0, 0.0, 0.0 ] ,             # <<<<<<<<<<<<<<
 *      [ 255.0/255.0, 0.0, 255.0/255.0 ] ,
 *      [ 0., 255.0/255.0, 0.0 ],
 */
  __pyx_t_7 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_7)) __PYX_ERR(1, 386, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_0)) __PYX_ERR(1, 386, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_0)) __PYX_ERR(1, 386, __pyx_L1_error);
  __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":387
 *      [ 0., 0.0, 255.0/255.0 ] ,
 *      [ 255.0/255.0, 0.0, 0.0 ] ,
 *      [ 255.0/255.0, 0.0, 255.0/255.0 ] ,             # <<<<<<<<<<<<<<
 *      [ 0., 255.0/255.0, 0.0 ],
 *      [ 0., 255.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_7 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_13 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_7)) __PYX_ERR(1, 387, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_0)) __PYX_ERR(1, 387, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_13)) __PYX_ERR(1, 387, __pyx_L1_error);
  __pyx_t_7 = 0;
  __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":388
 *      [ 255.0/255.0, 0.0, 0.0 ] ,
 *      [ 255.0/255.0, 0.0, 255.0/255.0 ] ,
 *      [ 0., 255.0/255.0, 0.0 ],             # <<<<<<<<<<<<<<
 *      [ 0., 255.0/255.0, 255.0/255.0 ],
 *      [ 255.0/255.0, 255.0/255.0, 0.0 ],
 */
  __pyx_t_13 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_float_0_)) __PYX_ERR(1, 388, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_13)) __PYX_ERR(1, 388, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_0)) __PYX_ERR(1, 388, __pyx_L1_error);
  __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":389
 *      [ 255.0/255.0, 0.0, 255.0/255.0 ] ,
 *      [ 0., 255.0/255.0, 0.0 ],
 *      [ 0., 255.0/255.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *      [ 255.0/255.0, 255.0/255.0, 0.0 ],
 *      [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 */
  __pyx_t_13 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_15 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_)) __PYX_ERR(1, 389, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_13)) __PYX_ERR(1, 389, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_15)) __PYX_ERR(1, 389, __pyx_L1_error);
  __pyx_t_13 = 0;
  __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":390
 *      [ 0., 255.0/255.0, 0.0 ],
 *      [ 0., 255.0/255.0, 255.0/255.0 ],
 *      [ 255.0/255.0, 255.0/255.0, 0.0 ],             # <<<<<<<<<<<<<<
 *      [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_15 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_13 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_15)) __PYX_ERR(1, 390, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_13)) __PYX_ERR(1, 390, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_0)) __PYX_ERR(1, 390, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":391
 *      [ 0., 255.0/255.0, 255.0/255.0 ],
 *      [ 255.0/255.0, 255.0/255.0, 0.0 ],
 *      [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * ZX_SPECTRUM_HIGH =_ZX_SPECTRUM_NORMALIZED_HIGH * <float>255.0
 */
  __pyx_t_13 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_15 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_18 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 391, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_13)) __PYX_ERR(1, 391, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_15)) __PYX_ERR(1, 391, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_18)) __PYX_ERR(1, 391, __pyx_L1_error);
  __pyx_t_13 = 0;
  __pyx_t_15 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":383
 * 
 * 
 * _ZX_SPECTRUM_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 255.0/255.0 ] ,
 */
  __pyx_t_18 = PyList_New(8); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_t_14)) __PYX_ERR(1, 383, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_t_16)) __PYX_ERR(1, 383, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_t_10)) __PYX_ERR(1, 383, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 3, __pyx_t_5)) __PYX_ERR(1, 383, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 4, __pyx_t_7)) __PYX_ERR(1, 383, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 5, __pyx_t_17)) __PYX_ERR(1, 383, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 6, __pyx_t_4)) __PYX_ERR(1, 383, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 7, __pyx_t_11)) __PYX_ERR(1, 383, __pyx_L1_error);
  __pyx_t_14 = 0;
  __pyx_t_16 = 0;
  __pyx_t_10 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_17 = 0;
  __pyx_t_4 = 0;
  __pyx_t_11 = 0;
  __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_18)) __PYX_ERR(1, 383, __pyx_L1_error);
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":392
 *      [ 255.0/255.0, 255.0/255.0, 0.0 ],
 *      [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * ZX_SPECTRUM_HIGH =_ZX_SPECTRUM_NORMALIZED_HIGH * <float>255.0
 * 
 */
  __pyx_t_18 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_float32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_dtype, __pyx_t_4) < 0) __PYX_ERR(1, 392, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":383
 * 
 * 
 * _ZX_SPECTRUM_NORMALIZED_HIGH = array([             # <<<<<<<<<<<<<<
 *      [ 0., 0., 0. ] ,
 *      [ 0., 0.0, 255.0/255.0 ] ,
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_11, __pyx_t_18); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZX_SPECTRUM_NORMALIZED_HIGH, __pyx_t_4) < 0) __PYX_ERR(1, 383, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":393
 *      [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)
 * ZX_SPECTRUM_HIGH =_ZX_SPECTRUM_NORMALIZED_HIGH * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_ZX_SPECTRUM_NORMALIZED_HIGH); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_18 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_11 = PyNumber_Multiply(__pyx_t_4, __pyx_t_18); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ZX_SPECTRUM_HIGH, __pyx_t_11) < 0) __PYX_ERR(1, 393, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":396
 * 
 * 
 * _APPLE_II_LOW_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "PygameShader/Palette.pyx":397
 * 
 * _APPLE_II_LOW_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_float_0_)) __PYX_ERR(1, 397, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_float_0_)) __PYX_ERR(1, 397, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_float_0_)) __PYX_ERR(1, 397, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":398
 * _APPLE_II_LOW_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],
 */
  __pyx_t_4 = PyFloat_FromDouble((108.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = PyFloat_FromDouble((41.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_17 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_4)) __PYX_ERR(1, 398, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_12)) __PYX_ERR(1, 398, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_17)) __PYX_ERR(1, 398, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":399
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],
 */
  __pyx_t_17 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_12 = PyFloat_FromDouble((53.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = PyFloat_FromDouble((120.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_17)) __PYX_ERR(1, 399, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_12)) __PYX_ERR(1, 399, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_4)) __PYX_ERR(1, 399, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_12 = 0;
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":400
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],
 */
  __pyx_t_4 = PyFloat_FromDouble((217.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = PyFloat_FromDouble((60.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_17 = PyFloat_FromDouble((240.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_4)) __PYX_ERR(1, 400, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_12)) __PYX_ERR(1, 400, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_17)) __PYX_ERR(1, 400, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":401
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],
 */
  __pyx_t_17 = PyFloat_FromDouble((19.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_12 = PyFloat_FromDouble((87.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_17)) __PYX_ERR(1, 401, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_12)) __PYX_ERR(1, 401, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_4)) __PYX_ERR(1, 401, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_12 = 0;
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":402
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0]
 */
  __pyx_t_4 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_17 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 402, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_4)) __PYX_ERR(1, 402, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_12)) __PYX_ERR(1, 402, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_17)) __PYX_ERR(1, 402, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":403
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0]
 * ], dtype=float32)
 */
  __pyx_t_17 = PyFloat_FromDouble((38.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_12 = PyFloat_FromDouble((151.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_4 = PyFloat_FromDouble((240.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_17)) __PYX_ERR(1, 403, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_12)) __PYX_ERR(1, 403, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_4)) __PYX_ERR(1, 403, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_12 = 0;
  __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":404
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * APPLE_II_LOW =_APPLE_II_LOW_NORMALIZED * <float>255.0
 */
  __pyx_t_4 = PyFloat_FromDouble((191.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_12 = PyFloat_FromDouble((180.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_17 = PyFloat_FromDouble((248.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 404, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_4)) __PYX_ERR(1, 404, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_12)) __PYX_ERR(1, 404, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_17)) __PYX_ERR(1, 404, __pyx_L1_error);
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":396
 * 
 * 
 * _APPLE_II_LOW_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 */
  __pyx_t_17 = PyList_New(8); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_18)) __PYX_ERR(1, 396, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_7)) __PYX_ERR(1, 396, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_5)) __PYX_ERR(1, 396, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_10)) __PYX_ERR(1, 396, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_16)) __PYX_ERR(1, 396, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 5, __pyx_t_14)) __PYX_ERR(1, 396, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 6, __pyx_t_15)) __PYX_ERR(1, 396, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 7, __pyx_t_13)) __PYX_ERR(1, 396, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = 0;
  __pyx_t_10 = 0;
  __pyx_t_16 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_13 = 0;
  __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_17)) __PYX_ERR(1, 396, __pyx_L1_error);
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":405
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * APPLE_II_LOW =_APPLE_II_LOW_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_17 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_float32); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(1, 405, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":396
 * 
 * 
 * _APPLE_II_LOW_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 */
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_13, __pyx_t_17); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APPLE_II_LOW_NORMALIZED, __pyx_t_15) < 0) __PYX_ERR(1, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":406
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0]
 * ], dtype=float32)
 * APPLE_II_LOW =_APPLE_II_LOW_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _APPLE_II_HIGH_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_APPLE_II_LOW_NORMALIZED); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_17 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_13 = PyNumber_Multiply(__pyx_t_15, __pyx_t_17); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APPLE_II_LOW, __pyx_t_13) < 0) __PYX_ERR(1, 406, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":408
 * APPLE_II_LOW =_APPLE_II_LOW_NORMALIZED * <float>255.0
 * 
 * _APPLE_II_HIGH_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_array); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "PygameShader/Palette.pyx":409
 * 
 * _APPLE_II_HIGH_NORMALIZED = array([
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0 ],
 */
  __pyx_t_17 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_15 = PyFloat_FromDouble((75.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_11 = PyFloat_FromDouble((7.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_17)) __PYX_ERR(1, 409, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_15)) __PYX_ERR(1, 409, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_11)) __PYX_ERR(1, 409, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_15 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":410
 * _APPLE_II_HIGH_NORMALIZED = array([
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0 ],
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],
 */
  __pyx_t_11 = PyFloat_FromDouble((217.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_15 = PyFloat_FromDouble((104.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_17 = PyFloat_FromDouble((15.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 410, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_11)) __PYX_ERR(1, 410, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_15)) __PYX_ERR(1, 410, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_17)) __PYX_ERR(1, 410, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":411
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],
 */
  __pyx_t_17 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_15 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_11 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_17)) __PYX_ERR(1, 411, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_15)) __PYX_ERR(1, 411, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_11)) __PYX_ERR(1, 411, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_15 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":412
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0 ],
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],
 */
  __pyx_t_11 = PyFloat_FromDouble((236.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_15 = PyFloat_FromDouble((168.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_17 = PyFloat_FromDouble((191.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 412, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_11)) __PYX_ERR(1, 412, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_15)) __PYX_ERR(1, 412, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_17)) __PYX_ERR(1, 412, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":413
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0 ],
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],
 */
  __pyx_t_17 = PyFloat_FromDouble((38.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_15 = PyFloat_FromDouble((195.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_11 = PyFloat_FromDouble((15.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 413, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_17)) __PYX_ERR(1, 413, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_15)) __PYX_ERR(1, 413, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_11)) __PYX_ERR(1, 413, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_15 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":414
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 */
  __pyx_t_11 = PyFloat_FromDouble((191.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_15 = PyFloat_FromDouble((202.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_17 = PyFloat_FromDouble((135.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_t_11)) __PYX_ERR(1, 414, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_t_15)) __PYX_ERR(1, 414, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_t_17)) __PYX_ERR(1, 414, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":415
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)
 */
  __pyx_t_17 = PyFloat_FromDouble((147.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_15 = PyFloat_FromDouble((214.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_11 = PyFloat_FromDouble((191.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 415, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_17)) __PYX_ERR(1, 415, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_15)) __PYX_ERR(1, 415, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_11)) __PYX_ERR(1, 415, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_15 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":416
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * APPLE_II_HIGH =_APPLE_II_HIGH_NORMALIZED * <float>255.0
 */
  __pyx_t_11 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_15 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_17 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 416, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_11)) __PYX_ERR(1, 416, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_15)) __PYX_ERR(1, 416, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_17)) __PYX_ERR(1, 416, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":408
 * APPLE_II_LOW =_APPLE_II_LOW_NORMALIZED * <float>255.0
 * 
 * _APPLE_II_HIGH_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 */
  __pyx_t_17 = PyList_New(8); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_14)) __PYX_ERR(1, 408, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_16)) __PYX_ERR(1, 408, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_10)) __PYX_ERR(1, 408, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_5)) __PYX_ERR(1, 408, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_7)) __PYX_ERR(1, 408, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 5, __pyx_t_18)) __PYX_ERR(1, 408, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 6, __pyx_t_12)) __PYX_ERR(1, 408, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 7, __pyx_t_4)) __PYX_ERR(1, 408, __pyx_L1_error);
  __pyx_t_14 = 0;
  __pyx_t_16 = 0;
  __pyx_t_10 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_18 = 0;
  __pyx_t_12 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_17)) __PYX_ERR(1, 408, __pyx_L1_error);
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":417
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * APPLE_II_HIGH =_APPLE_II_HIGH_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_17 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_float32); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_dtype, __pyx_t_12) < 0) __PYX_ERR(1, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":408
 * APPLE_II_LOW =_APPLE_II_LOW_NORMALIZED * <float>255.0
 * 
 * _APPLE_II_HIGH_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 */
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_4, __pyx_t_17); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APPLE_II_HIGH_NORMALIZED, __pyx_t_12) < 0) __PYX_ERR(1, 408, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":418
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)
 * APPLE_II_HIGH =_APPLE_II_HIGH_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _APPLE_II_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_APPLE_II_HIGH_NORMALIZED); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_17 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_12, __pyx_t_17); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APPLE_II_HIGH, __pyx_t_4) < 0) __PYX_ERR(1, 418, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":420
 * APPLE_II_HIGH =_APPLE_II_HIGH_NORMALIZED * <float>255.0
 * 
 * _APPLE_II_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "PygameShader/Palette.pyx":421
 * 
 * _APPLE_II_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_)) __PYX_ERR(1, 421, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_)) __PYX_ERR(1, 421, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_)) __PYX_ERR(1, 421, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":422
 * _APPLE_II_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],
 */
  __pyx_t_12 = PyFloat_FromDouble((108.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble((41.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_18 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_12)) __PYX_ERR(1, 422, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_13)) __PYX_ERR(1, 422, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_18)) __PYX_ERR(1, 422, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":423
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],
 */
  __pyx_t_18 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyFloat_FromDouble((53.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = PyFloat_FromDouble((120.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_18)) __PYX_ERR(1, 423, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_13)) __PYX_ERR(1, 423, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_12)) __PYX_ERR(1, 423, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":424
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],
 */
  __pyx_t_12 = PyFloat_FromDouble((217.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble((60.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_18 = PyFloat_FromDouble((240.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 424, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_12)) __PYX_ERR(1, 424, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_13)) __PYX_ERR(1, 424, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_18)) __PYX_ERR(1, 424, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":425
 *     [ 64.0/255.0, 53.0/255.0, 120.0/255.0 ],
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],
 */
  __pyx_t_18 = PyFloat_FromDouble((19.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyFloat_FromDouble((87.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_18)) __PYX_ERR(1, 425, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_13)) __PYX_ERR(1, 425, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_12)) __PYX_ERR(1, 425, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":426
 *     [ 217.0/255.0, 60.0/255.0, 240.0/255.0 ],
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0],
 */
  __pyx_t_12 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_18 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_12)) __PYX_ERR(1, 426, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_13)) __PYX_ERR(1, 426, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_18)) __PYX_ERR(1, 426, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":427
 *     [ 19.0/255.0, 87.0/255.0, 64.0/255.0 ],
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0],
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 */
  __pyx_t_18 = PyFloat_FromDouble((38.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyFloat_FromDouble((151.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = PyFloat_FromDouble((240.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 427, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_18)) __PYX_ERR(1, 427, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_13)) __PYX_ERR(1, 427, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_12)) __PYX_ERR(1, 427, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":428
 *     [ 128.0/255.0, 128.0/255.0, 128.0/255.0],
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 */
  __pyx_t_12 = PyFloat_FromDouble((191.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble((180.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_18 = PyFloat_FromDouble((248.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_12)) __PYX_ERR(1, 428, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_13)) __PYX_ERR(1, 428, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_18)) __PYX_ERR(1, 428, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":429
 *     [ 38.0/255.0, 151.0/255.0, 240.0/255.0 ],
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0],
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],
 */
  __pyx_t_18 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyFloat_FromDouble((75.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = PyFloat_FromDouble((7.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_t_18)) __PYX_ERR(1, 429, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_13)) __PYX_ERR(1, 429, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_12)) __PYX_ERR(1, 429, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":430
 *     [ 191.0/255.0, 180.0/255.0, 248.0/255.0],
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],
 */
  __pyx_t_12 = PyFloat_FromDouble((217.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble((104.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_18 = PyFloat_FromDouble((15.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_12)) __PYX_ERR(1, 430, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_13)) __PYX_ERR(1, 430, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_18)) __PYX_ERR(1, 430, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":431
 *     [ 64.0/255.0, 75.0/255.0, 7.0/255.0 ],
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],
 */
  __pyx_t_18 = PyFloat_FromDouble((236.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyFloat_FromDouble((168.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = PyFloat_FromDouble((191.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_t_18)) __PYX_ERR(1, 431, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_t_13)) __PYX_ERR(1, 431, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_t_12)) __PYX_ERR(1, 431, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":432
 *     [ 217.0/255.0, 104.0/255.0, 15.0/255.0 ],
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],
 */
  __pyx_t_12 = PyFloat_FromDouble((38.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble((195.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_18 = PyFloat_FromDouble((15.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_t_12)) __PYX_ERR(1, 432, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_t_13)) __PYX_ERR(1, 432, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_t_18)) __PYX_ERR(1, 432, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":433
 *     [ 236.0/255.0, 168.0/255.0, 191.0/255.0 ],
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 */
  __pyx_t_18 = PyFloat_FromDouble((191.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyFloat_FromDouble((202.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = PyFloat_FromDouble((135.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_t_18)) __PYX_ERR(1, 433, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_t_13)) __PYX_ERR(1, 433, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_t_12)) __PYX_ERR(1, 433, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":434
 *     [ 38.0/255.0, 195.0/255.0, 15.0/255.0],
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)
 */
  __pyx_t_12 = PyFloat_FromDouble((147.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = PyFloat_FromDouble((214.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_18 = PyFloat_FromDouble((191.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_24 = PyList_New(3); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 0, __pyx_t_12)) __PYX_ERR(1, 434, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 1, __pyx_t_13)) __PYX_ERR(1, 434, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 2, __pyx_t_18)) __PYX_ERR(1, 434, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":435
 *     [ 191.0/255.0, 202.0/255.0, 135.0/255.0],
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * APPLE_II =_APPLE_II_NORMALIZED * <float>255.0
 */
  __pyx_t_18 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_13 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_12 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_25 = PyList_New(3); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_t_18)) __PYX_ERR(1, 435, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_t_13)) __PYX_ERR(1, 435, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_t_12)) __PYX_ERR(1, 435, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_13 = 0;
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":420
 * APPLE_II_HIGH =_APPLE_II_HIGH_NORMALIZED * <float>255.0
 * 
 * _APPLE_II_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 */
  __pyx_t_12 = PyList_New(15); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_17)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_7)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_5)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 3, __pyx_t_10)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 4, __pyx_t_16)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 5, __pyx_t_14)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 6, __pyx_t_15)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 7, __pyx_t_11)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 8, __pyx_t_19)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 9, __pyx_t_20)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 10, __pyx_t_21)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 11, __pyx_t_22)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 12, __pyx_t_23)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 13, __pyx_t_24)) __PYX_ERR(1, 420, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 14, __pyx_t_25)) __PYX_ERR(1, 420, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = 0;
  __pyx_t_10 = 0;
  __pyx_t_16 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_11 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_21 = 0;
  __pyx_t_22 = 0;
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_25 = 0;
  __pyx_t_25 = PyTuple_New(1); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_25, 0, __pyx_t_12)) __PYX_ERR(1, 420, __pyx_L1_error);
  __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":436
 *     [ 147.0/255.0, 214.0/255.0, 191.0/255.0 ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * APPLE_II =_APPLE_II_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_12 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GetModuleGlobalName(__pyx_t_24, __pyx_n_s_float32); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_dtype, __pyx_t_24) < 0) __PYX_ERR(1, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":420
 * APPLE_II_HIGH =_APPLE_II_HIGH_NORMALIZED * <float>255.0
 * 
 * _APPLE_II_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 108.0/255.0, 41.0/255.0, 64.0/255.0 ],
 */
  __pyx_t_24 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_25, __pyx_t_12); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APPLE_II_NORMALIZED, __pyx_t_24) < 0) __PYX_ERR(1, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":437
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0]
 * ], dtype=float32)
 * APPLE_II =_APPLE_II_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_24, __pyx_n_s_APPLE_II_NORMALIZED); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_12 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_25 = PyNumber_Multiply(__pyx_t_24, __pyx_t_12); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APPLE_II, __pyx_t_25) < 0) __PYX_ERR(1, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;

  /* "PygameShader/Palette.pyx":440
 * 
 * 
 * _COMMODORE_64_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_25, __pyx_n_s_array); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);

  /* "PygameShader/Palette.pyx":441
 * 
 * _COMMODORE_64_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 136.0/255.0, 0.0, 0.0],
 */
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_float_0_)) __PYX_ERR(1, 441, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_float_0_)) __PYX_ERR(1, 441, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_float_0_)) __PYX_ERR(1, 441, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":442
 * _COMMODORE_64_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 136.0/255.0, 0.0, 0.0],
 *     [ 170.0/255.0, 255.0/255.0, 238.0/255.0 ],
 */
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_4 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_23 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_t_24)) __PYX_ERR(1, 442, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_t_4)) __PYX_ERR(1, 442, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_t_23)) __PYX_ERR(1, 442, __pyx_L1_error);
  __pyx_t_24 = 0;
  __pyx_t_4 = 0;
  __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":443
 *     [ 0., 0., 0. ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 136.0/255.0, 0.0, 0.0],             # <<<<<<<<<<<<<<
 *     [ 170.0/255.0, 255.0/255.0, 238.0/255.0 ],
 *     [ 204.0/255.0, 68.0/255.0, 204.0/255.0],
 */
  __pyx_t_23 = PyFloat_FromDouble((136.0 / 255.0)); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_23)) __PYX_ERR(1, 443, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_0)) __PYX_ERR(1, 443, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_0)) __PYX_ERR(1, 443, __pyx_L1_error);
  __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":444
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ],
 *     [ 136.0/255.0, 0.0, 0.0],
 *     [ 170.0/255.0, 255.0/255.0, 238.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 204.0/255.0, 68.0/255.0, 204.0/255.0],
 *     [ 0.0, 204.0/255.0, 85.0/255.0 ],
 */
  __pyx_t_23 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_21 = PyFloat_FromDouble((238.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_23)) __PYX_ERR(1, 444, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_24)) __PYX_ERR(1, 444, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_21)) __PYX_ERR(1, 444, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;
  __pyx_t_21 = 0;

  /* "PygameShader/Palette.pyx":445
 *     [ 136.0/255.0, 0.0, 0.0],
 *     [ 170.0/255.0, 255.0/255.0, 238.0/255.0 ],
 *     [ 204.0/255.0, 68.0/255.0, 204.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 0.0, 204.0/255.0, 85.0/255.0 ],
 *     [ 0.0, 0.0, 170.0/255.0 ],
 */
  __pyx_t_21 = PyFloat_FromDouble((204.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_24 = PyFloat_FromDouble((68.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_23 = PyFloat_FromDouble((204.0 / 255.0)); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_t_21)) __PYX_ERR(1, 445, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_24)) __PYX_ERR(1, 445, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_23)) __PYX_ERR(1, 445, __pyx_L1_error);
  __pyx_t_21 = 0;
  __pyx_t_24 = 0;
  __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":446
 *     [ 170.0/255.0, 255.0/255.0, 238.0/255.0 ],
 *     [ 204.0/255.0, 68.0/255.0, 204.0/255.0],
 *     [ 0.0, 204.0/255.0, 85.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 0.0, 0.0, 170.0/255.0 ],
 *     [ 238.0/255.0, 238.0/255.0, 119.0/255.0 ],
 */
  __pyx_t_23 = PyFloat_FromDouble((204.0 / 255.0)); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_24 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_float_0_0)) __PYX_ERR(1, 446, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_t_23)) __PYX_ERR(1, 446, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_t_24)) __PYX_ERR(1, 446, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":447
 *     [ 204.0/255.0, 68.0/255.0, 204.0/255.0],
 *     [ 0.0, 204.0/255.0, 85.0/255.0 ],
 *     [ 0.0, 0.0, 170.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 238.0/255.0, 238.0/255.0, 119.0/255.0 ],
 *     [ 221.0/255.0, 136.0/255.0, 85.0/255.0],
 */
  __pyx_t_24 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_float_0_0)) __PYX_ERR(1, 447, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_float_0_0)) __PYX_ERR(1, 447, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_t_24)) __PYX_ERR(1, 447, __pyx_L1_error);
  __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":448
 *     [ 0.0, 204.0/255.0, 85.0/255.0 ],
 *     [ 0.0, 0.0, 170.0/255.0 ],
 *     [ 238.0/255.0, 238.0/255.0, 119.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 221.0/255.0, 136.0/255.0, 85.0/255.0],
 *     [ 102.0/255.0, 68.0/255.0, 0.0],
 */
  __pyx_t_24 = PyFloat_FromDouble((238.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_11 = PyFloat_FromDouble((238.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_15 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_24)) __PYX_ERR(1, 448, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_11)) __PYX_ERR(1, 448, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_15)) __PYX_ERR(1, 448, __pyx_L1_error);
  __pyx_t_24 = 0;
  __pyx_t_11 = 0;
  __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":449
 *     [ 0.0, 0.0, 170.0/255.0 ],
 *     [ 238.0/255.0, 238.0/255.0, 119.0/255.0 ],
 *     [ 221.0/255.0, 136.0/255.0, 85.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 102.0/255.0, 68.0/255.0, 0.0],
 *     [ 255.0/255.0, 119.0/255.0, 119.0/255.0 ],
 */
  __pyx_t_15 = PyFloat_FromDouble((221.0 / 255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_11 = PyFloat_FromDouble((136.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_24 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_15)) __PYX_ERR(1, 449, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_11)) __PYX_ERR(1, 449, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_24)) __PYX_ERR(1, 449, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_11 = 0;
  __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":450
 *     [ 238.0/255.0, 238.0/255.0, 119.0/255.0 ],
 *     [ 221.0/255.0, 136.0/255.0, 85.0/255.0],
 *     [ 102.0/255.0, 68.0/255.0, 0.0],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 119.0/255.0, 119.0/255.0 ],
 *     [ 51.0/255.0, 51.0/255.0, 51.0/255.0 ],
 */
  __pyx_t_24 = PyFloat_FromDouble((102.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_11 = PyFloat_FromDouble((68.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_24)) __PYX_ERR(1, 450, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_11)) __PYX_ERR(1, 450, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_0)) __PYX_ERR(1, 450, __pyx_L1_error);
  __pyx_t_24 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":451
 *     [ 221.0/255.0, 136.0/255.0, 85.0/255.0],
 *     [ 102.0/255.0, 68.0/255.0, 0.0],
 *     [ 255.0/255.0, 119.0/255.0, 119.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 51.0/255.0, 51.0/255.0, 51.0/255.0 ],
 *     [ 119.0/255.0, 119.0/255.0, 119.0/255.0 ],
 */
  __pyx_t_11 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_24 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_10 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_11)) __PYX_ERR(1, 451, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_24)) __PYX_ERR(1, 451, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_10)) __PYX_ERR(1, 451, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_24 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":452
 *     [ 102.0/255.0, 68.0/255.0, 0.0],
 *     [ 255.0/255.0, 119.0/255.0, 119.0/255.0 ],
 *     [ 51.0/255.0, 51.0/255.0, 51.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 119.0/255.0, 119.0/255.0, 119.0/255.0 ],
 *     [ 170.0/255.0, 255.0/255.0, 102.0/255.0 ],
 */
  __pyx_t_10 = PyFloat_FromDouble((51.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_24 = PyFloat_FromDouble((51.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_11 = PyFloat_FromDouble((51.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_10)) __PYX_ERR(1, 452, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_24)) __PYX_ERR(1, 452, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_11)) __PYX_ERR(1, 452, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_24 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":453
 *     [ 255.0/255.0, 119.0/255.0, 119.0/255.0 ],
 *     [ 51.0/255.0, 51.0/255.0, 51.0/255.0 ],
 *     [ 119.0/255.0, 119.0/255.0, 119.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 170.0/255.0, 255.0/255.0, 102.0/255.0 ],
 *     [ 0.0, 136.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_11 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_24 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_10 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 453, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_11)) __PYX_ERR(1, 453, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_24)) __PYX_ERR(1, 453, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_10)) __PYX_ERR(1, 453, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_24 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":454
 *     [ 51.0/255.0, 51.0/255.0, 51.0/255.0 ],
 *     [ 119.0/255.0, 119.0/255.0, 119.0/255.0 ],
 *     [ 170.0/255.0, 255.0/255.0, 102.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 0.0, 136.0/255.0, 255.0/255.0 ],
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]
 */
  __pyx_t_10 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_11 = PyFloat_FromDouble((102.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_10)) __PYX_ERR(1, 454, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_t_24)) __PYX_ERR(1, 454, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_11)) __PYX_ERR(1, 454, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_24 = 0;
  __pyx_t_11 = 0;

  /* "PygameShader/Palette.pyx":455
 *     [ 119.0/255.0, 119.0/255.0, 119.0/255.0 ],
 *     [ 170.0/255.0, 255.0/255.0, 102.0/255.0 ],
 *     [ 0.0, 136.0/255.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_11 = PyFloat_FromDouble((136.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 455, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_0)) __PYX_ERR(1, 455, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_11)) __PYX_ERR(1, 455, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_24)) __PYX_ERR(1, 455, __pyx_L1_error);
  __pyx_t_11 = 0;
  __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":456
 *     [ 170.0/255.0, 255.0/255.0, 102.0/255.0 ],
 *     [ 0.0, 136.0/255.0, 255.0/255.0 ],
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * COMMODORE_64 =_COMMODORE_64_NORMALIZED * <float>255.0
 */
  __pyx_t_24 = PyFloat_FromDouble((187.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_11 = PyFloat_FromDouble((187.0 / 255.0)); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_18 = PyFloat_FromDouble((187.0 / 255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_t_24)) __PYX_ERR(1, 456, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_t_11)) __PYX_ERR(1, 456, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_t_18)) __PYX_ERR(1, 456, __pyx_L1_error);
  __pyx_t_24 = 0;
  __pyx_t_11 = 0;
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":440
 * 
 * 
 * _COMMODORE_64_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_18 = PyList_New(16); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_t_12)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_t_22)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_t_4)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 3, __pyx_t_20)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 4, __pyx_t_19)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 5, __pyx_t_21)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 6, __pyx_t_23)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 7, __pyx_t_14)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 8, __pyx_t_16)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 9, __pyx_t_15)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 10, __pyx_t_5)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 11, __pyx_t_7)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 12, __pyx_t_17)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 13, __pyx_t_13)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 14, __pyx_t_10)) __PYX_ERR(1, 440, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 15, __pyx_t_26)) __PYX_ERR(1, 440, __pyx_L1_error);
  __pyx_t_12 = 0;
  __pyx_t_22 = 0;
  __pyx_t_4 = 0;
  __pyx_t_20 = 0;
  __pyx_t_19 = 0;
  __pyx_t_21 = 0;
  __pyx_t_23 = 0;
  __pyx_t_14 = 0;
  __pyx_t_16 = 0;
  __pyx_t_15 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_17 = 0;
  __pyx_t_13 = 0;
  __pyx_t_10 = 0;
  __pyx_t_26 = 0;
  __pyx_t_26 = PyTuple_New(1); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_18)) __PYX_ERR(1, 440, __pyx_L1_error);
  __pyx_t_18 = 0;

  /* "PygameShader/Palette.pyx":457
 *     [ 0.0, 136.0/255.0, 255.0/255.0 ],
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * COMMODORE_64 =_COMMODORE_64_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_18 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_float32); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_18, __pyx_n_s_dtype, __pyx_t_10) < 0) __PYX_ERR(1, 457, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":440
 * 
 * 
 * _COMMODORE_64_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_25, __pyx_t_26, __pyx_t_18); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMMODORE_64_NORMALIZED, __pyx_t_10) < 0) __PYX_ERR(1, 440, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":458
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]
 * ], dtype=float32)
 * COMMODORE_64 =_COMMODORE_64_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_COMMODORE_64_NORMALIZED); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_18 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __pyx_t_26 = PyNumber_Multiply(__pyx_t_10, __pyx_t_18); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_COMMODORE_64, __pyx_t_26) < 0) __PYX_ERR(1, 458, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

  /* "PygameShader/Palette.pyx":461
 * 
 * 
 * _AMSTRAD_CPC_NORMALIZED = array(             # <<<<<<<<<<<<<<
 *     [[0, 0, 0],
 *     [0, 0, 128.0/255.0],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_array); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);

  /* "PygameShader/Palette.pyx":462
 * 
 * _AMSTRAD_CPC_NORMALIZED = array(
 *     [[0, 0, 0],             # <<<<<<<<<<<<<<
 *     [0, 0, 128.0/255.0],
 *     [0, 0, 255/255.0],
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_int_0)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_int_0)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_int_0)) __PYX_ERR(1, 462, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":463
 * _AMSTRAD_CPC_NORMALIZED = array(
 *     [[0, 0, 0],
 *     [0, 0, 128.0/255.0],             # <<<<<<<<<<<<<<
 *     [0, 0, 255/255.0],
 *     [128/255.0, 0, 0],
 */
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_25 = PyList_New(3); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_int_0)) __PYX_ERR(1, 463, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_int_0)) __PYX_ERR(1, 463, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_t_10)) __PYX_ERR(1, 463, __pyx_L1_error);
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":464
 *     [[0, 0, 0],
 *     [0, 0, 128.0/255.0],
 *     [0, 0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 0, 0],
 *     [128/255.0, 0, 128/255.0],
 */
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 464, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_int_0)) __PYX_ERR(1, 464, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_int_0)) __PYX_ERR(1, 464, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_t_10)) __PYX_ERR(1, 464, __pyx_L1_error);
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":465
 *     [0, 0, 128.0/255.0],
 *     [0, 0, 255/255.0],
 *     [128/255.0, 0, 0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 0, 128/255.0],
 *     [128/255.0, 0, 255/255.0],
 */
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_10)) __PYX_ERR(1, 465, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_int_0)) __PYX_ERR(1, 465, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_int_0)) __PYX_ERR(1, 465, __pyx_L1_error);
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":466
 *     [0, 0, 255/255.0],
 *     [128/255.0, 0, 0],
 *     [128/255.0, 0, 128/255.0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 0, 255/255.0],
 *     [255/255.0, 0, 0],
 */
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_7 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 466, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_10)) __PYX_ERR(1, 466, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_int_0)) __PYX_ERR(1, 466, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_t_7)) __PYX_ERR(1, 466, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_7 = 0;

  /* "PygameShader/Palette.pyx":467
 *     [128/255.0, 0, 0],
 *     [128/255.0, 0, 128/255.0],
 *     [128/255.0, 0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 0, 0],
 *     [255/255.0, 0, 128/255.0],
 */
  __pyx_t_7 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 467, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_7)) __PYX_ERR(1, 467, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_int_0)) __PYX_ERR(1, 467, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_t_10)) __PYX_ERR(1, 467, __pyx_L1_error);
  __pyx_t_7 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":468
 *     [128/255.0, 0, 128/255.0],
 *     [128/255.0, 0, 255/255.0],
 *     [255/255.0, 0, 0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 0, 128/255.0],
 *     [255/255.0, 0, 255/255.0],
 */
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_10)) __PYX_ERR(1, 468, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_int_0)) __PYX_ERR(1, 468, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_int_0)) __PYX_ERR(1, 468, __pyx_L1_error);
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":469
 *     [128/255.0, 0, 255/255.0],
 *     [255/255.0, 0, 0],
 *     [255/255.0, 0, 128/255.0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 0, 255/255.0],
 *     [0, 128/255.0, 0],
 */
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_16 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 469, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_10)) __PYX_ERR(1, 469, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_int_0)) __PYX_ERR(1, 469, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_16)) __PYX_ERR(1, 469, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":470
 *     [255/255.0, 0, 0],
 *     [255/255.0, 0, 128/255.0],
 *     [255/255.0, 0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [0, 128/255.0, 0],
 *     [0, 128/255.0, 128/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 470, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_t_16)) __PYX_ERR(1, 470, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_int_0)) __PYX_ERR(1, 470, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_t_10)) __PYX_ERR(1, 470, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":471
 *     [255/255.0, 0, 128/255.0],
 *     [255/255.0, 0, 255/255.0],
 *     [0, 128/255.0, 0],             # <<<<<<<<<<<<<<
 *     [0, 128/255.0, 128/255.0],
 *     [0, 128/255.0, 255/255.0],
 */
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 471, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_int_0)) __PYX_ERR(1, 471, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_10)) __PYX_ERR(1, 471, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_int_0)) __PYX_ERR(1, 471, __pyx_L1_error);
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":472
 *     [255/255.0, 0, 255/255.0],
 *     [0, 128/255.0, 0],
 *     [0, 128/255.0, 128/255.0],             # <<<<<<<<<<<<<<
 *     [0, 128/255.0, 255/255.0],
 *     [128/255.0, 128/255.0, 0],
 */
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_21 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 472, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_int_0)) __PYX_ERR(1, 472, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_10)) __PYX_ERR(1, 472, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_21)) __PYX_ERR(1, 472, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_21 = 0;

  /* "PygameShader/Palette.pyx":473
 *     [0, 128/255.0, 0],
 *     [0, 128/255.0, 128/255.0],
 *     [0, 128/255.0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 128/255.0, 0],
 *     [128/255.0, 128/255.0, 128/255.0],
 */
  __pyx_t_21 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 473, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_int_0)) __PYX_ERR(1, 473, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_21)) __PYX_ERR(1, 473, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_10)) __PYX_ERR(1, 473, __pyx_L1_error);
  __pyx_t_21 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":474
 *     [0, 128/255.0, 128/255.0],
 *     [0, 128/255.0, 255/255.0],
 *     [128/255.0, 128/255.0, 0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 128/255.0, 128/255.0],
 *     [128/255.0, 128/255.0, 255/255.0],
 */
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_21 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_10)) __PYX_ERR(1, 474, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_21)) __PYX_ERR(1, 474, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_int_0)) __PYX_ERR(1, 474, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_21 = 0;

  /* "PygameShader/Palette.pyx":475
 *     [0, 128/255.0, 255/255.0],
 *     [128/255.0, 128/255.0, 0],
 *     [128/255.0, 128/255.0, 128/255.0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 128/255.0, 255/255.0],
 *     [255/255.0, 128/255.0, 0],
 */
  __pyx_t_21 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_22 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_21)) __PYX_ERR(1, 475, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_10)) __PYX_ERR(1, 475, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_22)) __PYX_ERR(1, 475, __pyx_L1_error);
  __pyx_t_21 = 0;
  __pyx_t_10 = 0;
  __pyx_t_22 = 0;

  /* "PygameShader/Palette.pyx":476
 *     [128/255.0, 128/255.0, 0],
 *     [128/255.0, 128/255.0, 128/255.0],
 *     [128/255.0, 128/255.0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 128/255.0, 0],
 *     [255/255.0, 128/255.0, 128/255.0],
 */
  __pyx_t_22 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_21 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_22)) __PYX_ERR(1, 476, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_10)) __PYX_ERR(1, 476, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_21)) __PYX_ERR(1, 476, __pyx_L1_error);
  __pyx_t_22 = 0;
  __pyx_t_10 = 0;
  __pyx_t_21 = 0;

  /* "PygameShader/Palette.pyx":477
 *     [128/255.0, 128/255.0, 128/255.0],
 *     [128/255.0, 128/255.0, 255/255.0],
 *     [255/255.0, 128/255.0, 0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 128/255.0, 128/255.0],
 *     [255/255.0, 128/255.0, 255/255.0],
 */
  __pyx_t_21 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_t_21)) __PYX_ERR(1, 477, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_t_10)) __PYX_ERR(1, 477, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_int_0)) __PYX_ERR(1, 477, __pyx_L1_error);
  __pyx_t_21 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":478
 *     [128/255.0, 128/255.0, 255/255.0],
 *     [255/255.0, 128/255.0, 0],
 *     [255/255.0, 128/255.0, 128/255.0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 128/255.0, 255/255.0],
 *     [0, 255/255.0, 0],
 */
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_21 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_24 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_t_10)) __PYX_ERR(1, 478, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_t_21)) __PYX_ERR(1, 478, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_t_24)) __PYX_ERR(1, 478, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_21 = 0;
  __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":479
 *     [255/255.0, 128/255.0, 0],
 *     [255/255.0, 128/255.0, 128/255.0],
 *     [255/255.0, 128/255.0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [0, 255/255.0, 0],
 *     [0, 255/255.0, 128/255.0],
 */
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_21 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_t_24)) __PYX_ERR(1, 479, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_t_21)) __PYX_ERR(1, 479, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_t_10)) __PYX_ERR(1, 479, __pyx_L1_error);
  __pyx_t_24 = 0;
  __pyx_t_21 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":480
 *     [255/255.0, 128/255.0, 128/255.0],
 *     [255/255.0, 128/255.0, 255/255.0],
 *     [0, 255/255.0, 0],             # <<<<<<<<<<<<<<
 *     [0, 255/255.0, 128/255.0],
 *     [0, 255/255.0, 255/255.0],
 */
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 480, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_int_0)) __PYX_ERR(1, 480, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_t_10)) __PYX_ERR(1, 480, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_int_0)) __PYX_ERR(1, 480, __pyx_L1_error);
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":481
 *     [255/255.0, 128/255.0, 255/255.0],
 *     [0, 255/255.0, 0],
 *     [0, 255/255.0, 128/255.0],             # <<<<<<<<<<<<<<
 *     [0, 255/255.0, 255/255.0],
 *     [128/255.0, 255/255.0, 0],
 */
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_24 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_int_0)) __PYX_ERR(1, 481, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_t_10)) __PYX_ERR(1, 481, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_t_24)) __PYX_ERR(1, 481, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":482
 *     [0, 255/255.0, 0],
 *     [0, 255/255.0, 128/255.0],
 *     [0, 255/255.0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 255/255.0, 0],
 *     [128/255.0, 255/255.0, 128/255.0],
 */
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_int_0)) __PYX_ERR(1, 482, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_t_24)) __PYX_ERR(1, 482, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_t_10)) __PYX_ERR(1, 482, __pyx_L1_error);
  __pyx_t_24 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":483
 *     [0, 255/255.0, 128/255.0],
 *     [0, 255/255.0, 255/255.0],
 *     [128/255.0, 255/255.0, 0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 255/255.0, 128/255.0],
 *     [128/255.0, 255/255.0, 255/255.0],
 */
  __pyx_t_10 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_t_10)) __PYX_ERR(1, 483, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_t_24)) __PYX_ERR(1, 483, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_int_0)) __PYX_ERR(1, 483, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":484
 *     [0, 255/255.0, 255/255.0],
 *     [128/255.0, 255/255.0, 0],
 *     [128/255.0, 255/255.0, 128/255.0],             # <<<<<<<<<<<<<<
 *     [128/255.0, 255/255.0, 255/255.0],
 *     [255/255.0, 255/255.0, 0],
 */
  __pyx_t_24 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_32 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_t_24)) __PYX_ERR(1, 484, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_t_10)) __PYX_ERR(1, 484, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_t_32)) __PYX_ERR(1, 484, __pyx_L1_error);
  __pyx_t_24 = 0;
  __pyx_t_10 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":485
 *     [128/255.0, 255/255.0, 0],
 *     [128/255.0, 255/255.0, 128/255.0],
 *     [128/255.0, 255/255.0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 255/255.0, 0],
 *     [255/255.0, 255/255.0, 128/255.0],
 */
  __pyx_t_32 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_t_32)) __PYX_ERR(1, 485, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_t_10)) __PYX_ERR(1, 485, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_t_24)) __PYX_ERR(1, 485, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_10 = 0;
  __pyx_t_24 = 0;

  /* "PygameShader/Palette.pyx":486
 *     [128/255.0, 255/255.0, 128/255.0],
 *     [128/255.0, 255/255.0, 255/255.0],
 *     [255/255.0, 255/255.0, 0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 255/255.0, 128/255.0],
 *     [255/255.0, 255/255.0, 255/255.0]], dtype=float32)
 */
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_24)) __PYX_ERR(1, 486, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_t_10)) __PYX_ERR(1, 486, __pyx_L1_error);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_int_0)) __PYX_ERR(1, 486, __pyx_L1_error);
  __pyx_t_24 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":487
 *     [128/255.0, 255/255.0, 255/255.0],
 *     [255/255.0, 255/255.0, 0],
 *     [255/255.0, 255/255.0, 128/255.0],             # <<<<<<<<<<<<<<
 *     [255/255.0, 255/255.0, 255/255.0]], dtype=float32)
 * 
 */
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_35 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_35)) __PYX_ERR(1, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_t_10)) __PYX_ERR(1, 487, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_t_24)) __PYX_ERR(1, 487, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_35);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_t_35)) __PYX_ERR(1, 487, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_24 = 0;
  __pyx_t_35 = 0;

  /* "PygameShader/Palette.pyx":488
 *     [255/255.0, 255/255.0, 0],
 *     [255/255.0, 255/255.0, 128/255.0],
 *     [255/255.0, 255/255.0, 255/255.0]], dtype=float32)             # <<<<<<<<<<<<<<
 * 
 * AMSTRAD_CPC =_AMSTRAD_CPC_NORMALIZED * <float>255.0
 */
  __pyx_t_35 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_35)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __pyx_t_24 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __pyx_t_10 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_GIVEREF(__pyx_t_35);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_t_35)) __PYX_ERR(1, 488, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_t_24)) __PYX_ERR(1, 488, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_t_10)) __PYX_ERR(1, 488, __pyx_L1_error);
  __pyx_t_35 = 0;
  __pyx_t_24 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":462
 * 
 * _AMSTRAD_CPC_NORMALIZED = array(
 *     [[0, 0, 0],             # <<<<<<<<<<<<<<
 *     [0, 0, 128.0/255.0],
 *     [0, 0, 255/255.0],
 */
  __pyx_t_10 = PyList_New(27); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_18)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_25)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_13)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 3, __pyx_t_17)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 4, __pyx_t_5)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 5, __pyx_t_15)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 6, __pyx_t_7)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 7, __pyx_t_14)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 8, __pyx_t_23)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 9, __pyx_t_16)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 10, __pyx_t_19)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 11, __pyx_t_20)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 12, __pyx_t_4)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 13, __pyx_t_12)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 14, __pyx_t_11)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 15, __pyx_t_22)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 16, __pyx_t_27)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 17, __pyx_t_28)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 18, __pyx_t_21)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 19, __pyx_t_29)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 20, __pyx_t_30)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 21, __pyx_t_31)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 22, __pyx_t_33)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 23, __pyx_t_34)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 24, __pyx_t_32)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 25, __pyx_t_36)) __PYX_ERR(1, 462, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 26, __pyx_t_37)) __PYX_ERR(1, 462, __pyx_L1_error);
  __pyx_t_18 = 0;
  __pyx_t_25 = 0;
  __pyx_t_13 = 0;
  __pyx_t_17 = 0;
  __pyx_t_5 = 0;
  __pyx_t_15 = 0;
  __pyx_t_7 = 0;
  __pyx_t_14 = 0;
  __pyx_t_23 = 0;
  __pyx_t_16 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;
  __pyx_t_11 = 0;
  __pyx_t_22 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_21 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_31 = 0;
  __pyx_t_33 = 0;
  __pyx_t_34 = 0;
  __pyx_t_32 = 0;
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;

  /* "PygameShader/Palette.pyx":461
 * 
 * 
 * _AMSTRAD_CPC_NORMALIZED = array(             # <<<<<<<<<<<<<<
 *     [[0, 0, 0],
 *     [0, 0, 128.0/255.0],
 */
  __pyx_t_37 = PyTuple_New(1); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_37, 0, __pyx_t_10)) __PYX_ERR(1, 461, __pyx_L1_error);
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":488
 *     [255/255.0, 255/255.0, 0],
 *     [255/255.0, 255/255.0, 128/255.0],
 *     [255/255.0, 255/255.0, 255/255.0]], dtype=float32)             # <<<<<<<<<<<<<<
 * 
 * AMSTRAD_CPC =_AMSTRAD_CPC_NORMALIZED * <float>255.0
 */
  __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GetModuleGlobalName(__pyx_t_36, __pyx_n_s_float32); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_36) < 0) __PYX_ERR(1, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":461
 * 
 * 
 * _AMSTRAD_CPC_NORMALIZED = array(             # <<<<<<<<<<<<<<
 *     [[0, 0, 0],
 *     [0, 0, 128.0/255.0],
 */
  __pyx_t_36 = __Pyx_PyObject_Call(__pyx_t_26, __pyx_t_37, __pyx_t_10); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 461, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AMSTRAD_CPC_NORMALIZED, __pyx_t_36) < 0) __PYX_ERR(1, 461, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":490
 *     [255/255.0, 255/255.0, 255/255.0]], dtype=float32)
 * 
 * AMSTRAD_CPC =_AMSTRAD_CPC_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_36, __pyx_n_s_AMSTRAD_CPC_NORMALIZED); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_10 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_37 = PyNumber_Multiply(__pyx_t_36, __pyx_t_10); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 490, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AMSTRAD_CPC, __pyx_t_37) < 0) __PYX_ERR(1, 490, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;

  /* "PygameShader/Palette.pyx":493
 * 
 * 
 * _MSX_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 1.0/255.0, 1.0/255.0, 1.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_37, __pyx_n_s_array); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);

  /* "PygameShader/Palette.pyx":494
 * 
 * _MSX_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 1.0/255.0, 1.0/255.0, 1.0/255.0 ],
 *     [ 64/255.0, 184/255.0, 73/255.0 ],
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_)) __PYX_ERR(1, 494, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_)) __PYX_ERR(1, 494, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_)) __PYX_ERR(1, 494, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":495
 * _MSX_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 1.0/255.0, 1.0/255.0, 1.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 64/255.0, 184/255.0, 73/255.0 ],
 *     [ 116/255.0, 208/255.0, 125/255.0 ],
 */
  __pyx_t_36 = PyFloat_FromDouble((1.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyFloat_FromDouble((1.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_32 = PyFloat_FromDouble((1.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_t_36)) __PYX_ERR(1, 495, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_t_26)) __PYX_ERR(1, 495, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_t_32)) __PYX_ERR(1, 495, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":496
 *     [ 0., 0., 0. ],
 *     [ 1.0/255.0, 1.0/255.0, 1.0/255.0 ],
 *     [ 64/255.0, 184/255.0, 73/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 116/255.0, 208/255.0, 125/255.0 ],
 *     [ 89/255.0, 85/255.0, 224/255.0 ],
 */
  __pyx_t_32 = PyFloat_FromDouble((64.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_26 = PyFloat_FromDouble((184.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_36 = PyFloat_FromDouble((73.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_t_32)) __PYX_ERR(1, 496, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_t_26)) __PYX_ERR(1, 496, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_t_36)) __PYX_ERR(1, 496, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":497
 *     [ 1.0/255.0, 1.0/255.0, 1.0/255.0 ],
 *     [ 64/255.0, 184/255.0, 73/255.0 ],
 *     [ 116/255.0, 208/255.0, 125/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 89/255.0, 85/255.0, 224/255.0 ],
 *     [ 128/255.0, 118/255.0, 241/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((116.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyFloat_FromDouble((208.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_32 = PyFloat_FromDouble((125.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_t_36)) __PYX_ERR(1, 497, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_t_26)) __PYX_ERR(1, 497, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_t_32)) __PYX_ERR(1, 497, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":498
 *     [ 64/255.0, 184/255.0, 73/255.0 ],
 *     [ 116/255.0, 208/255.0, 125/255.0 ],
 *     [ 89/255.0, 85/255.0, 224/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 128/255.0, 118/255.0, 241/255.0],
 *     [ 185/255.0, 94/255.0, 81/255.0],
 */
  __pyx_t_32 = PyFloat_FromDouble((89.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_26 = PyFloat_FromDouble((85.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_36 = PyFloat_FromDouble((224.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_t_32)) __PYX_ERR(1, 498, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_t_26)) __PYX_ERR(1, 498, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_t_36)) __PYX_ERR(1, 498, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":499
 *     [ 116/255.0, 208/255.0, 125/255.0 ],
 *     [ 89/255.0, 85/255.0, 224/255.0 ],
 *     [ 128/255.0, 118/255.0, 241/255.0],             # <<<<<<<<<<<<<<
 *     [ 185/255.0, 94/255.0, 81/255.0],
 *     [  101/255.0, 219/255.0, 239/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((128.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyFloat_FromDouble((118.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_32 = PyFloat_FromDouble((241.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_t_36)) __PYX_ERR(1, 499, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_t_26)) __PYX_ERR(1, 499, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_t_32)) __PYX_ERR(1, 499, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":500
 *     [ 89/255.0, 85/255.0, 224/255.0 ],
 *     [ 128/255.0, 118/255.0, 241/255.0],
 *     [ 185/255.0, 94/255.0, 81/255.0],             # <<<<<<<<<<<<<<
 *     [  101/255.0, 219/255.0, 239/255.0],
 *     [  219/255.0, 101/255.0, 89/255.0],
 */
  __pyx_t_32 = PyFloat_FromDouble((185.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_26 = PyFloat_FromDouble((94.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_36 = PyFloat_FromDouble((81.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_t_32)) __PYX_ERR(1, 500, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_t_26)) __PYX_ERR(1, 500, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_t_36)) __PYX_ERR(1, 500, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":501
 *     [ 128/255.0, 118/255.0, 241/255.0],
 *     [ 185/255.0, 94/255.0, 81/255.0],
 *     [  101/255.0, 219/255.0, 239/255.0],             # <<<<<<<<<<<<<<
 *     [  219/255.0, 101/255.0, 89/255.0],
 *     [ 255/255.0, 137/255.0, 125/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((101.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyFloat_FromDouble((219.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_32 = PyFloat_FromDouble((239.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_t_36)) __PYX_ERR(1, 501, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_t_26)) __PYX_ERR(1, 501, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_t_32)) __PYX_ERR(1, 501, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":502
 *     [ 185/255.0, 94/255.0, 81/255.0],
 *     [  101/255.0, 219/255.0, 239/255.0],
 *     [  219/255.0, 101/255.0, 89/255.0],             # <<<<<<<<<<<<<<
 *     [ 255/255.0, 137/255.0, 125/255.0],
 *     [  204/255.0, 195/255.0, 94/255.0],
 */
  __pyx_t_32 = PyFloat_FromDouble((219.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_26 = PyFloat_FromDouble((101.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_36 = PyFloat_FromDouble((89.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_t_32)) __PYX_ERR(1, 502, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_t_26)) __PYX_ERR(1, 502, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_t_36)) __PYX_ERR(1, 502, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":503
 *     [  101/255.0, 219/255.0, 239/255.0],
 *     [  219/255.0, 101/255.0, 89/255.0],
 *     [ 255/255.0, 137/255.0, 125/255.0],             # <<<<<<<<<<<<<<
 *     [  204/255.0, 195/255.0, 94/255.0],
 *     [  222/255.0, 208/255.0, 135/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyFloat_FromDouble((137.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_32 = PyFloat_FromDouble((125.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 503, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_t_36)) __PYX_ERR(1, 503, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_t_26)) __PYX_ERR(1, 503, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_t_32)) __PYX_ERR(1, 503, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":504
 *     [  219/255.0, 101/255.0, 89/255.0],
 *     [ 255/255.0, 137/255.0, 125/255.0],
 *     [  204/255.0, 195/255.0, 94/255.0],             # <<<<<<<<<<<<<<
 *     [  222/255.0, 208/255.0, 135/255.0],
 *     [  58/255.0, 162/255.0, 65/255.0],
 */
  __pyx_t_32 = PyFloat_FromDouble((204.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_26 = PyFloat_FromDouble((195.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_36 = PyFloat_FromDouble((94.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_32)) __PYX_ERR(1, 504, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_26)) __PYX_ERR(1, 504, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_36)) __PYX_ERR(1, 504, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":505
 *     [ 255/255.0, 137/255.0, 125/255.0],
 *     [  204/255.0, 195/255.0, 94/255.0],
 *     [  222/255.0, 208/255.0, 135/255.0],             # <<<<<<<<<<<<<<
 *     [  58/255.0, 162/255.0, 65/255.0],
 *     [  183/255.0, 102/255.0, 181/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((222.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyFloat_FromDouble((208.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_32 = PyFloat_FromDouble((135.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_36)) __PYX_ERR(1, 505, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_26)) __PYX_ERR(1, 505, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_32)) __PYX_ERR(1, 505, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":506
 *     [  204/255.0, 195/255.0, 94/255.0],
 *     [  222/255.0, 208/255.0, 135/255.0],
 *     [  58/255.0, 162/255.0, 65/255.0],             # <<<<<<<<<<<<<<
 *     [  183/255.0, 102/255.0, 181/255.0],
 *     [ 204/255.0, 204/255.0, 204/255.0],
 */
  __pyx_t_32 = PyFloat_FromDouble((58.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_26 = PyFloat_FromDouble((162.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_36 = PyFloat_FromDouble((65.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_32)) __PYX_ERR(1, 506, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_26)) __PYX_ERR(1, 506, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_36)) __PYX_ERR(1, 506, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":507
 *     [  222/255.0, 208/255.0, 135/255.0],
 *     [  58/255.0, 162/255.0, 65/255.0],
 *     [  183/255.0, 102/255.0, 181/255.0],             # <<<<<<<<<<<<<<
 *     [ 204/255.0, 204/255.0, 204/255.0],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 */
  __pyx_t_36 = PyFloat_FromDouble((183.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyFloat_FromDouble((102.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_32 = PyFloat_FromDouble((181.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_36)) __PYX_ERR(1, 507, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_26)) __PYX_ERR(1, 507, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_32)) __PYX_ERR(1, 507, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":508
 *     [  58/255.0, 162/255.0, 65/255.0],
 *     [  183/255.0, 102/255.0, 181/255.0],
 *     [ 204/255.0, 204/255.0, 204/255.0],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_32 = PyFloat_FromDouble((204.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_26 = PyFloat_FromDouble((204.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_36 = PyFloat_FromDouble((204.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_t_32)) __PYX_ERR(1, 508, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_26)) __PYX_ERR(1, 508, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_36)) __PYX_ERR(1, 508, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":509
 *     [  183/255.0, 102/255.0, 181/255.0],
 *     [ 204/255.0, 204/255.0, 204/255.0],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MSX =_MSX_NORMALIZED * <float>255.0
 */
  __pyx_t_36 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_32 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_36)) __PYX_ERR(1, 509, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_26)) __PYX_ERR(1, 509, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_32)) __PYX_ERR(1, 509, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":493
 * 
 * 
 * _MSX_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 1.0/255.0, 1.0/255.0, 1.0/255.0 ],
 */
  __pyx_t_32 = PyList_New(16); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_10)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_t_34)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_t_33)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 3, __pyx_t_31)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 4, __pyx_t_30)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 5, __pyx_t_29)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 6, __pyx_t_21)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 7, __pyx_t_28)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 8, __pyx_t_27)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 9, __pyx_t_22)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 10, __pyx_t_11)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 11, __pyx_t_12)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 12, __pyx_t_4)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 13, __pyx_t_20)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 14, __pyx_t_19)) __PYX_ERR(1, 493, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 15, __pyx_t_16)) __PYX_ERR(1, 493, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_34 = 0;
  __pyx_t_33 = 0;
  __pyx_t_31 = 0;
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_21 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_22 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_4 = 0;
  __pyx_t_20 = 0;
  __pyx_t_19 = 0;
  __pyx_t_16 = 0;
  __pyx_t_16 = PyTuple_New(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_32)) __PYX_ERR(1, 493, __pyx_L1_error);
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":510
 *     [ 204/255.0, 204/255.0, 204/255.0],
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MSX =_MSX_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_32 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_float32); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  if (PyDict_SetItem(__pyx_t_32, __pyx_n_s_dtype, __pyx_t_19) < 0) __PYX_ERR(1, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":493
 * 
 * 
 * _MSX_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 1.0/255.0, 1.0/255.0, 1.0/255.0 ],
 */
  __pyx_t_19 = __Pyx_PyObject_Call(__pyx_t_37, __pyx_t_16, __pyx_t_32); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MSX_NORMALIZED, __pyx_t_19) < 0) __PYX_ERR(1, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":511
 *     [ 255.0/255.0, 255.0/255.0, 255.0/255.0 ]
 * ], dtype=float32)
 * MSX =_MSX_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_MSX_NORMALIZED); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_32 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_16 = PyNumber_Multiply(__pyx_t_19, __pyx_t_32); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MSX, __pyx_t_16) < 0) __PYX_ERR(1, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":515
 * 
 * 
 * _TO7_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 0.0/255.0, 255.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_array); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);

  /* "PygameShader/Palette.pyx":516
 * 
 * _TO7_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0.0/255.0, 0.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 0.0/255.0, 0.0/255.0 ],
 */
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_float_0_)) __PYX_ERR(1, 516, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_float_0_)) __PYX_ERR(1, 516, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_float_0_)) __PYX_ERR(1, 516, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":517
 * _TO7_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 0.0/255.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 0.0/255.0, 0.0/255.0 ],
 *     [ 255.0/255.0, 0.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_19 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_37 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_20 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_19)) __PYX_ERR(1, 517, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_37)) __PYX_ERR(1, 517, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_20)) __PYX_ERR(1, 517, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_37 = 0;
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":518
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 0.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 0.0/255.0, 0.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 0.0/255.0, 255.0/255.0 ],
 *     [ 0.0/255.0, 255.0/255.0, 0.0/255.0 ],
 */
  __pyx_t_20 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_37 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_19 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_20)) __PYX_ERR(1, 518, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_37)) __PYX_ERR(1, 518, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_19)) __PYX_ERR(1, 518, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_37 = 0;
  __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":519
 *     [ 0.0/255.0, 0.0/255.0, 255.0/255.0 ],
 *     [ 255.0/255.0, 0.0/255.0, 0.0/255.0 ],
 *     [ 255.0/255.0, 0.0/255.0, 255.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 0.0/255.0, 255.0/255.0, 0.0/255.0 ],
 *     [ 0.0/255.0, 255.0/255.0, 255.0/255.0],
 */
  __pyx_t_19 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_37 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_20 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_19)) __PYX_ERR(1, 519, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_37)) __PYX_ERR(1, 519, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_20)) __PYX_ERR(1, 519, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_37 = 0;
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":520
 *     [ 255.0/255.0, 0.0/255.0, 0.0/255.0 ],
 *     [ 255.0/255.0, 0.0/255.0, 255.0/255.0 ],
 *     [ 0.0/255.0, 255.0/255.0, 0.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 0.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [ 255.0/255.0, 255.0/255.0, 0.0/255.0],
 */
  __pyx_t_20 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_37 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_19 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_t_20)) __PYX_ERR(1, 520, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_t_37)) __PYX_ERR(1, 520, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_t_19)) __PYX_ERR(1, 520, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_37 = 0;
  __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":521
 *     [ 255.0/255.0, 0.0/255.0, 255.0/255.0 ],
 *     [ 0.0/255.0, 255.0/255.0, 0.0/255.0 ],
 *     [ 0.0/255.0, 255.0/255.0, 255.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 255.0/255.0, 255.0/255.0, 0.0/255.0],
 *     [  255.0/255.0, 255.0/255.0, 255.0/255.0],
 */
  __pyx_t_19 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_37 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_20 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 521, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_t_19)) __PYX_ERR(1, 521, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_t_37)) __PYX_ERR(1, 521, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_t_20)) __PYX_ERR(1, 521, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_37 = 0;
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":522
 *     [ 0.0/255.0, 255.0/255.0, 0.0/255.0 ],
 *     [ 0.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [ 255.0/255.0, 255.0/255.0, 0.0/255.0],             # <<<<<<<<<<<<<<
 *     [  255.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [  221.0/255.0, 119.0/255.0, 119.0/255.0],
 */
  __pyx_t_20 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_37 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_19 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 522, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_t_20)) __PYX_ERR(1, 522, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_t_37)) __PYX_ERR(1, 522, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_t_19)) __PYX_ERR(1, 522, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_37 = 0;
  __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":523
 *     [ 0.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [ 255.0/255.0, 255.0/255.0, 0.0/255.0],
 *     [  255.0/255.0, 255.0/255.0, 255.0/255.0],             # <<<<<<<<<<<<<<
 *     [  221.0/255.0, 119.0/255.0, 119.0/255.0],
 *     [ 239.0/255.0, 187.0/255.0, 0.0/255.0],
 */
  __pyx_t_19 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_37 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_20 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_t_19)) __PYX_ERR(1, 523, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_t_37)) __PYX_ERR(1, 523, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_t_20)) __PYX_ERR(1, 523, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_37 = 0;
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":524
 *     [ 255.0/255.0, 255.0/255.0, 0.0/255.0],
 *     [  255.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [  221.0/255.0, 119.0/255.0, 119.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 239.0/255.0, 187.0/255.0, 0.0/255.0],
 *     [  221.0/255.0, 221.0/255.0, 119.0/255.0],
 */
  __pyx_t_20 = PyFloat_FromDouble((221.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_37 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_19 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_t_20)) __PYX_ERR(1, 524, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_t_37)) __PYX_ERR(1, 524, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_t_19)) __PYX_ERR(1, 524, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_37 = 0;
  __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":525
 *     [  255.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [  221.0/255.0, 119.0/255.0, 119.0/255.0],
 *     [ 239.0/255.0, 187.0/255.0, 0.0/255.0],             # <<<<<<<<<<<<<<
 *     [  221.0/255.0, 221.0/255.0, 119.0/255.0],
 *     [  119.0/255.0, 221.0/255.0, 119.0/255.0],
 */
  __pyx_t_19 = PyFloat_FromDouble((239.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_37 = PyFloat_FromDouble((187.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_20 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_t_19)) __PYX_ERR(1, 525, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_t_37)) __PYX_ERR(1, 525, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_t_20)) __PYX_ERR(1, 525, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_37 = 0;
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":526
 *     [  221.0/255.0, 119.0/255.0, 119.0/255.0],
 *     [ 239.0/255.0, 187.0/255.0, 0.0/255.0],
 *     [  221.0/255.0, 221.0/255.0, 119.0/255.0],             # <<<<<<<<<<<<<<
 *     [  119.0/255.0, 221.0/255.0, 119.0/255.0],
 *     [  187.0/255.0, 255.0/255.0, 255.0/255.0],
 */
  __pyx_t_20 = PyFloat_FromDouble((221.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_37 = PyFloat_FromDouble((221.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_19 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_t_20)) __PYX_ERR(1, 526, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_t_37)) __PYX_ERR(1, 526, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_t_19)) __PYX_ERR(1, 526, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_37 = 0;
  __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":527
 *     [ 239.0/255.0, 187.0/255.0, 0.0/255.0],
 *     [  221.0/255.0, 221.0/255.0, 119.0/255.0],
 *     [  119.0/255.0, 221.0/255.0, 119.0/255.0],             # <<<<<<<<<<<<<<
 *     [  187.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [  119.0/255.0, 119.0/255.0, 221.0/255.0],
 */
  __pyx_t_19 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_37 = PyFloat_FromDouble((221.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_20 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 527, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_t_19)) __PYX_ERR(1, 527, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_t_37)) __PYX_ERR(1, 527, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_t_20)) __PYX_ERR(1, 527, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_37 = 0;
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":528
 *     [  221.0/255.0, 221.0/255.0, 119.0/255.0],
 *     [  119.0/255.0, 221.0/255.0, 119.0/255.0],
 *     [  187.0/255.0, 255.0/255.0, 255.0/255.0],             # <<<<<<<<<<<<<<
 *     [  119.0/255.0, 119.0/255.0, 221.0/255.0],
 *     [ 221.0/255.0, 119.0/255.0, 239.0/255.0],
 */
  __pyx_t_20 = PyFloat_FromDouble((187.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_37 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_19 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 528, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_t_20)) __PYX_ERR(1, 528, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_t_37)) __PYX_ERR(1, 528, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_t_19)) __PYX_ERR(1, 528, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_37 = 0;
  __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":529
 *     [  119.0/255.0, 221.0/255.0, 119.0/255.0],
 *     [  187.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [  119.0/255.0, 119.0/255.0, 221.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 221.0/255.0, 119.0/255.0, 239.0/255.0],
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]
 */
  __pyx_t_19 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_37 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_20 = PyFloat_FromDouble((221.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 529, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_19)) __PYX_ERR(1, 529, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_37)) __PYX_ERR(1, 529, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_20)) __PYX_ERR(1, 529, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_37 = 0;
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":530
 *     [  187.0/255.0, 255.0/255.0, 255.0/255.0],
 *     [  119.0/255.0, 119.0/255.0, 221.0/255.0],
 *     [ 221.0/255.0, 119.0/255.0, 239.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]
 * ], dtype=float32)
 */
  __pyx_t_20 = PyFloat_FromDouble((221.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_37 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_19 = PyFloat_FromDouble((239.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 530, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_t_20)) __PYX_ERR(1, 530, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_t_37)) __PYX_ERR(1, 530, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_t_19)) __PYX_ERR(1, 530, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_37 = 0;
  __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":531
 *     [  119.0/255.0, 119.0/255.0, 221.0/255.0],
 *     [ 221.0/255.0, 119.0/255.0, 239.0/255.0],
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * TO7 =_TO7_NORMALIZED * <float>255.0
 */
  __pyx_t_19 = PyFloat_FromDouble((187.0 / 255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_37 = PyFloat_FromDouble((187.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_20 = PyFloat_FromDouble((187.0 / 255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 531, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_t_19)) __PYX_ERR(1, 531, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_t_37)) __PYX_ERR(1, 531, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_t_20)) __PYX_ERR(1, 531, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_37 = 0;
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":515
 * 
 * 
 * _TO7_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 0.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_20 = PyList_New(16); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_32)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_4)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_12)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 3, __pyx_t_11)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 4, __pyx_t_22)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 5, __pyx_t_27)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 6, __pyx_t_28)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 7, __pyx_t_21)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 8, __pyx_t_29)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 9, __pyx_t_30)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 10, __pyx_t_31)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 11, __pyx_t_33)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 12, __pyx_t_34)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 13, __pyx_t_10)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 14, __pyx_t_26)) __PYX_ERR(1, 515, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 15, __pyx_t_36)) __PYX_ERR(1, 515, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;
  __pyx_t_11 = 0;
  __pyx_t_22 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_21 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_31 = 0;
  __pyx_t_33 = 0;
  __pyx_t_34 = 0;
  __pyx_t_10 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;
  __pyx_t_36 = PyTuple_New(1); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_36, 0, __pyx_t_20)) __PYX_ERR(1, 515, __pyx_L1_error);
  __pyx_t_20 = 0;

  /* "PygameShader/Palette.pyx":532
 *     [ 221.0/255.0, 119.0/255.0, 239.0/255.0],
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * TO7 =_TO7_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_20 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_float32); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  if (PyDict_SetItem(__pyx_t_20, __pyx_n_s_dtype, __pyx_t_26) < 0) __PYX_ERR(1, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

  /* "PygameShader/Palette.pyx":515
 * 
 * 
 * _TO7_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.0/255.0, 0.0/255.0, 255.0/255.0 ],
 */
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_36, __pyx_t_20); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TO7_NORMALIZED, __pyx_t_26) < 0) __PYX_ERR(1, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

  /* "PygameShader/Palette.pyx":533
 *     [ 187.0/255.0, 187.0/255.0, 187.0/255.0 ]
 * ], dtype=float32)
 * TO7 =_TO7_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _PICO_8_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_TO7_NORMALIZED); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_20 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __pyx_t_36 = PyNumber_Multiply(__pyx_t_26, __pyx_t_20); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 533, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TO7, __pyx_t_36) < 0) __PYX_ERR(1, 533, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":535
 * TO7 =_TO7_NORMALIZED * <float>255.0
 * 
 * _PICO_8_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 29.0/255.0, 43.0/255.0, 83.0/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_36, __pyx_n_s_array); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);

  /* "PygameShader/Palette.pyx":536
 * 
 * _PICO_8_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 29.0/255.0, 43.0/255.0, 83.0/255.0 ],
 *     [ 126.0/255.0, 37.0/255.0, 83.0/255.0],
 */
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_0_)) __PYX_ERR(1, 536, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_)) __PYX_ERR(1, 536, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_)) __PYX_ERR(1, 536, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":537
 * _PICO_8_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 29.0/255.0, 43.0/255.0, 83.0/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 126.0/255.0, 37.0/255.0, 83.0/255.0],
 *     [ 0.0, 135.0/255.0, 81.0/255.0],
 */
  __pyx_t_26 = PyFloat_FromDouble((29.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble((43.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_10 = PyFloat_FromDouble((83.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_t_26)) __PYX_ERR(1, 537, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_t_16)) __PYX_ERR(1, 537, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_t_10)) __PYX_ERR(1, 537, __pyx_L1_error);
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;
  __pyx_t_10 = 0;

  /* "PygameShader/Palette.pyx":538
 *     [ 0., 0., 0. ],
 *     [ 29.0/255.0, 43.0/255.0, 83.0/255.0 ],
 *     [ 126.0/255.0, 37.0/255.0, 83.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 0.0, 135.0/255.0, 81.0/255.0],
 *     [ 171.0/255.0, 82.0/255.0, 54.0/255.0],
 */
  __pyx_t_10 = PyFloat_FromDouble((126.0 / 255.0)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_16 = PyFloat_FromDouble((37.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_26 = PyFloat_FromDouble((83.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 538, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_t_10)) __PYX_ERR(1, 538, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_t_16)) __PYX_ERR(1, 538, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_t_26)) __PYX_ERR(1, 538, __pyx_L1_error);
  __pyx_t_10 = 0;
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;

  /* "PygameShader/Palette.pyx":539
 *     [ 29.0/255.0, 43.0/255.0, 83.0/255.0 ],
 *     [ 126.0/255.0, 37.0/255.0, 83.0/255.0],
 *     [ 0.0, 135.0/255.0, 81.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 171.0/255.0, 82.0/255.0, 54.0/255.0],
 *     [ 95/255.0, 87/255.0, 79/255.0],
 */
  __pyx_t_26 = PyFloat_FromDouble((135.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble((81.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_0)) __PYX_ERR(1, 539, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_26)) __PYX_ERR(1, 539, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_16)) __PYX_ERR(1, 539, __pyx_L1_error);
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":540
 *     [ 126.0/255.0, 37.0/255.0, 83.0/255.0],
 *     [ 0.0, 135.0/255.0, 81.0/255.0],
 *     [ 171.0/255.0, 82.0/255.0, 54.0/255.0],             # <<<<<<<<<<<<<<
 *     [ 95/255.0, 87/255.0, 79/255.0],
 *     [  194/255.0, 195/255.0, 199/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((171.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_26 = PyFloat_FromDouble((82.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_31 = PyFloat_FromDouble((54.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_t_16)) __PYX_ERR(1, 540, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_t_26)) __PYX_ERR(1, 540, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_t_31)) __PYX_ERR(1, 540, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_31 = 0;

  /* "PygameShader/Palette.pyx":541
 *     [ 0.0, 135.0/255.0, 81.0/255.0],
 *     [ 171.0/255.0, 82.0/255.0, 54.0/255.0],
 *     [ 95/255.0, 87/255.0, 79/255.0],             # <<<<<<<<<<<<<<
 *     [  194/255.0, 195/255.0, 199/255.0],
 *     [  255/255.0, 241/255.0, 232/255.0],
 */
  __pyx_t_31 = PyFloat_FromDouble((95.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_26 = PyFloat_FromDouble((87.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble((79.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 541, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_t_31)) __PYX_ERR(1, 541, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_t_26)) __PYX_ERR(1, 541, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_t_16)) __PYX_ERR(1, 541, __pyx_L1_error);
  __pyx_t_31 = 0;
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":542
 *     [ 171.0/255.0, 82.0/255.0, 54.0/255.0],
 *     [ 95/255.0, 87/255.0, 79/255.0],
 *     [  194/255.0, 195/255.0, 199/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 241/255.0, 232/255.0],
 *     [  255/255.0, 0/255.0, 77/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((194.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_26 = PyFloat_FromDouble((195.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_31 = PyFloat_FromDouble((199.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_t_16)) __PYX_ERR(1, 542, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_t_26)) __PYX_ERR(1, 542, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_t_31)) __PYX_ERR(1, 542, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_31 = 0;

  /* "PygameShader/Palette.pyx":543
 *     [ 95/255.0, 87/255.0, 79/255.0],
 *     [  194/255.0, 195/255.0, 199/255.0],
 *     [  255/255.0, 241/255.0, 232/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 0/255.0, 77/255.0],
 *     [  255/255.0, 163/255.0, 0/255.0],
 */
  __pyx_t_31 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_26 = PyFloat_FromDouble((241.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble((232.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_t_31)) __PYX_ERR(1, 543, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_t_26)) __PYX_ERR(1, 543, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_t_16)) __PYX_ERR(1, 543, __pyx_L1_error);
  __pyx_t_31 = 0;
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":544
 *     [  194/255.0, 195/255.0, 199/255.0],
 *     [  255/255.0, 241/255.0, 232/255.0],
 *     [  255/255.0, 0/255.0, 77/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 163/255.0, 0/255.0],
 *     [  255/255.0, 236/255.0, 39/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_26 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_31 = PyFloat_FromDouble((77.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 544, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_t_16)) __PYX_ERR(1, 544, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_t_26)) __PYX_ERR(1, 544, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_t_31)) __PYX_ERR(1, 544, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_31 = 0;

  /* "PygameShader/Palette.pyx":545
 *     [  255/255.0, 241/255.0, 232/255.0],
 *     [  255/255.0, 0/255.0, 77/255.0],
 *     [  255/255.0, 163/255.0, 0/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 236/255.0, 39/255.0],
 *     [  0/255.0, 228/255.0, 54/255.0],
 */
  __pyx_t_31 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_26 = PyFloat_FromDouble((163.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 545, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_t_31)) __PYX_ERR(1, 545, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_t_26)) __PYX_ERR(1, 545, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_t_16)) __PYX_ERR(1, 545, __pyx_L1_error);
  __pyx_t_31 = 0;
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":546
 *     [  255/255.0, 0/255.0, 77/255.0],
 *     [  255/255.0, 163/255.0, 0/255.0],
 *     [  255/255.0, 236/255.0, 39/255.0],             # <<<<<<<<<<<<<<
 *     [  0/255.0, 228/255.0, 54/255.0],
 *     [  41/255.0, 173/255.0, 255/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_26 = PyFloat_FromDouble((236.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_31 = PyFloat_FromDouble((39.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_16)) __PYX_ERR(1, 546, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_26)) __PYX_ERR(1, 546, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_31)) __PYX_ERR(1, 546, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_31 = 0;

  /* "PygameShader/Palette.pyx":547
 *     [  255/255.0, 163/255.0, 0/255.0],
 *     [  255/255.0, 236/255.0, 39/255.0],
 *     [  0/255.0, 228/255.0, 54/255.0],             # <<<<<<<<<<<<<<
 *     [  41/255.0, 173/255.0, 255/255.0],
 *     [  131/255.0, 118/255.0, 156/255.0],
 */
  __pyx_t_31 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_26 = PyFloat_FromDouble((228.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble((54.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 547, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_31)) __PYX_ERR(1, 547, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_26)) __PYX_ERR(1, 547, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_16)) __PYX_ERR(1, 547, __pyx_L1_error);
  __pyx_t_31 = 0;
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":548
 *     [  255/255.0, 236/255.0, 39/255.0],
 *     [  0/255.0, 228/255.0, 54/255.0],
 *     [  41/255.0, 173/255.0, 255/255.0],             # <<<<<<<<<<<<<<
 *     [  131/255.0, 118/255.0, 156/255.0],
 *     [  255/255.0, 119/255.0, 168/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((41.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_26 = PyFloat_FromDouble((173.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_31 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_16)) __PYX_ERR(1, 548, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_26)) __PYX_ERR(1, 548, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_31)) __PYX_ERR(1, 548, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_31 = 0;

  /* "PygameShader/Palette.pyx":549
 *     [  0/255.0, 228/255.0, 54/255.0],
 *     [  41/255.0, 173/255.0, 255/255.0],
 *     [  131/255.0, 118/255.0, 156/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 119/255.0, 168/255.0],
 *     [  255/255.0, 204/255.0, 170/255.0]
 */
  __pyx_t_31 = PyFloat_FromDouble((131.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_26 = PyFloat_FromDouble((118.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble((156.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_31)) __PYX_ERR(1, 549, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_t_26)) __PYX_ERR(1, 549, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_t_16)) __PYX_ERR(1, 549, __pyx_L1_error);
  __pyx_t_31 = 0;
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":550
 *     [  41/255.0, 173/255.0, 255/255.0],
 *     [  131/255.0, 118/255.0, 156/255.0],
 *     [  255/255.0, 119/255.0, 168/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 204/255.0, 170/255.0]
 * ], dtype=float32)
 */
  __pyx_t_16 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_26 = PyFloat_FromDouble((119.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_31 = PyFloat_FromDouble((168.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_t_16)) __PYX_ERR(1, 550, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_t_26)) __PYX_ERR(1, 550, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_t_31)) __PYX_ERR(1, 550, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_31 = 0;

  /* "PygameShader/Palette.pyx":551
 *     [  131/255.0, 118/255.0, 156/255.0],
 *     [  255/255.0, 119/255.0, 168/255.0],
 *     [  255/255.0, 204/255.0, 170/255.0]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * PICO_8 =_PICO_8_NORMALIZED * <float>255.0
 */
  __pyx_t_31 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __pyx_t_26 = PyFloat_FromDouble((204.0 / 255.0)); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble((170.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_t_31)) __PYX_ERR(1, 551, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_26)) __PYX_ERR(1, 551, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_16)) __PYX_ERR(1, 551, __pyx_L1_error);
  __pyx_t_31 = 0;
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":535
 * TO7 =_TO7_NORMALIZED * <float>255.0
 * 
 * _PICO_8_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 29.0/255.0, 43.0/255.0, 83.0/255.0 ],
 */
  __pyx_t_16 = PyList_New(16); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_20)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_34)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_33)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_t_10)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 4, __pyx_t_30)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 5, __pyx_t_29)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 6, __pyx_t_21)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 7, __pyx_t_28)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 8, __pyx_t_27)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 9, __pyx_t_22)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 10, __pyx_t_11)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 11, __pyx_t_12)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 12, __pyx_t_4)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 13, __pyx_t_32)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 14, __pyx_t_37)) __PYX_ERR(1, 535, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 15, __pyx_t_19)) __PYX_ERR(1, 535, __pyx_L1_error);
  __pyx_t_20 = 0;
  __pyx_t_34 = 0;
  __pyx_t_33 = 0;
  __pyx_t_10 = 0;
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_21 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_22 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_4 = 0;
  __pyx_t_32 = 0;
  __pyx_t_37 = 0;
  __pyx_t_19 = 0;
  __pyx_t_19 = PyTuple_New(1); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_19, 0, __pyx_t_16)) __PYX_ERR(1, 535, __pyx_L1_error);
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":552
 *     [  255/255.0, 119/255.0, 168/255.0],
 *     [  255/255.0, 204/255.0, 170/255.0]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * PICO_8 =_PICO_8_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GetModuleGlobalName(__pyx_t_37, __pyx_n_s_float32); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_dtype, __pyx_t_37) < 0) __PYX_ERR(1, 552, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;

  /* "PygameShader/Palette.pyx":535
 * TO7 =_TO7_NORMALIZED * <float>255.0
 * 
 * _PICO_8_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 29.0/255.0, 43.0/255.0, 83.0/255.0 ],
 */
  __pyx_t_37 = __Pyx_PyObject_Call(__pyx_t_36, __pyx_t_19, __pyx_t_16); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PICO_8_NORMALIZED, __pyx_t_37) < 0) __PYX_ERR(1, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;

  /* "PygameShader/Palette.pyx":553
 *     [  255/255.0, 204/255.0, 170/255.0]
 * ], dtype=float32)
 * PICO_8 =_PICO_8_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_37, __pyx_n_s_PICO_8_NORMALIZED); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_19 = PyNumber_Multiply(__pyx_t_37, __pyx_t_16); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 553, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_DECREF(__pyx_t_37); __pyx_t_37 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PICO_8, __pyx_t_19) < 0) __PYX_ERR(1, 553, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":556
 * 
 * 
 * _PICO_8_CUSTOM_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 41/255.0, 24/255.0, 20/255.0 ],
 *     [ 17/255.0, 29/255.0, 53/255.0 ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_array); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);

  /* "PygameShader/Palette.pyx":557
 * 
 * _PICO_8_CUSTOM_NORMALIZED = array([
 *     [ 41/255.0, 24/255.0, 20/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 17/255.0, 29/255.0, 53/255.0 ],
 *     [ 66/255.0, 33/255.0, 54/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((41.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_37 = PyFloat_FromDouble((24.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_36 = PyFloat_FromDouble((20.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_16)) __PYX_ERR(1, 557, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_t_37)) __PYX_ERR(1, 557, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_t_36)) __PYX_ERR(1, 557, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":558
 * _PICO_8_CUSTOM_NORMALIZED = array([
 *     [ 41/255.0, 24/255.0, 20/255.0 ],
 *     [ 17/255.0, 29/255.0, 53/255.0 ],             # <<<<<<<<<<<<<<
 *     [ 66/255.0, 33/255.0, 54/255.0],
 *     [ 18/255.0, 83/255.0, 89/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((17.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble((29.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble((53.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 558, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_36)) __PYX_ERR(1, 558, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_t_37)) __PYX_ERR(1, 558, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_t_16)) __PYX_ERR(1, 558, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":559
 *     [ 41/255.0, 24/255.0, 20/255.0 ],
 *     [ 17/255.0, 29/255.0, 53/255.0 ],
 *     [ 66/255.0, 33/255.0, 54/255.0],             # <<<<<<<<<<<<<<
 *     [ 18/255.0, 83/255.0, 89/255.0],
 *     [ 116/255.0, 47/255.0, 41/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((66.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_37 = PyFloat_FromDouble((33.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_36 = PyFloat_FromDouble((54.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 559, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_16)) __PYX_ERR(1, 559, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_37)) __PYX_ERR(1, 559, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_36)) __PYX_ERR(1, 559, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":560
 *     [ 17/255.0, 29/255.0, 53/255.0 ],
 *     [ 66/255.0, 33/255.0, 54/255.0],
 *     [ 18/255.0, 83/255.0, 89/255.0],             # <<<<<<<<<<<<<<
 *     [ 116/255.0, 47/255.0, 41/255.0],
 *     [ 73/255.0, 51/255.0, 59/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((18.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble((83.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble((89.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_36)) __PYX_ERR(1, 560, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_t_37)) __PYX_ERR(1, 560, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_16)) __PYX_ERR(1, 560, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":561
 *     [ 66/255.0, 33/255.0, 54/255.0],
 *     [ 18/255.0, 83/255.0, 89/255.0],
 *     [ 116/255.0, 47/255.0, 41/255.0],             # <<<<<<<<<<<<<<
 *     [ 73/255.0, 51/255.0, 59/255.0],
 *     [  162/255.0, 136/255.0, 121/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((116.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_37 = PyFloat_FromDouble((47.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_36 = PyFloat_FromDouble((41.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 561, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_t_16)) __PYX_ERR(1, 561, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_t_37)) __PYX_ERR(1, 561, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_t_36)) __PYX_ERR(1, 561, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":562
 *     [ 18/255.0, 83/255.0, 89/255.0],
 *     [ 116/255.0, 47/255.0, 41/255.0],
 *     [ 73/255.0, 51/255.0, 59/255.0],             # <<<<<<<<<<<<<<
 *     [  162/255.0, 136/255.0, 121/255.0],
 *     [  243/255.0, 239/255.0, 125/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((73.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble((51.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble((59.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_t_36)) __PYX_ERR(1, 562, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_t_37)) __PYX_ERR(1, 562, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_t_16)) __PYX_ERR(1, 562, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":563
 *     [ 116/255.0, 47/255.0, 41/255.0],
 *     [ 73/255.0, 51/255.0, 59/255.0],
 *     [  162/255.0, 136/255.0, 121/255.0],             # <<<<<<<<<<<<<<
 *     [  243/255.0, 239/255.0, 125/255.0],
 *     [  190/255.0, 18/255.0, 80/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((162.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_37 = PyFloat_FromDouble((136.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_36 = PyFloat_FromDouble((121.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_t_16)) __PYX_ERR(1, 563, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_t_37)) __PYX_ERR(1, 563, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_t_36)) __PYX_ERR(1, 563, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":564
 *     [ 73/255.0, 51/255.0, 59/255.0],
 *     [  162/255.0, 136/255.0, 121/255.0],
 *     [  243/255.0, 239/255.0, 125/255.0],             # <<<<<<<<<<<<<<
 *     [  190/255.0, 18/255.0, 80/255.0],
 *     [  255/255.0, 108/255.0, 36/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((243.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble((239.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble((125.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 564, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_t_36)) __PYX_ERR(1, 564, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_t_37)) __PYX_ERR(1, 564, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_t_16)) __PYX_ERR(1, 564, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":565
 *     [  162/255.0, 136/255.0, 121/255.0],
 *     [  243/255.0, 239/255.0, 125/255.0],
 *     [  190/255.0, 18/255.0, 80/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 108/255.0, 36/255.0],
 *     [  168/255.0, 231/255.0, 46/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((190.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_37 = PyFloat_FromDouble((18.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_36 = PyFloat_FromDouble((80.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 565, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_t_16)) __PYX_ERR(1, 565, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_t_37)) __PYX_ERR(1, 565, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_t_36)) __PYX_ERR(1, 565, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":566
 *     [  243/255.0, 239/255.0, 125/255.0],
 *     [  190/255.0, 18/255.0, 80/255.0],
 *     [  255/255.0, 108/255.0, 36/255.0],             # <<<<<<<<<<<<<<
 *     [  168/255.0, 231/255.0, 46/255.0],
 *     [  0/255.0, 181/255.0, 67/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble((108.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble((36.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_t_36)) __PYX_ERR(1, 566, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_t_37)) __PYX_ERR(1, 566, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_t_16)) __PYX_ERR(1, 566, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":567
 *     [  190/255.0, 18/255.0, 80/255.0],
 *     [  255/255.0, 108/255.0, 36/255.0],
 *     [  168/255.0, 231/255.0, 46/255.0],             # <<<<<<<<<<<<<<
 *     [  0/255.0, 181/255.0, 67/255.0],
 *     [  6/255.0, 90/255.0, 181/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((168.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_37 = PyFloat_FromDouble((231.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_36 = PyFloat_FromDouble((46.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_16)) __PYX_ERR(1, 567, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_37)) __PYX_ERR(1, 567, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_36)) __PYX_ERR(1, 567, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":568
 *     [  255/255.0, 108/255.0, 36/255.0],
 *     [  168/255.0, 231/255.0, 46/255.0],
 *     [  0/255.0, 181/255.0, 67/255.0],             # <<<<<<<<<<<<<<
 *     [  6/255.0, 90/255.0, 181/255.0],
 *     [  117/255.0, 70/255.0, 101/255.0],
 */
  __pyx_t_36 = PyFloat_FromDouble((0.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble((181.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble((67.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_t_36)) __PYX_ERR(1, 568, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_t_37)) __PYX_ERR(1, 568, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_t_16)) __PYX_ERR(1, 568, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":569
 *     [  168/255.0, 231/255.0, 46/255.0],
 *     [  0/255.0, 181/255.0, 67/255.0],
 *     [  6/255.0, 90/255.0, 181/255.0],             # <<<<<<<<<<<<<<
 *     [  117/255.0, 70/255.0, 101/255.0],
 *     [  255/255.0, 110/255.0, 89/255.0],
 */
  __pyx_t_16 = PyFloat_FromDouble((6.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_37 = PyFloat_FromDouble((90.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_36 = PyFloat_FromDouble((181.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_t_16)) __PYX_ERR(1, 569, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_t_37)) __PYX_ERR(1, 569, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_t_36)) __PYX_ERR(1, 569, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":570
 *     [  0/255.0, 181/255.0, 67/255.0],
 *     [  6/255.0, 90/255.0, 181/255.0],
 *     [  117/255.0, 70/255.0, 101/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 110/255.0, 89/255.0],
 *     [  255/255.0, 157/255.0, 129/255.0]
 */
  __pyx_t_36 = PyFloat_FromDouble((117.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble((70.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble((101.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_t_36)) __PYX_ERR(1, 570, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_t_37)) __PYX_ERR(1, 570, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_t_16)) __PYX_ERR(1, 570, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":571
 *     [  6/255.0, 90/255.0, 181/255.0],
 *     [  117/255.0, 70/255.0, 101/255.0],
 *     [  255/255.0, 110/255.0, 89/255.0],             # <<<<<<<<<<<<<<
 *     [  255/255.0, 157/255.0, 129/255.0]
 * ], dtype=float32)
 */
  __pyx_t_16 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_37 = PyFloat_FromDouble((110.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_36 = PyFloat_FromDouble((89.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 571, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_t_16)) __PYX_ERR(1, 571, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_t_37)) __PYX_ERR(1, 571, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_t_36)) __PYX_ERR(1, 571, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":572
 *     [  117/255.0, 70/255.0, 101/255.0],
 *     [  255/255.0, 110/255.0, 89/255.0],
 *     [  255/255.0, 157/255.0, 129/255.0]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * PICO_8_CUSTOM =_PICO_8_CUSTOM_NORMALIZED * <float>255.0
 */
  __pyx_t_36 = PyFloat_FromDouble((255.0 / 255.0)); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_37 = PyFloat_FromDouble((157.0 / 255.0)); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __pyx_t_16 = PyFloat_FromDouble((129.0 / 255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_t_36)) __PYX_ERR(1, 572, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_t_37)) __PYX_ERR(1, 572, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_t_16)) __PYX_ERR(1, 572, __pyx_L1_error);
  __pyx_t_36 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":556
 * 
 * 
 * _PICO_8_CUSTOM_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 41/255.0, 24/255.0, 20/255.0 ],
 *     [ 17/255.0, 29/255.0, 53/255.0 ],
 */
  __pyx_t_16 = PyList_New(16); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_t_32)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_t_4)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_t_12)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 3, __pyx_t_11)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 4, __pyx_t_22)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 5, __pyx_t_27)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 6, __pyx_t_28)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 7, __pyx_t_21)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 8, __pyx_t_29)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 9, __pyx_t_30)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 10, __pyx_t_10)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 11, __pyx_t_33)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 12, __pyx_t_34)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 13, __pyx_t_20)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 14, __pyx_t_26)) __PYX_ERR(1, 556, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 15, __pyx_t_31)) __PYX_ERR(1, 556, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_4 = 0;
  __pyx_t_12 = 0;
  __pyx_t_11 = 0;
  __pyx_t_22 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_21 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_10 = 0;
  __pyx_t_33 = 0;
  __pyx_t_34 = 0;
  __pyx_t_20 = 0;
  __pyx_t_26 = 0;
  __pyx_t_31 = 0;
  __pyx_t_31 = PyTuple_New(1); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_31, 0, __pyx_t_16)) __PYX_ERR(1, 556, __pyx_L1_error);
  __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":573
 *     [  255/255.0, 110/255.0, 89/255.0],
 *     [  255/255.0, 157/255.0, 129/255.0]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * PICO_8_CUSTOM =_PICO_8_CUSTOM_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_float32); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_dtype, __pyx_t_26) < 0) __PYX_ERR(1, 573, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

  /* "PygameShader/Palette.pyx":556
 * 
 * 
 * _PICO_8_CUSTOM_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 41/255.0, 24/255.0, 20/255.0 ],
 *     [ 17/255.0, 29/255.0, 53/255.0 ],
 */
  __pyx_t_26 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_t_31, __pyx_t_16); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PICO_8_CUSTOM_NORMALIZED, __pyx_t_26) < 0) __PYX_ERR(1, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

  /* "PygameShader/Palette.pyx":574
 *     [  255/255.0, 157/255.0, 129/255.0]
 * ], dtype=float32)
 * PICO_8_CUSTOM =_PICO_8_CUSTOM_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_PICO_8_CUSTOM_NORMALIZED); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __pyx_t_16 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_31 = PyNumber_Multiply(__pyx_t_26, __pyx_t_16); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PICO_8_CUSTOM, __pyx_t_31) < 0) __PYX_ERR(1, 574, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;

  /* "PygameShader/Palette.pyx":578
 * 
 * 
 * _MICROSOFT_WINDOWS_16_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_31, __pyx_n_s_array); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);

  /* "PygameShader/Palette.pyx":579
 * 
 * _MICROSOFT_WINDOWS_16_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0.50196078, 0., 0. ],
 *     [ 0., 0.50196078, 0. ],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 579, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_)) __PYX_ERR(1, 579, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_)) __PYX_ERR(1, 579, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_)) __PYX_ERR(1, 579, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":580
 * _MICROSOFT_WINDOWS_16_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 0.50196078, 0. ],
 *     [ 0.50196078, 0.50196078, 0. ],
 */
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 580, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_float_0_50196078)) __PYX_ERR(1, 580, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_float_0_)) __PYX_ERR(1, 580, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_float_0_)) __PYX_ERR(1, 580, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":581
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],
 *     [ 0., 0.50196078, 0. ],             # <<<<<<<<<<<<<<
 *     [ 0.50196078, 0.50196078, 0. ],
 *     [ 0., 0., 0.50196078 ],
 */
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_float_0_)) __PYX_ERR(1, 581, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_float_0_50196078)) __PYX_ERR(1, 581, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_float_0_)) __PYX_ERR(1, 581, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":582
 *     [ 0.50196078, 0., 0. ],
 *     [ 0., 0.50196078, 0. ],
 *     [ 0.50196078, 0.50196078, 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0.50196078 ],
 *     [ 0.50196078, 0., 0.50196078 ],
 */
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 582, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_0_50196078)) __PYX_ERR(1, 582, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_50196078)) __PYX_ERR(1, 582, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_)) __PYX_ERR(1, 582, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":583
 *     [ 0., 0.50196078, 0. ],
 *     [ 0.50196078, 0.50196078, 0. ],
 *     [ 0., 0., 0.50196078 ],             # <<<<<<<<<<<<<<
 *     [ 0.50196078, 0., 0.50196078 ],
 *     [ 0., 0.50196078, 0.50196078 ],
 */
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 583, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_float_0_)) __PYX_ERR(1, 583, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_float_0_)) __PYX_ERR(1, 583, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_float_0_50196078)) __PYX_ERR(1, 583, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":584
 *     [ 0.50196078, 0.50196078, 0. ],
 *     [ 0., 0., 0.50196078 ],
 *     [ 0.50196078, 0., 0.50196078 ],             # <<<<<<<<<<<<<<
 *     [ 0., 0.50196078, 0.50196078 ],
 *     [ 0.75294118, 0.75294118, 0.75294118 ],
 */
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 584, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_float_0_50196078)) __PYX_ERR(1, 584, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_float_0_)) __PYX_ERR(1, 584, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_float_0_50196078)) __PYX_ERR(1, 584, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":585
 *     [ 0., 0., 0.50196078 ],
 *     [ 0.50196078, 0., 0.50196078 ],
 *     [ 0., 0.50196078, 0.50196078 ],             # <<<<<<<<<<<<<<
 *     [ 0.75294118, 0.75294118, 0.75294118 ],
 *     [ 0.50196078, 0.50196078, 0.50196078 ],
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_)) __PYX_ERR(1, 585, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_50196078)) __PYX_ERR(1, 585, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_50196078)) __PYX_ERR(1, 585, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":586
 *     [ 0.50196078, 0., 0.50196078 ],
 *     [ 0., 0.50196078, 0.50196078 ],
 *     [ 0.75294118, 0.75294118, 0.75294118 ],             # <<<<<<<<<<<<<<
 *     [ 0.50196078, 0.50196078, 0.50196078 ],
 *     [ 1., 0., 0. ],
 */
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_INCREF(__pyx_float_0_75294118);
  __Pyx_GIVEREF(__pyx_float_0_75294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_float_0_75294118)) __PYX_ERR(1, 586, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_75294118);
  __Pyx_GIVEREF(__pyx_float_0_75294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_float_0_75294118)) __PYX_ERR(1, 586, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_75294118);
  __Pyx_GIVEREF(__pyx_float_0_75294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_float_0_75294118)) __PYX_ERR(1, 586, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":587
 *     [ 0., 0.50196078, 0.50196078 ],
 *     [ 0.75294118, 0.75294118, 0.75294118 ],
 *     [ 0.50196078, 0.50196078, 0.50196078 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0., 0. ],
 *     [ 0., 1., 0. ],
 */
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 587, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_0_50196078)) __PYX_ERR(1, 587, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_50196078)) __PYX_ERR(1, 587, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_50196078)) __PYX_ERR(1, 587, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":588
 *     [ 0.75294118, 0.75294118, 0.75294118 ],
 *     [ 0.50196078, 0.50196078, 0.50196078 ],
 *     [ 1., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 1., 0. ],
 *     [ 1., 1., 0. ],
 */
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_float_1_)) __PYX_ERR(1, 588, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_float_0_)) __PYX_ERR(1, 588, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_float_0_)) __PYX_ERR(1, 588, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":589
 *     [ 0.50196078, 0.50196078, 0.50196078 ],
 *     [ 1., 0., 0. ],
 *     [ 0., 1., 0. ],             # <<<<<<<<<<<<<<
 *     [ 1., 1., 0. ],
 *     [ 0., 0., 1. ],
 */
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 589, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_float_0_)) __PYX_ERR(1, 589, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_float_1_)) __PYX_ERR(1, 589, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_float_0_)) __PYX_ERR(1, 589, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":590
 *     [ 1., 0., 0. ],
 *     [ 0., 1., 0. ],
 *     [ 1., 1., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 0., 1. ],
 *     [ 1., 0., 1. ],
 */
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 590, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_float_1_)) __PYX_ERR(1, 590, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_float_1_)) __PYX_ERR(1, 590, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_float_0_)) __PYX_ERR(1, 590, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":591
 *     [ 0., 1., 0. ],
 *     [ 1., 1., 0. ],
 *     [ 0., 0., 1. ],             # <<<<<<<<<<<<<<
 *     [ 1., 0., 1. ],
 *     [ 0., 1., 1. ],
 */
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 591, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_float_0_)) __PYX_ERR(1, 591, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_float_0_)) __PYX_ERR(1, 591, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_float_1_)) __PYX_ERR(1, 591, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":592
 *     [ 1., 1., 0. ],
 *     [ 0., 0., 1. ],
 *     [ 1., 0., 1. ],             # <<<<<<<<<<<<<<
 *     [ 0., 1., 1. ],
 *     [ 1., 1., 1. ]
 */
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 592, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_float_1_)) __PYX_ERR(1, 592, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_)) __PYX_ERR(1, 592, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_1_)) __PYX_ERR(1, 592, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":593
 *     [ 0., 0., 1. ],
 *     [ 1., 0., 1. ],
 *     [ 0., 1., 1. ],             # <<<<<<<<<<<<<<
 *     [ 1., 1., 1. ]
 * ], dtype=float32)
 */
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_float_0_)) __PYX_ERR(1, 593, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_float_1_)) __PYX_ERR(1, 593, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_float_1_)) __PYX_ERR(1, 593, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":594
 *     [ 1., 0., 1. ],
 *     [ 0., 1., 1. ],
 *     [ 1., 1., 1. ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MICROSOFT_WINDOWS_16 =_MICROSOFT_WINDOWS_16_NORMALIZED * <float>255.0
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_1_)) __PYX_ERR(1, 594, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_1_)) __PYX_ERR(1, 594, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_1_)) __PYX_ERR(1, 594, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":578
 * 
 * 
 * _MICROSOFT_WINDOWS_16_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],
 */
  __pyx_t_32 = PyList_New(16); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_t_16)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_t_26)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_t_19)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 3, __pyx_t_20)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 4, __pyx_t_34)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 5, __pyx_t_33)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 6, __pyx_t_10)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 7, __pyx_t_30)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 8, __pyx_t_29)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 9, __pyx_t_21)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 10, __pyx_t_28)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 11, __pyx_t_27)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 12, __pyx_t_22)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 13, __pyx_t_11)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 14, __pyx_t_12)) __PYX_ERR(1, 578, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 15, __pyx_t_4)) __PYX_ERR(1, 578, __pyx_L1_error);
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_34 = 0;
  __pyx_t_33 = 0;
  __pyx_t_10 = 0;
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_21 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_22 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_32)) __PYX_ERR(1, 578, __pyx_L1_error);
  __pyx_t_32 = 0;

  /* "PygameShader/Palette.pyx":595
 *     [ 0., 1., 1. ],
 *     [ 1., 1., 1. ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MICROSOFT_WINDOWS_16 =_MICROSOFT_WINDOWS_16_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_32 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_float32); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  if (PyDict_SetItem(__pyx_t_32, __pyx_n_s_dtype, __pyx_t_12) < 0) __PYX_ERR(1, 595, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":578
 * 
 * 
 * _MICROSOFT_WINDOWS_16_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],
 */
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_4, __pyx_t_32); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MICROSOFT_WINDOWS_16_NORMALIZED, __pyx_t_12) < 0) __PYX_ERR(1, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

  /* "PygameShader/Palette.pyx":596
 *     [ 1., 1., 1. ]
 * ], dtype=float32)
 * MICROSOFT_WINDOWS_16 =_MICROSOFT_WINDOWS_16_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _MICROSOFT_WINDOWS_20_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_MICROSOFT_WINDOWS_16_NORMALIZED); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_32 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_12, __pyx_t_32); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MICROSOFT_WINDOWS_16, __pyx_t_4) < 0) __PYX_ERR(1, 596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "PygameShader/Palette.pyx":598
 * MICROSOFT_WINDOWS_16 =_MICROSOFT_WINDOWS_16_NORMALIZED * <float>255.0
 * 
 * _MICROSOFT_WINDOWS_20_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "PygameShader/Palette.pyx":599
 * 
 * _MICROSOFT_WINDOWS_20_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0.50196078, 0., 0. ],
 *     [ 0., 0.50196078, 0. ],
 */
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 599, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_float_0_)) __PYX_ERR(1, 599, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_float_0_)) __PYX_ERR(1, 599, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_float_0_)) __PYX_ERR(1, 599, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":600
 * _MICROSOFT_WINDOWS_20_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 0.50196078, 0. ],
 *     [ 0.50196078, 0.50196078, 0. ],
 */
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_float_0_50196078)) __PYX_ERR(1, 600, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_float_0_)) __PYX_ERR(1, 600, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_float_0_)) __PYX_ERR(1, 600, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":601
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],
 *     [ 0., 0.50196078, 0. ],             # <<<<<<<<<<<<<<
 *     [ 0.50196078, 0.50196078, 0. ],
 *     [ 0., 0., 0.50196078 ],
 */
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 601, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_float_0_)) __PYX_ERR(1, 601, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_float_0_50196078)) __PYX_ERR(1, 601, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_float_0_)) __PYX_ERR(1, 601, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":602
 *     [ 0.50196078, 0., 0. ],
 *     [ 0., 0.50196078, 0. ],
 *     [ 0.50196078, 0.50196078, 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0.50196078 ],
 *     [ 0.50196078, 0., 0.50196078 ],
 */
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_float_0_50196078)) __PYX_ERR(1, 602, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_50196078)) __PYX_ERR(1, 602, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_0_)) __PYX_ERR(1, 602, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":603
 *     [ 0., 0.50196078, 0. ],
 *     [ 0.50196078, 0.50196078, 0. ],
 *     [ 0., 0., 0.50196078 ],             # <<<<<<<<<<<<<<
 *     [ 0.50196078, 0., 0.50196078 ],
 *     [ 0., 0.50196078, 0.50196078 ],
 */
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_float_0_)) __PYX_ERR(1, 603, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_float_0_)) __PYX_ERR(1, 603, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_float_0_50196078)) __PYX_ERR(1, 603, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":604
 *     [ 0.50196078, 0.50196078, 0. ],
 *     [ 0., 0., 0.50196078 ],
 *     [ 0.50196078, 0., 0.50196078 ],             # <<<<<<<<<<<<<<
 *     [ 0., 0.50196078, 0.50196078 ],
 *     [ 0.75294118, 0.75294118, 0.75294118 ],
 */
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_float_0_50196078)) __PYX_ERR(1, 604, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_float_0_)) __PYX_ERR(1, 604, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_float_0_50196078)) __PYX_ERR(1, 604, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":605
 *     [ 0., 0., 0.50196078 ],
 *     [ 0.50196078, 0., 0.50196078 ],
 *     [ 0., 0.50196078, 0.50196078 ],             # <<<<<<<<<<<<<<
 *     [ 0.75294118, 0.75294118, 0.75294118 ],
 *     [ 0.75294118, 0.8627451, 0.75294118 ],
 */
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_float_0_)) __PYX_ERR(1, 605, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_float_0_50196078)) __PYX_ERR(1, 605, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_float_0_50196078)) __PYX_ERR(1, 605, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":606
 *     [ 0.50196078, 0., 0.50196078 ],
 *     [ 0., 0.50196078, 0.50196078 ],
 *     [ 0.75294118, 0.75294118, 0.75294118 ],             # <<<<<<<<<<<<<<
 *     [ 0.75294118, 0.8627451, 0.75294118 ],
 *     [ 0.65098039, 0.79215686, 0.94117647 ],
 */
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_float_0_75294118);
  __Pyx_GIVEREF(__pyx_float_0_75294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_float_0_75294118)) __PYX_ERR(1, 606, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_75294118);
  __Pyx_GIVEREF(__pyx_float_0_75294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_float_0_75294118)) __PYX_ERR(1, 606, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_75294118);
  __Pyx_GIVEREF(__pyx_float_0_75294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_float_0_75294118)) __PYX_ERR(1, 606, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":607
 *     [ 0., 0.50196078, 0.50196078 ],
 *     [ 0.75294118, 0.75294118, 0.75294118 ],
 *     [ 0.75294118, 0.8627451, 0.75294118 ],             # <<<<<<<<<<<<<<
 *     [ 0.65098039, 0.79215686, 0.94117647 ],
 *     [ 1., 0.98431373, 0.94117647 ],
 */
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_0_75294118);
  __Pyx_GIVEREF(__pyx_float_0_75294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_0_75294118)) __PYX_ERR(1, 607, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8627451);
  __Pyx_GIVEREF(__pyx_float_0_8627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_8627451)) __PYX_ERR(1, 607, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_75294118);
  __Pyx_GIVEREF(__pyx_float_0_75294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_75294118)) __PYX_ERR(1, 607, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":608
 *     [ 0.75294118, 0.75294118, 0.75294118 ],
 *     [ 0.75294118, 0.8627451, 0.75294118 ],
 *     [ 0.65098039, 0.79215686, 0.94117647 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.98431373, 0.94117647 ],
 *     [ 0.62745098, 0.62745098, 0.64313725 ],
 */
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 608, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_INCREF(__pyx_float_0_65098039);
  __Pyx_GIVEREF(__pyx_float_0_65098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_float_0_65098039)) __PYX_ERR(1, 608, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_79215686);
  __Pyx_GIVEREF(__pyx_float_0_79215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_float_0_79215686)) __PYX_ERR(1, 608, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_94117647);
  __Pyx_GIVEREF(__pyx_float_0_94117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_float_0_94117647)) __PYX_ERR(1, 608, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":609
 *     [ 0.75294118, 0.8627451, 0.75294118 ],
 *     [ 0.65098039, 0.79215686, 0.94117647 ],
 *     [ 1., 0.98431373, 0.94117647 ],             # <<<<<<<<<<<<<<
 *     [ 0.62745098, 0.62745098, 0.64313725 ],
 *     [ 0.50196078, 0.50196078, 0.50196078 ],
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 609, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_1_)) __PYX_ERR(1, 609, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_98431373);
  __Pyx_GIVEREF(__pyx_float_0_98431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_98431373)) __PYX_ERR(1, 609, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_94117647);
  __Pyx_GIVEREF(__pyx_float_0_94117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_94117647)) __PYX_ERR(1, 609, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":610
 *     [ 0.65098039, 0.79215686, 0.94117647 ],
 *     [ 1., 0.98431373, 0.94117647 ],
 *     [ 0.62745098, 0.62745098, 0.64313725 ],             # <<<<<<<<<<<<<<
 *     [ 0.50196078, 0.50196078, 0.50196078 ],
 *     [ 1., 0., 0. ],
 */
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_INCREF(__pyx_float_0_62745098);
  __Pyx_GIVEREF(__pyx_float_0_62745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_float_0_62745098)) __PYX_ERR(1, 610, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_62745098);
  __Pyx_GIVEREF(__pyx_float_0_62745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_float_0_62745098)) __PYX_ERR(1, 610, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_64313725);
  __Pyx_GIVEREF(__pyx_float_0_64313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_float_0_64313725)) __PYX_ERR(1, 610, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":611
 *     [ 1., 0.98431373, 0.94117647 ],
 *     [ 0.62745098, 0.62745098, 0.64313725 ],
 *     [ 0.50196078, 0.50196078, 0.50196078 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0., 0. ],
 *     [ 0., 1., 0. ],
 */
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 611, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_float_0_50196078)) __PYX_ERR(1, 611, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_float_0_50196078)) __PYX_ERR(1, 611, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_50196078);
  __Pyx_GIVEREF(__pyx_float_0_50196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_float_0_50196078)) __PYX_ERR(1, 611, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":612
 *     [ 0.62745098, 0.62745098, 0.64313725 ],
 *     [ 0.50196078, 0.50196078, 0.50196078 ],
 *     [ 1., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 1., 0. ],
 *     [ 1., 1., 0. ],
 */
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 612, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_1_)) __PYX_ERR(1, 612, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_)) __PYX_ERR(1, 612, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_)) __PYX_ERR(1, 612, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":613
 *     [ 0.50196078, 0.50196078, 0.50196078 ],
 *     [ 1., 0., 0. ],
 *     [ 0., 1., 0. ],             # <<<<<<<<<<<<<<
 *     [ 1., 1., 0. ],
 *     [ 0., 0., 1. ],
 */
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 613, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_float_0_)) __PYX_ERR(1, 613, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_float_1_)) __PYX_ERR(1, 613, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_float_0_)) __PYX_ERR(1, 613, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":614
 *     [ 1., 0., 0. ],
 *     [ 0., 1., 0. ],
 *     [ 1., 1., 0. ],             # <<<<<<<<<<<<<<
 *     [ 0., 0., 1. ],
 *     [ 1., 0., 1. ],
 */
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_float_1_)) __PYX_ERR(1, 614, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_float_1_)) __PYX_ERR(1, 614, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_float_0_)) __PYX_ERR(1, 614, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":615
 *     [ 0., 1., 0. ],
 *     [ 1., 1., 0. ],
 *     [ 0., 0., 1. ],             # <<<<<<<<<<<<<<
 *     [ 1., 0., 1. ],
 *     [ 0., 1., 1. ],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_)) __PYX_ERR(1, 615, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_)) __PYX_ERR(1, 615, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_1_)) __PYX_ERR(1, 615, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":616
 *     [ 1., 1., 0. ],
 *     [ 0., 0., 1. ],
 *     [ 1., 0., 1. ],             # <<<<<<<<<<<<<<
 *     [ 0., 1., 1. ],
 *     [ 1., 1., 1. ]
 */
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_float_1_)) __PYX_ERR(1, 616, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_float_0_)) __PYX_ERR(1, 616, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_float_1_)) __PYX_ERR(1, 616, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":617
 *     [ 0., 0., 1. ],
 *     [ 1., 0., 1. ],
 *     [ 0., 1., 1. ],             # <<<<<<<<<<<<<<
 *     [ 1., 1., 1. ]
 * ], dtype=float32)
 */
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_float_0_)) __PYX_ERR(1, 617, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_float_1_)) __PYX_ERR(1, 617, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_float_1_)) __PYX_ERR(1, 617, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":618
 *     [ 1., 0., 1. ],
 *     [ 0., 1., 1. ],
 *     [ 1., 1., 1. ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MICROSOFT_WINDOWS_20 =_MICROSOFT_WINDOWS_20_NORMALIZED * <float>255.0
 */
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_float_1_)) __PYX_ERR(1, 618, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_float_1_)) __PYX_ERR(1, 618, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_float_1_)) __PYX_ERR(1, 618, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":598
 * MICROSOFT_WINDOWS_16 =_MICROSOFT_WINDOWS_16_NORMALIZED * <float>255.0
 * 
 * _MICROSOFT_WINDOWS_20_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],
 */
  __pyx_t_14 = PyList_New(20); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_t_32)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_t_12)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_t_31)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 3, __pyx_t_11)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 4, __pyx_t_22)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 5, __pyx_t_27)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 6, __pyx_t_28)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 7, __pyx_t_21)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 8, __pyx_t_29)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 9, __pyx_t_30)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 10, __pyx_t_10)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 11, __pyx_t_33)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 12, __pyx_t_34)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 13, __pyx_t_20)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 14, __pyx_t_19)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 15, __pyx_t_26)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 16, __pyx_t_16)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 17, __pyx_t_37)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 18, __pyx_t_36)) __PYX_ERR(1, 598, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 19, __pyx_t_23)) __PYX_ERR(1, 598, __pyx_L1_error);
  __pyx_t_32 = 0;
  __pyx_t_12 = 0;
  __pyx_t_31 = 0;
  __pyx_t_11 = 0;
  __pyx_t_22 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_21 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_10 = 0;
  __pyx_t_33 = 0;
  __pyx_t_34 = 0;
  __pyx_t_20 = 0;
  __pyx_t_19 = 0;
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_36 = 0;
  __pyx_t_23 = 0;
  __pyx_t_23 = PyTuple_New(1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_14)) __PYX_ERR(1, 598, __pyx_L1_error);
  __pyx_t_14 = 0;

  /* "PygameShader/Palette.pyx":619
 *     [ 0., 1., 1. ],
 *     [ 1., 1., 1. ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MICROSOFT_WINDOWS_20 =_MICROSOFT_WINDOWS_20_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_GetModuleGlobalName(__pyx_t_36, __pyx_n_s_float32); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_dtype, __pyx_t_36) < 0) __PYX_ERR(1, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":598
 * MICROSOFT_WINDOWS_16 =_MICROSOFT_WINDOWS_16_NORMALIZED * <float>255.0
 * 
 * _MICROSOFT_WINDOWS_20_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 0.50196078, 0., 0. ],
 */
  __pyx_t_36 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_23, __pyx_t_14); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MICROSOFT_WINDOWS_20_NORMALIZED, __pyx_t_36) < 0) __PYX_ERR(1, 598, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;

  /* "PygameShader/Palette.pyx":620
 *     [ 1., 1., 1. ]
 * ], dtype=float32)
 * MICROSOFT_WINDOWS_20 =_MICROSOFT_WINDOWS_20_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _MICROSOFT_WINDOWS_PAINT_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_36, __pyx_n_s_MICROSOFT_WINDOWS_20_NORMALIZED); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __pyx_t_14 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_23 = PyNumber_Multiply(__pyx_t_36, __pyx_t_14); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_36); __pyx_t_36 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MICROSOFT_WINDOWS_20, __pyx_t_23) < 0) __PYX_ERR(1, 620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":622
 * MICROSOFT_WINDOWS_20 =_MICROSOFT_WINDOWS_20_NORMALIZED * <float>255.0
 * 
 * _MICROSOFT_WINDOWS_PAINT_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 1., 1., 1. ],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_array); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);

  /* "PygameShader/Palette.pyx":623
 * 
 * _MICROSOFT_WINDOWS_PAINT_NORMALIZED = array([
 *     [ 0., 0., 0. ],             # <<<<<<<<<<<<<<
 *     [ 1., 1., 1. ],
 *     [ 0.48235294, 0.48235294, 0.48235294 ],
 */
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_float_0_)) __PYX_ERR(1, 623, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_float_0_)) __PYX_ERR(1, 623, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_float_0_)) __PYX_ERR(1, 623, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":624
 * _MICROSOFT_WINDOWS_PAINT_NORMALIZED = array([
 *     [ 0., 0., 0. ],
 *     [ 1., 1., 1. ],             # <<<<<<<<<<<<<<
 *     [ 0.48235294, 0.48235294, 0.48235294 ],
 *     [ 0.74117647, 0.74117647, 0.74117647 ],
 */
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_float_1_)) __PYX_ERR(1, 624, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_float_1_)) __PYX_ERR(1, 624, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_float_1_)) __PYX_ERR(1, 624, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":625
 *     [ 0., 0., 0. ],
 *     [ 1., 1., 1. ],
 *     [ 0.48235294, 0.48235294, 0.48235294 ],             # <<<<<<<<<<<<<<
 *     [ 0.74117647, 0.74117647, 0.74117647 ],
 *     [ 0.48235294, 0.04705882, 0.00784314 ],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_48235294)) __PYX_ERR(1, 625, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_48235294)) __PYX_ERR(1, 625, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_48235294)) __PYX_ERR(1, 625, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":626
 *     [ 1., 1., 1. ],
 *     [ 0.48235294, 0.48235294, 0.48235294 ],
 *     [ 0.74117647, 0.74117647, 0.74117647 ],             # <<<<<<<<<<<<<<
 *     [ 0.48235294, 0.04705882, 0.00784314 ],
 *     [ 1., 0.14509804, 0. ],
 */
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_INCREF(__pyx_float_0_74117647);
  __Pyx_GIVEREF(__pyx_float_0_74117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_float_0_74117647)) __PYX_ERR(1, 626, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_74117647);
  __Pyx_GIVEREF(__pyx_float_0_74117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_float_0_74117647)) __PYX_ERR(1, 626, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_74117647);
  __Pyx_GIVEREF(__pyx_float_0_74117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_float_0_74117647)) __PYX_ERR(1, 626, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":627
 *     [ 0.48235294, 0.48235294, 0.48235294 ],
 *     [ 0.74117647, 0.74117647, 0.74117647 ],
 *     [ 0.48235294, 0.04705882, 0.00784314 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.14509804, 0. ],
 *     [ 0.48235294, 0.48235294, 0.00392157 ],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_48235294)) __PYX_ERR(1, 627, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_04705882);
  __Pyx_GIVEREF(__pyx_float_0_04705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_04705882)) __PYX_ERR(1, 627, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_00784314);
  __Pyx_GIVEREF(__pyx_float_0_00784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_00784314)) __PYX_ERR(1, 627, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":628
 *     [ 0.74117647, 0.74117647, 0.74117647 ],
 *     [ 0.48235294, 0.04705882, 0.00784314 ],
 *     [ 1., 0.14509804, 0. ],             # <<<<<<<<<<<<<<
 *     [ 0.48235294, 0.48235294, 0.00392157 ],
 *     [ 1., 0.98431373, 0.00392157 ],
 */
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 628, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_float_1_)) __PYX_ERR(1, 628, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_14509804);
  __Pyx_GIVEREF(__pyx_float_0_14509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_float_0_14509804)) __PYX_ERR(1, 628, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_float_0_)) __PYX_ERR(1, 628, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":629
 *     [ 0.48235294, 0.04705882, 0.00784314 ],
 *     [ 1., 0.14509804, 0. ],
 *     [ 0.48235294, 0.48235294, 0.00392157 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.98431373, 0.00392157 ],
 *     [ 0., 0.48235294, 0.00784314 ],
 */
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 629, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_float_0_48235294)) __PYX_ERR(1, 629, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_float_0_48235294)) __PYX_ERR(1, 629, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_00392157);
  __Pyx_GIVEREF(__pyx_float_0_00392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_float_0_00392157)) __PYX_ERR(1, 629, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":630
 *     [ 1., 0.14509804, 0. ],
 *     [ 0.48235294, 0.48235294, 0.00392157 ],
 *     [ 1., 0.98431373, 0.00392157 ],             # <<<<<<<<<<<<<<
 *     [ 0., 0.48235294, 0.00784314 ],
 *     [ 0.00784314, 0.97647059, 0.00392157 ],
 */
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 630, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_1_)) __PYX_ERR(1, 630, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_98431373);
  __Pyx_GIVEREF(__pyx_float_0_98431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_98431373)) __PYX_ERR(1, 630, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_00392157);
  __Pyx_GIVEREF(__pyx_float_0_00392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_00392157)) __PYX_ERR(1, 630, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":631
 *     [ 0.48235294, 0.48235294, 0.00392157 ],
 *     [ 1., 0.98431373, 0.00392157 ],
 *     [ 0., 0.48235294, 0.00784314 ],             # <<<<<<<<<<<<<<
 *     [ 0.00784314, 0.97647059, 0.00392157 ],
 *     [ 0., 0.48235294, 0.47843137 ],
 */
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_float_0_)) __PYX_ERR(1, 631, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_float_0_48235294)) __PYX_ERR(1, 631, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_00784314);
  __Pyx_GIVEREF(__pyx_float_0_00784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_float_0_00784314)) __PYX_ERR(1, 631, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":632
 *     [ 1., 0.98431373, 0.00392157 ],
 *     [ 0., 0.48235294, 0.00784314 ],
 *     [ 0.00784314, 0.97647059, 0.00392157 ],             # <<<<<<<<<<<<<<
 *     [ 0., 0.48235294, 0.47843137 ],
 *     [ 0.00784314, 0.99215686, 0.99607843 ],
 */
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 632, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_INCREF(__pyx_float_0_00784314);
  __Pyx_GIVEREF(__pyx_float_0_00784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_float_0_00784314)) __PYX_ERR(1, 632, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_97647059);
  __Pyx_GIVEREF(__pyx_float_0_97647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_float_0_97647059)) __PYX_ERR(1, 632, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_00392157);
  __Pyx_GIVEREF(__pyx_float_0_00392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_float_0_00392157)) __PYX_ERR(1, 632, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":633
 *     [ 0., 0.48235294, 0.00784314 ],
 *     [ 0.00784314, 0.97647059, 0.00392157 ],
 *     [ 0., 0.48235294, 0.47843137 ],             # <<<<<<<<<<<<<<
 *     [ 0.00784314, 0.99215686, 0.99607843 ],
 *     [ 0.00392157, 0.0745098, 0.47843137 ],
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_)) __PYX_ERR(1, 633, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_48235294)) __PYX_ERR(1, 633, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137);
  __Pyx_GIVEREF(__pyx_float_0_47843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_47843137)) __PYX_ERR(1, 633, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":634
 *     [ 0.00784314, 0.97647059, 0.00392157 ],
 *     [ 0., 0.48235294, 0.47843137 ],
 *     [ 0.00784314, 0.99215686, 0.99607843 ],             # <<<<<<<<<<<<<<
 *     [ 0.00392157, 0.0745098, 0.47843137 ],
 *     [ 0.01568627, 0.19607843, 1. ],
 */
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_INCREF(__pyx_float_0_00784314);
  __Pyx_GIVEREF(__pyx_float_0_00784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_float_0_00784314)) __PYX_ERR(1, 634, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_99215686);
  __Pyx_GIVEREF(__pyx_float_0_99215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_float_0_99215686)) __PYX_ERR(1, 634, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_99607843);
  __Pyx_GIVEREF(__pyx_float_0_99607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_float_0_99607843)) __PYX_ERR(1, 634, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":635
 *     [ 0., 0.48235294, 0.47843137 ],
 *     [ 0.00784314, 0.99215686, 0.99607843 ],
 *     [ 0.00392157, 0.0745098, 0.47843137 ],             # <<<<<<<<<<<<<<
 *     [ 0.01568627, 0.19607843, 1. ],
 *     [ 0.48235294, 0.09803922, 0.47843137 ],
 */
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_0_00392157);
  __Pyx_GIVEREF(__pyx_float_0_00392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_0_00392157)) __PYX_ERR(1, 635, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0745098);
  __Pyx_GIVEREF(__pyx_float_0_0745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_0745098)) __PYX_ERR(1, 635, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137);
  __Pyx_GIVEREF(__pyx_float_0_47843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_47843137)) __PYX_ERR(1, 635, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":636
 *     [ 0.00784314, 0.99215686, 0.99607843 ],
 *     [ 0.00392157, 0.0745098, 0.47843137 ],
 *     [ 0.01568627, 0.19607843, 1. ],             # <<<<<<<<<<<<<<
 *     [ 0.48235294, 0.09803922, 0.47843137 ],
 *     [ 1., 0.25098039, 0.99607843 ],
 */
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_float_0_01568627);
  __Pyx_GIVEREF(__pyx_float_0_01568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_float_0_01568627)) __PYX_ERR(1, 636, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843);
  __Pyx_GIVEREF(__pyx_float_0_19607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_float_0_19607843)) __PYX_ERR(1, 636, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_float_1_)) __PYX_ERR(1, 636, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":637
 *     [ 0.00392157, 0.0745098, 0.47843137 ],
 *     [ 0.01568627, 0.19607843, 1. ],
 *     [ 0.48235294, 0.09803922, 0.47843137 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.25098039, 0.99607843 ],
 *     [ 0.47843137, 0.22352941, 0.00392157 ],
 */
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 637, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_float_0_48235294)) __PYX_ERR(1, 637, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09803922);
  __Pyx_GIVEREF(__pyx_float_0_09803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_float_0_09803922)) __PYX_ERR(1, 637, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137);
  __Pyx_GIVEREF(__pyx_float_0_47843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_float_0_47843137)) __PYX_ERR(1, 637, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":638
 *     [ 0.01568627, 0.19607843, 1. ],
 *     [ 0.48235294, 0.09803922, 0.47843137 ],
 *     [ 1., 0.25098039, 0.99607843 ],             # <<<<<<<<<<<<<<
 *     [ 0.47843137, 0.22352941, 0.00392157 ],
 *     [ 1., 0.47843137, 0.22352941 ],
 */
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_float_1_)) __PYX_ERR(1, 638, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_25098039);
  __Pyx_GIVEREF(__pyx_float_0_25098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_float_0_25098039)) __PYX_ERR(1, 638, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_99607843);
  __Pyx_GIVEREF(__pyx_float_0_99607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_float_0_99607843)) __PYX_ERR(1, 638, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":639
 *     [ 0.48235294, 0.09803922, 0.47843137 ],
 *     [ 1., 0.25098039, 0.99607843 ],
 *     [ 0.47843137, 0.22352941, 0.00392157 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.47843137, 0.22352941 ],
 *     [ 0.48235294, 0.48235294, 0.21960784 ],
 */
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_INCREF(__pyx_float_0_47843137);
  __Pyx_GIVEREF(__pyx_float_0_47843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_float_0_47843137)) __PYX_ERR(1, 639, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22352941);
  __Pyx_GIVEREF(__pyx_float_0_22352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_float_0_22352941)) __PYX_ERR(1, 639, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_00392157);
  __Pyx_GIVEREF(__pyx_float_0_00392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_float_0_00392157)) __PYX_ERR(1, 639, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":640
 *     [ 1., 0.25098039, 0.99607843 ],
 *     [ 0.47843137, 0.22352941, 0.00392157 ],
 *     [ 1., 0.47843137, 0.22352941 ],             # <<<<<<<<<<<<<<
 *     [ 0.48235294, 0.48235294, 0.21960784 ],
 *     [ 1., 0.98823529, 0.47843137 ],
 */
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_float_1_)) __PYX_ERR(1, 640, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137);
  __Pyx_GIVEREF(__pyx_float_0_47843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_47843137)) __PYX_ERR(1, 640, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22352941);
  __Pyx_GIVEREF(__pyx_float_0_22352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_0_22352941)) __PYX_ERR(1, 640, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":641
 *     [ 0.47843137, 0.22352941, 0.00392157 ],
 *     [ 1., 0.47843137, 0.22352941 ],
 *     [ 0.48235294, 0.48235294, 0.21960784 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.98823529, 0.47843137 ],
 *     [ 0.00784314, 0.22352941, 0.22352941 ],
 */
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_float_0_48235294)) __PYX_ERR(1, 641, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_float_0_48235294)) __PYX_ERR(1, 641, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21960784);
  __Pyx_GIVEREF(__pyx_float_0_21960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_float_0_21960784)) __PYX_ERR(1, 641, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":642
 *     [ 1., 0.47843137, 0.22352941 ],
 *     [ 0.48235294, 0.48235294, 0.21960784 ],
 *     [ 1., 0.98823529, 0.47843137 ],             # <<<<<<<<<<<<<<
 *     [ 0.00784314, 0.22352941, 0.22352941 ],
 *     [ 0.01176471, 0.98039216, 0.48235294 ],
 */
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_float_1_)) __PYX_ERR(1, 642, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_98823529);
  __Pyx_GIVEREF(__pyx_float_0_98823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_float_0_98823529)) __PYX_ERR(1, 642, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137);
  __Pyx_GIVEREF(__pyx_float_0_47843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_float_0_47843137)) __PYX_ERR(1, 642, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":643
 *     [ 0.48235294, 0.48235294, 0.21960784 ],
 *     [ 1., 0.98823529, 0.47843137 ],
 *     [ 0.00784314, 0.22352941, 0.22352941 ],             # <<<<<<<<<<<<<<
 *     [ 0.01176471, 0.98039216, 0.48235294 ],
 *     [ 0., 0.48235294, 1. ],
 */
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_INCREF(__pyx_float_0_00784314);
  __Pyx_GIVEREF(__pyx_float_0_00784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_float_0_00784314)) __PYX_ERR(1, 643, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22352941);
  __Pyx_GIVEREF(__pyx_float_0_22352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_float_0_22352941)) __PYX_ERR(1, 643, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22352941);
  __Pyx_GIVEREF(__pyx_float_0_22352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_float_0_22352941)) __PYX_ERR(1, 643, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":644
 *     [ 1., 0.98823529, 0.47843137 ],
 *     [ 0.00784314, 0.22352941, 0.22352941 ],
 *     [ 0.01176471, 0.98039216, 0.48235294 ],             # <<<<<<<<<<<<<<
 *     [ 0., 0.48235294, 1. ],
 *     [ 1., 0.17254902, 0.48235294 ]
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 644, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_01176471);
  __Pyx_GIVEREF(__pyx_float_0_01176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_float_0_01176471)) __PYX_ERR(1, 644, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_98039216);
  __Pyx_GIVEREF(__pyx_float_0_98039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_float_0_98039216)) __PYX_ERR(1, 644, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_48235294)) __PYX_ERR(1, 644, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":645
 *     [ 0.00784314, 0.22352941, 0.22352941 ],
 *     [ 0.01176471, 0.98039216, 0.48235294 ],
 *     [ 0., 0.48235294, 1. ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.17254902, 0.48235294 ]
 * ], dtype=float32)
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_)) __PYX_ERR(1, 645, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_48235294)) __PYX_ERR(1, 645, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_1_)) __PYX_ERR(1, 645, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":646
 *     [ 0.01176471, 0.98039216, 0.48235294 ],
 *     [ 0., 0.48235294, 1. ],
 *     [ 1., 0.17254902, 0.48235294 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MICROSOFT_WINDOWS_PAINT =_MICROSOFT_WINDOWS_PAINT_NORMALIZED * <float>255.0
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 646, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_1_)) __PYX_ERR(1, 646, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17254902);
  __Pyx_GIVEREF(__pyx_float_0_17254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_17254902)) __PYX_ERR(1, 646, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48235294);
  __Pyx_GIVEREF(__pyx_float_0_48235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_48235294)) __PYX_ERR(1, 646, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":622
 * MICROSOFT_WINDOWS_20 =_MICROSOFT_WINDOWS_20_NORMALIZED * <float>255.0
 * 
 * _MICROSOFT_WINDOWS_PAINT_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 1., 1., 1. ],
 */
  __pyx_t_17 = PyList_New(24); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_14)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_36)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_t_4)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 3, __pyx_t_37)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 4, __pyx_t_16)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 5, __pyx_t_26)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 6, __pyx_t_19)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 7, __pyx_t_20)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 8, __pyx_t_34)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 9, __pyx_t_33)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 10, __pyx_t_10)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 11, __pyx_t_30)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 12, __pyx_t_29)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 13, __pyx_t_21)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 14, __pyx_t_28)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 15, __pyx_t_27)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 16, __pyx_t_22)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 17, __pyx_t_11)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 18, __pyx_t_31)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 19, __pyx_t_12)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 20, __pyx_t_32)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 21, __pyx_t_7)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 22, __pyx_t_15)) __PYX_ERR(1, 622, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 23, __pyx_t_5)) __PYX_ERR(1, 622, __pyx_L1_error);
  __pyx_t_14 = 0;
  __pyx_t_36 = 0;
  __pyx_t_4 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_19 = 0;
  __pyx_t_20 = 0;
  __pyx_t_34 = 0;
  __pyx_t_33 = 0;
  __pyx_t_10 = 0;
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_21 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_22 = 0;
  __pyx_t_11 = 0;
  __pyx_t_31 = 0;
  __pyx_t_12 = 0;
  __pyx_t_32 = 0;
  __pyx_t_7 = 0;
  __pyx_t_15 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_17)) __PYX_ERR(1, 622, __pyx_L1_error);
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":647
 *     [ 0., 0.48235294, 1. ],
 *     [ 1., 0.17254902, 0.48235294 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MICROSOFT_WINDOWS_PAINT =_MICROSOFT_WINDOWS_PAINT_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_17 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_float32); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 647, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(1, 647, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":622
 * MICROSOFT_WINDOWS_20 =_MICROSOFT_WINDOWS_20_NORMALIZED * <float>255.0
 * 
 * _MICROSOFT_WINDOWS_PAINT_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0., 0., 0. ],
 *     [ 1., 1., 1. ],
 */
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_5, __pyx_t_17); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MICROSOFT_WINDOWS_PAINT_NORMALI, __pyx_t_15) < 0) __PYX_ERR(1, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":648
 *     [ 1., 0.17254902, 0.48235294 ]
 * ], dtype=float32)
 * MICROSOFT_WINDOWS_PAINT =_MICROSOFT_WINDOWS_PAINT_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * # https://superuser.com/questions/361297/what-colour-is-t
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_MICROSOFT_WINDOWS_PAINT_NORMALI); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_17 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_15, __pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MICROSOFT_WINDOWS_PAINT, __pyx_t_5) < 0) __PYX_ERR(1, 648, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":652
 * # https://superuser.com/questions/361297/what-colour-is-t
 * # he-dark-green-on-old-fashioned-green-screen-computer-displays/1206781#1206781
 * _MONO_PHOSPHOR_AMBER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.69019608, 0. ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "PygameShader/Palette.pyx":653
 * # he-dark-green-on-old-fashioned-green-screen-computer-displays/1206781#1206781
 * _MONO_PHOSPHOR_AMBER_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.69019608, 0. ]
 * ], dtype=float32)
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_15686275)) __PYX_ERR(1, 653, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_15686275)) __PYX_ERR(1, 653, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_15686275)) __PYX_ERR(1, 653, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":654
 * _MONO_PHOSPHOR_AMBER_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.69019608, 0. ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MONO_PHOSPHOR_AMBER =_MONO_PHOSPHOR_AMBER_NORMALIZED * <float>255.0
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_1_)) __PYX_ERR(1, 654, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_69019608);
  __Pyx_GIVEREF(__pyx_float_0_69019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_69019608)) __PYX_ERR(1, 654, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_)) __PYX_ERR(1, 654, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":652
 * # https://superuser.com/questions/361297/what-colour-is-t
 * # he-dark-green-on-old-fashioned-green-screen-computer-displays/1206781#1206781
 * _MONO_PHOSPHOR_AMBER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.69019608, 0. ]
 */
  __pyx_t_23 = PyList_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_t_17)) __PYX_ERR(1, 652, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_t_15)) __PYX_ERR(1, 652, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_23)) __PYX_ERR(1, 652, __pyx_L1_error);
  __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":655
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.69019608, 0. ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MONO_PHOSPHOR_AMBER =_MONO_PHOSPHOR_AMBER_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_23 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_float32); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_dtype, __pyx_t_17) < 0) __PYX_ERR(1, 655, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":652
 * # https://superuser.com/questions/361297/what-colour-is-t
 * # he-dark-green-on-old-fashioned-green-screen-computer-displays/1206781#1206781
 * _MONO_PHOSPHOR_AMBER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.69019608, 0. ]
 */
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, __pyx_t_23); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_AMBER_NORMALIZED, __pyx_t_17) < 0) __PYX_ERR(1, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":656
 *     [ 1., 0.69019608, 0. ]
 * ], dtype=float32)
 * MONO_PHOSPHOR_AMBER =_MONO_PHOSPHOR_AMBER_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _MONO_PHOSPHOR_LTAMBER_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_MONO_PHOSPHOR_AMBER_NORMALIZED); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_23 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_15 = PyNumber_Multiply(__pyx_t_17, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 656, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_AMBER, __pyx_t_15) < 0) __PYX_ERR(1, 656, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":658
 * MONO_PHOSPHOR_AMBER =_MONO_PHOSPHOR_AMBER_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_LTAMBER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.8, 0. ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_array); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);

  /* "PygameShader/Palette.pyx":659
 * 
 * _MONO_PHOSPHOR_LTAMBER_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],             # <<<<<<<<<<<<<<
 *     [ 1., 0.8, 0. ]
 * ], dtype=float32)
 */
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_float_0_15686275)) __PYX_ERR(1, 659, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_float_0_15686275)) __PYX_ERR(1, 659, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_float_0_15686275)) __PYX_ERR(1, 659, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":660
 * _MONO_PHOSPHOR_LTAMBER_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.8, 0. ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MONO_PHOSPHOR_LTAMBER =_MONO_PHOSPHOR_LTAMBER_NORMALIZED * <float>255.0
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_1_)) __PYX_ERR(1, 660, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8);
  __Pyx_GIVEREF(__pyx_float_0_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_8)) __PYX_ERR(1, 660, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_)) __PYX_ERR(1, 660, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":658
 * MONO_PHOSPHOR_AMBER =_MONO_PHOSPHOR_AMBER_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_LTAMBER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.8, 0. ]
 */
  __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_23)) __PYX_ERR(1, 658, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_17)) __PYX_ERR(1, 658, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_17 = 0;
  __pyx_t_17 = PyTuple_New(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_t_5)) __PYX_ERR(1, 658, __pyx_L1_error);
  __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":661
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.8, 0. ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MONO_PHOSPHOR_LTAMBER =_MONO_PHOSPHOR_LTAMBER_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_float32); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 661, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_23) < 0) __PYX_ERR(1, 661, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":658
 * MONO_PHOSPHOR_AMBER =_MONO_PHOSPHOR_AMBER_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_LTAMBER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 1., 0.8, 0. ]
 */
  __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_17, __pyx_t_5); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_LTAMBER_NORMALIZE, __pyx_t_23) < 0) __PYX_ERR(1, 658, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":662
 *     [ 1., 0.8, 0. ]
 * ], dtype=float32)
 * MONO_PHOSPHOR_LTAMBER =_MONO_PHOSPHOR_LTAMBER_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _MONO_PHOSPHOR_GREEN1_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_MONO_PHOSPHOR_LTAMBER_NORMALIZE); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_5 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_17 = PyNumber_Multiply(__pyx_t_23, __pyx_t_5); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_LTAMBER, __pyx_t_17) < 0) __PYX_ERR(1, 662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":664
 * MONO_PHOSPHOR_LTAMBER =_MONO_PHOSPHOR_LTAMBER_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN1_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0.2, 1., 0. ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_array); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);

  /* "PygameShader/Palette.pyx":665
 * 
 * _MONO_PHOSPHOR_GREEN1_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],             # <<<<<<<<<<<<<<
 *     [ 0.2, 1., 0. ]
 * ], dtype=float32)
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_0_15686275)) __PYX_ERR(1, 665, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_15686275)) __PYX_ERR(1, 665, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_15686275)) __PYX_ERR(1, 665, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":666
 * _MONO_PHOSPHOR_GREEN1_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0.2, 1., 0. ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MONO_PHOSPHOR_GREEN1 =_MONO_PHOSPHOR_GREEN1_NORMALIZED * <float>255.0
 */
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 666, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_float_0_2)) __PYX_ERR(1, 666, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_float_1_)) __PYX_ERR(1, 666, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_);
  __Pyx_GIVEREF(__pyx_float_0_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_float_0_)) __PYX_ERR(1, 666, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":664
 * MONO_PHOSPHOR_LTAMBER =_MONO_PHOSPHOR_LTAMBER_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN1_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0.2, 1., 0. ]
 */
  __pyx_t_15 = PyList_New(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_t_5)) __PYX_ERR(1, 664, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_t_23)) __PYX_ERR(1, 664, __pyx_L1_error);
  __pyx_t_5 = 0;
  __pyx_t_23 = 0;
  __pyx_t_23 = PyTuple_New(1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_23, 0, __pyx_t_15)) __PYX_ERR(1, 664, __pyx_L1_error);
  __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":667
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0.2, 1., 0. ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MONO_PHOSPHOR_GREEN1 =_MONO_PHOSPHOR_GREEN1_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_float32); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_dtype, __pyx_t_5) < 0) __PYX_ERR(1, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":664
 * MONO_PHOSPHOR_LTAMBER =_MONO_PHOSPHOR_LTAMBER_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN1_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0.2, 1., 0. ]
 */
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_23, __pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_GREEN1_NORMALIZED, __pyx_t_5) < 0) __PYX_ERR(1, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":668
 *     [ 0.2, 1., 0. ]
 * ], dtype=float32)
 * MONO_PHOSPHOR_GREEN1 =_MONO_PHOSPHOR_GREEN1_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _MONO_PHOSPHOR_GREEN2_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_MONO_PHOSPHOR_GREEN1_NORMALIZED); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_15 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_23 = PyNumber_Multiply(__pyx_t_5, __pyx_t_15); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_GREEN1, __pyx_t_23) < 0) __PYX_ERR(1, 668, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":670
 * MONO_PHOSPHOR_GREEN1 =_MONO_PHOSPHOR_GREEN1_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN2_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.2 ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_array); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);

  /* "PygameShader/Palette.pyx":671
 * 
 * _MONO_PHOSPHOR_GREEN2_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],             # <<<<<<<<<<<<<<
 *     [ 0, 1., 0.2 ]
 * ], dtype=float32)
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 671, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_15686275)) __PYX_ERR(1, 671, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_15686275)) __PYX_ERR(1, 671, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_15686275)) __PYX_ERR(1, 671, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":672
 * _MONO_PHOSPHOR_GREEN2_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.2 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MONO_PHOSPHOR_GREEN2 =_MONO_PHOSPHOR_GREEN2_NORMALIZED * <float>255.0
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 672, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_int_0)) __PYX_ERR(1, 672, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_1_)) __PYX_ERR(1, 672, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_2)) __PYX_ERR(1, 672, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":670
 * MONO_PHOSPHOR_GREEN1 =_MONO_PHOSPHOR_GREEN1_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN2_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.2 ]
 */
  __pyx_t_17 = PyList_New(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_t_15)) __PYX_ERR(1, 670, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_t_5)) __PYX_ERR(1, 670, __pyx_L1_error);
  __pyx_t_15 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_17)) __PYX_ERR(1, 670, __pyx_L1_error);
  __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":673
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.2 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MONO_PHOSPHOR_GREEN2 =_MONO_PHOSPHOR_GREEN2_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_17 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_float32); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 673, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_dtype, __pyx_t_15) < 0) __PYX_ERR(1, 673, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":670
 * MONO_PHOSPHOR_GREEN1 =_MONO_PHOSPHOR_GREEN1_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN2_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.2 ]
 */
  __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_23, __pyx_t_5, __pyx_t_17); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 670, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_GREEN2_NORMALIZED, __pyx_t_15) < 0) __PYX_ERR(1, 670, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":674
 *     [ 0, 1., 0.2 ]
 * ], dtype=float32)
 * MONO_PHOSPHOR_GREEN2 =_MONO_PHOSPHOR_GREEN2_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * _MONO_PHOSPHOR_GREEN3_NORMALIZED = array([
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_MONO_PHOSPHOR_GREEN2_NORMALIZED); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_17 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_15, __pyx_t_17); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 674, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_GREEN2, __pyx_t_5) < 0) __PYX_ERR(1, 674, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "PygameShader/Palette.pyx":676
 * MONO_PHOSPHOR_GREEN2 =_MONO_PHOSPHOR_GREEN2_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN3_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.4 ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_array); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "PygameShader/Palette.pyx":677
 * 
 * _MONO_PHOSPHOR_GREEN3_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],             # <<<<<<<<<<<<<<
 *     [ 0, 1., 0.4 ]
 * ], dtype=float32)
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 677, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_15686275)) __PYX_ERR(1, 677, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_15686275)) __PYX_ERR(1, 677, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15686275);
  __Pyx_GIVEREF(__pyx_float_0_15686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_15686275)) __PYX_ERR(1, 677, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":678
 * _MONO_PHOSPHOR_GREEN3_NORMALIZED = array([
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.4 ]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * MONO_PHOSPHOR_GREEN3 =_MONO_PHOSPHOR_GREEN3_NORMALIZED * <float>255.0
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 678, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_int_0)) __PYX_ERR(1, 678, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_);
  __Pyx_GIVEREF(__pyx_float_1_);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_1_)) __PYX_ERR(1, 678, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4);
  __Pyx_GIVEREF(__pyx_float_0_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_4)) __PYX_ERR(1, 678, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":676
 * MONO_PHOSPHOR_GREEN2 =_MONO_PHOSPHOR_GREEN2_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN3_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.4 ]
 */
  __pyx_t_23 = PyList_New(2); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_t_17)) __PYX_ERR(1, 676, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_t_15)) __PYX_ERR(1, 676, __pyx_L1_error);
  __pyx_t_17 = 0;
  __pyx_t_15 = 0;
  __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_23)) __PYX_ERR(1, 676, __pyx_L1_error);
  __pyx_t_23 = 0;

  /* "PygameShader/Palette.pyx":679
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.4 ]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * MONO_PHOSPHOR_GREEN3 =_MONO_PHOSPHOR_GREEN3_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_23 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_float32); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  if (PyDict_SetItem(__pyx_t_23, __pyx_n_s_dtype, __pyx_t_17) < 0) __PYX_ERR(1, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":676
 * MONO_PHOSPHOR_GREEN2 =_MONO_PHOSPHOR_GREEN2_NORMALIZED * <float>255.0
 * 
 * _MONO_PHOSPHOR_GREEN3_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [ 0.15686275, 0.15686275, 0.15686275 ],
 *     [ 0, 1., 0.4 ]
 */
  __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_15, __pyx_t_23); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_GREEN3_NORMALIZED, __pyx_t_17) < 0) __PYX_ERR(1, 676, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

  /* "PygameShader/Palette.pyx":680
 *     [ 0, 1., 0.4 ]
 * ], dtype=float32)
 * MONO_PHOSPHOR_GREEN3 =_MONO_PHOSPHOR_GREEN3_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * # Created by Adigun A. Polack
 */
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_MONO_PHOSPHOR_GREEN3_NORMALIZED); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_23 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __pyx_t_15 = PyNumber_Multiply(__pyx_t_17, __pyx_t_23); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MONO_PHOSPHOR_GREEN3, __pyx_t_15) < 0) __PYX_ERR(1, 680, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

  /* "PygameShader/Palette.pyx":684
 * # Created by Adigun A. Polack
 * # https://lospec.com/palette-list/aap-64
 * _AAP64_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [0.023529411764705882, 0.023529411764705882, 0.03137254901960784],
 *     [0.0784313725490196, 0.06274509803921569, 0.07450980392156863],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_array); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);

  /* "PygameShader/Palette.pyx":685
 * # https://lospec.com/palette-list/aap-64
 * _AAP64_NORMALIZED = array([
 *     [0.023529411764705882, 0.023529411764705882, 0.03137254901960784],             # <<<<<<<<<<<<<<
 *     [0.0784313725490196, 0.06274509803921569, 0.07450980392156863],
 *     [0.23137254901960785, 0.09019607843137255, 0.1450980392156863],
 */
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_float_0_023529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_023529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_float_0_023529411764705882)) __PYX_ERR(1, 685, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_023529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_023529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_float_0_023529411764705882)) __PYX_ERR(1, 685, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_03137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_03137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_float_0_03137254901960784)) __PYX_ERR(1, 685, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":686
 * _AAP64_NORMALIZED = array([
 *     [0.023529411764705882, 0.023529411764705882, 0.03137254901960784],
 *     [0.0784313725490196, 0.06274509803921569, 0.07450980392156863],             # <<<<<<<<<<<<<<
 *     [0.23137254901960785, 0.09019607843137255, 0.1450980392156863],
 *     [0.45098039215686275, 0.09019607843137255, 0.17647058823529413],
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_0784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_0784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_0784313725490196)) __PYX_ERR(1, 686, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_06274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_06274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_06274509803921569)) __PYX_ERR(1, 686, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_07450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_07450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_07450980392156863)) __PYX_ERR(1, 686, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":687
 *     [0.023529411764705882, 0.023529411764705882, 0.03137254901960784],
 *     [0.0784313725490196, 0.06274509803921569, 0.07450980392156863],
 *     [0.23137254901960785, 0.09019607843137255, 0.1450980392156863],             # <<<<<<<<<<<<<<
 *     [0.45098039215686275, 0.09019607843137255, 0.17647058823529413],
 *     [0.7058823529411765, 0.12549019607843137, 0.16470588235294117],
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 687, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_23137254901960785);
  __Pyx_GIVEREF(__pyx_float_0_23137254901960785);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_0_23137254901960785)) __PYX_ERR(1, 687, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 687, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_1450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_1450980392156863)) __PYX_ERR(1, 687, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":688
 *     [0.0784313725490196, 0.06274509803921569, 0.07450980392156863],
 *     [0.23137254901960785, 0.09019607843137255, 0.1450980392156863],
 *     [0.45098039215686275, 0.09019607843137255, 0.17647058823529413],             # <<<<<<<<<<<<<<
 *     [0.7058823529411765, 0.12549019607843137, 0.16470588235294117],
 *     [0.8745098039215686, 0.24313725490196078, 0.13725490196078433],
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_45098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_45098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_float_0_45098039215686275)) __PYX_ERR(1, 688, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 688, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17647058823529413);
  __Pyx_GIVEREF(__pyx_float_0_17647058823529413);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_17647058823529413)) __PYX_ERR(1, 688, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":689
 *     [0.23137254901960785, 0.09019607843137255, 0.1450980392156863],
 *     [0.45098039215686275, 0.09019607843137255, 0.17647058823529413],
 *     [0.7058823529411765, 0.12549019607843137, 0.16470588235294117],             # <<<<<<<<<<<<<<
 *     [0.8745098039215686, 0.24313725490196078, 0.13725490196078433],
 *     [0.9803921568627451, 0.41568627450980394, 0.0392156862745098],
 */
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_INCREF(__pyx_float_0_7058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_7058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_float_0_7058823529411765)) __PYX_ERR(1, 689, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_12549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_float_0_12549019607843137)) __PYX_ERR(1, 689, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16470588235294117);
  __Pyx_GIVEREF(__pyx_float_0_16470588235294117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_float_0_16470588235294117)) __PYX_ERR(1, 689, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":690
 *     [0.45098039215686275, 0.09019607843137255, 0.17647058823529413],
 *     [0.7058823529411765, 0.12549019607843137, 0.16470588235294117],
 *     [0.8745098039215686, 0.24313725490196078, 0.13725490196078433],             # <<<<<<<<<<<<<<
 *     [0.9803921568627451, 0.41568627450980394, 0.0392156862745098],
 *     [0.9764705882352941, 0.6392156862745098, 0.10588235294117647],
 */
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_float_0_8745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_8745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_float_0_8745098039215686)) __PYX_ERR(1, 690, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_24313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_float_0_24313725490196078)) __PYX_ERR(1, 690, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 690, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":691
 *     [0.7058823529411765, 0.12549019607843137, 0.16470588235294117],
 *     [0.8745098039215686, 0.24313725490196078, 0.13725490196078433],
 *     [0.9803921568627451, 0.41568627450980394, 0.0392156862745098],             # <<<<<<<<<<<<<<
 *     [0.9764705882352941, 0.6392156862745098, 0.10588235294117647],
 *     [1.0, 0.8352941176470589, 0.2549019607843137],
 */
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 691, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_INCREF(__pyx_float_0_9803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_9803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_float_0_9803921568627451)) __PYX_ERR(1, 691, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_41568627450980394);
  __Pyx_GIVEREF(__pyx_float_0_41568627450980394);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_float_0_41568627450980394)) __PYX_ERR(1, 691, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_0392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_float_0_0392156862745098)) __PYX_ERR(1, 691, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":692
 *     [0.8745098039215686, 0.24313725490196078, 0.13725490196078433],
 *     [0.9803921568627451, 0.41568627450980394, 0.0392156862745098],
 *     [0.9764705882352941, 0.6392156862745098, 0.10588235294117647],             # <<<<<<<<<<<<<<
 *     [1.0, 0.8352941176470589, 0.2549019607843137],
 *     [1.0, 0.9882352941176471, 0.25098039215686274],
 */
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 692, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_float_0_9764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_9764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_float_0_9764705882352941)) __PYX_ERR(1, 692, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_6392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_6392156862745098)) __PYX_ERR(1, 692, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_10588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_0_10588235294117647)) __PYX_ERR(1, 692, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":693
 *     [0.9803921568627451, 0.41568627450980394, 0.0392156862745098],
 *     [0.9764705882352941, 0.6392156862745098, 0.10588235294117647],
 *     [1.0, 0.8352941176470589, 0.2549019607843137],             # <<<<<<<<<<<<<<
 *     [1.0, 0.9882352941176471, 0.25098039215686274],
 *     [0.8392156862745098, 0.9490196078431372, 0.39215686274509803],
 */
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 693, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_float_1_0)) __PYX_ERR(1, 693, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8352941176470589);
  __Pyx_GIVEREF(__pyx_float_0_8352941176470589);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_float_0_8352941176470589)) __PYX_ERR(1, 693, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 693, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":694
 *     [0.9764705882352941, 0.6392156862745098, 0.10588235294117647],
 *     [1.0, 0.8352941176470589, 0.2549019607843137],
 *     [1.0, 0.9882352941176471, 0.25098039215686274],             # <<<<<<<<<<<<<<
 *     [0.8392156862745098, 0.9490196078431372, 0.39215686274509803],
 *     [0.611764705882353, 0.8588235294117647, 0.2627450980392157],
 */
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_float_1_0)) __PYX_ERR(1, 694, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 694, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_25098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_25098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_float_0_25098039215686274)) __PYX_ERR(1, 694, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":695
 *     [1.0, 0.8352941176470589, 0.2549019607843137],
 *     [1.0, 0.9882352941176471, 0.25098039215686274],
 *     [0.8392156862745098, 0.9490196078431372, 0.39215686274509803],             # <<<<<<<<<<<<<<
 *     [0.611764705882353, 0.8588235294117647, 0.2627450980392157],
 *     [0.34901960784313724, 0.7568627450980392, 0.20784313725490197],
 */
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_INCREF(__pyx_float_0_8392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_8392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_float_0_8392156862745098)) __PYX_ERR(1, 695, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9490196078431372);
  __Pyx_GIVEREF(__pyx_float_0_9490196078431372);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_float_0_9490196078431372)) __PYX_ERR(1, 695, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 695, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":696
 *     [1.0, 0.9882352941176471, 0.25098039215686274],
 *     [0.8392156862745098, 0.9490196078431372, 0.39215686274509803],
 *     [0.611764705882353, 0.8588235294117647, 0.2627450980392157],             # <<<<<<<<<<<<<<
 *     [0.34901960784313724, 0.7568627450980392, 0.20784313725490197],
 *     [0.0784313725490196, 0.6274509803921569, 0.1803921568627451],
 */
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_float_0_611764705882353);
  __Pyx_GIVEREF(__pyx_float_0_611764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_float_0_611764705882353)) __PYX_ERR(1, 696, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_8588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_float_0_8588235294117647)) __PYX_ERR(1, 696, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_2627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_float_0_2627450980392157)) __PYX_ERR(1, 696, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":697
 *     [0.8392156862745098, 0.9490196078431372, 0.39215686274509803],
 *     [0.611764705882353, 0.8588235294117647, 0.2627450980392157],
 *     [0.34901960784313724, 0.7568627450980392, 0.20784313725490197],             # <<<<<<<<<<<<<<
 *     [0.0784313725490196, 0.6274509803921569, 0.1803921568627451],
 *     [0.10196078431372549, 0.47843137254901963, 0.24313725490196078],
 */
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 697, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_7568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_7568627450980392)) __PYX_ERR(1, 697, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20784313725490197);
  __Pyx_GIVEREF(__pyx_float_0_20784313725490197);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_20784313725490197)) __PYX_ERR(1, 697, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":698
 *     [0.611764705882353, 0.8588235294117647, 0.2627450980392157],
 *     [0.34901960784313724, 0.7568627450980392, 0.20784313725490197],
 *     [0.0784313725490196, 0.6274509803921569, 0.1803921568627451],             # <<<<<<<<<<<<<<
 *     [0.10196078431372549, 0.47843137254901963, 0.24313725490196078],
 *     [0.1411764705882353, 0.3215686274509804, 0.23137254901960785],
 */
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 698, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_INCREF(__pyx_float_0_0784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_0784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_float_0_0784313725490196)) __PYX_ERR(1, 698, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_6274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_float_0_6274509803921569)) __PYX_ERR(1, 698, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_1803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_float_0_1803921568627451)) __PYX_ERR(1, 698, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":699
 *     [0.34901960784313724, 0.7568627450980392, 0.20784313725490197],
 *     [0.0784313725490196, 0.6274509803921569, 0.1803921568627451],
 *     [0.10196078431372549, 0.47843137254901963, 0.24313725490196078],             # <<<<<<<<<<<<<<
 *     [0.1411764705882353, 0.3215686274509804, 0.23137254901960785],
 *     [0.07058823529411765, 0.12549019607843137, 0.12549019607843137],
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_10196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_10196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_10196078431372549)) __PYX_ERR(1, 699, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137254901963);
  __Pyx_GIVEREF(__pyx_float_0_47843137254901963);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_47843137254901963)) __PYX_ERR(1, 699, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_24313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_24313725490196078)) __PYX_ERR(1, 699, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":700
 *     [0.0784313725490196, 0.6274509803921569, 0.1803921568627451],
 *     [0.10196078431372549, 0.47843137254901963, 0.24313725490196078],
 *     [0.1411764705882353, 0.3215686274509804, 0.23137254901960785],             # <<<<<<<<<<<<<<
 *     [0.07058823529411765, 0.12549019607843137, 0.12549019607843137],
 *     [0.0784313725490196, 0.20392156862745098, 0.39215686274509803],
 */
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 700, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_INCREF(__pyx_float_0_1411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_1411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_float_0_1411764705882353)) __PYX_ERR(1, 700, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 700, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23137254901960785);
  __Pyx_GIVEREF(__pyx_float_0_23137254901960785);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_float_0_23137254901960785)) __PYX_ERR(1, 700, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":701
 *     [0.10196078431372549, 0.47843137254901963, 0.24313725490196078],
 *     [0.1411764705882353, 0.3215686274509804, 0.23137254901960785],
 *     [0.07058823529411765, 0.12549019607843137, 0.12549019607843137],             # <<<<<<<<<<<<<<
 *     [0.0784313725490196, 0.20392156862745098, 0.39215686274509803],
 *     [0.1568627450980392, 0.3607843137254902, 0.7686274509803922],
 */
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 701, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_INCREF(__pyx_float_0_07058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_07058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_float_0_07058823529411765)) __PYX_ERR(1, 701, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_12549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_float_0_12549019607843137)) __PYX_ERR(1, 701, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_12549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_float_0_12549019607843137)) __PYX_ERR(1, 701, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":702
 *     [0.1411764705882353, 0.3215686274509804, 0.23137254901960785],
 *     [0.07058823529411765, 0.12549019607843137, 0.12549019607843137],
 *     [0.0784313725490196, 0.20392156862745098, 0.39215686274509803],             # <<<<<<<<<<<<<<
 *     [0.1568627450980392, 0.3607843137254902, 0.7686274509803922],
 *     [0.1411764705882353, 0.6235294117647059, 0.8705882352941177],
 */
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 702, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_0_0784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_0784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_0_0784313725490196)) __PYX_ERR(1, 702, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 702, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 702, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":703
 *     [0.07058823529411765, 0.12549019607843137, 0.12549019607843137],
 *     [0.0784313725490196, 0.20392156862745098, 0.39215686274509803],
 *     [0.1568627450980392, 0.3607843137254902, 0.7686274509803922],             # <<<<<<<<<<<<<<
 *     [0.1411764705882353, 0.6235294117647059, 0.8705882352941177],
 *     [0.12549019607843137, 0.8392156862745098, 0.7803921568627451],
 */
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 703, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 703, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_3607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_float_0_3607843137254902)) __PYX_ERR(1, 703, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_7686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_float_0_7686274509803922)) __PYX_ERR(1, 703, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":704
 *     [0.0784313725490196, 0.20392156862745098, 0.39215686274509803],
 *     [0.1568627450980392, 0.3607843137254902, 0.7686274509803922],
 *     [0.1411764705882353, 0.6235294117647059, 0.8705882352941177],             # <<<<<<<<<<<<<<
 *     [0.12549019607843137, 0.8392156862745098, 0.7803921568627451],
 *     [0.6509803921568628, 0.9882352941176471, 0.8588235294117647],
 */
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 704, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_INCREF(__pyx_float_0_1411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_1411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_float_0_1411764705882353)) __PYX_ERR(1, 704, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_6235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_float_0_6235294117647059)) __PYX_ERR(1, 704, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8705882352941177);
  __Pyx_GIVEREF(__pyx_float_0_8705882352941177);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_float_0_8705882352941177)) __PYX_ERR(1, 704, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":705
 *     [0.1568627450980392, 0.3607843137254902, 0.7686274509803922],
 *     [0.1411764705882353, 0.6235294117647059, 0.8705882352941177],
 *     [0.12549019607843137, 0.8392156862745098, 0.7803921568627451],             # <<<<<<<<<<<<<<
 *     [0.6509803921568628, 0.9882352941176471, 0.8588235294117647],
 *     [1.0, 1.0, 1.0],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 705, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_12549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_12549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_12549019607843137)) __PYX_ERR(1, 705, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_8392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_8392156862745098)) __PYX_ERR(1, 705, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_7803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_7803921568627451)) __PYX_ERR(1, 705, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":706
 *     [0.1411764705882353, 0.6235294117647059, 0.8705882352941177],
 *     [0.12549019607843137, 0.8392156862745098, 0.7803921568627451],
 *     [0.6509803921568628, 0.9882352941176471, 0.8588235294117647],             # <<<<<<<<<<<<<<
 *     [1.0, 1.0, 1.0],
 *     [0.996078431372549, 0.9529411764705882, 0.7529411764705882],
 */
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_INCREF(__pyx_float_0_6509803921568628);
  __Pyx_GIVEREF(__pyx_float_0_6509803921568628);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_float_0_6509803921568628)) __PYX_ERR(1, 706, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 706, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_8588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_float_0_8588235294117647)) __PYX_ERR(1, 706, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":707
 *     [0.12549019607843137, 0.8392156862745098, 0.7803921568627451],
 *     [0.6509803921568628, 0.9882352941176471, 0.8588235294117647],
 *     [1.0, 1.0, 1.0],             # <<<<<<<<<<<<<<
 *     [0.996078431372549, 0.9529411764705882, 0.7529411764705882],
 *     [0.9803921568627451, 0.8392156862745098, 0.7215686274509804],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_1_0)) __PYX_ERR(1, 707, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_1_0)) __PYX_ERR(1, 707, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_1_0)) __PYX_ERR(1, 707, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":708
 *     [0.6509803921568628, 0.9882352941176471, 0.8588235294117647],
 *     [1.0, 1.0, 1.0],
 *     [0.996078431372549, 0.9529411764705882, 0.7529411764705882],             # <<<<<<<<<<<<<<
 *     [0.9803921568627451, 0.8392156862745098, 0.7215686274509804],
 *     [0.9607843137254902, 0.6274509803921569, 0.592156862745098],
 */
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 708, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_INCREF(__pyx_float_0_996078431372549);
  __Pyx_GIVEREF(__pyx_float_0_996078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_float_0_996078431372549)) __PYX_ERR(1, 708, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_9529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_float_0_9529411764705882)) __PYX_ERR(1, 708, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_7529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_float_0_7529411764705882)) __PYX_ERR(1, 708, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":709
 *     [1.0, 1.0, 1.0],
 *     [0.996078431372549, 0.9529411764705882, 0.7529411764705882],
 *     [0.9803921568627451, 0.8392156862745098, 0.7215686274509804],             # <<<<<<<<<<<<<<
 *     [0.9607843137254902, 0.6274509803921569, 0.592156862745098],
 *     [0.9098039215686274, 0.41568627450980394, 0.45098039215686275],
 */
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_float_0_9803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_9803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_float_0_9803921568627451)) __PYX_ERR(1, 709, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_8392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_float_0_8392156862745098)) __PYX_ERR(1, 709, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_7215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_float_0_7215686274509804)) __PYX_ERR(1, 709, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":710
 *     [0.996078431372549, 0.9529411764705882, 0.7529411764705882],
 *     [0.9803921568627451, 0.8392156862745098, 0.7215686274509804],
 *     [0.9607843137254902, 0.6274509803921569, 0.592156862745098],             # <<<<<<<<<<<<<<
 *     [0.9098039215686274, 0.41568627450980394, 0.45098039215686275],
 *     [0.7372549019607844, 0.2901960784313726, 0.6078431372549019],
 */
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 710, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_float_0_9607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_9607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_float_0_9607843137254902)) __PYX_ERR(1, 710, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_6274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_float_0_6274509803921569)) __PYX_ERR(1, 710, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_float_0_592156862745098)) __PYX_ERR(1, 710, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":711
 *     [0.9803921568627451, 0.8392156862745098, 0.7215686274509804],
 *     [0.9607843137254902, 0.6274509803921569, 0.592156862745098],
 *     [0.9098039215686274, 0.41568627450980394, 0.45098039215686275],             # <<<<<<<<<<<<<<
 *     [0.7372549019607844, 0.2901960784313726, 0.6078431372549019],
 *     [0.4745098039215686, 0.22745098039215686, 0.5019607843137255],
 */
  __pyx_t_25 = PyList_New(3); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_INCREF(__pyx_float_0_9098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_9098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_float_0_9098039215686274)) __PYX_ERR(1, 711, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_41568627450980394);
  __Pyx_GIVEREF(__pyx_float_0_41568627450980394);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_float_0_41568627450980394)) __PYX_ERR(1, 711, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_45098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_45098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_float_0_45098039215686275)) __PYX_ERR(1, 711, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":712
 *     [0.9607843137254902, 0.6274509803921569, 0.592156862745098],
 *     [0.9098039215686274, 0.41568627450980394, 0.45098039215686275],
 *     [0.7372549019607844, 0.2901960784313726, 0.6078431372549019],             # <<<<<<<<<<<<<<
 *     [0.4745098039215686, 0.22745098039215686, 0.5019607843137255],
 *     [0.25098039215686274, 0.2, 0.3254901960784314],
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 712, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_float_0_7372549019607844);
  __Pyx_GIVEREF(__pyx_float_0_7372549019607844);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_float_0_7372549019607844)) __PYX_ERR(1, 712, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2901960784313726);
  __Pyx_GIVEREF(__pyx_float_0_2901960784313726);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_float_0_2901960784313726)) __PYX_ERR(1, 712, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6078431372549019);
  __Pyx_GIVEREF(__pyx_float_0_6078431372549019);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_float_0_6078431372549019)) __PYX_ERR(1, 712, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":713
 *     [0.9098039215686274, 0.41568627450980394, 0.45098039215686275],
 *     [0.7372549019607844, 0.2901960784313726, 0.6078431372549019],
 *     [0.4745098039215686, 0.22745098039215686, 0.5019607843137255],             # <<<<<<<<<<<<<<
 *     [0.25098039215686274, 0.2, 0.3254901960784314],
 *     [0.1411764705882353, 0.13333333333333333, 0.20392156862745098],
 */
  __pyx_t_24 = PyList_New(3); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_INCREF(__pyx_float_0_4745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_4745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 0, __pyx_float_0_4745098039215686)) __PYX_ERR(1, 713, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_22745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 1, __pyx_float_0_22745098039215686)) __PYX_ERR(1, 713, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_5019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 2, __pyx_float_0_5019607843137255)) __PYX_ERR(1, 713, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":714
 *     [0.7372549019607844, 0.2901960784313726, 0.6078431372549019],
 *     [0.4745098039215686, 0.22745098039215686, 0.5019607843137255],
 *     [0.25098039215686274, 0.2, 0.3254901960784314],             # <<<<<<<<<<<<<<
 *     [0.1411764705882353, 0.13333333333333333, 0.20392156862745098],
 *     [0.13333333333333333, 0.10980392156862745, 0.10196078431372549],
 */
  __pyx_t_35 = PyList_New(3); if (unlikely(!__pyx_t_35)) __PYX_ERR(1, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __Pyx_INCREF(__pyx_float_0_25098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_25098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 0, __pyx_float_0_25098039215686274)) __PYX_ERR(1, 714, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 1, __pyx_float_0_2)) __PYX_ERR(1, 714, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_3254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 2, __pyx_float_0_3254901960784314)) __PYX_ERR(1, 714, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":715
 *     [0.4745098039215686, 0.22745098039215686, 0.5019607843137255],
 *     [0.25098039215686274, 0.2, 0.3254901960784314],
 *     [0.1411764705882353, 0.13333333333333333, 0.20392156862745098],             # <<<<<<<<<<<<<<
 *     [0.13333333333333333, 0.10980392156862745, 0.10196078431372549],
 *     [0.19607843137254902, 0.16862745098039217, 0.1568627450980392],
 */
  __pyx_t_38 = PyList_New(3); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __Pyx_INCREF(__pyx_float_0_1411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_1411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 0, __pyx_float_0_1411764705882353)) __PYX_ERR(1, 715, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_13333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 1, __pyx_float_0_13333333333333333)) __PYX_ERR(1, 715, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 2, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 715, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":716
 *     [0.25098039215686274, 0.2, 0.3254901960784314],
 *     [0.1411764705882353, 0.13333333333333333, 0.20392156862745098],
 *     [0.13333333333333333, 0.10980392156862745, 0.10196078431372549],             # <<<<<<<<<<<<<<
 *     [0.19607843137254902, 0.16862745098039217, 0.1568627450980392],
 *     [0.44313725490196076, 0.2549019607843137, 0.23137254901960785],
 */
  __pyx_t_39 = PyList_New(3); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_INCREF(__pyx_float_0_13333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_13333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 0, __pyx_float_0_13333333333333333)) __PYX_ERR(1, 716, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_10980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 1, __pyx_float_0_10980392156862745)) __PYX_ERR(1, 716, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_10196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 2, __pyx_float_0_10196078431372549)) __PYX_ERR(1, 716, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":717
 *     [0.1411764705882353, 0.13333333333333333, 0.20392156862745098],
 *     [0.13333333333333333, 0.10980392156862745, 0.10196078431372549],
 *     [0.19607843137254902, 0.16862745098039217, 0.1568627450980392],             # <<<<<<<<<<<<<<
 *     [0.44313725490196076, 0.2549019607843137, 0.23137254901960785],
 *     [0.7333333333333333, 0.4588235294117647, 0.2784313725490196],
 */
  __pyx_t_40 = PyList_New(3); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 717, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 0, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 717, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 1, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 717, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 2, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 717, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":718
 *     [0.13333333333333333, 0.10980392156862745, 0.10196078431372549],
 *     [0.19607843137254902, 0.16862745098039217, 0.1568627450980392],
 *     [0.44313725490196076, 0.2549019607843137, 0.23137254901960785],             # <<<<<<<<<<<<<<
 *     [0.7333333333333333, 0.4588235294117647, 0.2784313725490196],
 *     [0.8588235294117647, 0.6431372549019608, 0.38823529411764707],
 */
  __pyx_t_41 = PyList_New(3); if (unlikely(!__pyx_t_41)) __PYX_ERR(1, 718, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  __Pyx_INCREF(__pyx_float_0_44313725490196076);
  __Pyx_GIVEREF(__pyx_float_0_44313725490196076);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 0, __pyx_float_0_44313725490196076)) __PYX_ERR(1, 718, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 1, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 718, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23137254901960785);
  __Pyx_GIVEREF(__pyx_float_0_23137254901960785);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 2, __pyx_float_0_23137254901960785)) __PYX_ERR(1, 718, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":719
 *     [0.19607843137254902, 0.16862745098039217, 0.1568627450980392],
 *     [0.44313725490196076, 0.2549019607843137, 0.23137254901960785],
 *     [0.7333333333333333, 0.4588235294117647, 0.2784313725490196],             # <<<<<<<<<<<<<<
 *     [0.8588235294117647, 0.6431372549019608, 0.38823529411764707],
 *     [0.9568627450980393, 0.8235294117647058, 0.611764705882353],
 */
  __pyx_t_42 = PyList_New(3); if (unlikely(!__pyx_t_42)) __PYX_ERR(1, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __Pyx_INCREF(__pyx_float_0_7333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_7333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 0, __pyx_float_0_7333333333333333)) __PYX_ERR(1, 719, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 1, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 719, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_2784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 2, __pyx_float_0_2784313725490196)) __PYX_ERR(1, 719, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":720
 *     [0.44313725490196076, 0.2549019607843137, 0.23137254901960785],
 *     [0.7333333333333333, 0.4588235294117647, 0.2784313725490196],
 *     [0.8588235294117647, 0.6431372549019608, 0.38823529411764707],             # <<<<<<<<<<<<<<
 *     [0.9568627450980393, 0.8235294117647058, 0.611764705882353],
 *     [0.8549019607843137, 0.8784313725490196, 0.9176470588235294],
 */
  __pyx_t_43 = PyList_New(3); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_INCREF(__pyx_float_0_8588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_8588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 0, __pyx_float_0_8588235294117647)) __PYX_ERR(1, 720, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_6431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 1, __pyx_float_0_6431372549019608)) __PYX_ERR(1, 720, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_38823529411764707);
  __Pyx_GIVEREF(__pyx_float_0_38823529411764707);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 2, __pyx_float_0_38823529411764707)) __PYX_ERR(1, 720, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":721
 *     [0.7333333333333333, 0.4588235294117647, 0.2784313725490196],
 *     [0.8588235294117647, 0.6431372549019608, 0.38823529411764707],
 *     [0.9568627450980393, 0.8235294117647058, 0.611764705882353],             # <<<<<<<<<<<<<<
 *     [0.8549019607843137, 0.8784313725490196, 0.9176470588235294],
 *     [0.7019607843137254, 0.7254901960784313, 0.8196078431372549],
 */
  __pyx_t_44 = PyList_New(3); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 721, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_INCREF(__pyx_float_0_9568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_9568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 0, __pyx_float_0_9568627450980393)) __PYX_ERR(1, 721, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8235294117647058);
  __Pyx_GIVEREF(__pyx_float_0_8235294117647058);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 1, __pyx_float_0_8235294117647058)) __PYX_ERR(1, 721, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_611764705882353);
  __Pyx_GIVEREF(__pyx_float_0_611764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 2, __pyx_float_0_611764705882353)) __PYX_ERR(1, 721, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":722
 *     [0.8588235294117647, 0.6431372549019608, 0.38823529411764707],
 *     [0.9568627450980393, 0.8235294117647058, 0.611764705882353],
 *     [0.8549019607843137, 0.8784313725490196, 0.9176470588235294],             # <<<<<<<<<<<<<<
 *     [0.7019607843137254, 0.7254901960784313, 0.8196078431372549],
 *     [0.5450980392156862, 0.5764705882352941, 0.6862745098039216],
 */
  __pyx_t_45 = PyList_New(3); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 722, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_INCREF(__pyx_float_0_8549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_8549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 0, __pyx_float_0_8549019607843137)) __PYX_ERR(1, 722, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_8784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 1, __pyx_float_0_8784313725490196)) __PYX_ERR(1, 722, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 2, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 722, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":723
 *     [0.9568627450980393, 0.8235294117647058, 0.611764705882353],
 *     [0.8549019607843137, 0.8784313725490196, 0.9176470588235294],
 *     [0.7019607843137254, 0.7254901960784313, 0.8196078431372549],             # <<<<<<<<<<<<<<
 *     [0.5450980392156862, 0.5764705882352941, 0.6862745098039216],
 *     [0.42745098039215684, 0.4588235294117647, 0.5529411764705883],
 */
  __pyx_t_46 = PyList_New(3); if (unlikely(!__pyx_t_46)) __PYX_ERR(1, 723, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_46);
  __Pyx_INCREF(__pyx_float_0_7019607843137254);
  __Pyx_GIVEREF(__pyx_float_0_7019607843137254);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 0, __pyx_float_0_7019607843137254)) __PYX_ERR(1, 723, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_7254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 1, __pyx_float_0_7254901960784313)) __PYX_ERR(1, 723, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_8196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 2, __pyx_float_0_8196078431372549)) __PYX_ERR(1, 723, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":724
 *     [0.8549019607843137, 0.8784313725490196, 0.9176470588235294],
 *     [0.7019607843137254, 0.7254901960784313, 0.8196078431372549],
 *     [0.5450980392156862, 0.5764705882352941, 0.6862745098039216],             # <<<<<<<<<<<<<<
 *     [0.42745098039215684, 0.4588235294117647, 0.5529411764705883],
 *     [0.2901960784313726, 0.32941176470588235, 0.3843137254901961],
 */
  __pyx_t_47 = PyList_New(3); if (unlikely(!__pyx_t_47)) __PYX_ERR(1, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 0, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 724, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_5764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 1, __pyx_float_0_5764705882352941)) __PYX_ERR(1, 724, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6862745098039216);
  __Pyx_GIVEREF(__pyx_float_0_6862745098039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 2, __pyx_float_0_6862745098039216)) __PYX_ERR(1, 724, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":725
 *     [0.7019607843137254, 0.7254901960784313, 0.8196078431372549],
 *     [0.5450980392156862, 0.5764705882352941, 0.6862745098039216],
 *     [0.42745098039215684, 0.4588235294117647, 0.5529411764705883],             # <<<<<<<<<<<<<<
 *     [0.2901960784313726, 0.32941176470588235, 0.3843137254901961],
 *     [0.2, 0.2235294117647059, 0.2549019607843137],
 */
  __pyx_t_48 = PyList_New(3); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __Pyx_INCREF(__pyx_float_0_42745098039215684);
  __Pyx_GIVEREF(__pyx_float_0_42745098039215684);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 0, __pyx_float_0_42745098039215684)) __PYX_ERR(1, 725, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 1, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 725, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5529411764705883);
  __Pyx_GIVEREF(__pyx_float_0_5529411764705883);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 2, __pyx_float_0_5529411764705883)) __PYX_ERR(1, 725, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":726
 *     [0.5450980392156862, 0.5764705882352941, 0.6862745098039216],
 *     [0.42745098039215684, 0.4588235294117647, 0.5529411764705883],
 *     [0.2901960784313726, 0.32941176470588235, 0.3843137254901961],             # <<<<<<<<<<<<<<
 *     [0.2, 0.2235294117647059, 0.2549019607843137],
 *     [0.25882352941176473, 0.1411764705882353, 0.2],
 */
  __pyx_t_49 = PyList_New(3); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_49);
  __Pyx_INCREF(__pyx_float_0_2901960784313726);
  __Pyx_GIVEREF(__pyx_float_0_2901960784313726);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 0, __pyx_float_0_2901960784313726)) __PYX_ERR(1, 726, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_32941176470588235);
  __Pyx_GIVEREF(__pyx_float_0_32941176470588235);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 1, __pyx_float_0_32941176470588235)) __PYX_ERR(1, 726, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 2, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 726, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":727
 *     [0.42745098039215684, 0.4588235294117647, 0.5529411764705883],
 *     [0.2901960784313726, 0.32941176470588235, 0.3843137254901961],
 *     [0.2, 0.2235294117647059, 0.2549019607843137],             # <<<<<<<<<<<<<<
 *     [0.25882352941176473, 0.1411764705882353, 0.2],
 *     [0.3568627450980392, 0.19215686274509805, 0.2196078431372549],
 */
  __pyx_t_50 = PyList_New(3); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_50);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 0, __pyx_float_0_2)) __PYX_ERR(1, 727, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 1, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 727, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 2, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 727, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":728
 *     [0.2901960784313726, 0.32941176470588235, 0.3843137254901961],
 *     [0.2, 0.2235294117647059, 0.2549019607843137],
 *     [0.25882352941176473, 0.1411764705882353, 0.2],             # <<<<<<<<<<<<<<
 *     [0.3568627450980392, 0.19215686274509805, 0.2196078431372549],
 *     [0.5568627450980392, 0.3215686274509804, 0.3215686274509804],
 */
  __pyx_t_51 = PyList_New(3); if (unlikely(!__pyx_t_51)) __PYX_ERR(1, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_51);
  __Pyx_INCREF(__pyx_float_0_25882352941176473);
  __Pyx_GIVEREF(__pyx_float_0_25882352941176473);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 0, __pyx_float_0_25882352941176473)) __PYX_ERR(1, 728, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_1411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 1, __pyx_float_0_1411764705882353)) __PYX_ERR(1, 728, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 2, __pyx_float_0_2)) __PYX_ERR(1, 728, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":729
 *     [0.2, 0.2235294117647059, 0.2549019607843137],
 *     [0.25882352941176473, 0.1411764705882353, 0.2],
 *     [0.3568627450980392, 0.19215686274509805, 0.2196078431372549],             # <<<<<<<<<<<<<<
 *     [0.5568627450980392, 0.3215686274509804, 0.3215686274509804],
 *     [0.7294117647058823, 0.4588235294117647, 0.41568627450980394],
 */
  __pyx_t_52 = PyList_New(3); if (unlikely(!__pyx_t_52)) __PYX_ERR(1, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_52);
  __Pyx_INCREF(__pyx_float_0_3568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_3568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 0, __pyx_float_0_3568627450980392)) __PYX_ERR(1, 729, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 1, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 729, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_2196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 2, __pyx_float_0_2196078431372549)) __PYX_ERR(1, 729, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":730
 *     [0.25882352941176473, 0.1411764705882353, 0.2],
 *     [0.3568627450980392, 0.19215686274509805, 0.2196078431372549],
 *     [0.5568627450980392, 0.3215686274509804, 0.3215686274509804],             # <<<<<<<<<<<<<<
 *     [0.7294117647058823, 0.4588235294117647, 0.41568627450980394],
 *     [0.9137254901960784, 0.7098039215686275, 0.6392156862745098],
 */
  __pyx_t_53 = PyList_New(3); if (unlikely(!__pyx_t_53)) __PYX_ERR(1, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_53);
  __Pyx_INCREF(__pyx_float_0_5568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_5568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 0, __pyx_float_0_5568627450980392)) __PYX_ERR(1, 730, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 1, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 730, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 2, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 730, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":731
 *     [0.3568627450980392, 0.19215686274509805, 0.2196078431372549],
 *     [0.5568627450980392, 0.3215686274509804, 0.3215686274509804],
 *     [0.7294117647058823, 0.4588235294117647, 0.41568627450980394],             # <<<<<<<<<<<<<<
 *     [0.9137254901960784, 0.7098039215686275, 0.6392156862745098],
 *     [0.8901960784313725, 0.9019607843137255, 1.0],
 */
  __pyx_t_54 = PyList_New(3); if (unlikely(!__pyx_t_54)) __PYX_ERR(1, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_54);
  __Pyx_INCREF(__pyx_float_0_7294117647058823);
  __Pyx_GIVEREF(__pyx_float_0_7294117647058823);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 0, __pyx_float_0_7294117647058823)) __PYX_ERR(1, 731, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 1, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 731, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_41568627450980394);
  __Pyx_GIVEREF(__pyx_float_0_41568627450980394);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 2, __pyx_float_0_41568627450980394)) __PYX_ERR(1, 731, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":732
 *     [0.5568627450980392, 0.3215686274509804, 0.3215686274509804],
 *     [0.7294117647058823, 0.4588235294117647, 0.41568627450980394],
 *     [0.9137254901960784, 0.7098039215686275, 0.6392156862745098],             # <<<<<<<<<<<<<<
 *     [0.8901960784313725, 0.9019607843137255, 1.0],
 *     [0.7254901960784313, 0.7490196078431373, 0.984313725490196],
 */
  __pyx_t_55 = PyList_New(3); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);
  __Pyx_INCREF(__pyx_float_0_9137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_9137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 0, __pyx_float_0_9137254901960784)) __PYX_ERR(1, 732, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 1, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 732, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_6392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 2, __pyx_float_0_6392156862745098)) __PYX_ERR(1, 732, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":733
 *     [0.7294117647058823, 0.4588235294117647, 0.41568627450980394],
 *     [0.9137254901960784, 0.7098039215686275, 0.6392156862745098],
 *     [0.8901960784313725, 0.9019607843137255, 1.0],             # <<<<<<<<<<<<<<
 *     [0.7254901960784313, 0.7490196078431373, 0.984313725490196],
 *     [0.5176470588235295, 0.6078431372549019, 0.8941176470588236],
 */
  __pyx_t_56 = PyList_New(3); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_56);
  __Pyx_INCREF(__pyx_float_0_8901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_8901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 0, __pyx_float_0_8901960784313725)) __PYX_ERR(1, 733, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_9019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 1, __pyx_float_0_9019607843137255)) __PYX_ERR(1, 733, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 2, __pyx_float_1_0)) __PYX_ERR(1, 733, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":734
 *     [0.9137254901960784, 0.7098039215686275, 0.6392156862745098],
 *     [0.8901960784313725, 0.9019607843137255, 1.0],
 *     [0.7254901960784313, 0.7490196078431373, 0.984313725490196],             # <<<<<<<<<<<<<<
 *     [0.5176470588235295, 0.6078431372549019, 0.8941176470588236],
 *     [0.34509803921568627, 0.5529411764705883, 0.7450980392156863],
 */
  __pyx_t_57 = PyList_New(3); if (unlikely(!__pyx_t_57)) __PYX_ERR(1, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_57);
  __Pyx_INCREF(__pyx_float_0_7254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_7254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 0, __pyx_float_0_7254901960784313)) __PYX_ERR(1, 734, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_7490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 1, __pyx_float_0_7490196078431373)) __PYX_ERR(1, 734, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_984313725490196);
  __Pyx_GIVEREF(__pyx_float_0_984313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 2, __pyx_float_0_984313725490196)) __PYX_ERR(1, 734, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":735
 *     [0.8901960784313725, 0.9019607843137255, 1.0],
 *     [0.7254901960784313, 0.7490196078431373, 0.984313725490196],
 *     [0.5176470588235295, 0.6078431372549019, 0.8941176470588236],             # <<<<<<<<<<<<<<
 *     [0.34509803921568627, 0.5529411764705883, 0.7450980392156863],
 *     [0.2784313725490196, 0.49019607843137253, 0.5215686274509804],
 */
  __pyx_t_58 = PyList_New(3); if (unlikely(!__pyx_t_58)) __PYX_ERR(1, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_58);
  __Pyx_INCREF(__pyx_float_0_5176470588235295);
  __Pyx_GIVEREF(__pyx_float_0_5176470588235295);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 0, __pyx_float_0_5176470588235295)) __PYX_ERR(1, 735, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6078431372549019);
  __Pyx_GIVEREF(__pyx_float_0_6078431372549019);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 1, __pyx_float_0_6078431372549019)) __PYX_ERR(1, 735, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8941176470588236);
  __Pyx_GIVEREF(__pyx_float_0_8941176470588236);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 2, __pyx_float_0_8941176470588236)) __PYX_ERR(1, 735, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":736
 *     [0.7254901960784313, 0.7490196078431373, 0.984313725490196],
 *     [0.5176470588235295, 0.6078431372549019, 0.8941176470588236],
 *     [0.34509803921568627, 0.5529411764705883, 0.7450980392156863],             # <<<<<<<<<<<<<<
 *     [0.2784313725490196, 0.49019607843137253, 0.5215686274509804],
 *     [0.13725490196078433, 0.403921568627451, 0.3058823529411765],
 */
  __pyx_t_59 = PyList_New(3); if (unlikely(!__pyx_t_59)) __PYX_ERR(1, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_59);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 0, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 736, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5529411764705883);
  __Pyx_GIVEREF(__pyx_float_0_5529411764705883);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 1, __pyx_float_0_5529411764705883)) __PYX_ERR(1, 736, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_7450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 2, __pyx_float_0_7450980392156863)) __PYX_ERR(1, 736, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":737
 *     [0.5176470588235295, 0.6078431372549019, 0.8941176470588236],
 *     [0.34509803921568627, 0.5529411764705883, 0.7450980392156863],
 *     [0.2784313725490196, 0.49019607843137253, 0.5215686274509804],             # <<<<<<<<<<<<<<
 *     [0.13725490196078433, 0.403921568627451, 0.3058823529411765],
 *     [0.19607843137254902, 0.5176470588235295, 0.39215686274509803],
 */
  __pyx_t_60 = PyList_New(3); if (unlikely(!__pyx_t_60)) __PYX_ERR(1, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_60);
  __Pyx_INCREF(__pyx_float_0_2784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_2784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 0, __pyx_float_0_2784313725490196)) __PYX_ERR(1, 737, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_49019607843137253);
  __Pyx_GIVEREF(__pyx_float_0_49019607843137253);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 1, __pyx_float_0_49019607843137253)) __PYX_ERR(1, 737, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_5215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 2, __pyx_float_0_5215686274509804)) __PYX_ERR(1, 737, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":738
 *     [0.34509803921568627, 0.5529411764705883, 0.7450980392156863],
 *     [0.2784313725490196, 0.49019607843137253, 0.5215686274509804],
 *     [0.13725490196078433, 0.403921568627451, 0.3058823529411765],             # <<<<<<<<<<<<<<
 *     [0.19607843137254902, 0.5176470588235295, 0.39215686274509803],
 *     [0.36470588235294116, 0.6862745098039216, 0.5529411764705883],
 */
  __pyx_t_61 = PyList_New(3); if (unlikely(!__pyx_t_61)) __PYX_ERR(1, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_61);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 0, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 738, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_403921568627451);
  __Pyx_GIVEREF(__pyx_float_0_403921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 1, __pyx_float_0_403921568627451)) __PYX_ERR(1, 738, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_3058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 2, __pyx_float_0_3058823529411765)) __PYX_ERR(1, 738, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":739
 *     [0.2784313725490196, 0.49019607843137253, 0.5215686274509804],
 *     [0.13725490196078433, 0.403921568627451, 0.3058823529411765],
 *     [0.19607843137254902, 0.5176470588235295, 0.39215686274509803],             # <<<<<<<<<<<<<<
 *     [0.36470588235294116, 0.6862745098039216, 0.5529411764705883],
 *     [0.5725490196078431, 0.8627450980392157, 0.7294117647058823],
 */
  __pyx_t_62 = PyList_New(3); if (unlikely(!__pyx_t_62)) __PYX_ERR(1, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_62);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 0, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 739, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5176470588235295);
  __Pyx_GIVEREF(__pyx_float_0_5176470588235295);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 1, __pyx_float_0_5176470588235295)) __PYX_ERR(1, 739, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 2, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 739, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":740
 *     [0.13725490196078433, 0.403921568627451, 0.3058823529411765],
 *     [0.19607843137254902, 0.5176470588235295, 0.39215686274509803],
 *     [0.36470588235294116, 0.6862745098039216, 0.5529411764705883],             # <<<<<<<<<<<<<<
 *     [0.5725490196078431, 0.8627450980392157, 0.7294117647058823],
 *     [0.803921568627451, 0.9686274509803922, 0.8862745098039215],
 */
  __pyx_t_63 = PyList_New(3); if (unlikely(!__pyx_t_63)) __PYX_ERR(1, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_63);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 0, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 740, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6862745098039216);
  __Pyx_GIVEREF(__pyx_float_0_6862745098039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 1, __pyx_float_0_6862745098039216)) __PYX_ERR(1, 740, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5529411764705883);
  __Pyx_GIVEREF(__pyx_float_0_5529411764705883);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 2, __pyx_float_0_5529411764705883)) __PYX_ERR(1, 740, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":741
 *     [0.19607843137254902, 0.5176470588235295, 0.39215686274509803],
 *     [0.36470588235294116, 0.6862745098039216, 0.5529411764705883],
 *     [0.5725490196078431, 0.8627450980392157, 0.7294117647058823],             # <<<<<<<<<<<<<<
 *     [0.803921568627451, 0.9686274509803922, 0.8862745098039215],
 *     [0.8941176470588236, 0.8235294117647058, 0.6666666666666666],
 */
  __pyx_t_64 = PyList_New(3); if (unlikely(!__pyx_t_64)) __PYX_ERR(1, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_64);
  __Pyx_INCREF(__pyx_float_0_5725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_5725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 0, __pyx_float_0_5725490196078431)) __PYX_ERR(1, 741, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_8627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 1, __pyx_float_0_8627450980392157)) __PYX_ERR(1, 741, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7294117647058823);
  __Pyx_GIVEREF(__pyx_float_0_7294117647058823);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 2, __pyx_float_0_7294117647058823)) __PYX_ERR(1, 741, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":742
 *     [0.36470588235294116, 0.6862745098039216, 0.5529411764705883],
 *     [0.5725490196078431, 0.8627450980392157, 0.7294117647058823],
 *     [0.803921568627451, 0.9686274509803922, 0.8862745098039215],             # <<<<<<<<<<<<<<
 *     [0.8941176470588236, 0.8235294117647058, 0.6666666666666666],
 *     [0.7803921568627451, 0.6901960784313725, 0.5450980392156862],
 */
  __pyx_t_65 = PyList_New(3); if (unlikely(!__pyx_t_65)) __PYX_ERR(1, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_65);
  __Pyx_INCREF(__pyx_float_0_803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 0, __pyx_float_0_803921568627451)) __PYX_ERR(1, 742, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_9686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 1, __pyx_float_0_9686274509803922)) __PYX_ERR(1, 742, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8862745098039215);
  __Pyx_GIVEREF(__pyx_float_0_8862745098039215);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 2, __pyx_float_0_8862745098039215)) __PYX_ERR(1, 742, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":743
 *     [0.5725490196078431, 0.8627450980392157, 0.7294117647058823],
 *     [0.803921568627451, 0.9686274509803922, 0.8862745098039215],
 *     [0.8941176470588236, 0.8235294117647058, 0.6666666666666666],             # <<<<<<<<<<<<<<
 *     [0.7803921568627451, 0.6901960784313725, 0.5450980392156862],
 *     [0.6274509803921569, 0.5254901960784314, 0.3843137254901961],
 */
  __pyx_t_66 = PyList_New(3); if (unlikely(!__pyx_t_66)) __PYX_ERR(1, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_66);
  __Pyx_INCREF(__pyx_float_0_8941176470588236);
  __Pyx_GIVEREF(__pyx_float_0_8941176470588236);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 0, __pyx_float_0_8941176470588236)) __PYX_ERR(1, 743, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8235294117647058);
  __Pyx_GIVEREF(__pyx_float_0_8235294117647058);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 1, __pyx_float_0_8235294117647058)) __PYX_ERR(1, 743, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_6666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 2, __pyx_float_0_6666666666666666)) __PYX_ERR(1, 743, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":744
 *     [0.803921568627451, 0.9686274509803922, 0.8862745098039215],
 *     [0.8941176470588236, 0.8235294117647058, 0.6666666666666666],
 *     [0.7803921568627451, 0.6901960784313725, 0.5450980392156862],             # <<<<<<<<<<<<<<
 *     [0.6274509803921569, 0.5254901960784314, 0.3843137254901961],
 *     [0.4745098039215686, 0.403921568627451, 0.3333333333333333],
 */
  __pyx_t_67 = PyList_New(3); if (unlikely(!__pyx_t_67)) __PYX_ERR(1, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_67);
  __Pyx_INCREF(__pyx_float_0_7803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_7803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 0, __pyx_float_0_7803921568627451)) __PYX_ERR(1, 744, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_6901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 1, __pyx_float_0_6901960784313725)) __PYX_ERR(1, 744, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 2, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 744, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":745
 *     [0.8941176470588236, 0.8235294117647058, 0.6666666666666666],
 *     [0.7803921568627451, 0.6901960784313725, 0.5450980392156862],
 *     [0.6274509803921569, 0.5254901960784314, 0.3843137254901961],             # <<<<<<<<<<<<<<
 *     [0.4745098039215686, 0.403921568627451, 0.3333333333333333],
 *     [0.35294117647058826, 0.3058823529411765, 0.26666666666666666],
 */
  __pyx_t_68 = PyList_New(3); if (unlikely(!__pyx_t_68)) __PYX_ERR(1, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_68);
  __Pyx_INCREF(__pyx_float_0_6274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_6274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 0, __pyx_float_0_6274509803921569)) __PYX_ERR(1, 745, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_5254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 1, __pyx_float_0_5254901960784314)) __PYX_ERR(1, 745, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 2, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 745, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":746
 *     [0.7803921568627451, 0.6901960784313725, 0.5450980392156862],
 *     [0.6274509803921569, 0.5254901960784314, 0.3843137254901961],
 *     [0.4745098039215686, 0.403921568627451, 0.3333333333333333],             # <<<<<<<<<<<<<<
 *     [0.35294117647058826, 0.3058823529411765, 0.26666666666666666],
 *     [0.25882352941176473, 0.2235294117647059, 0.20392156862745098]
 */
  __pyx_t_69 = PyList_New(3); if (unlikely(!__pyx_t_69)) __PYX_ERR(1, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_69);
  __Pyx_INCREF(__pyx_float_0_4745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_4745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 0, __pyx_float_0_4745098039215686)) __PYX_ERR(1, 746, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_403921568627451);
  __Pyx_GIVEREF(__pyx_float_0_403921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 1, __pyx_float_0_403921568627451)) __PYX_ERR(1, 746, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_3333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 2, __pyx_float_0_3333333333333333)) __PYX_ERR(1, 746, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":747
 *     [0.6274509803921569, 0.5254901960784314, 0.3843137254901961],
 *     [0.4745098039215686, 0.403921568627451, 0.3333333333333333],
 *     [0.35294117647058826, 0.3058823529411765, 0.26666666666666666],             # <<<<<<<<<<<<<<
 *     [0.25882352941176473, 0.2235294117647059, 0.20392156862745098]
 * ], dtype=float32)
 */
  __pyx_t_70 = PyList_New(3); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 747, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_70);
  __Pyx_INCREF(__pyx_float_0_35294117647058826);
  __Pyx_GIVEREF(__pyx_float_0_35294117647058826);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 0, __pyx_float_0_35294117647058826)) __PYX_ERR(1, 747, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_3058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 1, __pyx_float_0_3058823529411765)) __PYX_ERR(1, 747, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_26666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_26666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 2, __pyx_float_0_26666666666666666)) __PYX_ERR(1, 747, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":748
 *     [0.4745098039215686, 0.403921568627451, 0.3333333333333333],
 *     [0.35294117647058826, 0.3058823529411765, 0.26666666666666666],
 *     [0.25882352941176473, 0.2235294117647059, 0.20392156862745098]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * AAP64 =_AAP64_NORMALIZED * <float>255.0
 */
  __pyx_t_71 = PyList_New(3); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_71);
  __Pyx_INCREF(__pyx_float_0_25882352941176473);
  __Pyx_GIVEREF(__pyx_float_0_25882352941176473);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 0, __pyx_float_0_25882352941176473)) __PYX_ERR(1, 748, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 1, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 748, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 2, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 748, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":684
 * # Created by Adigun A. Polack
 * # https://lospec.com/palette-list/aap-64
 * _AAP64_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [0.023529411764705882, 0.023529411764705882, 0.03137254901960784],
 *     [0.0784313725490196, 0.06274509803921569, 0.07450980392156863],
 */
  __pyx_t_72 = PyList_New(64); if (unlikely(!__pyx_t_72)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_72);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 0, __pyx_t_23)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 1, __pyx_t_17)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 2, __pyx_t_5)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 3, __pyx_t_7)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 4, __pyx_t_32)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 5, __pyx_t_12)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 6, __pyx_t_31)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 7, __pyx_t_11)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 8, __pyx_t_22)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 9, __pyx_t_27)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 10, __pyx_t_28)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 11, __pyx_t_21)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 12, __pyx_t_29)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 13, __pyx_t_30)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 14, __pyx_t_10)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 15, __pyx_t_33)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 16, __pyx_t_34)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 17, __pyx_t_20)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 18, __pyx_t_19)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 19, __pyx_t_26)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 20, __pyx_t_16)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 21, __pyx_t_37)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 22, __pyx_t_4)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 23, __pyx_t_36)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 24, __pyx_t_14)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 25, __pyx_t_13)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 26, __pyx_t_25)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 27, __pyx_t_18)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 28, __pyx_t_24)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_35);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 29, __pyx_t_35)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_38);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 30, __pyx_t_38)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_39);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 31, __pyx_t_39)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_40);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 32, __pyx_t_40)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_41);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 33, __pyx_t_41)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_42);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 34, __pyx_t_42)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_43);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 35, __pyx_t_43)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_44);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 36, __pyx_t_44)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_45);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 37, __pyx_t_45)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_46);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 38, __pyx_t_46)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_47);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 39, __pyx_t_47)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_48);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 40, __pyx_t_48)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_49);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 41, __pyx_t_49)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_50);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 42, __pyx_t_50)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_51);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 43, __pyx_t_51)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_52);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 44, __pyx_t_52)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_53);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 45, __pyx_t_53)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_54);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 46, __pyx_t_54)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_55);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 47, __pyx_t_55)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_56);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 48, __pyx_t_56)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_57);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 49, __pyx_t_57)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_58);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 50, __pyx_t_58)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_59);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 51, __pyx_t_59)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_60);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 52, __pyx_t_60)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_61);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 53, __pyx_t_61)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_62);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 54, __pyx_t_62)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_63);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 55, __pyx_t_63)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_64);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 56, __pyx_t_64)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_65);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 57, __pyx_t_65)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_66);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 58, __pyx_t_66)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_67);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 59, __pyx_t_67)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_68);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 60, __pyx_t_68)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_69);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 61, __pyx_t_69)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_70);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 62, __pyx_t_70)) __PYX_ERR(1, 684, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_71);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 63, __pyx_t_71)) __PYX_ERR(1, 684, __pyx_L1_error);
  __pyx_t_23 = 0;
  __pyx_t_17 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_32 = 0;
  __pyx_t_12 = 0;
  __pyx_t_31 = 0;
  __pyx_t_11 = 0;
  __pyx_t_22 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_21 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_10 = 0;
  __pyx_t_33 = 0;
  __pyx_t_34 = 0;
  __pyx_t_20 = 0;
  __pyx_t_19 = 0;
  __pyx_t_26 = 0;
  __pyx_t_16 = 0;
  __pyx_t_37 = 0;
  __pyx_t_4 = 0;
  __pyx_t_36 = 0;
  __pyx_t_14 = 0;
  __pyx_t_13 = 0;
  __pyx_t_25 = 0;
  __pyx_t_18 = 0;
  __pyx_t_24 = 0;
  __pyx_t_35 = 0;
  __pyx_t_38 = 0;
  __pyx_t_39 = 0;
  __pyx_t_40 = 0;
  __pyx_t_41 = 0;
  __pyx_t_42 = 0;
  __pyx_t_43 = 0;
  __pyx_t_44 = 0;
  __pyx_t_45 = 0;
  __pyx_t_46 = 0;
  __pyx_t_47 = 0;
  __pyx_t_48 = 0;
  __pyx_t_49 = 0;
  __pyx_t_50 = 0;
  __pyx_t_51 = 0;
  __pyx_t_52 = 0;
  __pyx_t_53 = 0;
  __pyx_t_54 = 0;
  __pyx_t_55 = 0;
  __pyx_t_56 = 0;
  __pyx_t_57 = 0;
  __pyx_t_58 = 0;
  __pyx_t_59 = 0;
  __pyx_t_60 = 0;
  __pyx_t_61 = 0;
  __pyx_t_62 = 0;
  __pyx_t_63 = 0;
  __pyx_t_64 = 0;
  __pyx_t_65 = 0;
  __pyx_t_66 = 0;
  __pyx_t_67 = 0;
  __pyx_t_68 = 0;
  __pyx_t_69 = 0;
  __pyx_t_70 = 0;
  __pyx_t_71 = 0;
  __pyx_t_71 = PyTuple_New(1); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_71);
  __Pyx_GIVEREF(__pyx_t_72);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_71, 0, __pyx_t_72)) __PYX_ERR(1, 684, __pyx_L1_error);
  __pyx_t_72 = 0;

  /* "PygameShader/Palette.pyx":749
 *     [0.35294117647058826, 0.3058823529411765, 0.26666666666666666],
 *     [0.25882352941176473, 0.2235294117647059, 0.20392156862745098]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * AAP64 =_AAP64_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_72 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_72)) __PYX_ERR(1, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_72);
  __Pyx_GetModuleGlobalName(__pyx_t_70, __pyx_n_s_float32); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 749, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_70);
  if (PyDict_SetItem(__pyx_t_72, __pyx_n_s_dtype, __pyx_t_70) < 0) __PYX_ERR(1, 749, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_70); __pyx_t_70 = 0;

  /* "PygameShader/Palette.pyx":684
 * # Created by Adigun A. Polack
 * # https://lospec.com/palette-list/aap-64
 * _AAP64_NORMALIZED = array([             # <<<<<<<<<<<<<<
 *     [0.023529411764705882, 0.023529411764705882, 0.03137254901960784],
 *     [0.0784313725490196, 0.06274509803921569, 0.07450980392156863],
 */
  __pyx_t_70 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_71, __pyx_t_72); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_70);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  __Pyx_DECREF(__pyx_t_71); __pyx_t_71 = 0;
  __Pyx_DECREF(__pyx_t_72); __pyx_t_72 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AAP64_NORMALIZED, __pyx_t_70) < 0) __PYX_ERR(1, 684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_70); __pyx_t_70 = 0;

  /* "PygameShader/Palette.pyx":750
 *     [0.25882352941176473, 0.2235294117647059, 0.20392156862745098]
 * ], dtype=float32)
 * AAP64 =_AAP64_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * # https://lospec.com/palette-list/apollo
 */
  __Pyx_GetModuleGlobalName(__pyx_t_70, __pyx_n_s_AAP64_NORMALIZED); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_70);
  __pyx_t_72 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_72)) __PYX_ERR(1, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_72);
  __pyx_t_71 = PyNumber_Multiply(__pyx_t_70, __pyx_t_72); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_71);
  __Pyx_DECREF(__pyx_t_70); __pyx_t_70 = 0;
  __Pyx_DECREF(__pyx_t_72); __pyx_t_72 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AAP64, __pyx_t_71) < 0) __PYX_ERR(1, 750, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_71); __pyx_t_71 = 0;

  /* "PygameShader/Palette.pyx":754
 * # https://lospec.com/palette-list/apollo
 * # Created by AdamCYounis
 * _APOLLO_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.09019607843137255, 0.12549019607843137, 0.2196078431372549],
 * [0.1450980392156863, 0.22745098039215686, 0.3686274509803922],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_71, __pyx_n_s_array); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_71);

  /* "PygameShader/Palette.pyx":755
 * # Created by AdamCYounis
 * _APOLLO_NORMALIZED = array([
 * [0.09019607843137255, 0.12549019607843137, 0.2196078431372549],             # <<<<<<<<<<<<<<
 * [0.1450980392156863, 0.22745098039215686, 0.3686274509803922],
 * [0.23529411764705882, 0.3686274509803922, 0.5450980392156862],
 */
  __pyx_t_72 = PyList_New(3); if (unlikely(!__pyx_t_72)) __PYX_ERR(1, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_72);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 0, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 755, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_12549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 1, __pyx_float_0_12549019607843137)) __PYX_ERR(1, 755, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_2196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 2, __pyx_float_0_2196078431372549)) __PYX_ERR(1, 755, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":756
 * _APOLLO_NORMALIZED = array([
 * [0.09019607843137255, 0.12549019607843137, 0.2196078431372549],
 * [0.1450980392156863, 0.22745098039215686, 0.3686274509803922],             # <<<<<<<<<<<<<<
 * [0.23529411764705882, 0.3686274509803922, 0.5450980392156862],
 * [0.30980392156862746, 0.5607843137254902, 0.7294117647058823],
 */
  __pyx_t_70 = PyList_New(3); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_70);
  __Pyx_INCREF(__pyx_float_0_1450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_1450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 0, __pyx_float_0_1450980392156863)) __PYX_ERR(1, 756, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_22745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 1, __pyx_float_0_22745098039215686)) __PYX_ERR(1, 756, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_3686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 2, __pyx_float_0_3686274509803922)) __PYX_ERR(1, 756, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":757
 * [0.09019607843137255, 0.12549019607843137, 0.2196078431372549],
 * [0.1450980392156863, 0.22745098039215686, 0.3686274509803922],
 * [0.23529411764705882, 0.3686274509803922, 0.5450980392156862],             # <<<<<<<<<<<<<<
 * [0.30980392156862746, 0.5607843137254902, 0.7294117647058823],
 * [0.45098039215686275, 0.7450980392156863, 0.8274509803921568],
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 757, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_3686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_3686274509803922)) __PYX_ERR(1, 757, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 757, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":758
 * [0.1450980392156863, 0.22745098039215686, 0.3686274509803922],
 * [0.23529411764705882, 0.3686274509803922, 0.5450980392156862],
 * [0.30980392156862746, 0.5607843137254902, 0.7294117647058823],             # <<<<<<<<<<<<<<
 * [0.45098039215686275, 0.7450980392156863, 0.8274509803921568],
 * [0.6431372549019608, 0.8666666666666667, 0.8588235294117647],
 */
  __pyx_t_69 = PyList_New(3); if (unlikely(!__pyx_t_69)) __PYX_ERR(1, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_69);
  __Pyx_INCREF(__pyx_float_0_30980392156862746);
  __Pyx_GIVEREF(__pyx_float_0_30980392156862746);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 0, __pyx_float_0_30980392156862746)) __PYX_ERR(1, 758, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 1, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 758, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7294117647058823);
  __Pyx_GIVEREF(__pyx_float_0_7294117647058823);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 2, __pyx_float_0_7294117647058823)) __PYX_ERR(1, 758, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":759
 * [0.23529411764705882, 0.3686274509803922, 0.5450980392156862],
 * [0.30980392156862746, 0.5607843137254902, 0.7294117647058823],
 * [0.45098039215686275, 0.7450980392156863, 0.8274509803921568],             # <<<<<<<<<<<<<<
 * [0.6431372549019608, 0.8666666666666667, 0.8588235294117647],
 * [0.09803921568627451, 0.2, 0.17647058823529413],
 */
  __pyx_t_68 = PyList_New(3); if (unlikely(!__pyx_t_68)) __PYX_ERR(1, 759, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_68);
  __Pyx_INCREF(__pyx_float_0_45098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_45098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 0, __pyx_float_0_45098039215686275)) __PYX_ERR(1, 759, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_7450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 1, __pyx_float_0_7450980392156863)) __PYX_ERR(1, 759, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8274509803921568);
  __Pyx_GIVEREF(__pyx_float_0_8274509803921568);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 2, __pyx_float_0_8274509803921568)) __PYX_ERR(1, 759, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":760
 * [0.30980392156862746, 0.5607843137254902, 0.7294117647058823],
 * [0.45098039215686275, 0.7450980392156863, 0.8274509803921568],
 * [0.6431372549019608, 0.8666666666666667, 0.8588235294117647],             # <<<<<<<<<<<<<<
 * [0.09803921568627451, 0.2, 0.17647058823529413],
 * [0.1450980392156863, 0.33725490196078434, 0.1803921568627451],
 */
  __pyx_t_67 = PyList_New(3); if (unlikely(!__pyx_t_67)) __PYX_ERR(1, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_67);
  __Pyx_INCREF(__pyx_float_0_6431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_6431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 0, __pyx_float_0_6431372549019608)) __PYX_ERR(1, 760, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_8666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 1, __pyx_float_0_8666666666666667)) __PYX_ERR(1, 760, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_8588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 2, __pyx_float_0_8588235294117647)) __PYX_ERR(1, 760, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":761
 * [0.45098039215686275, 0.7450980392156863, 0.8274509803921568],
 * [0.6431372549019608, 0.8666666666666667, 0.8588235294117647],
 * [0.09803921568627451, 0.2, 0.17647058823529413],             # <<<<<<<<<<<<<<
 * [0.1450980392156863, 0.33725490196078434, 0.1803921568627451],
 * [0.27450980392156865, 0.5098039215686274, 0.19607843137254902],
 */
  __pyx_t_66 = PyList_New(3); if (unlikely(!__pyx_t_66)) __PYX_ERR(1, 761, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_66);
  __Pyx_INCREF(__pyx_float_0_09803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_09803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 0, __pyx_float_0_09803921568627451)) __PYX_ERR(1, 761, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 1, __pyx_float_0_2)) __PYX_ERR(1, 761, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17647058823529413);
  __Pyx_GIVEREF(__pyx_float_0_17647058823529413);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 2, __pyx_float_0_17647058823529413)) __PYX_ERR(1, 761, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":762
 * [0.6431372549019608, 0.8666666666666667, 0.8588235294117647],
 * [0.09803921568627451, 0.2, 0.17647058823529413],
 * [0.1450980392156863, 0.33725490196078434, 0.1803921568627451],             # <<<<<<<<<<<<<<
 * [0.27450980392156865, 0.5098039215686274, 0.19607843137254902],
 * [0.4588235294117647, 0.6549019607843137, 0.2627450980392157],
 */
  __pyx_t_65 = PyList_New(3); if (unlikely(!__pyx_t_65)) __PYX_ERR(1, 762, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_65);
  __Pyx_INCREF(__pyx_float_0_1450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_1450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 0, __pyx_float_0_1450980392156863)) __PYX_ERR(1, 762, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_33725490196078434);
  __Pyx_GIVEREF(__pyx_float_0_33725490196078434);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 1, __pyx_float_0_33725490196078434)) __PYX_ERR(1, 762, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_1803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 2, __pyx_float_0_1803921568627451)) __PYX_ERR(1, 762, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":763
 * [0.09803921568627451, 0.2, 0.17647058823529413],
 * [0.1450980392156863, 0.33725490196078434, 0.1803921568627451],
 * [0.27450980392156865, 0.5098039215686274, 0.19607843137254902],             # <<<<<<<<<<<<<<
 * [0.4588235294117647, 0.6549019607843137, 0.2627450980392157],
 * [0.6588235294117647, 0.792156862745098, 0.34509803921568627],
 */
  __pyx_t_64 = PyList_New(3); if (unlikely(!__pyx_t_64)) __PYX_ERR(1, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_64);
  __Pyx_INCREF(__pyx_float_0_27450980392156865);
  __Pyx_GIVEREF(__pyx_float_0_27450980392156865);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 0, __pyx_float_0_27450980392156865)) __PYX_ERR(1, 763, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 1, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 763, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 2, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 763, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":764
 * [0.1450980392156863, 0.33725490196078434, 0.1803921568627451],
 * [0.27450980392156865, 0.5098039215686274, 0.19607843137254902],
 * [0.4588235294117647, 0.6549019607843137, 0.2627450980392157],             # <<<<<<<<<<<<<<
 * [0.6588235294117647, 0.792156862745098, 0.34509803921568627],
 * [0.8156862745098039, 0.8549019607843137, 0.5686274509803921],
 */
  __pyx_t_63 = PyList_New(3); if (unlikely(!__pyx_t_63)) __PYX_ERR(1, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_63);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 0, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 764, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_6549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 1, __pyx_float_0_6549019607843137)) __PYX_ERR(1, 764, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_2627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 2, __pyx_float_0_2627450980392157)) __PYX_ERR(1, 764, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":765
 * [0.27450980392156865, 0.5098039215686274, 0.19607843137254902],
 * [0.4588235294117647, 0.6549019607843137, 0.2627450980392157],
 * [0.6588235294117647, 0.792156862745098, 0.34509803921568627],             # <<<<<<<<<<<<<<
 * [0.8156862745098039, 0.8549019607843137, 0.5686274509803921],
 * [0.30196078431372547, 0.16862745098039217, 0.19607843137254902],
 */
  __pyx_t_62 = PyList_New(3); if (unlikely(!__pyx_t_62)) __PYX_ERR(1, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_62);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 0, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 765, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_792156862745098);
  __Pyx_GIVEREF(__pyx_float_0_792156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 1, __pyx_float_0_792156862745098)) __PYX_ERR(1, 765, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 2, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 765, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":766
 * [0.4588235294117647, 0.6549019607843137, 0.2627450980392157],
 * [0.6588235294117647, 0.792156862745098, 0.34509803921568627],
 * [0.8156862745098039, 0.8549019607843137, 0.5686274509803921],             # <<<<<<<<<<<<<<
 * [0.30196078431372547, 0.16862745098039217, 0.19607843137254902],
 * [0.47843137254901963, 0.2823529411764706, 0.2549019607843137],
 */
  __pyx_t_61 = PyList_New(3); if (unlikely(!__pyx_t_61)) __PYX_ERR(1, 766, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_61);
  __Pyx_INCREF(__pyx_float_0_8156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_8156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 0, __pyx_float_0_8156862745098039)) __PYX_ERR(1, 766, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_8549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 1, __pyx_float_0_8549019607843137)) __PYX_ERR(1, 766, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5686274509803921);
  __Pyx_GIVEREF(__pyx_float_0_5686274509803921);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 2, __pyx_float_0_5686274509803921)) __PYX_ERR(1, 766, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":767
 * [0.6588235294117647, 0.792156862745098, 0.34509803921568627],
 * [0.8156862745098039, 0.8549019607843137, 0.5686274509803921],
 * [0.30196078431372547, 0.16862745098039217, 0.19607843137254902],             # <<<<<<<<<<<<<<
 * [0.47843137254901963, 0.2823529411764706, 0.2549019607843137],
 * [0.6784313725490196, 0.4666666666666667, 0.3411764705882353],
 */
  __pyx_t_60 = PyList_New(3); if (unlikely(!__pyx_t_60)) __PYX_ERR(1, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_60);
  __Pyx_INCREF(__pyx_float_0_30196078431372547);
  __Pyx_GIVEREF(__pyx_float_0_30196078431372547);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 0, __pyx_float_0_30196078431372547)) __PYX_ERR(1, 767, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 1, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 767, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 2, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 767, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":768
 * [0.8156862745098039, 0.8549019607843137, 0.5686274509803921],
 * [0.30196078431372547, 0.16862745098039217, 0.19607843137254902],
 * [0.47843137254901963, 0.2823529411764706, 0.2549019607843137],             # <<<<<<<<<<<<<<
 * [0.6784313725490196, 0.4666666666666667, 0.3411764705882353],
 * [0.7529411764705882, 0.5803921568627451, 0.45098039215686275],
 */
  __pyx_t_59 = PyList_New(3); if (unlikely(!__pyx_t_59)) __PYX_ERR(1, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_59);
  __Pyx_INCREF(__pyx_float_0_47843137254901963);
  __Pyx_GIVEREF(__pyx_float_0_47843137254901963);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 0, __pyx_float_0_47843137254901963)) __PYX_ERR(1, 768, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_2823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 1, __pyx_float_0_2823529411764706)) __PYX_ERR(1, 768, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 2, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 768, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":769
 * [0.30196078431372547, 0.16862745098039217, 0.19607843137254902],
 * [0.47843137254901963, 0.2823529411764706, 0.2549019607843137],
 * [0.6784313725490196, 0.4666666666666667, 0.3411764705882353],             # <<<<<<<<<<<<<<
 * [0.7529411764705882, 0.5803921568627451, 0.45098039215686275],
 * [0.8431372549019608, 0.7098039215686275, 0.5803921568627451],
 */
  __pyx_t_58 = PyList_New(3); if (unlikely(!__pyx_t_58)) __PYX_ERR(1, 769, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_58);
  __Pyx_INCREF(__pyx_float_0_6784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_6784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 0, __pyx_float_0_6784313725490196)) __PYX_ERR(1, 769, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_4666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 1, __pyx_float_0_4666666666666667)) __PYX_ERR(1, 769, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_3411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 2, __pyx_float_0_3411764705882353)) __PYX_ERR(1, 769, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":770
 * [0.47843137254901963, 0.2823529411764706, 0.2549019607843137],
 * [0.6784313725490196, 0.4666666666666667, 0.3411764705882353],
 * [0.7529411764705882, 0.5803921568627451, 0.45098039215686275],             # <<<<<<<<<<<<<<
 * [0.8431372549019608, 0.7098039215686275, 0.5803921568627451],
 * [0.9058823529411765, 0.8352941176470589, 0.7019607843137254],
 */
  __pyx_t_57 = PyList_New(3); if (unlikely(!__pyx_t_57)) __PYX_ERR(1, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_57);
  __Pyx_INCREF(__pyx_float_0_7529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_7529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 0, __pyx_float_0_7529411764705882)) __PYX_ERR(1, 770, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_5803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 1, __pyx_float_0_5803921568627451)) __PYX_ERR(1, 770, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_45098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_45098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 2, __pyx_float_0_45098039215686275)) __PYX_ERR(1, 770, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":771
 * [0.6784313725490196, 0.4666666666666667, 0.3411764705882353],
 * [0.7529411764705882, 0.5803921568627451, 0.45098039215686275],
 * [0.8431372549019608, 0.7098039215686275, 0.5803921568627451],             # <<<<<<<<<<<<<<
 * [0.9058823529411765, 0.8352941176470589, 0.7019607843137254],
 * [0.20392156862745098, 0.10980392156862745, 0.15294117647058825],
 */
  __pyx_t_56 = PyList_New(3); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 771, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_56);
  __Pyx_INCREF(__pyx_float_0_8431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_8431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 0, __pyx_float_0_8431372549019608)) __PYX_ERR(1, 771, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 1, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 771, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_5803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 2, __pyx_float_0_5803921568627451)) __PYX_ERR(1, 771, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":772
 * [0.7529411764705882, 0.5803921568627451, 0.45098039215686275],
 * [0.8431372549019608, 0.7098039215686275, 0.5803921568627451],
 * [0.9058823529411765, 0.8352941176470589, 0.7019607843137254],             # <<<<<<<<<<<<<<
 * [0.20392156862745098, 0.10980392156862745, 0.15294117647058825],
 * [0.3764705882352941, 0.17254901960784313, 0.17254901960784313],
 */
  __pyx_t_55 = PyList_New(3); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 772, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);
  __Pyx_INCREF(__pyx_float_0_9058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_9058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 0, __pyx_float_0_9058823529411765)) __PYX_ERR(1, 772, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8352941176470589);
  __Pyx_GIVEREF(__pyx_float_0_8352941176470589);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 1, __pyx_float_0_8352941176470589)) __PYX_ERR(1, 772, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7019607843137254);
  __Pyx_GIVEREF(__pyx_float_0_7019607843137254);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 2, __pyx_float_0_7019607843137254)) __PYX_ERR(1, 772, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":773
 * [0.8431372549019608, 0.7098039215686275, 0.5803921568627451],
 * [0.9058823529411765, 0.8352941176470589, 0.7019607843137254],
 * [0.20392156862745098, 0.10980392156862745, 0.15294117647058825],             # <<<<<<<<<<<<<<
 * [0.3764705882352941, 0.17254901960784313, 0.17254901960784313],
 * [0.5333333333333333, 0.29411764705882354, 0.16862745098039217],
 */
  __pyx_t_54 = PyList_New(3); if (unlikely(!__pyx_t_54)) __PYX_ERR(1, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_54);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 0, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 773, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_10980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 1, __pyx_float_0_10980392156862745)) __PYX_ERR(1, 773, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 2, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 773, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":774
 * [0.9058823529411765, 0.8352941176470589, 0.7019607843137254],
 * [0.20392156862745098, 0.10980392156862745, 0.15294117647058825],
 * [0.3764705882352941, 0.17254901960784313, 0.17254901960784313],             # <<<<<<<<<<<<<<
 * [0.5333333333333333, 0.29411764705882354, 0.16862745098039217],
 * [0.7450980392156863, 0.4666666666666667, 0.16862745098039217],
 */
  __pyx_t_53 = PyList_New(3); if (unlikely(!__pyx_t_53)) __PYX_ERR(1, 774, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_53);
  __Pyx_INCREF(__pyx_float_0_3764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_3764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 0, __pyx_float_0_3764705882352941)) __PYX_ERR(1, 774, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 1, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 774, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 2, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 774, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":775
 * [0.20392156862745098, 0.10980392156862745, 0.15294117647058825],
 * [0.3764705882352941, 0.17254901960784313, 0.17254901960784313],
 * [0.5333333333333333, 0.29411764705882354, 0.16862745098039217],             # <<<<<<<<<<<<<<
 * [0.7450980392156863, 0.4666666666666667, 0.16862745098039217],
 * [0.8705882352941177, 0.6196078431372549, 0.2549019607843137],
 */
  __pyx_t_52 = PyList_New(3); if (unlikely(!__pyx_t_52)) __PYX_ERR(1, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_52);
  __Pyx_INCREF(__pyx_float_0_5333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_5333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 0, __pyx_float_0_5333333333333333)) __PYX_ERR(1, 775, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_29411764705882354);
  __Pyx_GIVEREF(__pyx_float_0_29411764705882354);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 1, __pyx_float_0_29411764705882354)) __PYX_ERR(1, 775, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 2, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 775, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":776
 * [0.3764705882352941, 0.17254901960784313, 0.17254901960784313],
 * [0.5333333333333333, 0.29411764705882354, 0.16862745098039217],
 * [0.7450980392156863, 0.4666666666666667, 0.16862745098039217],             # <<<<<<<<<<<<<<
 * [0.8705882352941177, 0.6196078431372549, 0.2549019607843137],
 * [0.9098039215686274, 0.7568627450980392, 0.4392156862745098],
 */
  __pyx_t_51 = PyList_New(3); if (unlikely(!__pyx_t_51)) __PYX_ERR(1, 776, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_51);
  __Pyx_INCREF(__pyx_float_0_7450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_7450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 0, __pyx_float_0_7450980392156863)) __PYX_ERR(1, 776, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_4666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 1, __pyx_float_0_4666666666666667)) __PYX_ERR(1, 776, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 2, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 776, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":777
 * [0.5333333333333333, 0.29411764705882354, 0.16862745098039217],
 * [0.7450980392156863, 0.4666666666666667, 0.16862745098039217],
 * [0.8705882352941177, 0.6196078431372549, 0.2549019607843137],             # <<<<<<<<<<<<<<
 * [0.9098039215686274, 0.7568627450980392, 0.4392156862745098],
 * [0.1411764705882353, 0.08235294117647059, 0.15294117647058825],
 */
  __pyx_t_50 = PyList_New(3); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 777, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_50);
  __Pyx_INCREF(__pyx_float_0_8705882352941177);
  __Pyx_GIVEREF(__pyx_float_0_8705882352941177);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 0, __pyx_float_0_8705882352941177)) __PYX_ERR(1, 777, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_6196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 1, __pyx_float_0_6196078431372549)) __PYX_ERR(1, 777, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 2, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 777, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":778
 * [0.7450980392156863, 0.4666666666666667, 0.16862745098039217],
 * [0.8705882352941177, 0.6196078431372549, 0.2549019607843137],
 * [0.9098039215686274, 0.7568627450980392, 0.4392156862745098],             # <<<<<<<<<<<<<<
 * [0.1411764705882353, 0.08235294117647059, 0.15294117647058825],
 * [0.2549019607843137, 0.11372549019607843, 0.19215686274509805],
 */
  __pyx_t_49 = PyList_New(3); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_49);
  __Pyx_INCREF(__pyx_float_0_9098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_9098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 0, __pyx_float_0_9098039215686274)) __PYX_ERR(1, 778, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_7568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 1, __pyx_float_0_7568627450980392)) __PYX_ERR(1, 778, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_4392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 2, __pyx_float_0_4392156862745098)) __PYX_ERR(1, 778, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":779
 * [0.8705882352941177, 0.6196078431372549, 0.2549019607843137],
 * [0.9098039215686274, 0.7568627450980392, 0.4392156862745098],
 * [0.1411764705882353, 0.08235294117647059, 0.15294117647058825],             # <<<<<<<<<<<<<<
 * [0.2549019607843137, 0.11372549019607843, 0.19215686274509805],
 * [0.4588235294117647, 0.1411764705882353, 0.2196078431372549],
 */
  __pyx_t_48 = PyList_New(3); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 779, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __Pyx_INCREF(__pyx_float_0_1411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_1411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 0, __pyx_float_0_1411764705882353)) __PYX_ERR(1, 779, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 1, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 779, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 2, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 779, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":780
 * [0.9098039215686274, 0.7568627450980392, 0.4392156862745098],
 * [0.1411764705882353, 0.08235294117647059, 0.15294117647058825],
 * [0.2549019607843137, 0.11372549019607843, 0.19215686274509805],             # <<<<<<<<<<<<<<
 * [0.4588235294117647, 0.1411764705882353, 0.2196078431372549],
 * [0.6470588235294118, 0.18823529411764706, 0.18823529411764706],
 */
  __pyx_t_47 = PyList_New(3); if (unlikely(!__pyx_t_47)) __PYX_ERR(1, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 0, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 780, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_11372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 1, __pyx_float_0_11372549019607843)) __PYX_ERR(1, 780, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 2, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 780, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":781
 * [0.1411764705882353, 0.08235294117647059, 0.15294117647058825],
 * [0.2549019607843137, 0.11372549019607843, 0.19215686274509805],
 * [0.4588235294117647, 0.1411764705882353, 0.2196078431372549],             # <<<<<<<<<<<<<<
 * [0.6470588235294118, 0.18823529411764706, 0.18823529411764706],
 * [0.8117647058823529, 0.3411764705882353, 0.23529411764705882],
 */
  __pyx_t_46 = PyList_New(3); if (unlikely(!__pyx_t_46)) __PYX_ERR(1, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_46);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 0, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 781, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_1411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 1, __pyx_float_0_1411764705882353)) __PYX_ERR(1, 781, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_2196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 2, __pyx_float_0_2196078431372549)) __PYX_ERR(1, 781, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":782
 * [0.2549019607843137, 0.11372549019607843, 0.19215686274509805],
 * [0.4588235294117647, 0.1411764705882353, 0.2196078431372549],
 * [0.6470588235294118, 0.18823529411764706, 0.18823529411764706],             # <<<<<<<<<<<<<<
 * [0.8117647058823529, 0.3411764705882353, 0.23529411764705882],
 * [0.8549019607843137, 0.5254901960784314, 0.24313725490196078],
 */
  __pyx_t_45 = PyList_New(3); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 782, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 0, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 782, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_18823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_18823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 1, __pyx_float_0_18823529411764706)) __PYX_ERR(1, 782, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_18823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_18823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 2, __pyx_float_0_18823529411764706)) __PYX_ERR(1, 782, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":783
 * [0.4588235294117647, 0.1411764705882353, 0.2196078431372549],
 * [0.6470588235294118, 0.18823529411764706, 0.18823529411764706],
 * [0.8117647058823529, 0.3411764705882353, 0.23529411764705882],             # <<<<<<<<<<<<<<
 * [0.8549019607843137, 0.5254901960784314, 0.24313725490196078],
 * [0.11764705882352941, 0.11372549019607843, 0.2235294117647059],
 */
  __pyx_t_44 = PyList_New(3); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_INCREF(__pyx_float_0_8117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_8117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 0, __pyx_float_0_8117647058823529)) __PYX_ERR(1, 783, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_3411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 1, __pyx_float_0_3411764705882353)) __PYX_ERR(1, 783, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 2, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 783, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":784
 * [0.6470588235294118, 0.18823529411764706, 0.18823529411764706],
 * [0.8117647058823529, 0.3411764705882353, 0.23529411764705882],
 * [0.8549019607843137, 0.5254901960784314, 0.24313725490196078],             # <<<<<<<<<<<<<<
 * [0.11764705882352941, 0.11372549019607843, 0.2235294117647059],
 * [0.25098039215686274, 0.15294117647058825, 0.3176470588235294],
 */
  __pyx_t_43 = PyList_New(3); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_INCREF(__pyx_float_0_8549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_8549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 0, __pyx_float_0_8549019607843137)) __PYX_ERR(1, 784, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_5254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 1, __pyx_float_0_5254901960784314)) __PYX_ERR(1, 784, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_24313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 2, __pyx_float_0_24313725490196078)) __PYX_ERR(1, 784, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":785
 * [0.8117647058823529, 0.3411764705882353, 0.23529411764705882],
 * [0.8549019607843137, 0.5254901960784314, 0.24313725490196078],
 * [0.11764705882352941, 0.11372549019607843, 0.2235294117647059],             # <<<<<<<<<<<<<<
 * [0.25098039215686274, 0.15294117647058825, 0.3176470588235294],
 * [0.47843137254901963, 0.21176470588235294, 0.4823529411764706],
 */
  __pyx_t_42 = PyList_New(3); if (unlikely(!__pyx_t_42)) __PYX_ERR(1, 785, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __Pyx_INCREF(__pyx_float_0_11764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_11764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 0, __pyx_float_0_11764705882352941)) __PYX_ERR(1, 785, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_11372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 1, __pyx_float_0_11372549019607843)) __PYX_ERR(1, 785, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 2, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 785, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":786
 * [0.8549019607843137, 0.5254901960784314, 0.24313725490196078],
 * [0.11764705882352941, 0.11372549019607843, 0.2235294117647059],
 * [0.25098039215686274, 0.15294117647058825, 0.3176470588235294],             # <<<<<<<<<<<<<<
 * [0.47843137254901963, 0.21176470588235294, 0.4823529411764706],
 * [0.6352941176470588, 0.24313725490196078, 0.5490196078431373],
 */
  __pyx_t_41 = PyList_New(3); if (unlikely(!__pyx_t_41)) __PYX_ERR(1, 786, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  __Pyx_INCREF(__pyx_float_0_25098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_25098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 0, __pyx_float_0_25098039215686274)) __PYX_ERR(1, 786, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 1, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 786, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_3176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 2, __pyx_float_0_3176470588235294)) __PYX_ERR(1, 786, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":787
 * [0.11764705882352941, 0.11372549019607843, 0.2235294117647059],
 * [0.25098039215686274, 0.15294117647058825, 0.3176470588235294],
 * [0.47843137254901963, 0.21176470588235294, 0.4823529411764706],             # <<<<<<<<<<<<<<
 * [0.6352941176470588, 0.24313725490196078, 0.5490196078431373],
 * [0.7764705882352941, 0.3176470588235294, 0.592156862745098],
 */
  __pyx_t_40 = PyList_New(3); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_INCREF(__pyx_float_0_47843137254901963);
  __Pyx_GIVEREF(__pyx_float_0_47843137254901963);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 0, __pyx_float_0_47843137254901963)) __PYX_ERR(1, 787, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_21176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 1, __pyx_float_0_21176470588235294)) __PYX_ERR(1, 787, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 2, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 787, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":788
 * [0.25098039215686274, 0.15294117647058825, 0.3176470588235294],
 * [0.47843137254901963, 0.21176470588235294, 0.4823529411764706],
 * [0.6352941176470588, 0.24313725490196078, 0.5490196078431373],             # <<<<<<<<<<<<<<
 * [0.7764705882352941, 0.3176470588235294, 0.592156862745098],
 * [0.8745098039215686, 0.5176470588235295, 0.6470588235294118],
 */
  __pyx_t_39 = PyList_New(3); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_INCREF(__pyx_float_0_6352941176470588);
  __Pyx_GIVEREF(__pyx_float_0_6352941176470588);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 0, __pyx_float_0_6352941176470588)) __PYX_ERR(1, 788, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_24313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 1, __pyx_float_0_24313725490196078)) __PYX_ERR(1, 788, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_5490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 2, __pyx_float_0_5490196078431373)) __PYX_ERR(1, 788, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":789
 * [0.47843137254901963, 0.21176470588235294, 0.4823529411764706],
 * [0.6352941176470588, 0.24313725490196078, 0.5490196078431373],
 * [0.7764705882352941, 0.3176470588235294, 0.592156862745098],             # <<<<<<<<<<<<<<
 * [0.8745098039215686, 0.5176470588235295, 0.6470588235294118],
 * [0.03529411764705882, 0.0392156862745098, 0.0784313725490196],
 */
  __pyx_t_38 = PyList_New(3); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __Pyx_INCREF(__pyx_float_0_7764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_7764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 0, __pyx_float_0_7764705882352941)) __PYX_ERR(1, 789, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_3176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 1, __pyx_float_0_3176470588235294)) __PYX_ERR(1, 789, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 2, __pyx_float_0_592156862745098)) __PYX_ERR(1, 789, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":790
 * [0.6352941176470588, 0.24313725490196078, 0.5490196078431373],
 * [0.7764705882352941, 0.3176470588235294, 0.592156862745098],
 * [0.8745098039215686, 0.5176470588235295, 0.6470588235294118],             # <<<<<<<<<<<<<<
 * [0.03529411764705882, 0.0392156862745098, 0.0784313725490196],
 * [0.06274509803921569, 0.0784313725490196, 0.12156862745098039],
 */
  __pyx_t_35 = PyList_New(3); if (unlikely(!__pyx_t_35)) __PYX_ERR(1, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __Pyx_INCREF(__pyx_float_0_8745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_8745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 0, __pyx_float_0_8745098039215686)) __PYX_ERR(1, 790, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5176470588235295);
  __Pyx_GIVEREF(__pyx_float_0_5176470588235295);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 1, __pyx_float_0_5176470588235295)) __PYX_ERR(1, 790, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 2, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 790, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":791
 * [0.7764705882352941, 0.3176470588235294, 0.592156862745098],
 * [0.8745098039215686, 0.5176470588235295, 0.6470588235294118],
 * [0.03529411764705882, 0.0392156862745098, 0.0784313725490196],             # <<<<<<<<<<<<<<
 * [0.06274509803921569, 0.0784313725490196, 0.12156862745098039],
 * [0.08235294117647059, 0.11372549019607843, 0.1568627450980392],
 */
  __pyx_t_24 = PyList_New(3); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 791, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_INCREF(__pyx_float_0_03529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_03529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 0, __pyx_float_0_03529411764705882)) __PYX_ERR(1, 791, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_0392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 1, __pyx_float_0_0392156862745098)) __PYX_ERR(1, 791, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_0784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 2, __pyx_float_0_0784313725490196)) __PYX_ERR(1, 791, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":792
 * [0.8745098039215686, 0.5176470588235295, 0.6470588235294118],
 * [0.03529411764705882, 0.0392156862745098, 0.0784313725490196],
 * [0.06274509803921569, 0.0784313725490196, 0.12156862745098039],             # <<<<<<<<<<<<<<
 * [0.08235294117647059, 0.11372549019607843, 0.1568627450980392],
 * [0.12549019607843137, 0.1803921568627451, 0.21568627450980393],
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_float_0_06274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_06274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_float_0_06274509803921569)) __PYX_ERR(1, 792, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_0784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_float_0_0784313725490196)) __PYX_ERR(1, 792, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_12156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_float_0_12156862745098039)) __PYX_ERR(1, 792, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":793
 * [0.03529411764705882, 0.0392156862745098, 0.0784313725490196],
 * [0.06274509803921569, 0.0784313725490196, 0.12156862745098039],
 * [0.08235294117647059, 0.11372549019607843, 0.1568627450980392],             # <<<<<<<<<<<<<<
 * [0.12549019607843137, 0.1803921568627451, 0.21568627450980393],
 * [0.2235294117647059, 0.2901960784313726, 0.3137254901960784],
 */
  __pyx_t_25 = PyList_New(3); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 793, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 793, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_11372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_float_0_11372549019607843)) __PYX_ERR(1, 793, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 793, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":794
 * [0.06274509803921569, 0.0784313725490196, 0.12156862745098039],
 * [0.08235294117647059, 0.11372549019607843, 0.1568627450980392],
 * [0.12549019607843137, 0.1803921568627451, 0.21568627450980393],             # <<<<<<<<<<<<<<
 * [0.2235294117647059, 0.2901960784313726, 0.3137254901960784],
 * [0.3411764705882353, 0.4470588235294118, 0.4666666666666667],
 */
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_float_0_12549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_12549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_float_0_12549019607843137)) __PYX_ERR(1, 794, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_1803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_float_0_1803921568627451)) __PYX_ERR(1, 794, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 794, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":795
 * [0.08235294117647059, 0.11372549019607843, 0.1568627450980392],
 * [0.12549019607843137, 0.1803921568627451, 0.21568627450980393],
 * [0.2235294117647059, 0.2901960784313726, 0.3137254901960784],             # <<<<<<<<<<<<<<
 * [0.3411764705882353, 0.4470588235294118, 0.4666666666666667],
 * [0.5058823529411764, 0.592156862745098, 0.5882352941176471],
 */
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 795, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2901960784313726);
  __Pyx_GIVEREF(__pyx_float_0_2901960784313726);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_float_0_2901960784313726)) __PYX_ERR(1, 795, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_3137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_float_0_3137254901960784)) __PYX_ERR(1, 795, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":796
 * [0.12549019607843137, 0.1803921568627451, 0.21568627450980393],
 * [0.2235294117647059, 0.2901960784313726, 0.3137254901960784],
 * [0.3411764705882353, 0.4470588235294118, 0.4666666666666667],             # <<<<<<<<<<<<<<
 * [0.5058823529411764, 0.592156862745098, 0.5882352941176471],
 * [0.6588235294117647, 0.7098039215686275, 0.6980392156862745],
 */
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_INCREF(__pyx_float_0_3411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_3411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_float_0_3411764705882353)) __PYX_ERR(1, 796, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_4470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_float_0_4470588235294118)) __PYX_ERR(1, 796, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_4666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_float_0_4666666666666667)) __PYX_ERR(1, 796, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":797
 * [0.2235294117647059, 0.2901960784313726, 0.3137254901960784],
 * [0.3411764705882353, 0.4470588235294118, 0.4666666666666667],
 * [0.5058823529411764, 0.592156862745098, 0.5882352941176471],             # <<<<<<<<<<<<<<
 * [0.6588235294117647, 0.7098039215686275, 0.6980392156862745],
 * [0.7803921568627451, 0.8117647058823529, 0.8],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_5058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_5058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_5058823529411764)) __PYX_ERR(1, 797, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_592156862745098)) __PYX_ERR(1, 797, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_5882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_5882352941176471)) __PYX_ERR(1, 797, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":798
 * [0.3411764705882353, 0.4470588235294118, 0.4666666666666667],
 * [0.5058823529411764, 0.592156862745098, 0.5882352941176471],
 * [0.6588235294117647, 0.7098039215686275, 0.6980392156862745],             # <<<<<<<<<<<<<<
 * [0.7803921568627451, 0.8117647058823529, 0.8],
 * [0.9215686274509803, 0.9294117647058824, 0.9137254901960784]
 */
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 798, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 798, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_6980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_float_0_6980392156862745)) __PYX_ERR(1, 798, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":799
 * [0.5058823529411764, 0.592156862745098, 0.5882352941176471],
 * [0.6588235294117647, 0.7098039215686275, 0.6980392156862745],
 * [0.7803921568627451, 0.8117647058823529, 0.8],             # <<<<<<<<<<<<<<
 * [0.9215686274509803, 0.9294117647058824, 0.9137254901960784]
 * ], dtype=float32)
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_7803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_7803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_7803921568627451)) __PYX_ERR(1, 799, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_8117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_8117647058823529)) __PYX_ERR(1, 799, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8);
  __Pyx_GIVEREF(__pyx_float_0_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_8)) __PYX_ERR(1, 799, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":800
 * [0.6588235294117647, 0.7098039215686275, 0.6980392156862745],
 * [0.7803921568627451, 0.8117647058823529, 0.8],
 * [0.9215686274509803, 0.9294117647058824, 0.9137254901960784]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * APOLLO =_APOLLO_NORMALIZED * <float>255.0
 */
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 800, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_9294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_float_0_9294117647058824)) __PYX_ERR(1, 800, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_9137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_float_0_9137254901960784)) __PYX_ERR(1, 800, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":754
 * # https://lospec.com/palette-list/apollo
 * # Created by AdamCYounis
 * _APOLLO_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.09019607843137255, 0.12549019607843137, 0.2196078431372549],
 * [0.1450980392156863, 0.22745098039215686, 0.3686274509803922],
 */
  __pyx_t_19 = PyList_New(46); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GIVEREF(__pyx_t_72);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_t_72)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_70);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_t_70)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_t_15)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_69);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 3, __pyx_t_69)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_68);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 4, __pyx_t_68)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_67);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 5, __pyx_t_67)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_66);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 6, __pyx_t_66)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_65);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 7, __pyx_t_65)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_64);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 8, __pyx_t_64)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_63);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 9, __pyx_t_63)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_62);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 10, __pyx_t_62)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_61);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 11, __pyx_t_61)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_60);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 12, __pyx_t_60)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_59);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 13, __pyx_t_59)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_58);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 14, __pyx_t_58)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_57);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 15, __pyx_t_57)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_56);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 16, __pyx_t_56)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_55);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 17, __pyx_t_55)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_54);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 18, __pyx_t_54)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_53);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 19, __pyx_t_53)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_52);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 20, __pyx_t_52)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_51);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 21, __pyx_t_51)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_50);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 22, __pyx_t_50)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_49);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 23, __pyx_t_49)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_48);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 24, __pyx_t_48)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_47);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 25, __pyx_t_47)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_46);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 26, __pyx_t_46)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_45);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 27, __pyx_t_45)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_44);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 28, __pyx_t_44)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_43);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 29, __pyx_t_43)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_42);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 30, __pyx_t_42)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_41);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 31, __pyx_t_41)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_40);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 32, __pyx_t_40)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_39);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 33, __pyx_t_39)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_38);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 34, __pyx_t_38)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_35);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 35, __pyx_t_35)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 36, __pyx_t_24)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 37, __pyx_t_18)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 38, __pyx_t_25)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 39, __pyx_t_13)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 40, __pyx_t_14)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 41, __pyx_t_36)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 42, __pyx_t_4)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 43, __pyx_t_37)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 44, __pyx_t_16)) __PYX_ERR(1, 754, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 45, __pyx_t_26)) __PYX_ERR(1, 754, __pyx_L1_error);
  __pyx_t_72 = 0;
  __pyx_t_70 = 0;
  __pyx_t_15 = 0;
  __pyx_t_69 = 0;
  __pyx_t_68 = 0;
  __pyx_t_67 = 0;
  __pyx_t_66 = 0;
  __pyx_t_65 = 0;
  __pyx_t_64 = 0;
  __pyx_t_63 = 0;
  __pyx_t_62 = 0;
  __pyx_t_61 = 0;
  __pyx_t_60 = 0;
  __pyx_t_59 = 0;
  __pyx_t_58 = 0;
  __pyx_t_57 = 0;
  __pyx_t_56 = 0;
  __pyx_t_55 = 0;
  __pyx_t_54 = 0;
  __pyx_t_53 = 0;
  __pyx_t_52 = 0;
  __pyx_t_51 = 0;
  __pyx_t_50 = 0;
  __pyx_t_49 = 0;
  __pyx_t_48 = 0;
  __pyx_t_47 = 0;
  __pyx_t_46 = 0;
  __pyx_t_45 = 0;
  __pyx_t_44 = 0;
  __pyx_t_43 = 0;
  __pyx_t_42 = 0;
  __pyx_t_41 = 0;
  __pyx_t_40 = 0;
  __pyx_t_39 = 0;
  __pyx_t_38 = 0;
  __pyx_t_35 = 0;
  __pyx_t_24 = 0;
  __pyx_t_18 = 0;
  __pyx_t_25 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_36 = 0;
  __pyx_t_4 = 0;
  __pyx_t_37 = 0;
  __pyx_t_16 = 0;
  __pyx_t_26 = 0;
  __pyx_t_26 = PyTuple_New(1); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_26, 0, __pyx_t_19)) __PYX_ERR(1, 754, __pyx_L1_error);
  __pyx_t_19 = 0;

  /* "PygameShader/Palette.pyx":801
 * [0.7803921568627451, 0.8117647058823529, 0.8],
 * [0.9215686274509803, 0.9294117647058824, 0.9137254901960784]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * APOLLO =_APOLLO_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_19 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_float32); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_19, __pyx_n_s_dtype, __pyx_t_16) < 0) __PYX_ERR(1, 801, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":754
 * # https://lospec.com/palette-list/apollo
 * # Created by AdamCYounis
 * _APOLLO_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.09019607843137255, 0.12549019607843137, 0.2196078431372549],
 * [0.1450980392156863, 0.22745098039215686, 0.3686274509803922],
 */
  __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_71, __pyx_t_26, __pyx_t_19); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 754, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_DECREF(__pyx_t_71); __pyx_t_71 = 0;
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APOLLO_NORMALIZED, __pyx_t_16) < 0) __PYX_ERR(1, 754, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "PygameShader/Palette.pyx":802
 * [0.9215686274509803, 0.9294117647058824, 0.9137254901960784]
 * ], dtype=float32)
 * APOLLO =_APOLLO_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * #https://lospec.com/palette-list/funkyfuture-8
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_APOLLO_NORMALIZED); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_19 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __pyx_t_26 = PyNumber_Multiply(__pyx_t_16, __pyx_t_19); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_APOLLO, __pyx_t_26) < 0) __PYX_ERR(1, 802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;

  /* "PygameShader/Palette.pyx":806
 * #https://lospec.com/palette-list/funkyfuture-8
 * # Created by Shamaboy
 * _FUNKYFUTURE_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.16862745098039217,0.058823529411764705,0.32941176470588235],
 * [0.6705882352941176,0.12156862745098039,0.396078431372549],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_26, __pyx_n_s_array); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);

  /* "PygameShader/Palette.pyx":807
 * # Created by Shamaboy
 * _FUNKYFUTURE_NORMALIZED = array([
 * [0.16862745098039217,0.058823529411764705,0.32941176470588235],             # <<<<<<<<<<<<<<
 * [0.6705882352941176,0.12156862745098039,0.396078431372549],
 * [1.0,0.30980392156862746,0.4117647058823529],
 */
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 807, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_058823529411764705);
  __Pyx_GIVEREF(__pyx_float_0_058823529411764705);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_float_0_058823529411764705)) __PYX_ERR(1, 807, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_32941176470588235);
  __Pyx_GIVEREF(__pyx_float_0_32941176470588235);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_float_0_32941176470588235)) __PYX_ERR(1, 807, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":808
 * _FUNKYFUTURE_NORMALIZED = array([
 * [0.16862745098039217,0.058823529411764705,0.32941176470588235],
 * [0.6705882352941176,0.12156862745098039,0.396078431372549],             # <<<<<<<<<<<<<<
 * [1.0,0.30980392156862746,0.4117647058823529],
 * [1.0,0.9686274509803922,0.9725490196078431],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 808, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_6705882352941176);
  __Pyx_GIVEREF(__pyx_float_0_6705882352941176);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_6705882352941176)) __PYX_ERR(1, 808, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_12156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_12156862745098039)) __PYX_ERR(1, 808, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_396078431372549);
  __Pyx_GIVEREF(__pyx_float_0_396078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_396078431372549)) __PYX_ERR(1, 808, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":809
 * [0.16862745098039217,0.058823529411764705,0.32941176470588235],
 * [0.6705882352941176,0.12156862745098039,0.396078431372549],
 * [1.0,0.30980392156862746,0.4117647058823529],             # <<<<<<<<<<<<<<
 * [1.0,0.9686274509803922,0.9725490196078431],
 * [1.0,0.5058823529411764,0.25882352941176473],
 */
  __pyx_t_71 = PyList_New(3); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_71);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 0, __pyx_float_1_0)) __PYX_ERR(1, 809, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_30980392156862746);
  __Pyx_GIVEREF(__pyx_float_0_30980392156862746);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 1, __pyx_float_0_30980392156862746)) __PYX_ERR(1, 809, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_4117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 2, __pyx_float_0_4117647058823529)) __PYX_ERR(1, 809, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":810
 * [0.6705882352941176,0.12156862745098039,0.396078431372549],
 * [1.0,0.30980392156862746,0.4117647058823529],
 * [1.0,0.9686274509803922,0.9725490196078431],             # <<<<<<<<<<<<<<
 * [1.0,0.5058823529411764,0.25882352941176473],
 * [1.0,0.8549019607843137,0.27058823529411763],
 */
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_float_1_0)) __PYX_ERR(1, 810, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_9686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_float_0_9686274509803922)) __PYX_ERR(1, 810, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_9725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_float_0_9725490196078431)) __PYX_ERR(1, 810, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":811
 * [1.0,0.30980392156862746,0.4117647058823529],
 * [1.0,0.9686274509803922,0.9725490196078431],
 * [1.0,0.5058823529411764,0.25882352941176473],             # <<<<<<<<<<<<<<
 * [1.0,0.8549019607843137,0.27058823529411763],
 * [0.2,0.40784313725490196,0.8627450980392157],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_1_0)) __PYX_ERR(1, 811, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_5058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_5058823529411764)) __PYX_ERR(1, 811, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_25882352941176473);
  __Pyx_GIVEREF(__pyx_float_0_25882352941176473);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_25882352941176473)) __PYX_ERR(1, 811, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":812
 * [1.0,0.9686274509803922,0.9725490196078431],
 * [1.0,0.5058823529411764,0.25882352941176473],
 * [1.0,0.8549019607843137,0.27058823529411763],             # <<<<<<<<<<<<<<
 * [0.2,0.40784313725490196,0.8627450980392157],
 * [0.28627450980392155,0.9058823529411765,0.9254901960784314]
 */
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_float_1_0)) __PYX_ERR(1, 812, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_8549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_float_0_8549019607843137)) __PYX_ERR(1, 812, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_27058823529411763);
  __Pyx_GIVEREF(__pyx_float_0_27058823529411763);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_float_0_27058823529411763)) __PYX_ERR(1, 812, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":813
 * [1.0,0.5058823529411764,0.25882352941176473],
 * [1.0,0.8549019607843137,0.27058823529411763],
 * [0.2,0.40784313725490196,0.8627450980392157],             # <<<<<<<<<<<<<<
 * [0.28627450980392155,0.9058823529411765,0.9254901960784314]
 * ], dtype=float32)
 */
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_float_0_2)) __PYX_ERR(1, 813, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 813, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_8627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_float_0_8627450980392157)) __PYX_ERR(1, 813, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":814
 * [1.0,0.8549019607843137,0.27058823529411763],
 * [0.2,0.40784313725490196,0.8627450980392157],
 * [0.28627450980392155,0.9058823529411765,0.9254901960784314]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * FUNKYFUTURE =_FUNKYFUTURE_NORMALIZED * <float>255.0
 */
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_float_0_28627450980392155);
  __Pyx_GIVEREF(__pyx_float_0_28627450980392155);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_float_0_28627450980392155)) __PYX_ERR(1, 814, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_9058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_float_0_9058823529411765)) __PYX_ERR(1, 814, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_9254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_float_0_9254901960784314)) __PYX_ERR(1, 814, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":806
 * #https://lospec.com/palette-list/funkyfuture-8
 * # Created by Shamaboy
 * _FUNKYFUTURE_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.16862745098039217,0.058823529411764705,0.32941176470588235],
 * [0.6705882352941176,0.12156862745098039,0.396078431372549],
 */
  __pyx_t_25 = PyList_New(8); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_t_19)) __PYX_ERR(1, 806, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_t_16)) __PYX_ERR(1, 806, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_71);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_t_71)) __PYX_ERR(1, 806, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 3, __pyx_t_37)) __PYX_ERR(1, 806, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 4, __pyx_t_4)) __PYX_ERR(1, 806, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 5, __pyx_t_36)) __PYX_ERR(1, 806, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 6, __pyx_t_14)) __PYX_ERR(1, 806, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 7, __pyx_t_13)) __PYX_ERR(1, 806, __pyx_L1_error);
  __pyx_t_19 = 0;
  __pyx_t_16 = 0;
  __pyx_t_71 = 0;
  __pyx_t_37 = 0;
  __pyx_t_4 = 0;
  __pyx_t_36 = 0;
  __pyx_t_14 = 0;
  __pyx_t_13 = 0;
  __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_25)) __PYX_ERR(1, 806, __pyx_L1_error);
  __pyx_t_25 = 0;

  /* "PygameShader/Palette.pyx":815
 * [0.2,0.40784313725490196,0.8627450980392157],
 * [0.28627450980392155,0.9058823529411765,0.9254901960784314]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * FUNKYFUTURE =_FUNKYFUTURE_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_25 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_float32); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  if (PyDict_SetItem(__pyx_t_25, __pyx_n_s_dtype, __pyx_t_14) < 0) __PYX_ERR(1, 815, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "PygameShader/Palette.pyx":806
 * #https://lospec.com/palette-list/funkyfuture-8
 * # Created by Shamaboy
 * _FUNKYFUTURE_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.16862745098039217,0.058823529411764705,0.32941176470588235],
 * [0.6705882352941176,0.12156862745098039,0.396078431372549],
 */
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_26, __pyx_t_13, __pyx_t_25); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 806, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_26); __pyx_t_26 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FUNKYFUTURE_NORMALIZED, __pyx_t_14) < 0) __PYX_ERR(1, 806, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "PygameShader/Palette.pyx":816
 * [0.28627450980392155,0.9058823529411765,0.9254901960784314]
 * ], dtype=float32)
 * FUNKYFUTURE =_FUNKYFUTURE_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * # https://lospec.com/palette-list/vinik24
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_FUNKYFUTURE_NORMALIZED); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_25 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __pyx_t_13 = PyNumber_Multiply(__pyx_t_14, __pyx_t_25); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 816, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  __Pyx_DECREF(__pyx_t_25); __pyx_t_25 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FUNKYFUTURE, __pyx_t_13) < 0) __PYX_ERR(1, 816, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "PygameShader/Palette.pyx":820
 * # https://lospec.com/palette-list/vinik24
 * # Created by Vinik
 * _VINIK24_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.43529411764705883,0.403921568627451,0.4627450980392157],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_array); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "PygameShader/Palette.pyx":821
 * # Created by Vinik
 * _VINIK24_NORMALIZED = array([
 * [0.0,0.0,0.0],             # <<<<<<<<<<<<<<
 * [0.43529411764705883,0.403921568627451,0.4627450980392157],
 * [0.6039215686274509,0.6039215686274509,0.592156862745098],
 */
  __pyx_t_25 = PyList_New(3); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 821, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_float_0_0)) __PYX_ERR(1, 821, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_float_0_0)) __PYX_ERR(1, 821, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_float_0_0)) __PYX_ERR(1, 821, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":822
 * _VINIK24_NORMALIZED = array([
 * [0.0,0.0,0.0],
 * [0.43529411764705883,0.403921568627451,0.4627450980392157],             # <<<<<<<<<<<<<<
 * [0.6039215686274509,0.6039215686274509,0.592156862745098],
 * [0.7725490196078432,0.8,0.7215686274509804],
 */
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 822, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_float_0_43529411764705883);
  __Pyx_GIVEREF(__pyx_float_0_43529411764705883);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_float_0_43529411764705883)) __PYX_ERR(1, 822, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_403921568627451);
  __Pyx_GIVEREF(__pyx_float_0_403921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_float_0_403921568627451)) __PYX_ERR(1, 822, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_4627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_float_0_4627450980392157)) __PYX_ERR(1, 822, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":823
 * [0.0,0.0,0.0],
 * [0.43529411764705883,0.403921568627451,0.4627450980392157],
 * [0.6039215686274509,0.6039215686274509,0.592156862745098],             # <<<<<<<<<<<<<<
 * [0.7725490196078432,0.8,0.7215686274509804],
 * [0.5450980392156862,0.3333333333333333,0.5019607843137255],
 */
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_INCREF(__pyx_float_0_6039215686274509);
  __Pyx_GIVEREF(__pyx_float_0_6039215686274509);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_float_0_6039215686274509)) __PYX_ERR(1, 823, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6039215686274509);
  __Pyx_GIVEREF(__pyx_float_0_6039215686274509);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_float_0_6039215686274509)) __PYX_ERR(1, 823, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_float_0_592156862745098)) __PYX_ERR(1, 823, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":824
 * [0.43529411764705883,0.403921568627451,0.4627450980392157],
 * [0.6039215686274509,0.6039215686274509,0.592156862745098],
 * [0.7725490196078432,0.8,0.7215686274509804],             # <<<<<<<<<<<<<<
 * [0.5450980392156862,0.3333333333333333,0.5019607843137255],
 * [0.7647058823529411,0.5333333333333333,0.5647058823529412],
 */
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 824, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8);
  __Pyx_GIVEREF(__pyx_float_0_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_float_0_8)) __PYX_ERR(1, 824, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_7215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_float_0_7215686274509804)) __PYX_ERR(1, 824, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":825
 * [0.6039215686274509,0.6039215686274509,0.592156862745098],
 * [0.7725490196078432,0.8,0.7215686274509804],
 * [0.5450980392156862,0.3333333333333333,0.5019607843137255],             # <<<<<<<<<<<<<<
 * [0.7647058823529411,0.5333333333333333,0.5647058823529412],
 * [0.6470588235294118,0.5764705882352941,0.6470588235294118],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 825, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_3333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_3333333333333333)) __PYX_ERR(1, 825, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_5019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_5019607843137255)) __PYX_ERR(1, 825, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":826
 * [0.7725490196078432,0.8,0.7215686274509804],
 * [0.5450980392156862,0.3333333333333333,0.5019607843137255],
 * [0.7647058823529411,0.5333333333333333,0.5647058823529412],             # <<<<<<<<<<<<<<
 * [0.6470588235294118,0.5764705882352941,0.6470588235294118],
 * [0.4,0.3764705882352941,0.5725490196078431],
 */
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 826, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_INCREF(__pyx_float_0_7647058823529411);
  __Pyx_GIVEREF(__pyx_float_0_7647058823529411);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_float_0_7647058823529411)) __PYX_ERR(1, 826, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_5333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_float_0_5333333333333333)) __PYX_ERR(1, 826, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_5647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_float_0_5647058823529412)) __PYX_ERR(1, 826, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":827
 * [0.5450980392156862,0.3333333333333333,0.5019607843137255],
 * [0.7647058823529411,0.5333333333333333,0.5647058823529412],
 * [0.6470588235294118,0.5764705882352941,0.6470588235294118],             # <<<<<<<<<<<<<<
 * [0.4,0.3764705882352941,0.5725490196078431],
 * [0.6039215686274509,0.30980392156862746,0.3137254901960784],
 */
  __pyx_t_71 = PyList_New(3); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_71);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 0, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 827, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_5764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 1, __pyx_float_0_5764705882352941)) __PYX_ERR(1, 827, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 2, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 827, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":828
 * [0.7647058823529411,0.5333333333333333,0.5647058823529412],
 * [0.6470588235294118,0.5764705882352941,0.6470588235294118],
 * [0.4,0.3764705882352941,0.5725490196078431],             # <<<<<<<<<<<<<<
 * [0.6039215686274509,0.30980392156862746,0.3137254901960784],
 * [0.7607843137254902,0.5529411764705883,0.4588235294117647],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_4);
  __Pyx_GIVEREF(__pyx_float_0_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_4)) __PYX_ERR(1, 828, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_3764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_3764705882352941)) __PYX_ERR(1, 828, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_5725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_5725490196078431)) __PYX_ERR(1, 828, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":829
 * [0.6470588235294118,0.5764705882352941,0.6470588235294118],
 * [0.4,0.3764705882352941,0.5725490196078431],
 * [0.6039215686274509,0.30980392156862746,0.3137254901960784],             # <<<<<<<<<<<<<<
 * [0.7607843137254902,0.5529411764705883,0.4588235294117647],
 * [0.48627450980392156,0.6313725490196078,0.7529411764705882],
 */
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_float_0_6039215686274509);
  __Pyx_GIVEREF(__pyx_float_0_6039215686274509);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_float_0_6039215686274509)) __PYX_ERR(1, 829, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_30980392156862746);
  __Pyx_GIVEREF(__pyx_float_0_30980392156862746);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_float_0_30980392156862746)) __PYX_ERR(1, 829, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_3137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_float_0_3137254901960784)) __PYX_ERR(1, 829, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":830
 * [0.4,0.3764705882352941,0.5725490196078431],
 * [0.6039215686274509,0.30980392156862746,0.3137254901960784],
 * [0.7607843137254902,0.5529411764705883,0.4588235294117647],             # <<<<<<<<<<<<<<
 * [0.48627450980392156,0.6313725490196078,0.7529411764705882],
 * [0.2549019607843137,0.41568627450980394,0.6392156862745098],
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_float_0_7607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_7607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_float_0_7607843137254902)) __PYX_ERR(1, 830, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5529411764705883);
  __Pyx_GIVEREF(__pyx_float_0_5529411764705883);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_float_0_5529411764705883)) __PYX_ERR(1, 830, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 830, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":831
 * [0.6039215686274509,0.30980392156862746,0.3137254901960784],
 * [0.7607843137254902,0.5529411764705883,0.4588235294117647],
 * [0.48627450980392156,0.6313725490196078,0.7529411764705882],             # <<<<<<<<<<<<<<
 * [0.2549019607843137,0.41568627450980394,0.6392156862745098],
 * [0.5529411764705883,0.3843137254901961,0.40784313725490196],
 */
  __pyx_t_24 = PyList_New(3); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_INCREF(__pyx_float_0_48627450980392156);
  __Pyx_GIVEREF(__pyx_float_0_48627450980392156);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 0, __pyx_float_0_48627450980392156)) __PYX_ERR(1, 831, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_6313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 1, __pyx_float_0_6313725490196078)) __PYX_ERR(1, 831, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_7529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 2, __pyx_float_0_7529411764705882)) __PYX_ERR(1, 831, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":832
 * [0.7607843137254902,0.5529411764705883,0.4588235294117647],
 * [0.48627450980392156,0.6313725490196078,0.7529411764705882],
 * [0.2549019607843137,0.41568627450980394,0.6392156862745098],             # <<<<<<<<<<<<<<
 * [0.5529411764705883,0.3843137254901961,0.40784313725490196],
 * [0.7450980392156863,0.5843137254901961,0.3607843137254902],
 */
  __pyx_t_35 = PyList_New(3); if (unlikely(!__pyx_t_35)) __PYX_ERR(1, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 0, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 832, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_41568627450980394);
  __Pyx_GIVEREF(__pyx_float_0_41568627450980394);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 1, __pyx_float_0_41568627450980394)) __PYX_ERR(1, 832, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_6392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 2, __pyx_float_0_6392156862745098)) __PYX_ERR(1, 832, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":833
 * [0.48627450980392156,0.6313725490196078,0.7529411764705882],
 * [0.2549019607843137,0.41568627450980394,0.6392156862745098],
 * [0.5529411764705883,0.3843137254901961,0.40784313725490196],             # <<<<<<<<<<<<<<
 * [0.7450980392156863,0.5843137254901961,0.3607843137254902],
 * [0.40784313725490196,0.6745098039215687,0.6627450980392157],
 */
  __pyx_t_38 = PyList_New(3); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 833, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __Pyx_INCREF(__pyx_float_0_5529411764705883);
  __Pyx_GIVEREF(__pyx_float_0_5529411764705883);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 0, __pyx_float_0_5529411764705883)) __PYX_ERR(1, 833, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 1, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 833, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 2, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 833, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":834
 * [0.2549019607843137,0.41568627450980394,0.6392156862745098],
 * [0.5529411764705883,0.3843137254901961,0.40784313725490196],
 * [0.7450980392156863,0.5843137254901961,0.3607843137254902],             # <<<<<<<<<<<<<<
 * [0.40784313725490196,0.6745098039215687,0.6627450980392157],
 * [0.2196078431372549,0.4392156862745098,0.5019607843137255],
 */
  __pyx_t_39 = PyList_New(3); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_INCREF(__pyx_float_0_7450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_7450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 0, __pyx_float_0_7450980392156863)) __PYX_ERR(1, 834, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_5843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 1, __pyx_float_0_5843137254901961)) __PYX_ERR(1, 834, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_3607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 2, __pyx_float_0_3607843137254902)) __PYX_ERR(1, 834, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":835
 * [0.5529411764705883,0.3843137254901961,0.40784313725490196],
 * [0.7450980392156863,0.5843137254901961,0.3607843137254902],
 * [0.40784313725490196,0.6745098039215687,0.6627450980392157],             # <<<<<<<<<<<<<<
 * [0.2196078431372549,0.4392156862745098,0.5019607843137255],
 * [0.43137254901960786,0.4117647058823529,0.3843137254901961],
 */
  __pyx_t_40 = PyList_New(3); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 0, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 835, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6745098039215687);
  __Pyx_GIVEREF(__pyx_float_0_6745098039215687);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 1, __pyx_float_0_6745098039215687)) __PYX_ERR(1, 835, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_6627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 2, __pyx_float_0_6627450980392157)) __PYX_ERR(1, 835, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":836
 * [0.7450980392156863,0.5843137254901961,0.3607843137254902],
 * [0.40784313725490196,0.6745098039215687,0.6627450980392157],
 * [0.2196078431372549,0.4392156862745098,0.5019607843137255],             # <<<<<<<<<<<<<<
 * [0.43137254901960786,0.4117647058823529,0.3843137254901961],
 * [0.5764705882352941,0.6313725490196078,0.403921568627451],
 */
  __pyx_t_41 = PyList_New(3); if (unlikely(!__pyx_t_41)) __PYX_ERR(1, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  __Pyx_INCREF(__pyx_float_0_2196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_2196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 0, __pyx_float_0_2196078431372549)) __PYX_ERR(1, 836, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_4392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 1, __pyx_float_0_4392156862745098)) __PYX_ERR(1, 836, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_5019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 2, __pyx_float_0_5019607843137255)) __PYX_ERR(1, 836, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":837
 * [0.40784313725490196,0.6745098039215687,0.6627450980392157],
 * [0.2196078431372549,0.4392156862745098,0.5019607843137255],
 * [0.43137254901960786,0.4117647058823529,0.3843137254901961],             # <<<<<<<<<<<<<<
 * [0.5764705882352941,0.6313725490196078,0.403921568627451],
 * [0.43137254901960786,0.6666666666666666,0.47058823529411764],
 */
  __pyx_t_42 = PyList_New(3); if (unlikely(!__pyx_t_42)) __PYX_ERR(1, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __Pyx_INCREF(__pyx_float_0_43137254901960786);
  __Pyx_GIVEREF(__pyx_float_0_43137254901960786);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 0, __pyx_float_0_43137254901960786)) __PYX_ERR(1, 837, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_4117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 1, __pyx_float_0_4117647058823529)) __PYX_ERR(1, 837, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 2, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 837, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":838
 * [0.2196078431372549,0.4392156862745098,0.5019607843137255],
 * [0.43137254901960786,0.4117647058823529,0.3843137254901961],
 * [0.5764705882352941,0.6313725490196078,0.403921568627451],             # <<<<<<<<<<<<<<
 * [0.43137254901960786,0.6666666666666666,0.47058823529411764],
 * [0.3333333333333333,0.4392156862745098,0.39215686274509803],
 */
  __pyx_t_43 = PyList_New(3); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_INCREF(__pyx_float_0_5764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_5764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 0, __pyx_float_0_5764705882352941)) __PYX_ERR(1, 838, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_6313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 1, __pyx_float_0_6313725490196078)) __PYX_ERR(1, 838, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_403921568627451);
  __Pyx_GIVEREF(__pyx_float_0_403921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 2, __pyx_float_0_403921568627451)) __PYX_ERR(1, 838, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":839
 * [0.43137254901960786,0.4117647058823529,0.3843137254901961],
 * [0.5764705882352941,0.6313725490196078,0.403921568627451],
 * [0.43137254901960786,0.6666666666666666,0.47058823529411764],             # <<<<<<<<<<<<<<
 * [0.3333333333333333,0.4392156862745098,0.39215686274509803],
 * [0.615686274509804,0.6235294117647059,0.4980392156862745],
 */
  __pyx_t_44 = PyList_New(3); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_INCREF(__pyx_float_0_43137254901960786);
  __Pyx_GIVEREF(__pyx_float_0_43137254901960786);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 0, __pyx_float_0_43137254901960786)) __PYX_ERR(1, 839, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_6666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 1, __pyx_float_0_6666666666666666)) __PYX_ERR(1, 839, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_47058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 2, __pyx_float_0_47058823529411764)) __PYX_ERR(1, 839, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":840
 * [0.5764705882352941,0.6313725490196078,0.403921568627451],
 * [0.43137254901960786,0.6666666666666666,0.47058823529411764],
 * [0.3333333333333333,0.4392156862745098,0.39215686274509803],             # <<<<<<<<<<<<<<
 * [0.615686274509804,0.6235294117647059,0.4980392156862745],
 * [0.49411764705882355,0.6196078431372549,0.6],
 */
  __pyx_t_45 = PyList_New(3); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 840, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_INCREF(__pyx_float_0_3333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_3333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 0, __pyx_float_0_3333333333333333)) __PYX_ERR(1, 840, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_4392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 1, __pyx_float_0_4392156862745098)) __PYX_ERR(1, 840, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 2, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 840, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":841
 * [0.43137254901960786,0.6666666666666666,0.47058823529411764],
 * [0.3333333333333333,0.4392156862745098,0.39215686274509803],
 * [0.615686274509804,0.6235294117647059,0.4980392156862745],             # <<<<<<<<<<<<<<
 * [0.49411764705882355,0.6196078431372549,0.6],
 * [0.36470588235294116,0.40784313725490196,0.4470588235294118],
 */
  __pyx_t_46 = PyList_New(3); if (unlikely(!__pyx_t_46)) __PYX_ERR(1, 841, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_46);
  __Pyx_INCREF(__pyx_float_0_615686274509804);
  __Pyx_GIVEREF(__pyx_float_0_615686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 0, __pyx_float_0_615686274509804)) __PYX_ERR(1, 841, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_6235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 1, __pyx_float_0_6235294117647059)) __PYX_ERR(1, 841, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_4980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 2, __pyx_float_0_4980392156862745)) __PYX_ERR(1, 841, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":842
 * [0.3333333333333333,0.4392156862745098,0.39215686274509803],
 * [0.615686274509804,0.6235294117647059,0.4980392156862745],
 * [0.49411764705882355,0.6196078431372549,0.6],             # <<<<<<<<<<<<<<
 * [0.36470588235294116,0.40784313725490196,0.4470588235294118],
 * [0.2627450980392157,0.20392156862745098,0.3333333333333333]
 */
  __pyx_t_47 = PyList_New(3); if (unlikely(!__pyx_t_47)) __PYX_ERR(1, 842, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __Pyx_INCREF(__pyx_float_0_49411764705882355);
  __Pyx_GIVEREF(__pyx_float_0_49411764705882355);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 0, __pyx_float_0_49411764705882355)) __PYX_ERR(1, 842, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_6196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 1, __pyx_float_0_6196078431372549)) __PYX_ERR(1, 842, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6);
  __Pyx_GIVEREF(__pyx_float_0_6);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 2, __pyx_float_0_6)) __PYX_ERR(1, 842, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":843
 * [0.615686274509804,0.6235294117647059,0.4980392156862745],
 * [0.49411764705882355,0.6196078431372549,0.6],
 * [0.36470588235294116,0.40784313725490196,0.4470588235294118],             # <<<<<<<<<<<<<<
 * [0.2627450980392157,0.20392156862745098,0.3333333333333333]
 * ], dtype=float32)
 */
  __pyx_t_48 = PyList_New(3); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 0, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 843, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 1, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 843, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_4470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 2, __pyx_float_0_4470588235294118)) __PYX_ERR(1, 843, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":844
 * [0.49411764705882355,0.6196078431372549,0.6],
 * [0.36470588235294116,0.40784313725490196,0.4470588235294118],
 * [0.2627450980392157,0.20392156862745098,0.3333333333333333]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * VINIK24 =_VINIK24_NORMALIZED * <float>255.0
 */
  __pyx_t_49 = PyList_New(3); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_49);
  __Pyx_INCREF(__pyx_float_0_2627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_2627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 0, __pyx_float_0_2627450980392157)) __PYX_ERR(1, 844, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 1, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 844, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_3333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 2, __pyx_float_0_3333333333333333)) __PYX_ERR(1, 844, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":820
 * # https://lospec.com/palette-list/vinik24
 * # Created by Vinik
 * _VINIK24_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.43529411764705883,0.403921568627451,0.4627450980392157],
 */
  __pyx_t_50 = PyList_New(24); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_50);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 0, __pyx_t_25)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 1, __pyx_t_14)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 2, __pyx_t_26)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 3, __pyx_t_36)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 4, __pyx_t_4)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 5, __pyx_t_37)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_71);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 6, __pyx_t_71)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 7, __pyx_t_16)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 8, __pyx_t_19)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 9, __pyx_t_18)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 10, __pyx_t_24)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_35);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 11, __pyx_t_35)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_38);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 12, __pyx_t_38)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_39);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 13, __pyx_t_39)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_40);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 14, __pyx_t_40)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_41);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 15, __pyx_t_41)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_42);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 16, __pyx_t_42)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_43);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 17, __pyx_t_43)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_44);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 18, __pyx_t_44)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_45);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 19, __pyx_t_45)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_46);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 20, __pyx_t_46)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_47);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 21, __pyx_t_47)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_48);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 22, __pyx_t_48)) __PYX_ERR(1, 820, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_49);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 23, __pyx_t_49)) __PYX_ERR(1, 820, __pyx_L1_error);
  __pyx_t_25 = 0;
  __pyx_t_14 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;
  __pyx_t_4 = 0;
  __pyx_t_37 = 0;
  __pyx_t_71 = 0;
  __pyx_t_16 = 0;
  __pyx_t_19 = 0;
  __pyx_t_18 = 0;
  __pyx_t_24 = 0;
  __pyx_t_35 = 0;
  __pyx_t_38 = 0;
  __pyx_t_39 = 0;
  __pyx_t_40 = 0;
  __pyx_t_41 = 0;
  __pyx_t_42 = 0;
  __pyx_t_43 = 0;
  __pyx_t_44 = 0;
  __pyx_t_45 = 0;
  __pyx_t_46 = 0;
  __pyx_t_47 = 0;
  __pyx_t_48 = 0;
  __pyx_t_49 = 0;
  __pyx_t_49 = PyTuple_New(1); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_49);
  __Pyx_GIVEREF(__pyx_t_50);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_49, 0, __pyx_t_50)) __PYX_ERR(1, 820, __pyx_L1_error);
  __pyx_t_50 = 0;

  /* "PygameShader/Palette.pyx":845
 * [0.36470588235294116,0.40784313725490196,0.4470588235294118],
 * [0.2627450980392157,0.20392156862745098,0.3333333333333333]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * VINIK24 =_VINIK24_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_50 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_50);
  __Pyx_GetModuleGlobalName(__pyx_t_48, __pyx_n_s_float32); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  if (PyDict_SetItem(__pyx_t_50, __pyx_n_s_dtype, __pyx_t_48) < 0) __PYX_ERR(1, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;

  /* "PygameShader/Palette.pyx":820
 * # https://lospec.com/palette-list/vinik24
 * # Created by Vinik
 * _VINIK24_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.43529411764705883,0.403921568627451,0.4627450980392157],
 */
  __pyx_t_48 = __Pyx_PyObject_Call(__pyx_t_13, __pyx_t_49, __pyx_t_50); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 820, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_49); __pyx_t_49 = 0;
  __Pyx_DECREF(__pyx_t_50); __pyx_t_50 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VINIK24_NORMALIZED, __pyx_t_48) < 0) __PYX_ERR(1, 820, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;

  /* "PygameShader/Palette.pyx":846
 * [0.2627450980392157,0.20392156862745098,0.3333333333333333]
 * ], dtype=float32)
 * VINIK24 =_VINIK24_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * # https://lospec.com/palette-list/twilioquest-76
 */
  __Pyx_GetModuleGlobalName(__pyx_t_48, __pyx_n_s_VINIK24_NORMALIZED); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __pyx_t_50 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_50);
  __pyx_t_49 = PyNumber_Multiply(__pyx_t_48, __pyx_t_50); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_49);
  __Pyx_DECREF(__pyx_t_48); __pyx_t_48 = 0;
  __Pyx_DECREF(__pyx_t_50); __pyx_t_50 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VINIK24, __pyx_t_49) < 0) __PYX_ERR(1, 846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_49); __pyx_t_49 = 0;

  /* "PygameShader/Palette.pyx":850
 * # https://lospec.com/palette-list/twilioquest-76
 * # Created by Kerrie Lake
 * _TWILIOQUEST76_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [1.0,1.0,1.0],
 * [0.9176470588235294,0.9176470588235294,0.9098039215686274],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_49, __pyx_n_s_array); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_49);

  /* "PygameShader/Palette.pyx":851
 * # Created by Kerrie Lake
 * _TWILIOQUEST76_NORMALIZED = array([
 * [1.0,1.0,1.0],             # <<<<<<<<<<<<<<
 * [0.9176470588235294,0.9176470588235294,0.9098039215686274],
 * [0.807843137254902,0.792156862745098,0.788235294117647],
 */
  __pyx_t_50 = PyList_New(3); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_50);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 0, __pyx_float_1_0)) __PYX_ERR(1, 851, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 1, __pyx_float_1_0)) __PYX_ERR(1, 851, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 2, __pyx_float_1_0)) __PYX_ERR(1, 851, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":852
 * _TWILIOQUEST76_NORMALIZED = array([
 * [1.0,1.0,1.0],
 * [0.9176470588235294,0.9176470588235294,0.9098039215686274],             # <<<<<<<<<<<<<<
 * [0.807843137254902,0.792156862745098,0.788235294117647],
 * [0.6705882352941176,0.6862745098039216,0.7254901960784313],
 */
  __pyx_t_48 = PyList_New(3); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 852, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 0, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 852, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 1, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 852, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_9098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 2, __pyx_float_0_9098039215686274)) __PYX_ERR(1, 852, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":853
 * [1.0,1.0,1.0],
 * [0.9176470588235294,0.9176470588235294,0.9098039215686274],
 * [0.807843137254902,0.792156862745098,0.788235294117647],             # <<<<<<<<<<<<<<
 * [0.6705882352941176,0.6862745098039216,0.7254901960784313],
 * [0.6313725490196078,0.5333333333333333,0.592156862745098],
 */
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_float_0_807843137254902);
  __Pyx_GIVEREF(__pyx_float_0_807843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_float_0_807843137254902)) __PYX_ERR(1, 853, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_792156862745098);
  __Pyx_GIVEREF(__pyx_float_0_792156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_float_0_792156862745098)) __PYX_ERR(1, 853, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_float_0_788235294117647)) __PYX_ERR(1, 853, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":854
 * [0.9176470588235294,0.9176470588235294,0.9098039215686274],
 * [0.807843137254902,0.792156862745098,0.788235294117647],
 * [0.6705882352941176,0.6862745098039216,0.7254901960784313],             # <<<<<<<<<<<<<<
 * [0.6313725490196078,0.5333333333333333,0.592156862745098],
 * [0.4588235294117647,0.3843137254901961,0.4627450980392157],
 */
  __pyx_t_47 = PyList_New(3); if (unlikely(!__pyx_t_47)) __PYX_ERR(1, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __Pyx_INCREF(__pyx_float_0_6705882352941176);
  __Pyx_GIVEREF(__pyx_float_0_6705882352941176);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 0, __pyx_float_0_6705882352941176)) __PYX_ERR(1, 854, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6862745098039216);
  __Pyx_GIVEREF(__pyx_float_0_6862745098039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 1, __pyx_float_0_6862745098039216)) __PYX_ERR(1, 854, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_7254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 2, __pyx_float_0_7254901960784313)) __PYX_ERR(1, 854, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":855
 * [0.807843137254902,0.792156862745098,0.788235294117647],
 * [0.6705882352941176,0.6862745098039216,0.7254901960784313],
 * [0.6313725490196078,0.5333333333333333,0.592156862745098],             # <<<<<<<<<<<<<<
 * [0.4588235294117647,0.3843137254901961,0.4627450980392157],
 * [0.36470588235294116,0.27450980392156865,0.3764705882352941],
 */
  __pyx_t_46 = PyList_New(3); if (unlikely(!__pyx_t_46)) __PYX_ERR(1, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_46);
  __Pyx_INCREF(__pyx_float_0_6313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_6313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 0, __pyx_float_0_6313725490196078)) __PYX_ERR(1, 855, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_5333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 1, __pyx_float_0_5333333333333333)) __PYX_ERR(1, 855, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 2, __pyx_float_0_592156862745098)) __PYX_ERR(1, 855, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":856
 * [0.6705882352941176,0.6862745098039216,0.7254901960784313],
 * [0.6313725490196078,0.5333333333333333,0.592156862745098],
 * [0.4588235294117647,0.3843137254901961,0.4627450980392157],             # <<<<<<<<<<<<<<
 * [0.36470588235294116,0.27450980392156865,0.3764705882352941],
 * [0.2980392156862745,0.19607843137254902,0.3137254901960784],
 */
  __pyx_t_45 = PyList_New(3); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 0, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 856, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 1, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 856, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_4627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 2, __pyx_float_0_4627450980392157)) __PYX_ERR(1, 856, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":857
 * [0.6313725490196078,0.5333333333333333,0.592156862745098],
 * [0.4588235294117647,0.3843137254901961,0.4627450980392157],
 * [0.36470588235294116,0.27450980392156865,0.3764705882352941],             # <<<<<<<<<<<<<<
 * [0.2980392156862745,0.19607843137254902,0.3137254901960784],
 * [0.2627450980392157,0.14901960784313725,0.2549019607843137],
 */
  __pyx_t_44 = PyList_New(3); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 0, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 857, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_27450980392156865);
  __Pyx_GIVEREF(__pyx_float_0_27450980392156865);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 1, __pyx_float_0_27450980392156865)) __PYX_ERR(1, 857, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_3764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 2, __pyx_float_0_3764705882352941)) __PYX_ERR(1, 857, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":858
 * [0.4588235294117647,0.3843137254901961,0.4627450980392157],
 * [0.36470588235294116,0.27450980392156865,0.3764705882352941],
 * [0.2980392156862745,0.19607843137254902,0.3137254901960784],             # <<<<<<<<<<<<<<
 * [0.2627450980392157,0.14901960784313725,0.2549019607843137],
 * [0.1568627450980392,0.09803921568627451,0.1843137254901961],
 */
  __pyx_t_43 = PyList_New(3); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 0, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 858, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 1, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 858, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_3137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 2, __pyx_float_0_3137254901960784)) __PYX_ERR(1, 858, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":859
 * [0.36470588235294116,0.27450980392156865,0.3764705882352941],
 * [0.2980392156862745,0.19607843137254902,0.3137254901960784],
 * [0.2627450980392157,0.14901960784313725,0.2549019607843137],             # <<<<<<<<<<<<<<
 * [0.1568627450980392,0.09803921568627451,0.1843137254901961],
 * [0.984313725490196,0.4588235294117647,0.4588235294117647],
 */
  __pyx_t_42 = PyList_New(3); if (unlikely(!__pyx_t_42)) __PYX_ERR(1, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __Pyx_INCREF(__pyx_float_0_2627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_2627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 0, __pyx_float_0_2627450980392157)) __PYX_ERR(1, 859, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_14901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_14901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 1, __pyx_float_0_14901960784313725)) __PYX_ERR(1, 859, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 2, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 859, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":860
 * [0.2980392156862745,0.19607843137254902,0.3137254901960784],
 * [0.2627450980392157,0.14901960784313725,0.2549019607843137],
 * [0.1568627450980392,0.09803921568627451,0.1843137254901961],             # <<<<<<<<<<<<<<
 * [0.984313725490196,0.4588235294117647,0.4588235294117647],
 * [0.984313725490196,0.23137254901960785,0.39215686274509803],
 */
  __pyx_t_41 = PyList_New(3); if (unlikely(!__pyx_t_41)) __PYX_ERR(1, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 0, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 860, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_09803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 1, __pyx_float_0_09803921568627451)) __PYX_ERR(1, 860, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_1843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 2, __pyx_float_0_1843137254901961)) __PYX_ERR(1, 860, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":861
 * [0.2627450980392157,0.14901960784313725,0.2549019607843137],
 * [0.1568627450980392,0.09803921568627451,0.1843137254901961],
 * [0.984313725490196,0.4588235294117647,0.4588235294117647],             # <<<<<<<<<<<<<<
 * [0.984313725490196,0.23137254901960785,0.39215686274509803],
 * [0.7843137254901961,0.19215686274509805,0.3411764705882353],
 */
  __pyx_t_40 = PyList_New(3); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_INCREF(__pyx_float_0_984313725490196);
  __Pyx_GIVEREF(__pyx_float_0_984313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 0, __pyx_float_0_984313725490196)) __PYX_ERR(1, 861, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 1, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 861, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 2, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 861, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":862
 * [0.1568627450980392,0.09803921568627451,0.1843137254901961],
 * [0.984313725490196,0.4588235294117647,0.4588235294117647],
 * [0.984313725490196,0.23137254901960785,0.39215686274509803],             # <<<<<<<<<<<<<<
 * [0.7843137254901961,0.19215686274509805,0.3411764705882353],
 * [0.5568627450980392,0.21568627450980393,0.3607843137254902],
 */
  __pyx_t_39 = PyList_New(3); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_INCREF(__pyx_float_0_984313725490196);
  __Pyx_GIVEREF(__pyx_float_0_984313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 0, __pyx_float_0_984313725490196)) __PYX_ERR(1, 862, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23137254901960785);
  __Pyx_GIVEREF(__pyx_float_0_23137254901960785);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 1, __pyx_float_0_23137254901960785)) __PYX_ERR(1, 862, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 2, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 862, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":863
 * [0.984313725490196,0.4588235294117647,0.4588235294117647],
 * [0.984313725490196,0.23137254901960785,0.39215686274509803],
 * [0.7843137254901961,0.19215686274509805,0.3411764705882353],             # <<<<<<<<<<<<<<
 * [0.5568627450980392,0.21568627450980393,0.3607843137254902],
 * [0.30980392156862746,0.13725490196078433,0.3176470588235294],
 */
  __pyx_t_38 = PyList_New(3); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __Pyx_INCREF(__pyx_float_0_7843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_7843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 0, __pyx_float_0_7843137254901961)) __PYX_ERR(1, 863, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 1, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 863, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_3411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 2, __pyx_float_0_3411764705882353)) __PYX_ERR(1, 863, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":864
 * [0.984313725490196,0.23137254901960785,0.39215686274509803],
 * [0.7843137254901961,0.19215686274509805,0.3411764705882353],
 * [0.5568627450980392,0.21568627450980393,0.3607843137254902],             # <<<<<<<<<<<<<<
 * [0.30980392156862746,0.13725490196078433,0.3176470588235294],
 * [0.20784313725490197,0.08235294117647059,0.26666666666666666],
 */
  __pyx_t_35 = PyList_New(3); if (unlikely(!__pyx_t_35)) __PYX_ERR(1, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __Pyx_INCREF(__pyx_float_0_5568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_5568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 0, __pyx_float_0_5568627450980392)) __PYX_ERR(1, 864, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 1, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 864, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_3607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 2, __pyx_float_0_3607843137254902)) __PYX_ERR(1, 864, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":865
 * [0.7843137254901961,0.19215686274509805,0.3411764705882353],
 * [0.5568627450980392,0.21568627450980393,0.3607843137254902],
 * [0.30980392156862746,0.13725490196078433,0.3176470588235294],             # <<<<<<<<<<<<<<
 * [0.20784313725490197,0.08235294117647059,0.26666666666666666],
 * [0.9686274509803922,0.2901960784313726,0.3254901960784314],
 */
  __pyx_t_24 = PyList_New(3); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_INCREF(__pyx_float_0_30980392156862746);
  __Pyx_GIVEREF(__pyx_float_0_30980392156862746);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 0, __pyx_float_0_30980392156862746)) __PYX_ERR(1, 865, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 1, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 865, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_3176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 2, __pyx_float_0_3176470588235294)) __PYX_ERR(1, 865, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":866
 * [0.5568627450980392,0.21568627450980393,0.3607843137254902],
 * [0.30980392156862746,0.13725490196078433,0.3176470588235294],
 * [0.20784313725490197,0.08235294117647059,0.26666666666666666],             # <<<<<<<<<<<<<<
 * [0.9686274509803922,0.2901960784313726,0.3254901960784314],
 * [0.9490196078431372,0.1843137254901961,0.27450980392156865],
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_float_0_20784313725490197);
  __Pyx_GIVEREF(__pyx_float_0_20784313725490197);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_float_0_20784313725490197)) __PYX_ERR(1, 866, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 866, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_26666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_26666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_float_0_26666666666666666)) __PYX_ERR(1, 866, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":867
 * [0.30980392156862746,0.13725490196078433,0.3176470588235294],
 * [0.20784313725490197,0.08235294117647059,0.26666666666666666],
 * [0.9686274509803922,0.2901960784313726,0.3254901960784314],             # <<<<<<<<<<<<<<
 * [0.9490196078431372,0.1843137254901961,0.27450980392156865],
 * [0.7372549019607844,0.08627450980392157,0.25882352941176473],
 */
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_float_0_9686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_9686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_float_0_9686274509803922)) __PYX_ERR(1, 867, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2901960784313726);
  __Pyx_GIVEREF(__pyx_float_0_2901960784313726);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_float_0_2901960784313726)) __PYX_ERR(1, 867, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_3254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_float_0_3254901960784314)) __PYX_ERR(1, 867, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":868
 * [0.20784313725490197,0.08235294117647059,0.26666666666666666],
 * [0.9686274509803922,0.2901960784313726,0.3254901960784314],
 * [0.9490196078431372,0.1843137254901961,0.27450980392156865],             # <<<<<<<<<<<<<<
 * [0.7372549019607844,0.08627450980392157,0.25882352941176473],
 * [0.9882352941176471,0.7725490196078432,0.2235294117647059],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_9490196078431372);
  __Pyx_GIVEREF(__pyx_float_0_9490196078431372);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_9490196078431372)) __PYX_ERR(1, 868, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_1843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_1843137254901961)) __PYX_ERR(1, 868, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_27450980392156865);
  __Pyx_GIVEREF(__pyx_float_0_27450980392156865);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_27450980392156865)) __PYX_ERR(1, 868, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":869
 * [0.9686274509803922,0.2901960784313726,0.3254901960784314],
 * [0.9490196078431372,0.1843137254901961,0.27450980392156865],
 * [0.7372549019607844,0.08627450980392157,0.25882352941176473],             # <<<<<<<<<<<<<<
 * [0.9882352941176471,0.7725490196078432,0.2235294117647059],
 * [0.9725490196078431,0.4823529411764706,0.10588235294117647],
 */
  __pyx_t_71 = PyList_New(3); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_71);
  __Pyx_INCREF(__pyx_float_0_7372549019607844);
  __Pyx_GIVEREF(__pyx_float_0_7372549019607844);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 0, __pyx_float_0_7372549019607844)) __PYX_ERR(1, 869, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_08627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 1, __pyx_float_0_08627450980392157)) __PYX_ERR(1, 869, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_25882352941176473);
  __Pyx_GIVEREF(__pyx_float_0_25882352941176473);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 2, __pyx_float_0_25882352941176473)) __PYX_ERR(1, 869, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":870
 * [0.9490196078431372,0.1843137254901961,0.27450980392156865],
 * [0.7372549019607844,0.08627450980392157,0.25882352941176473],
 * [0.9882352941176471,0.7725490196078432,0.2235294117647059],             # <<<<<<<<<<<<<<
 * [0.9725490196078431,0.4823529411764706,0.10588235294117647],
 * [0.9725490196078431,0.25098039215686274,0.10588235294117647],
 */
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 870, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 870, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 870, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":871
 * [0.7372549019607844,0.08627450980392157,0.25882352941176473],
 * [0.9882352941176471,0.7725490196078432,0.2235294117647059],
 * [0.9725490196078431,0.4823529411764706,0.10588235294117647],             # <<<<<<<<<<<<<<
 * [0.9725490196078431,0.25098039215686274,0.10588235294117647],
 * [0.7411764705882353,0.15294117647058825,0.03529411764705882],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 871, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_9725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_9725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_9725490196078431)) __PYX_ERR(1, 871, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 871, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_10588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_10588235294117647)) __PYX_ERR(1, 871, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":872
 * [0.9882352941176471,0.7725490196078432,0.2235294117647059],
 * [0.9725490196078431,0.4823529411764706,0.10588235294117647],
 * [0.9725490196078431,0.25098039215686274,0.10588235294117647],             # <<<<<<<<<<<<<<
 * [0.7411764705882353,0.15294117647058825,0.03529411764705882],
 * [0.48627450980392156,0.07058823529411765,0.16862745098039217],
 */
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 872, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_INCREF(__pyx_float_0_9725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_9725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_float_0_9725490196078431)) __PYX_ERR(1, 872, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_25098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_25098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_float_0_25098039215686274)) __PYX_ERR(1, 872, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_10588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_float_0_10588235294117647)) __PYX_ERR(1, 872, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":873
 * [0.9725490196078431,0.4823529411764706,0.10588235294117647],
 * [0.9725490196078431,0.25098039215686274,0.10588235294117647],
 * [0.7411764705882353,0.15294117647058825,0.03529411764705882],             # <<<<<<<<<<<<<<
 * [0.48627450980392156,0.07058823529411765,0.16862745098039217],
 * [1.0,0.8784313725490196,0.5450980392156862],
 */
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 873, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_INCREF(__pyx_float_0_7411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_7411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_float_0_7411764705882353)) __PYX_ERR(1, 873, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 873, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_03529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_03529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_float_0_03529411764705882)) __PYX_ERR(1, 873, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":874
 * [0.9725490196078431,0.25098039215686274,0.10588235294117647],
 * [0.7411764705882353,0.15294117647058825,0.03529411764705882],
 * [0.48627450980392156,0.07058823529411765,0.16862745098039217],             # <<<<<<<<<<<<<<
 * [1.0,0.8784313725490196,0.5450980392156862],
 * [0.9803921568627451,0.7529411764705882,0.35294117647058826],
 */
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_float_0_48627450980392156);
  __Pyx_GIVEREF(__pyx_float_0_48627450980392156);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_float_0_48627450980392156)) __PYX_ERR(1, 874, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_07058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_07058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_float_0_07058823529411765)) __PYX_ERR(1, 874, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 874, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":875
 * [0.7411764705882353,0.15294117647058825,0.03529411764705882],
 * [0.48627450980392156,0.07058823529411765,0.16862745098039217],
 * [1.0,0.8784313725490196,0.5450980392156862],             # <<<<<<<<<<<<<<
 * [0.9803921568627451,0.7529411764705882,0.35294117647058826],
 * [0.9215686274509803,0.5607843137254902,0.2823529411764706],
 */
  __pyx_t_25 = PyList_New(3); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_float_1_0)) __PYX_ERR(1, 875, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_8784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_float_0_8784313725490196)) __PYX_ERR(1, 875, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 875, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":876
 * [0.48627450980392156,0.07058823529411765,0.16862745098039217],
 * [1.0,0.8784313725490196,0.5450980392156862],
 * [0.9803921568627451,0.7529411764705882,0.35294117647058826],             # <<<<<<<<<<<<<<
 * [0.9215686274509803,0.5607843137254902,0.2823529411764706],
 * [0.8196078431372549,0.4549019607843137,0.2549019607843137],
 */
  __pyx_t_51 = PyList_New(3); if (unlikely(!__pyx_t_51)) __PYX_ERR(1, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_51);
  __Pyx_INCREF(__pyx_float_0_9803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_9803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 0, __pyx_float_0_9803921568627451)) __PYX_ERR(1, 876, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_7529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 1, __pyx_float_0_7529411764705882)) __PYX_ERR(1, 876, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_35294117647058826);
  __Pyx_GIVEREF(__pyx_float_0_35294117647058826);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 2, __pyx_float_0_35294117647058826)) __PYX_ERR(1, 876, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":877
 * [1.0,0.8784313725490196,0.5450980392156862],
 * [0.9803921568627451,0.7529411764705882,0.35294117647058826],
 * [0.9215686274509803,0.5607843137254902,0.2823529411764706],             # <<<<<<<<<<<<<<
 * [0.8196078431372549,0.4549019607843137,0.2549019607843137],
 * [0.7803921568627451,0.3215686274509804,0.2235294117647059],
 */
  __pyx_t_52 = PyList_New(3); if (unlikely(!__pyx_t_52)) __PYX_ERR(1, 877, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_52);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 0, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 877, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 1, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 877, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_2823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 2, __pyx_float_0_2823529411764706)) __PYX_ERR(1, 877, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":878
 * [0.9803921568627451,0.7529411764705882,0.35294117647058826],
 * [0.9215686274509803,0.5607843137254902,0.2823529411764706],
 * [0.8196078431372549,0.4549019607843137,0.2549019607843137],             # <<<<<<<<<<<<<<
 * [0.7803921568627451,0.3215686274509804,0.2235294117647059],
 * [0.6941176470588235,0.1607843137254902,0.20784313725490197],
 */
  __pyx_t_53 = PyList_New(3); if (unlikely(!__pyx_t_53)) __PYX_ERR(1, 878, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_53);
  __Pyx_INCREF(__pyx_float_0_8196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_8196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 0, __pyx_float_0_8196078431372549)) __PYX_ERR(1, 878, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_4549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 1, __pyx_float_0_4549019607843137)) __PYX_ERR(1, 878, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 2, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 878, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":879
 * [0.9215686274509803,0.5607843137254902,0.2823529411764706],
 * [0.8196078431372549,0.4549019607843137,0.2549019607843137],
 * [0.7803921568627451,0.3215686274509804,0.2235294117647059],             # <<<<<<<<<<<<<<
 * [0.6941176470588235,0.1607843137254902,0.20784313725490197],
 * [0.9921568627450981,0.7411764705882353,0.5607843137254902],
 */
  __pyx_t_54 = PyList_New(3); if (unlikely(!__pyx_t_54)) __PYX_ERR(1, 879, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_54);
  __Pyx_INCREF(__pyx_float_0_7803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_7803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 0, __pyx_float_0_7803921568627451)) __PYX_ERR(1, 879, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 1, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 879, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 2, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 879, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":880
 * [0.8196078431372549,0.4549019607843137,0.2549019607843137],
 * [0.7803921568627451,0.3215686274509804,0.2235294117647059],
 * [0.6941176470588235,0.1607843137254902,0.20784313725490197],             # <<<<<<<<<<<<<<
 * [0.9921568627450981,0.7411764705882353,0.5607843137254902],
 * [0.9411764705882353,0.5333333333333333,0.4196078431372549],
 */
  __pyx_t_55 = PyList_New(3); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 880, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);
  __Pyx_INCREF(__pyx_float_0_6941176470588235);
  __Pyx_GIVEREF(__pyx_float_0_6941176470588235);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 0, __pyx_float_0_6941176470588235)) __PYX_ERR(1, 880, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_1607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 1, __pyx_float_0_1607843137254902)) __PYX_ERR(1, 880, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20784313725490197);
  __Pyx_GIVEREF(__pyx_float_0_20784313725490197);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 2, __pyx_float_0_20784313725490197)) __PYX_ERR(1, 880, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":881
 * [0.7803921568627451,0.3215686274509804,0.2235294117647059],
 * [0.6941176470588235,0.1607843137254902,0.20784313725490197],
 * [0.9921568627450981,0.7411764705882353,0.5607843137254902],             # <<<<<<<<<<<<<<
 * [0.9411764705882353,0.5333333333333333,0.4196078431372549],
 * [0.8274509803921568,0.40784313725490196,0.3254901960784314],
 */
  __pyx_t_56 = PyList_New(3); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 881, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_56);
  __Pyx_INCREF(__pyx_float_0_9921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_9921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 0, __pyx_float_0_9921568627450981)) __PYX_ERR(1, 881, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_7411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 1, __pyx_float_0_7411764705882353)) __PYX_ERR(1, 881, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 2, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 881, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":882
 * [0.6941176470588235,0.1607843137254902,0.20784313725490197],
 * [0.9921568627450981,0.7411764705882353,0.5607843137254902],
 * [0.9411764705882353,0.5333333333333333,0.4196078431372549],             # <<<<<<<<<<<<<<
 * [0.8274509803921568,0.40784313725490196,0.3254901960784314],
 * [0.6823529411764706,0.27058823529411763,0.2901960784313726],
 */
  __pyx_t_57 = PyList_New(3); if (unlikely(!__pyx_t_57)) __PYX_ERR(1, 882, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_57);
  __Pyx_INCREF(__pyx_float_0_9411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_9411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 0, __pyx_float_0_9411764705882353)) __PYX_ERR(1, 882, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_5333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 1, __pyx_float_0_5333333333333333)) __PYX_ERR(1, 882, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_4196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 2, __pyx_float_0_4196078431372549)) __PYX_ERR(1, 882, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":883
 * [0.9921568627450981,0.7411764705882353,0.5607843137254902],
 * [0.9411764705882353,0.5333333333333333,0.4196078431372549],
 * [0.8274509803921568,0.40784313725490196,0.3254901960784314],             # <<<<<<<<<<<<<<
 * [0.6823529411764706,0.27058823529411763,0.2901960784313726],
 * [0.5490196078431373,0.19215686274509805,0.19607843137254902],
 */
  __pyx_t_58 = PyList_New(3); if (unlikely(!__pyx_t_58)) __PYX_ERR(1, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_58);
  __Pyx_INCREF(__pyx_float_0_8274509803921568);
  __Pyx_GIVEREF(__pyx_float_0_8274509803921568);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 0, __pyx_float_0_8274509803921568)) __PYX_ERR(1, 883, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 1, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 883, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_3254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 2, __pyx_float_0_3254901960784314)) __PYX_ERR(1, 883, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":884
 * [0.9411764705882353,0.5333333333333333,0.4196078431372549],
 * [0.8274509803921568,0.40784313725490196,0.3254901960784314],
 * [0.6823529411764706,0.27058823529411763,0.2901960784313726],             # <<<<<<<<<<<<<<
 * [0.5490196078431373,0.19215686274509805,0.19607843137254902],
 * [0.32941176470588235,0.13725490196078433,0.13725490196078433],
 */
  __pyx_t_59 = PyList_New(3); if (unlikely(!__pyx_t_59)) __PYX_ERR(1, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_59);
  __Pyx_INCREF(__pyx_float_0_6823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_6823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 0, __pyx_float_0_6823529411764706)) __PYX_ERR(1, 884, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_27058823529411763);
  __Pyx_GIVEREF(__pyx_float_0_27058823529411763);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 1, __pyx_float_0_27058823529411763)) __PYX_ERR(1, 884, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2901960784313726);
  __Pyx_GIVEREF(__pyx_float_0_2901960784313726);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 2, __pyx_float_0_2901960784313726)) __PYX_ERR(1, 884, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":885
 * [0.8274509803921568,0.40784313725490196,0.3254901960784314],
 * [0.6823529411764706,0.27058823529411763,0.2901960784313726],
 * [0.5490196078431373,0.19215686274509805,0.19607843137254902],             # <<<<<<<<<<<<<<
 * [0.32941176470588235,0.13725490196078433,0.13725490196078433],
 * [0.6588235294117647,0.34509803921568627,0.2823529411764706],
 */
  __pyx_t_60 = PyList_New(3); if (unlikely(!__pyx_t_60)) __PYX_ERR(1, 885, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_60);
  __Pyx_INCREF(__pyx_float_0_5490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_5490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 0, __pyx_float_0_5490196078431373)) __PYX_ERR(1, 885, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 1, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 885, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 2, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 885, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":886
 * [0.6823529411764706,0.27058823529411763,0.2901960784313726],
 * [0.5490196078431373,0.19215686274509805,0.19607843137254902],
 * [0.32941176470588235,0.13725490196078433,0.13725490196078433],             # <<<<<<<<<<<<<<
 * [0.6588235294117647,0.34509803921568627,0.2823529411764706],
 * [0.5137254901960784,0.25098039215686274,0.2980392156862745],
 */
  __pyx_t_61 = PyList_New(3); if (unlikely(!__pyx_t_61)) __PYX_ERR(1, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_61);
  __Pyx_INCREF(__pyx_float_0_32941176470588235);
  __Pyx_GIVEREF(__pyx_float_0_32941176470588235);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 0, __pyx_float_0_32941176470588235)) __PYX_ERR(1, 886, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 1, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 886, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 2, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 886, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":887
 * [0.5490196078431373,0.19215686274509805,0.19607843137254902],
 * [0.32941176470588235,0.13725490196078433,0.13725490196078433],
 * [0.6588235294117647,0.34509803921568627,0.2823529411764706],             # <<<<<<<<<<<<<<
 * [0.5137254901960784,0.25098039215686274,0.2980392156862745],
 * [0.403921568627451,0.19215686274509805,0.29411764705882354],
 */
  __pyx_t_62 = PyList_New(3); if (unlikely(!__pyx_t_62)) __PYX_ERR(1, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_62);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 0, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 887, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 1, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 887, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_2823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 2, __pyx_float_0_2823529411764706)) __PYX_ERR(1, 887, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":888
 * [0.32941176470588235,0.13725490196078433,0.13725490196078433],
 * [0.6588235294117647,0.34509803921568627,0.2823529411764706],
 * [0.5137254901960784,0.25098039215686274,0.2980392156862745],             # <<<<<<<<<<<<<<
 * [0.403921568627451,0.19215686274509805,0.29411764705882354],
 * [0.24705882352941178,0.13725490196078433,0.13725490196078433],
 */
  __pyx_t_63 = PyList_New(3); if (unlikely(!__pyx_t_63)) __PYX_ERR(1, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_63);
  __Pyx_INCREF(__pyx_float_0_5137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_5137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 0, __pyx_float_0_5137254901960784)) __PYX_ERR(1, 888, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_25098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_25098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 1, __pyx_float_0_25098039215686274)) __PYX_ERR(1, 888, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 2, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 888, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":889
 * [0.6588235294117647,0.34509803921568627,0.2823529411764706],
 * [0.5137254901960784,0.25098039215686274,0.2980392156862745],
 * [0.403921568627451,0.19215686274509805,0.29411764705882354],             # <<<<<<<<<<<<<<
 * [0.24705882352941178,0.13725490196078433,0.13725490196078433],
 * [0.8313725490196079,0.5843137254901961,0.4666666666666667],
 */
  __pyx_t_64 = PyList_New(3); if (unlikely(!__pyx_t_64)) __PYX_ERR(1, 889, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_64);
  __Pyx_INCREF(__pyx_float_0_403921568627451);
  __Pyx_GIVEREF(__pyx_float_0_403921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 0, __pyx_float_0_403921568627451)) __PYX_ERR(1, 889, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 1, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 889, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_29411764705882354);
  __Pyx_GIVEREF(__pyx_float_0_29411764705882354);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 2, __pyx_float_0_29411764705882354)) __PYX_ERR(1, 889, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":890
 * [0.5137254901960784,0.25098039215686274,0.2980392156862745],
 * [0.403921568627451,0.19215686274509805,0.29411764705882354],
 * [0.24705882352941178,0.13725490196078433,0.13725490196078433],             # <<<<<<<<<<<<<<
 * [0.8313725490196079,0.5843137254901961,0.4666666666666667],
 * [0.6235294117647059,0.4392156862745098,0.35294117647058826],
 */
  __pyx_t_65 = PyList_New(3); if (unlikely(!__pyx_t_65)) __PYX_ERR(1, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_65);
  __Pyx_INCREF(__pyx_float_0_24705882352941178);
  __Pyx_GIVEREF(__pyx_float_0_24705882352941178);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 0, __pyx_float_0_24705882352941178)) __PYX_ERR(1, 890, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 1, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 890, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 2, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 890, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":891
 * [0.403921568627451,0.19215686274509805,0.29411764705882354],
 * [0.24705882352941178,0.13725490196078433,0.13725490196078433],
 * [0.8313725490196079,0.5843137254901961,0.4666666666666667],             # <<<<<<<<<<<<<<
 * [0.6235294117647059,0.4392156862745098,0.35294117647058826],
 * [0.5176470588235295,0.3411764705882353,0.3137254901960784],
 */
  __pyx_t_66 = PyList_New(3); if (unlikely(!__pyx_t_66)) __PYX_ERR(1, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_66);
  __Pyx_INCREF(__pyx_float_0_8313725490196079);
  __Pyx_GIVEREF(__pyx_float_0_8313725490196079);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 0, __pyx_float_0_8313725490196079)) __PYX_ERR(1, 891, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_5843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 1, __pyx_float_0_5843137254901961)) __PYX_ERR(1, 891, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_4666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 2, __pyx_float_0_4666666666666667)) __PYX_ERR(1, 891, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":892
 * [0.24705882352941178,0.13725490196078433,0.13725490196078433],
 * [0.8313725490196079,0.5843137254901961,0.4666666666666667],
 * [0.6235294117647059,0.4392156862745098,0.35294117647058826],             # <<<<<<<<<<<<<<
 * [0.5176470588235295,0.3411764705882353,0.3137254901960784],
 * [0.38823529411764707,0.23137254901960785,0.24705882352941178],
 */
  __pyx_t_67 = PyList_New(3); if (unlikely(!__pyx_t_67)) __PYX_ERR(1, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_67);
  __Pyx_INCREF(__pyx_float_0_6235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_6235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 0, __pyx_float_0_6235294117647059)) __PYX_ERR(1, 892, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_4392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 1, __pyx_float_0_4392156862745098)) __PYX_ERR(1, 892, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_35294117647058826);
  __Pyx_GIVEREF(__pyx_float_0_35294117647058826);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 2, __pyx_float_0_35294117647058826)) __PYX_ERR(1, 892, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":893
 * [0.8313725490196079,0.5843137254901961,0.4666666666666667],
 * [0.6235294117647059,0.4392156862745098,0.35294117647058826],
 * [0.5176470588235295,0.3411764705882353,0.3137254901960784],             # <<<<<<<<<<<<<<
 * [0.38823529411764707,0.23137254901960785,0.24705882352941178],
 * [0.4823529411764706,0.8431372549019608,0.6627450980392157],
 */
  __pyx_t_68 = PyList_New(3); if (unlikely(!__pyx_t_68)) __PYX_ERR(1, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_68);
  __Pyx_INCREF(__pyx_float_0_5176470588235295);
  __Pyx_GIVEREF(__pyx_float_0_5176470588235295);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 0, __pyx_float_0_5176470588235295)) __PYX_ERR(1, 893, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_3411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 1, __pyx_float_0_3411764705882353)) __PYX_ERR(1, 893, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_3137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 2, __pyx_float_0_3137254901960784)) __PYX_ERR(1, 893, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":894
 * [0.6235294117647059,0.4392156862745098,0.35294117647058826],
 * [0.5176470588235295,0.3411764705882353,0.3137254901960784],
 * [0.38823529411764707,0.23137254901960785,0.24705882352941178],             # <<<<<<<<<<<<<<
 * [0.4823529411764706,0.8431372549019608,0.6627450980392157],
 * [0.3215686274509804,0.6980392156862745,0.5058823529411764],
 */
  __pyx_t_69 = PyList_New(3); if (unlikely(!__pyx_t_69)) __PYX_ERR(1, 894, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_69);
  __Pyx_INCREF(__pyx_float_0_38823529411764707);
  __Pyx_GIVEREF(__pyx_float_0_38823529411764707);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 0, __pyx_float_0_38823529411764707)) __PYX_ERR(1, 894, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23137254901960785);
  __Pyx_GIVEREF(__pyx_float_0_23137254901960785);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 1, __pyx_float_0_23137254901960785)) __PYX_ERR(1, 894, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24705882352941178);
  __Pyx_GIVEREF(__pyx_float_0_24705882352941178);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 2, __pyx_float_0_24705882352941178)) __PYX_ERR(1, 894, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":895
 * [0.5176470588235295,0.3411764705882353,0.3137254901960784],
 * [0.38823529411764707,0.23137254901960785,0.24705882352941178],
 * [0.4823529411764706,0.8431372549019608,0.6627450980392157],             # <<<<<<<<<<<<<<
 * [0.3215686274509804,0.6980392156862745,0.5058823529411764],
 * [0.0784313725490196,0.5215686274509804,0.40784313725490196],
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 895, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_8431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_8431372549019608)) __PYX_ERR(1, 895, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_6627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_6627450980392157)) __PYX_ERR(1, 895, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":896
 * [0.38823529411764707,0.23137254901960785,0.24705882352941178],
 * [0.4823529411764706,0.8431372549019608,0.6627450980392157],
 * [0.3215686274509804,0.6980392156862745,0.5058823529411764],             # <<<<<<<<<<<<<<
 * [0.0784313725490196,0.5215686274509804,0.40784313725490196],
 * [0.0784313725490196,0.403921568627451,0.33725490196078434],
 */
  __pyx_t_70 = PyList_New(3); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_70);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 0, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 896, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_6980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 1, __pyx_float_0_6980392156862745)) __PYX_ERR(1, 896, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_5058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 2, __pyx_float_0_5058823529411764)) __PYX_ERR(1, 896, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":897
 * [0.4823529411764706,0.8431372549019608,0.6627450980392157],
 * [0.3215686274509804,0.6980392156862745,0.5058823529411764],
 * [0.0784313725490196,0.5215686274509804,0.40784313725490196],             # <<<<<<<<<<<<<<
 * [0.0784313725490196,0.403921568627451,0.33725490196078434],
 * [0.13333333333333333,0.2784313725490196,0.2980392156862745],
 */
  __pyx_t_72 = PyList_New(3); if (unlikely(!__pyx_t_72)) __PYX_ERR(1, 897, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_72);
  __Pyx_INCREF(__pyx_float_0_0784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_0784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 0, __pyx_float_0_0784313725490196)) __PYX_ERR(1, 897, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_5215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 1, __pyx_float_0_5215686274509804)) __PYX_ERR(1, 897, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 2, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 897, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":898
 * [0.3215686274509804,0.6980392156862745,0.5058823529411764],
 * [0.0784313725490196,0.5215686274509804,0.40784313725490196],
 * [0.0784313725490196,0.403921568627451,0.33725490196078434],             # <<<<<<<<<<<<<<
 * [0.13333333333333333,0.2784313725490196,0.2980392156862745],
 * [0.06274509803921569,0.1843137254901961,0.20392156862745098],
 */
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_0_0784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_0784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_0_0784313725490196)) __PYX_ERR(1, 898, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_403921568627451);
  __Pyx_GIVEREF(__pyx_float_0_403921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_403921568627451)) __PYX_ERR(1, 898, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_33725490196078434);
  __Pyx_GIVEREF(__pyx_float_0_33725490196078434);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_33725490196078434)) __PYX_ERR(1, 898, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":899
 * [0.0784313725490196,0.5215686274509804,0.40784313725490196],
 * [0.0784313725490196,0.403921568627451,0.33725490196078434],
 * [0.13333333333333333,0.2784313725490196,0.2980392156862745],             # <<<<<<<<<<<<<<
 * [0.06274509803921569,0.1843137254901961,0.20392156862745098],
 * [0.9215686274509803,1.0,0.5450980392156862],
 */
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_INCREF(__pyx_float_0_13333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_13333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_float_0_13333333333333333)) __PYX_ERR(1, 899, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_2784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_float_0_2784313725490196)) __PYX_ERR(1, 899, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 899, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":900
 * [0.0784313725490196,0.403921568627451,0.33725490196078434],
 * [0.13333333333333333,0.2784313725490196,0.2980392156862745],
 * [0.06274509803921569,0.1843137254901961,0.20392156862745098],             # <<<<<<<<<<<<<<
 * [0.9215686274509803,1.0,0.5450980392156862],
 * [0.7019607843137254,0.8901960784313725,0.38823529411764707],
 */
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_INCREF(__pyx_float_0_06274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_06274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_float_0_06274509803921569)) __PYX_ERR(1, 900, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_1843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_float_0_1843137254901961)) __PYX_ERR(1, 900, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 900, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":901
 * [0.13333333333333333,0.2784313725490196,0.2980392156862745],
 * [0.06274509803921569,0.1843137254901961,0.20392156862745098],
 * [0.9215686274509803,1.0,0.5450980392156862],             # <<<<<<<<<<<<<<
 * [0.7019607843137254,0.8901960784313725,0.38823529411764707],
 * [0.2980392156862745,0.7411764705882353,0.33725490196078434],
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 901, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_1_0)) __PYX_ERR(1, 901, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 901, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":902
 * [0.06274509803921569,0.1843137254901961,0.20392156862745098],
 * [0.9215686274509803,1.0,0.5450980392156862],
 * [0.7019607843137254,0.8901960784313725,0.38823529411764707],             # <<<<<<<<<<<<<<
 * [0.2980392156862745,0.7411764705882353,0.33725490196078434],
 * [0.1843137254901961,0.5294117647058824,0.20784313725490197],
 */
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_INCREF(__pyx_float_0_7019607843137254);
  __Pyx_GIVEREF(__pyx_float_0_7019607843137254);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_float_0_7019607843137254)) __PYX_ERR(1, 902, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_8901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_float_0_8901960784313725)) __PYX_ERR(1, 902, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_38823529411764707);
  __Pyx_GIVEREF(__pyx_float_0_38823529411764707);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_float_0_38823529411764707)) __PYX_ERR(1, 902, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":903
 * [0.9215686274509803,1.0,0.5450980392156862],
 * [0.7019607843137254,0.8901960784313725,0.38823529411764707],
 * [0.2980392156862745,0.7411764705882353,0.33725490196078434],             # <<<<<<<<<<<<<<
 * [0.1843137254901961,0.5294117647058824,0.20784313725490197],
 * [0.043137254901960784,0.34901960784313724,0.19215686274509805],
 */
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 903, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_7411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_7411764705882353)) __PYX_ERR(1, 903, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_33725490196078434);
  __Pyx_GIVEREF(__pyx_float_0_33725490196078434);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_33725490196078434)) __PYX_ERR(1, 903, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":904
 * [0.7019607843137254,0.8901960784313725,0.38823529411764707],
 * [0.2980392156862745,0.7411764705882353,0.33725490196078434],
 * [0.1843137254901961,0.5294117647058824,0.20784313725490197],             # <<<<<<<<<<<<<<
 * [0.043137254901960784,0.34901960784313724,0.19215686274509805],
 * [0.592156862745098,0.7490196078431373,0.43137254901960786],
 */
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 904, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_float_0_1843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_1843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_float_0_1843137254901961)) __PYX_ERR(1, 904, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_5294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_float_0_5294117647058824)) __PYX_ERR(1, 904, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20784313725490197);
  __Pyx_GIVEREF(__pyx_float_0_20784313725490197);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_float_0_20784313725490197)) __PYX_ERR(1, 904, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":905
 * [0.2980392156862745,0.7411764705882353,0.33725490196078434],
 * [0.1843137254901961,0.5294117647058824,0.20784313725490197],
 * [0.043137254901960784,0.34901960784313724,0.19215686274509805],             # <<<<<<<<<<<<<<
 * [0.592156862745098,0.7490196078431373,0.43137254901960786],
 * [0.5372549019607843,0.6235294117647059,0.4],
 */
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 905, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_INCREF(__pyx_float_0_043137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_043137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_float_0_043137254901960784)) __PYX_ERR(1, 905, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 905, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 905, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":906
 * [0.1843137254901961,0.5294117647058824,0.20784313725490197],
 * [0.043137254901960784,0.34901960784313724,0.19215686274509805],
 * [0.592156862745098,0.7490196078431373,0.43137254901960786],             # <<<<<<<<<<<<<<
 * [0.5372549019607843,0.6235294117647059,0.4],
 * [0.3803921568627451,0.5215686274509804,0.35294117647058826],
 */
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 906, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_float_0_592156862745098)) __PYX_ERR(1, 906, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_7490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_float_0_7490196078431373)) __PYX_ERR(1, 906, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_43137254901960786);
  __Pyx_GIVEREF(__pyx_float_0_43137254901960786);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_float_0_43137254901960786)) __PYX_ERR(1, 906, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":907
 * [0.043137254901960784,0.34901960784313724,0.19215686274509805],
 * [0.592156862745098,0.7490196078431373,0.43137254901960786],
 * [0.5372549019607843,0.6235294117647059,0.4],             # <<<<<<<<<<<<<<
 * [0.3803921568627451,0.5215686274509804,0.35294117647058826],
 * [0.2980392156862745,0.3764705882352941,0.3176470588235294],
 */
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_INCREF(__pyx_float_0_5372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_5372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_float_0_5372549019607843)) __PYX_ERR(1, 907, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_6235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_float_0_6235294117647059)) __PYX_ERR(1, 907, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4);
  __Pyx_GIVEREF(__pyx_float_0_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_float_0_4)) __PYX_ERR(1, 907, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":908
 * [0.592156862745098,0.7490196078431373,0.43137254901960786],
 * [0.5372549019607843,0.6235294117647059,0.4],
 * [0.3803921568627451,0.5215686274509804,0.35294117647058826],             # <<<<<<<<<<<<<<
 * [0.2980392156862745,0.3764705882352941,0.3176470588235294],
 * [0.45098039215686275,0.8745098039215686,0.9490196078431372],
 */
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 908, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_float_0_3803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_3803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_float_0_3803921568627451)) __PYX_ERR(1, 908, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_5215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_5215686274509804)) __PYX_ERR(1, 908, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_35294117647058826);
  __Pyx_GIVEREF(__pyx_float_0_35294117647058826);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_0_35294117647058826)) __PYX_ERR(1, 908, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":909
 * [0.5372549019607843,0.6235294117647059,0.4],
 * [0.3803921568627451,0.5215686274509804,0.35294117647058826],
 * [0.2980392156862745,0.3764705882352941,0.3176470588235294],             # <<<<<<<<<<<<<<
 * [0.45098039215686275,0.8745098039215686,0.9490196078431372],
 * [0.16470588235294117,0.7333333333333333,0.8156862745098039],
 */
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 909, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_3764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_float_0_3764705882352941)) __PYX_ERR(1, 909, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_3176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_float_0_3176470588235294)) __PYX_ERR(1, 909, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":910
 * [0.3803921568627451,0.5215686274509804,0.35294117647058826],
 * [0.2980392156862745,0.3764705882352941,0.3176470588235294],
 * [0.45098039215686275,0.8745098039215686,0.9490196078431372],             # <<<<<<<<<<<<<<
 * [0.16470588235294117,0.7333333333333333,0.8156862745098039],
 * [0.19215686274509805,0.36470588235294116,0.803921568627451],
 */
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_float_0_45098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_45098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_float_0_45098039215686275)) __PYX_ERR(1, 910, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_8745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_float_0_8745098039215686)) __PYX_ERR(1, 910, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9490196078431372);
  __Pyx_GIVEREF(__pyx_float_0_9490196078431372);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_float_0_9490196078431372)) __PYX_ERR(1, 910, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":911
 * [0.2980392156862745,0.3764705882352941,0.3176470588235294],
 * [0.45098039215686275,0.8745098039215686,0.9490196078431372],
 * [0.16470588235294117,0.7333333333333333,0.8156862745098039],             # <<<<<<<<<<<<<<
 * [0.19215686274509805,0.36470588235294116,0.803921568627451],
 * [0.2784313725490196,0.16470588235294117,0.611764705882353],
 */
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_INCREF(__pyx_float_0_16470588235294117);
  __Pyx_GIVEREF(__pyx_float_0_16470588235294117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_float_0_16470588235294117)) __PYX_ERR(1, 911, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_7333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_float_0_7333333333333333)) __PYX_ERR(1, 911, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_8156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_float_0_8156862745098039)) __PYX_ERR(1, 911, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":912
 * [0.45098039215686275,0.8745098039215686,0.9490196078431372],
 * [0.16470588235294117,0.7333333333333333,0.8156862745098039],
 * [0.19215686274509805,0.36470588235294116,0.803921568627451],             # <<<<<<<<<<<<<<
 * [0.2784313725490196,0.16470588235294117,0.611764705882353],
 * [0.6274509803921569,0.8470588235294118,0.8431372549019608],
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 912, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 912, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_803921568627451)) __PYX_ERR(1, 912, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":913
 * [0.16470588235294117,0.7333333333333333,0.8156862745098039],
 * [0.19215686274509805,0.36470588235294116,0.803921568627451],
 * [0.2784313725490196,0.16470588235294117,0.611764705882353],             # <<<<<<<<<<<<<<
 * [0.6274509803921569,0.8470588235294118,0.8431372549019608],
 * [0.49019607843137253,0.7450980392156863,0.9803921568627451],
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 913, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_2784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_2784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_0_2784313725490196)) __PYX_ERR(1, 913, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16470588235294117);
  __Pyx_GIVEREF(__pyx_float_0_16470588235294117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_16470588235294117)) __PYX_ERR(1, 913, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_611764705882353);
  __Pyx_GIVEREF(__pyx_float_0_611764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_611764705882353)) __PYX_ERR(1, 913, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":914
 * [0.19215686274509805,0.36470588235294116,0.803921568627451],
 * [0.2784313725490196,0.16470588235294117,0.611764705882353],
 * [0.6274509803921569,0.8470588235294118,0.8431372549019608],             # <<<<<<<<<<<<<<
 * [0.49019607843137253,0.7450980392156863,0.9803921568627451],
 * [0.4,0.5607843137254902,0.6862745098039216],
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 914, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_6274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_6274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_6274509803921569)) __PYX_ERR(1, 914, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_8470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_8470588235294118)) __PYX_ERR(1, 914, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_8431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_8431372549019608)) __PYX_ERR(1, 914, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":915
 * [0.2784313725490196,0.16470588235294117,0.611764705882353],
 * [0.6274509803921569,0.8470588235294118,0.8431372549019608],
 * [0.49019607843137253,0.7450980392156863,0.9803921568627451],             # <<<<<<<<<<<<<<
 * [0.4,0.5607843137254902,0.6862745098039216],
 * [0.34509803921568627,0.36470588235294116,0.5058823529411764],
 */
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 915, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_float_0_49019607843137253);
  __Pyx_GIVEREF(__pyx_float_0_49019607843137253);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_float_0_49019607843137253)) __PYX_ERR(1, 915, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_7450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_float_0_7450980392156863)) __PYX_ERR(1, 915, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_9803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_float_0_9803921568627451)) __PYX_ERR(1, 915, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":916
 * [0.6274509803921569,0.8470588235294118,0.8431372549019608],
 * [0.49019607843137253,0.7450980392156863,0.9803921568627451],
 * [0.4,0.5607843137254902,0.6862745098039216],             # <<<<<<<<<<<<<<
 * [0.34509803921568627,0.36470588235294116,0.5058823529411764],
 * [0.27058823529411763,0.21176470588235294,0.36470588235294116],
 */
  __pyx_t_73 = PyList_New(3); if (unlikely(!__pyx_t_73)) __PYX_ERR(1, 916, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_73);
  __Pyx_INCREF(__pyx_float_0_4);
  __Pyx_GIVEREF(__pyx_float_0_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 0, __pyx_float_0_4)) __PYX_ERR(1, 916, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 1, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 916, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6862745098039216);
  __Pyx_GIVEREF(__pyx_float_0_6862745098039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 2, __pyx_float_0_6862745098039216)) __PYX_ERR(1, 916, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":917
 * [0.49019607843137253,0.7450980392156863,0.9803921568627451],
 * [0.4,0.5607843137254902,0.6862745098039216],
 * [0.34509803921568627,0.36470588235294116,0.5058823529411764],             # <<<<<<<<<<<<<<
 * [0.27058823529411763,0.21176470588235294,0.36470588235294116],
 * [0.9647058823529412,0.7294117647058823,0.996078431372549],
 */
  __pyx_t_74 = PyList_New(3); if (unlikely(!__pyx_t_74)) __PYX_ERR(1, 917, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_74);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 0, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 917, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 1, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 917, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_5058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 2, __pyx_float_0_5058823529411764)) __PYX_ERR(1, 917, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":918
 * [0.4,0.5607843137254902,0.6862745098039216],
 * [0.34509803921568627,0.36470588235294116,0.5058823529411764],
 * [0.27058823529411763,0.21176470588235294,0.36470588235294116],             # <<<<<<<<<<<<<<
 * [0.9647058823529412,0.7294117647058823,0.996078431372549],
 * [0.8352941176470589,0.6235294117647059,0.9568627450980393],
 */
  __pyx_t_75 = PyList_New(3); if (unlikely(!__pyx_t_75)) __PYX_ERR(1, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_75);
  __Pyx_INCREF(__pyx_float_0_27058823529411763);
  __Pyx_GIVEREF(__pyx_float_0_27058823529411763);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 0, __pyx_float_0_27058823529411763)) __PYX_ERR(1, 918, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_21176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 1, __pyx_float_0_21176470588235294)) __PYX_ERR(1, 918, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 2, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 918, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":919
 * [0.34509803921568627,0.36470588235294116,0.5058823529411764],
 * [0.27058823529411763,0.21176470588235294,0.36470588235294116],
 * [0.9647058823529412,0.7294117647058823,0.996078431372549],             # <<<<<<<<<<<<<<
 * [0.8352941176470589,0.6235294117647059,0.9568627450980393],
 * [0.6901960784313725,0.4392156862745098,0.9215686274509803],
 */
  __pyx_t_76 = PyList_New(3); if (unlikely(!__pyx_t_76)) __PYX_ERR(1, 919, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_76);
  __Pyx_INCREF(__pyx_float_0_9647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_9647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 0, __pyx_float_0_9647058823529412)) __PYX_ERR(1, 919, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7294117647058823);
  __Pyx_GIVEREF(__pyx_float_0_7294117647058823);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 1, __pyx_float_0_7294117647058823)) __PYX_ERR(1, 919, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_996078431372549);
  __Pyx_GIVEREF(__pyx_float_0_996078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 2, __pyx_float_0_996078431372549)) __PYX_ERR(1, 919, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":920
 * [0.27058823529411763,0.21176470588235294,0.36470588235294116],
 * [0.9647058823529412,0.7294117647058823,0.996078431372549],
 * [0.8352941176470589,0.6235294117647059,0.9568627450980393],             # <<<<<<<<<<<<<<
 * [0.6901960784313725,0.4392156862745098,0.9215686274509803],
 * [0.48627450980392156,0.23529411764705882,0.8823529411764706],
 */
  __pyx_t_77 = PyList_New(3); if (unlikely(!__pyx_t_77)) __PYX_ERR(1, 920, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_77);
  __Pyx_INCREF(__pyx_float_0_8352941176470589);
  __Pyx_GIVEREF(__pyx_float_0_8352941176470589);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 0, __pyx_float_0_8352941176470589)) __PYX_ERR(1, 920, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_6235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 1, __pyx_float_0_6235294117647059)) __PYX_ERR(1, 920, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_9568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 2, __pyx_float_0_9568627450980393)) __PYX_ERR(1, 920, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":921
 * [0.9647058823529412,0.7294117647058823,0.996078431372549],
 * [0.8352941176470589,0.6235294117647059,0.9568627450980393],
 * [0.6901960784313725,0.4392156862745098,0.9215686274509803],             # <<<<<<<<<<<<<<
 * [0.48627450980392156,0.23529411764705882,0.8823529411764706],
 * [0.8588235294117647,0.8117647058823529,0.6941176470588235],
 */
  __pyx_t_78 = PyList_New(3); if (unlikely(!__pyx_t_78)) __PYX_ERR(1, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_78);
  __Pyx_INCREF(__pyx_float_0_6901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_6901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 0, __pyx_float_0_6901960784313725)) __PYX_ERR(1, 921, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_4392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 1, __pyx_float_0_4392156862745098)) __PYX_ERR(1, 921, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 2, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 921, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":922
 * [0.8352941176470589,0.6235294117647059,0.9568627450980393],
 * [0.6901960784313725,0.4392156862745098,0.9215686274509803],
 * [0.48627450980392156,0.23529411764705882,0.8823529411764706],             # <<<<<<<<<<<<<<
 * [0.8588235294117647,0.8117647058823529,0.6941176470588235],
 * [0.6627450980392157,0.6431372549019608,0.5529411764705883],
 */
  __pyx_t_79 = PyList_New(3); if (unlikely(!__pyx_t_79)) __PYX_ERR(1, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_79);
  __Pyx_INCREF(__pyx_float_0_48627450980392156);
  __Pyx_GIVEREF(__pyx_float_0_48627450980392156);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 0, __pyx_float_0_48627450980392156)) __PYX_ERR(1, 922, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 1, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 922, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_8823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 2, __pyx_float_0_8823529411764706)) __PYX_ERR(1, 922, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":923
 * [0.6901960784313725,0.4392156862745098,0.9215686274509803],
 * [0.48627450980392156,0.23529411764705882,0.8823529411764706],
 * [0.8588235294117647,0.8117647058823529,0.6941176470588235],             # <<<<<<<<<<<<<<
 * [0.6627450980392157,0.6431372549019608,0.5529411764705883],
 * [0.4823529411764706,0.5137254901960784,0.5098039215686274],
 */
  __pyx_t_80 = PyList_New(3); if (unlikely(!__pyx_t_80)) __PYX_ERR(1, 923, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_80);
  __Pyx_INCREF(__pyx_float_0_8588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_8588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 0, __pyx_float_0_8588235294117647)) __PYX_ERR(1, 923, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_8117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 1, __pyx_float_0_8117647058823529)) __PYX_ERR(1, 923, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6941176470588235);
  __Pyx_GIVEREF(__pyx_float_0_6941176470588235);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 2, __pyx_float_0_6941176470588235)) __PYX_ERR(1, 923, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":924
 * [0.48627450980392156,0.23529411764705882,0.8823529411764706],
 * [0.8588235294117647,0.8117647058823529,0.6941176470588235],
 * [0.6627450980392157,0.6431372549019608,0.5529411764705883],             # <<<<<<<<<<<<<<
 * [0.4823529411764706,0.5137254901960784,0.5098039215686274],
 * [0.37254901960784315,0.37254901960784315,0.43137254901960786]
 */
  __pyx_t_81 = PyList_New(3); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_81);
  __Pyx_INCREF(__pyx_float_0_6627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_6627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 0, __pyx_float_0_6627450980392157)) __PYX_ERR(1, 924, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_6431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 1, __pyx_float_0_6431372549019608)) __PYX_ERR(1, 924, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5529411764705883);
  __Pyx_GIVEREF(__pyx_float_0_5529411764705883);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 2, __pyx_float_0_5529411764705883)) __PYX_ERR(1, 924, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":925
 * [0.8588235294117647,0.8117647058823529,0.6941176470588235],
 * [0.6627450980392157,0.6431372549019608,0.5529411764705883],
 * [0.4823529411764706,0.5137254901960784,0.5098039215686274],             # <<<<<<<<<<<<<<
 * [0.37254901960784315,0.37254901960784315,0.43137254901960786]
 * ], dtype=float32)
 */
  __pyx_t_82 = PyList_New(3); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 0, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 925, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_5137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 1, __pyx_float_0_5137254901960784)) __PYX_ERR(1, 925, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 2, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 925, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":926
 * [0.6627450980392157,0.6431372549019608,0.5529411764705883],
 * [0.4823529411764706,0.5137254901960784,0.5098039215686274],
 * [0.37254901960784315,0.37254901960784315,0.43137254901960786]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * TWILIOQUEST76 =_TWILIOQUEST76_NORMALIZED * <float>255.0
 */
  __pyx_t_83 = PyList_New(3); if (unlikely(!__pyx_t_83)) __PYX_ERR(1, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_83);
  __Pyx_INCREF(__pyx_float_0_37254901960784315);
  __Pyx_GIVEREF(__pyx_float_0_37254901960784315);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_83, 0, __pyx_float_0_37254901960784315)) __PYX_ERR(1, 926, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_37254901960784315);
  __Pyx_GIVEREF(__pyx_float_0_37254901960784315);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_83, 1, __pyx_float_0_37254901960784315)) __PYX_ERR(1, 926, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_43137254901960786);
  __Pyx_GIVEREF(__pyx_float_0_43137254901960786);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_83, 2, __pyx_float_0_43137254901960786)) __PYX_ERR(1, 926, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":850
 * # https://lospec.com/palette-list/twilioquest-76
 * # Created by Kerrie Lake
 * _TWILIOQUEST76_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [1.0,1.0,1.0],
 * [0.9176470588235294,0.9176470588235294,0.9098039215686274],
 */
  __pyx_t_84 = PyList_New(76); if (unlikely(!__pyx_t_84)) __PYX_ERR(1, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_84);
  __Pyx_GIVEREF(__pyx_t_50);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 0, __pyx_t_50)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_48);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 1, __pyx_t_48)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 2, __pyx_t_13)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_47);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 3, __pyx_t_47)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_46);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 4, __pyx_t_46)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_45);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 5, __pyx_t_45)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_44);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 6, __pyx_t_44)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_43);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 7, __pyx_t_43)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_42);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 8, __pyx_t_42)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_41);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 9, __pyx_t_41)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_40);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 10, __pyx_t_40)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_39);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 11, __pyx_t_39)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_38);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 12, __pyx_t_38)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_35);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 13, __pyx_t_35)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 14, __pyx_t_24)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 15, __pyx_t_18)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 16, __pyx_t_19)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 17, __pyx_t_16)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_71);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 18, __pyx_t_71)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 19, __pyx_t_37)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 20, __pyx_t_4)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 21, __pyx_t_36)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 22, __pyx_t_26)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 23, __pyx_t_14)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 24, __pyx_t_25)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_51);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 25, __pyx_t_51)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_52);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 26, __pyx_t_52)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_53);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 27, __pyx_t_53)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_54);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 28, __pyx_t_54)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_55);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 29, __pyx_t_55)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_56);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 30, __pyx_t_56)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_57);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 31, __pyx_t_57)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_58);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 32, __pyx_t_58)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_59);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 33, __pyx_t_59)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_60);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 34, __pyx_t_60)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_61);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 35, __pyx_t_61)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_62);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 36, __pyx_t_62)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_63);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 37, __pyx_t_63)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_64);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 38, __pyx_t_64)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_65);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 39, __pyx_t_65)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_66);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 40, __pyx_t_66)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_67);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 41, __pyx_t_67)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_68);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 42, __pyx_t_68)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_69);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 43, __pyx_t_69)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 44, __pyx_t_15)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_70);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 45, __pyx_t_70)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_72);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 46, __pyx_t_72)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 47, __pyx_t_20)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 48, __pyx_t_34)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 49, __pyx_t_33)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 50, __pyx_t_10)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 51, __pyx_t_30)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 52, __pyx_t_29)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 53, __pyx_t_21)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 54, __pyx_t_28)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 55, __pyx_t_27)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 56, __pyx_t_22)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 57, __pyx_t_11)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 58, __pyx_t_31)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 59, __pyx_t_12)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 60, __pyx_t_32)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 61, __pyx_t_7)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 62, __pyx_t_5)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 63, __pyx_t_17)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 64, __pyx_t_23)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_73);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 65, __pyx_t_73)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_74);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 66, __pyx_t_74)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_75);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 67, __pyx_t_75)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_76);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 68, __pyx_t_76)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_77);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 69, __pyx_t_77)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_78);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 70, __pyx_t_78)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_79);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 71, __pyx_t_79)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_80);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 72, __pyx_t_80)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_81);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 73, __pyx_t_81)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_82);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 74, __pyx_t_82)) __PYX_ERR(1, 850, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_83);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 75, __pyx_t_83)) __PYX_ERR(1, 850, __pyx_L1_error);
  __pyx_t_50 = 0;
  __pyx_t_48 = 0;
  __pyx_t_13 = 0;
  __pyx_t_47 = 0;
  __pyx_t_46 = 0;
  __pyx_t_45 = 0;
  __pyx_t_44 = 0;
  __pyx_t_43 = 0;
  __pyx_t_42 = 0;
  __pyx_t_41 = 0;
  __pyx_t_40 = 0;
  __pyx_t_39 = 0;
  __pyx_t_38 = 0;
  __pyx_t_35 = 0;
  __pyx_t_24 = 0;
  __pyx_t_18 = 0;
  __pyx_t_19 = 0;
  __pyx_t_16 = 0;
  __pyx_t_71 = 0;
  __pyx_t_37 = 0;
  __pyx_t_4 = 0;
  __pyx_t_36 = 0;
  __pyx_t_26 = 0;
  __pyx_t_14 = 0;
  __pyx_t_25 = 0;
  __pyx_t_51 = 0;
  __pyx_t_52 = 0;
  __pyx_t_53 = 0;
  __pyx_t_54 = 0;
  __pyx_t_55 = 0;
  __pyx_t_56 = 0;
  __pyx_t_57 = 0;
  __pyx_t_58 = 0;
  __pyx_t_59 = 0;
  __pyx_t_60 = 0;
  __pyx_t_61 = 0;
  __pyx_t_62 = 0;
  __pyx_t_63 = 0;
  __pyx_t_64 = 0;
  __pyx_t_65 = 0;
  __pyx_t_66 = 0;
  __pyx_t_67 = 0;
  __pyx_t_68 = 0;
  __pyx_t_69 = 0;
  __pyx_t_15 = 0;
  __pyx_t_70 = 0;
  __pyx_t_72 = 0;
  __pyx_t_20 = 0;
  __pyx_t_34 = 0;
  __pyx_t_33 = 0;
  __pyx_t_10 = 0;
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_21 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_22 = 0;
  __pyx_t_11 = 0;
  __pyx_t_31 = 0;
  __pyx_t_12 = 0;
  __pyx_t_32 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = 0;
  __pyx_t_17 = 0;
  __pyx_t_23 = 0;
  __pyx_t_73 = 0;
  __pyx_t_74 = 0;
  __pyx_t_75 = 0;
  __pyx_t_76 = 0;
  __pyx_t_77 = 0;
  __pyx_t_78 = 0;
  __pyx_t_79 = 0;
  __pyx_t_80 = 0;
  __pyx_t_81 = 0;
  __pyx_t_82 = 0;
  __pyx_t_83 = 0;
  __pyx_t_83 = PyTuple_New(1); if (unlikely(!__pyx_t_83)) __PYX_ERR(1, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_83);
  __Pyx_GIVEREF(__pyx_t_84);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_83, 0, __pyx_t_84)) __PYX_ERR(1, 850, __pyx_L1_error);
  __pyx_t_84 = 0;

  /* "PygameShader/Palette.pyx":927
 * [0.4823529411764706,0.5137254901960784,0.5098039215686274],
 * [0.37254901960784315,0.37254901960784315,0.43137254901960786]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * TWILIOQUEST76 =_TWILIOQUEST76_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_84 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_84)) __PYX_ERR(1, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_84);
  __Pyx_GetModuleGlobalName(__pyx_t_82, __pyx_n_s_float32); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  if (PyDict_SetItem(__pyx_t_84, __pyx_n_s_dtype, __pyx_t_82) < 0) __PYX_ERR(1, 927, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;

  /* "PygameShader/Palette.pyx":850
 * # https://lospec.com/palette-list/twilioquest-76
 * # Created by Kerrie Lake
 * _TWILIOQUEST76_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [1.0,1.0,1.0],
 * [0.9176470588235294,0.9176470588235294,0.9098039215686274],
 */
  __pyx_t_82 = __Pyx_PyObject_Call(__pyx_t_49, __pyx_t_83, __pyx_t_84); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __Pyx_DECREF(__pyx_t_49); __pyx_t_49 = 0;
  __Pyx_DECREF(__pyx_t_83); __pyx_t_83 = 0;
  __Pyx_DECREF(__pyx_t_84); __pyx_t_84 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TWILIOQUEST76_NORMALIZED, __pyx_t_82) < 0) __PYX_ERR(1, 850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;

  /* "PygameShader/Palette.pyx":928
 * [0.37254901960784315,0.37254901960784315,0.43137254901960786]
 * ], dtype=float32)
 * TWILIOQUEST76 =_TWILIOQUEST76_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_82, __pyx_n_s_TWILIOQUEST76_NORMALIZED); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __pyx_t_84 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_84)) __PYX_ERR(1, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_84);
  __pyx_t_83 = PyNumber_Multiply(__pyx_t_82, __pyx_t_84); if (unlikely(!__pyx_t_83)) __PYX_ERR(1, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_83);
  __Pyx_DECREF(__pyx_t_82); __pyx_t_82 = 0;
  __Pyx_DECREF(__pyx_t_84); __pyx_t_84 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TWILIOQUEST76, __pyx_t_83) < 0) __PYX_ERR(1, 928, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_83); __pyx_t_83 = 0;

  /* "PygameShader/Palette.pyx":934
 * # https://lospec.com/palette-list/iridescent-crystal
 * # Created by LostInIndigo
 * _IRIDESCENTCRYSTAL_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.984313725490196,0.48627450980392156,0.5254901960784314],
 * [0.984313725490196,0.5568627450980392,0.5764705882352941],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_83, __pyx_n_s_array); if (unlikely(!__pyx_t_83)) __PYX_ERR(1, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_83);

  /* "PygameShader/Palette.pyx":935
 * # Created by LostInIndigo
 * _IRIDESCENTCRYSTAL_NORMALIZED = array([
 * [0.984313725490196,0.48627450980392156,0.5254901960784314],             # <<<<<<<<<<<<<<
 * [0.984313725490196,0.5568627450980392,0.5764705882352941],
 * [0.9882352941176471,0.6313725490196078,0.6274509803921569],
 */
  __pyx_t_84 = PyList_New(3); if (unlikely(!__pyx_t_84)) __PYX_ERR(1, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_84);
  __Pyx_INCREF(__pyx_float_0_984313725490196);
  __Pyx_GIVEREF(__pyx_float_0_984313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 0, __pyx_float_0_984313725490196)) __PYX_ERR(1, 935, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_48627450980392156);
  __Pyx_GIVEREF(__pyx_float_0_48627450980392156);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 1, __pyx_float_0_48627450980392156)) __PYX_ERR(1, 935, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_5254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 2, __pyx_float_0_5254901960784314)) __PYX_ERR(1, 935, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":936
 * _IRIDESCENTCRYSTAL_NORMALIZED = array([
 * [0.984313725490196,0.48627450980392156,0.5254901960784314],
 * [0.984313725490196,0.5568627450980392,0.5764705882352941],             # <<<<<<<<<<<<<<
 * [0.9882352941176471,0.6313725490196078,0.6274509803921569],
 * [0.9921568627450981,0.7058823529411765,0.6823529411764706],
 */
  __pyx_t_82 = PyList_New(3); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 936, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __Pyx_INCREF(__pyx_float_0_984313725490196);
  __Pyx_GIVEREF(__pyx_float_0_984313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 0, __pyx_float_0_984313725490196)) __PYX_ERR(1, 936, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_5568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 1, __pyx_float_0_5568627450980392)) __PYX_ERR(1, 936, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_5764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 2, __pyx_float_0_5764705882352941)) __PYX_ERR(1, 936, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":937
 * [0.984313725490196,0.48627450980392156,0.5254901960784314],
 * [0.984313725490196,0.5568627450980392,0.5764705882352941],
 * [0.9882352941176471,0.6313725490196078,0.6274509803921569],             # <<<<<<<<<<<<<<
 * [0.9921568627450981,0.7058823529411765,0.6823529411764706],
 * [0.996078431372549,0.7803921568627451,0.7333333333333333],
 */
  __pyx_t_49 = PyList_New(3); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 937, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_49);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 0, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 937, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_6313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 1, __pyx_float_0_6313725490196078)) __PYX_ERR(1, 937, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_6274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 2, __pyx_float_0_6274509803921569)) __PYX_ERR(1, 937, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":938
 * [0.984313725490196,0.5568627450980392,0.5764705882352941],
 * [0.9882352941176471,0.6313725490196078,0.6274509803921569],
 * [0.9921568627450981,0.7058823529411765,0.6823529411764706],             # <<<<<<<<<<<<<<
 * [0.996078431372549,0.7803921568627451,0.7333333333333333],
 * [1.0,0.8549019607843137,0.788235294117647],
 */
  __pyx_t_81 = PyList_New(3); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 938, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_81);
  __Pyx_INCREF(__pyx_float_0_9921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_9921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 0, __pyx_float_0_9921568627450981)) __PYX_ERR(1, 938, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_7058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 1, __pyx_float_0_7058823529411765)) __PYX_ERR(1, 938, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_6823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 2, __pyx_float_0_6823529411764706)) __PYX_ERR(1, 938, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":939
 * [0.9882352941176471,0.6313725490196078,0.6274509803921569],
 * [0.9921568627450981,0.7058823529411765,0.6823529411764706],
 * [0.996078431372549,0.7803921568627451,0.7333333333333333],             # <<<<<<<<<<<<<<
 * [1.0,0.8549019607843137,0.788235294117647],
 * [0.8156862745098039,0.396078431372549,0.28627450980392155],
 */
  __pyx_t_80 = PyList_New(3); if (unlikely(!__pyx_t_80)) __PYX_ERR(1, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_80);
  __Pyx_INCREF(__pyx_float_0_996078431372549);
  __Pyx_GIVEREF(__pyx_float_0_996078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 0, __pyx_float_0_996078431372549)) __PYX_ERR(1, 939, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_7803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 1, __pyx_float_0_7803921568627451)) __PYX_ERR(1, 939, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_7333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 2, __pyx_float_0_7333333333333333)) __PYX_ERR(1, 939, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":940
 * [0.9921568627450981,0.7058823529411765,0.6823529411764706],
 * [0.996078431372549,0.7803921568627451,0.7333333333333333],
 * [1.0,0.8549019607843137,0.788235294117647],             # <<<<<<<<<<<<<<
 * [0.8156862745098039,0.396078431372549,0.28627450980392155],
 * [0.8470588235294118,0.4980392156862745,0.36470588235294116],
 */
  __pyx_t_79 = PyList_New(3); if (unlikely(!__pyx_t_79)) __PYX_ERR(1, 940, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_79);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 0, __pyx_float_1_0)) __PYX_ERR(1, 940, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_8549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 1, __pyx_float_0_8549019607843137)) __PYX_ERR(1, 940, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 2, __pyx_float_0_788235294117647)) __PYX_ERR(1, 940, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":941
 * [0.996078431372549,0.7803921568627451,0.7333333333333333],
 * [1.0,0.8549019607843137,0.788235294117647],
 * [0.8156862745098039,0.396078431372549,0.28627450980392155],             # <<<<<<<<<<<<<<
 * [0.8470588235294118,0.4980392156862745,0.36470588235294116],
 * [0.8823529411764706,0.6078431372549019,0.44313725490196076],
 */
  __pyx_t_78 = PyList_New(3); if (unlikely(!__pyx_t_78)) __PYX_ERR(1, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_78);
  __Pyx_INCREF(__pyx_float_0_8156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_8156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 0, __pyx_float_0_8156862745098039)) __PYX_ERR(1, 941, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_396078431372549);
  __Pyx_GIVEREF(__pyx_float_0_396078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 1, __pyx_float_0_396078431372549)) __PYX_ERR(1, 941, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_28627450980392155);
  __Pyx_GIVEREF(__pyx_float_0_28627450980392155);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 2, __pyx_float_0_28627450980392155)) __PYX_ERR(1, 941, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":942
 * [1.0,0.8549019607843137,0.788235294117647],
 * [0.8156862745098039,0.396078431372549,0.28627450980392155],
 * [0.8470588235294118,0.4980392156862745,0.36470588235294116],             # <<<<<<<<<<<<<<
 * [0.8823529411764706,0.6078431372549019,0.44313725490196076],
 * [0.9176470588235294,0.7058823529411765,0.5254901960784314],
 */
  __pyx_t_77 = PyList_New(3); if (unlikely(!__pyx_t_77)) __PYX_ERR(1, 942, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_77);
  __Pyx_INCREF(__pyx_float_0_8470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_8470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 0, __pyx_float_0_8470588235294118)) __PYX_ERR(1, 942, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_4980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 1, __pyx_float_0_4980392156862745)) __PYX_ERR(1, 942, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 2, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 942, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":943
 * [0.8156862745098039,0.396078431372549,0.28627450980392155],
 * [0.8470588235294118,0.4980392156862745,0.36470588235294116],
 * [0.8823529411764706,0.6078431372549019,0.44313725490196076],             # <<<<<<<<<<<<<<
 * [0.9176470588235294,0.7058823529411765,0.5254901960784314],
 * [0.9529411764705882,0.807843137254902,0.6039215686274509],
 */
  __pyx_t_76 = PyList_New(3); if (unlikely(!__pyx_t_76)) __PYX_ERR(1, 943, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_76);
  __Pyx_INCREF(__pyx_float_0_8823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_8823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 0, __pyx_float_0_8823529411764706)) __PYX_ERR(1, 943, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6078431372549019);
  __Pyx_GIVEREF(__pyx_float_0_6078431372549019);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 1, __pyx_float_0_6078431372549019)) __PYX_ERR(1, 943, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_44313725490196076);
  __Pyx_GIVEREF(__pyx_float_0_44313725490196076);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 2, __pyx_float_0_44313725490196076)) __PYX_ERR(1, 943, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":944
 * [0.8470588235294118,0.4980392156862745,0.36470588235294116],
 * [0.8823529411764706,0.6078431372549019,0.44313725490196076],
 * [0.9176470588235294,0.7058823529411765,0.5254901960784314],             # <<<<<<<<<<<<<<
 * [0.9529411764705882,0.807843137254902,0.6039215686274509],
 * [0.9882352941176471,0.9137254901960784,0.6862745098039216],
 */
  __pyx_t_75 = PyList_New(3); if (unlikely(!__pyx_t_75)) __PYX_ERR(1, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_75);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 0, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 944, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_7058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 1, __pyx_float_0_7058823529411765)) __PYX_ERR(1, 944, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_5254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 2, __pyx_float_0_5254901960784314)) __PYX_ERR(1, 944, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":945
 * [0.8823529411764706,0.6078431372549019,0.44313725490196076],
 * [0.9176470588235294,0.7058823529411765,0.5254901960784314],
 * [0.9529411764705882,0.807843137254902,0.6039215686274509],             # <<<<<<<<<<<<<<
 * [0.9882352941176471,0.9137254901960784,0.6862745098039216],
 * [0.5450980392156862,0.9882352941176471,0.9333333333333333],
 */
  __pyx_t_74 = PyList_New(3); if (unlikely(!__pyx_t_74)) __PYX_ERR(1, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_74);
  __Pyx_INCREF(__pyx_float_0_9529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_9529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 0, __pyx_float_0_9529411764705882)) __PYX_ERR(1, 945, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_807843137254902);
  __Pyx_GIVEREF(__pyx_float_0_807843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 1, __pyx_float_0_807843137254902)) __PYX_ERR(1, 945, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6039215686274509);
  __Pyx_GIVEREF(__pyx_float_0_6039215686274509);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 2, __pyx_float_0_6039215686274509)) __PYX_ERR(1, 945, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":946
 * [0.9176470588235294,0.7058823529411765,0.5254901960784314],
 * [0.9529411764705882,0.807843137254902,0.6039215686274509],
 * [0.9882352941176471,0.9137254901960784,0.6862745098039216],             # <<<<<<<<<<<<<<
 * [0.5450980392156862,0.9882352941176471,0.9333333333333333],
 * [0.4392156862745098,0.8196078431372549,0.788235294117647],
 */
  __pyx_t_73 = PyList_New(3); if (unlikely(!__pyx_t_73)) __PYX_ERR(1, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_73);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 0, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 946, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_9137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 1, __pyx_float_0_9137254901960784)) __PYX_ERR(1, 946, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6862745098039216);
  __Pyx_GIVEREF(__pyx_float_0_6862745098039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 2, __pyx_float_0_6862745098039216)) __PYX_ERR(1, 946, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":947
 * [0.9529411764705882,0.807843137254902,0.6039215686274509],
 * [0.9882352941176471,0.9137254901960784,0.6862745098039216],
 * [0.5450980392156862,0.9882352941176471,0.9333333333333333],             # <<<<<<<<<<<<<<
 * [0.4392156862745098,0.8196078431372549,0.788235294117647],
 * [0.3333333333333333,0.6470588235294118,0.6392156862745098],
 */
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 947, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 947, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 947, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_9333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_float_0_9333333333333333)) __PYX_ERR(1, 947, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":948
 * [0.9882352941176471,0.9137254901960784,0.6862745098039216],
 * [0.5450980392156862,0.9882352941176471,0.9333333333333333],
 * [0.4392156862745098,0.8196078431372549,0.788235294117647],             # <<<<<<<<<<<<<<
 * [0.3333333333333333,0.6470588235294118,0.6392156862745098],
 * [0.2235294117647059,0.4745098039215686,0.49411764705882355],
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_4392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_4392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_4392156862745098)) __PYX_ERR(1, 948, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_8196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_8196078431372549)) __PYX_ERR(1, 948, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_788235294117647)) __PYX_ERR(1, 948, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":949
 * [0.5450980392156862,0.9882352941176471,0.9333333333333333],
 * [0.4392156862745098,0.8196078431372549,0.788235294117647],
 * [0.3333333333333333,0.6470588235294118,0.6392156862745098],             # <<<<<<<<<<<<<<
 * [0.2235294117647059,0.4745098039215686,0.49411764705882355],
 * [0.11764705882352941,0.30196078431372547,0.34509803921568627],
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_3333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_3333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_0_3333333333333333)) __PYX_ERR(1, 949, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 949, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_6392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_6392156862745098)) __PYX_ERR(1, 949, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":950
 * [0.4392156862745098,0.8196078431372549,0.788235294117647],
 * [0.3333333333333333,0.6470588235294118,0.6392156862745098],
 * [0.2235294117647059,0.4745098039215686,0.49411764705882355],             # <<<<<<<<<<<<<<
 * [0.11764705882352941,0.30196078431372547,0.34509803921568627],
 * [0.00784313725490196,0.12941176470588237,0.19607843137254902],
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 950, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 950, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_4745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_float_0_4745098039215686)) __PYX_ERR(1, 950, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_49411764705882355);
  __Pyx_GIVEREF(__pyx_float_0_49411764705882355);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_49411764705882355)) __PYX_ERR(1, 950, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":951
 * [0.3333333333333333,0.6470588235294118,0.6392156862745098],
 * [0.2235294117647059,0.4745098039215686,0.49411764705882355],
 * [0.11764705882352941,0.30196078431372547,0.34509803921568627],             # <<<<<<<<<<<<<<
 * [0.00784313725490196,0.12941176470588237,0.19607843137254902],
 * [0.1568627450980392,0.027450980392156862,0.13333333333333333],
 */
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_INCREF(__pyx_float_0_11764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_11764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_float_0_11764705882352941)) __PYX_ERR(1, 951, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_30196078431372547);
  __Pyx_GIVEREF(__pyx_float_0_30196078431372547);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_float_0_30196078431372547)) __PYX_ERR(1, 951, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 951, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":952
 * [0.2235294117647059,0.4745098039215686,0.49411764705882355],
 * [0.11764705882352941,0.30196078431372547,0.34509803921568627],
 * [0.00784313725490196,0.12941176470588237,0.19607843137254902],             # <<<<<<<<<<<<<<
 * [0.1568627450980392,0.027450980392156862,0.13333333333333333],
 * [0.29411764705882354,0.17254901960784313,0.3058823529411765],
 */
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 952, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_float_0_00784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_00784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_float_0_00784313725490196)) __PYX_ERR(1, 952, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12941176470588237);
  __Pyx_GIVEREF(__pyx_float_0_12941176470588237);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_float_0_12941176470588237)) __PYX_ERR(1, 952, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 952, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":953
 * [0.11764705882352941,0.30196078431372547,0.34509803921568627],
 * [0.00784313725490196,0.12941176470588237,0.19607843137254902],
 * [0.1568627450980392,0.027450980392156862,0.13333333333333333],             # <<<<<<<<<<<<<<
 * [0.29411764705882354,0.17254901960784313,0.3058823529411765],
 * [0.42745098039215684,0.3137254901960784,0.47843137254901963],
 */
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 953, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 953, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_027450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_027450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_float_0_027450980392156862)) __PYX_ERR(1, 953, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_13333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_float_0_13333333333333333)) __PYX_ERR(1, 953, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":954
 * [0.00784313725490196,0.12941176470588237,0.19607843137254902],
 * [0.1568627450980392,0.027450980392156862,0.13333333333333333],
 * [0.29411764705882354,0.17254901960784313,0.3058823529411765],             # <<<<<<<<<<<<<<
 * [0.42745098039215684,0.3137254901960784,0.47843137254901963],
 * [0.5647058823529412,0.4549019607843137,0.6470588235294118],
 */
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 954, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_float_0_29411764705882354);
  __Pyx_GIVEREF(__pyx_float_0_29411764705882354);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_float_0_29411764705882354)) __PYX_ERR(1, 954, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 954, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_3058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_0_3058823529411765)) __PYX_ERR(1, 954, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":955
 * [0.1568627450980392,0.027450980392156862,0.13333333333333333],
 * [0.29411764705882354,0.17254901960784313,0.3058823529411765],
 * [0.42745098039215684,0.3137254901960784,0.47843137254901963],             # <<<<<<<<<<<<<<
 * [0.5647058823529412,0.4549019607843137,0.6470588235294118],
 * [0.6980392156862745,0.596078431372549,0.8196078431372549],
 */
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 955, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_INCREF(__pyx_float_0_42745098039215684);
  __Pyx_GIVEREF(__pyx_float_0_42745098039215684);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_float_0_42745098039215684)) __PYX_ERR(1, 955, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_3137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_float_0_3137254901960784)) __PYX_ERR(1, 955, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137254901963);
  __Pyx_GIVEREF(__pyx_float_0_47843137254901963);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_float_0_47843137254901963)) __PYX_ERR(1, 955, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":956
 * [0.29411764705882354,0.17254901960784313,0.3058823529411765],
 * [0.42745098039215684,0.3137254901960784,0.47843137254901963],
 * [0.5647058823529412,0.4549019607843137,0.6470588235294118],             # <<<<<<<<<<<<<<
 * [0.6980392156862745,0.596078431372549,0.8196078431372549],
 * [0.8313725490196079,0.7372549019607844,0.9882352941176471],
 */
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 956, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_INCREF(__pyx_float_0_5647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_5647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_float_0_5647058823529412)) __PYX_ERR(1, 956, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_4549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_float_0_4549019607843137)) __PYX_ERR(1, 956, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 956, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":957
 * [0.42745098039215684,0.3137254901960784,0.47843137254901963],
 * [0.5647058823529412,0.4549019607843137,0.6470588235294118],
 * [0.6980392156862745,0.596078431372549,0.8196078431372549],             # <<<<<<<<<<<<<<
 * [0.8313725490196079,0.7372549019607844,0.9882352941176471],
 * [0.8823529411764706,0.6666666666666666,0.8352941176470589],
 */
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 957, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_INCREF(__pyx_float_0_6980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_6980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_float_0_6980392156862745)) __PYX_ERR(1, 957, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_596078431372549);
  __Pyx_GIVEREF(__pyx_float_0_596078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_float_0_596078431372549)) __PYX_ERR(1, 957, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_8196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_float_0_8196078431372549)) __PYX_ERR(1, 957, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":958
 * [0.5647058823529412,0.4549019607843137,0.6470588235294118],
 * [0.6980392156862745,0.596078431372549,0.8196078431372549],
 * [0.8313725490196079,0.7372549019607844,0.9882352941176471],             # <<<<<<<<<<<<<<
 * [0.8823529411764706,0.6666666666666666,0.8352941176470589],
 * [0.9019607843137255,0.615686274509804,0.8627450980392157],
 */
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 958, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_float_0_8313725490196079);
  __Pyx_GIVEREF(__pyx_float_0_8313725490196079);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_float_0_8313725490196079)) __PYX_ERR(1, 958, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7372549019607844);
  __Pyx_GIVEREF(__pyx_float_0_7372549019607844);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_float_0_7372549019607844)) __PYX_ERR(1, 958, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 958, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":959
 * [0.6980392156862745,0.596078431372549,0.8196078431372549],
 * [0.8313725490196079,0.7372549019607844,0.9882352941176471],
 * [0.8823529411764706,0.6666666666666666,0.8352941176470589],             # <<<<<<<<<<<<<<
 * [0.9019607843137255,0.615686274509804,0.8627450980392157],
 * [0.9215686274509803,0.5647058823529412,0.8901960784313725],
 */
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 959, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_0_8823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_8823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_0_8823529411764706)) __PYX_ERR(1, 959, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_6666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_6666666666666666)) __PYX_ERR(1, 959, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8352941176470589);
  __Pyx_GIVEREF(__pyx_float_0_8352941176470589);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_8352941176470589)) __PYX_ERR(1, 959, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":960
 * [0.8313725490196079,0.7372549019607844,0.9882352941176471],
 * [0.8823529411764706,0.6666666666666666,0.8352941176470589],
 * [0.9019607843137255,0.615686274509804,0.8627450980392157],             # <<<<<<<<<<<<<<
 * [0.9215686274509803,0.5647058823529412,0.8901960784313725],
 * [0.9411764705882353,0.5137254901960784,0.9215686274509803],
 */
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 960, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_INCREF(__pyx_float_0_9019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_9019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_float_0_9019607843137255)) __PYX_ERR(1, 960, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_615686274509804);
  __Pyx_GIVEREF(__pyx_float_0_615686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_float_0_615686274509804)) __PYX_ERR(1, 960, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_8627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_float_0_8627450980392157)) __PYX_ERR(1, 960, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":961
 * [0.8823529411764706,0.6666666666666666,0.8352941176470589],
 * [0.9019607843137255,0.615686274509804,0.8627450980392157],
 * [0.9215686274509803,0.5647058823529412,0.8901960784313725],             # <<<<<<<<<<<<<<
 * [0.9411764705882353,0.5137254901960784,0.9215686274509803],
 * [0.7647058823529411,0.4392156862745098,0.8117647058823529],
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 961, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_5647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_5647058823529412)) __PYX_ERR(1, 961, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_8901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_8901960784313725)) __PYX_ERR(1, 961, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":962
 * [0.9019607843137255,0.615686274509804,0.8627450980392157],
 * [0.9215686274509803,0.5647058823529412,0.8901960784313725],
 * [0.9411764705882353,0.5137254901960784,0.9215686274509803],             # <<<<<<<<<<<<<<
 * [0.7647058823529411,0.4392156862745098,0.8117647058823529],
 * [0.5882352941176471,0.36470588235294116,0.7019607843137254],
 */
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_INCREF(__pyx_float_0_9411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_9411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_float_0_9411764705882353)) __PYX_ERR(1, 962, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_5137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_float_0_5137254901960784)) __PYX_ERR(1, 962, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 962, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":963
 * [0.9215686274509803,0.5647058823529412,0.8901960784313725],
 * [0.9411764705882353,0.5137254901960784,0.9215686274509803],
 * [0.7647058823529411,0.4392156862745098,0.8117647058823529],             # <<<<<<<<<<<<<<
 * [0.5882352941176471,0.36470588235294116,0.7019607843137254],
 * [0.4117647058823529,0.2901960784313726,0.592156862745098],
 */
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 963, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_INCREF(__pyx_float_0_7647058823529411);
  __Pyx_GIVEREF(__pyx_float_0_7647058823529411);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_float_0_7647058823529411)) __PYX_ERR(1, 963, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_4392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_float_0_4392156862745098)) __PYX_ERR(1, 963, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_8117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_float_0_8117647058823529)) __PYX_ERR(1, 963, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":964
 * [0.9411764705882353,0.5137254901960784,0.9215686274509803],
 * [0.7647058823529411,0.4392156862745098,0.8117647058823529],
 * [0.5882352941176471,0.36470588235294116,0.7019607843137254],             # <<<<<<<<<<<<<<
 * [0.4117647058823529,0.2901960784313726,0.592156862745098],
 * [0.23529411764705882,0.21568627450980393,0.4823529411764706],
 */
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_0_5882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_5882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_0_5882352941176471)) __PYX_ERR(1, 964, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 964, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7019607843137254);
  __Pyx_GIVEREF(__pyx_float_0_7019607843137254);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_7019607843137254)) __PYX_ERR(1, 964, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":965
 * [0.7647058823529411,0.4392156862745098,0.8117647058823529],
 * [0.5882352941176471,0.36470588235294116,0.7019607843137254],
 * [0.4117647058823529,0.2901960784313726,0.592156862745098],             # <<<<<<<<<<<<<<
 * [0.23529411764705882,0.21568627450980393,0.4823529411764706],
 * [0.0196078431372549,0.16862745098039217,0.49411764705882355],
 */
  __pyx_t_72 = PyList_New(3); if (unlikely(!__pyx_t_72)) __PYX_ERR(1, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_72);
  __Pyx_INCREF(__pyx_float_0_4117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_4117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 0, __pyx_float_0_4117647058823529)) __PYX_ERR(1, 965, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2901960784313726);
  __Pyx_GIVEREF(__pyx_float_0_2901960784313726);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 1, __pyx_float_0_2901960784313726)) __PYX_ERR(1, 965, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 2, __pyx_float_0_592156862745098)) __PYX_ERR(1, 965, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":966
 * [0.5882352941176471,0.36470588235294116,0.7019607843137254],
 * [0.4117647058823529,0.2901960784313726,0.592156862745098],
 * [0.23529411764705882,0.21568627450980393,0.4823529411764706],             # <<<<<<<<<<<<<<
 * [0.0196078431372549,0.16862745098039217,0.49411764705882355],
 * [0.08235294117647059,0.23921568627450981,0.5607843137254902],
 */
  __pyx_t_70 = PyList_New(3); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_70);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 0, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 966, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 1, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 966, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 2, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 966, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":967
 * [0.4117647058823529,0.2901960784313726,0.592156862745098],
 * [0.23529411764705882,0.21568627450980393,0.4823529411764706],
 * [0.0196078431372549,0.16862745098039217,0.49411764705882355],             # <<<<<<<<<<<<<<
 * [0.08235294117647059,0.23921568627450981,0.5607843137254902],
 * [0.14901960784313725,0.3137254901960784,0.6313725490196078],
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 967, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_0196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_0196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_0196078431372549)) __PYX_ERR(1, 967, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 967, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_49411764705882355);
  __Pyx_GIVEREF(__pyx_float_0_49411764705882355);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_49411764705882355)) __PYX_ERR(1, 967, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":968
 * [0.23529411764705882,0.21568627450980393,0.4823529411764706],
 * [0.0196078431372549,0.16862745098039217,0.49411764705882355],
 * [0.08235294117647059,0.23921568627450981,0.5607843137254902],             # <<<<<<<<<<<<<<
 * [0.14901960784313725,0.3137254901960784,0.6313725490196078],
 * [0.21568627450980393,0.38823529411764707,0.7019607843137254],
 */
  __pyx_t_69 = PyList_New(3); if (unlikely(!__pyx_t_69)) __PYX_ERR(1, 968, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_69);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 0, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 968, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_23921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 1, __pyx_float_0_23921568627450981)) __PYX_ERR(1, 968, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 2, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 968, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":969
 * [0.0196078431372549,0.16862745098039217,0.49411764705882355],
 * [0.08235294117647059,0.23921568627450981,0.5607843137254902],
 * [0.14901960784313725,0.3137254901960784,0.6313725490196078],             # <<<<<<<<<<<<<<
 * [0.21568627450980393,0.38823529411764707,0.7019607843137254],
 * [0.2823529411764706,0.4627450980392157,0.7725490196078432],
 */
  __pyx_t_68 = PyList_New(3); if (unlikely(!__pyx_t_68)) __PYX_ERR(1, 969, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_68);
  __Pyx_INCREF(__pyx_float_0_14901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_14901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 0, __pyx_float_0_14901960784313725)) __PYX_ERR(1, 969, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_3137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 1, __pyx_float_0_3137254901960784)) __PYX_ERR(1, 969, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_6313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 2, __pyx_float_0_6313725490196078)) __PYX_ERR(1, 969, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":970
 * [0.08235294117647059,0.23921568627450981,0.5607843137254902],
 * [0.14901960784313725,0.3137254901960784,0.6313725490196078],
 * [0.21568627450980393,0.38823529411764707,0.7019607843137254],             # <<<<<<<<<<<<<<
 * [0.2823529411764706,0.4627450980392157,0.7725490196078432],
 * [0.34901960784313724,0.5372549019607843,0.8431372549019608],
 */
  __pyx_t_67 = PyList_New(3); if (unlikely(!__pyx_t_67)) __PYX_ERR(1, 970, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_67);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 0, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 970, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_38823529411764707);
  __Pyx_GIVEREF(__pyx_float_0_38823529411764707);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 1, __pyx_float_0_38823529411764707)) __PYX_ERR(1, 970, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7019607843137254);
  __Pyx_GIVEREF(__pyx_float_0_7019607843137254);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 2, __pyx_float_0_7019607843137254)) __PYX_ERR(1, 970, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":971
 * [0.14901960784313725,0.3137254901960784,0.6313725490196078],
 * [0.21568627450980393,0.38823529411764707,0.7019607843137254],
 * [0.2823529411764706,0.4627450980392157,0.7725490196078432],             # <<<<<<<<<<<<<<
 * [0.34901960784313724,0.5372549019607843,0.8431372549019608],
 * [0.41568627450980394,0.611764705882353,0.9137254901960784],
 */
  __pyx_t_66 = PyList_New(3); if (unlikely(!__pyx_t_66)) __PYX_ERR(1, 971, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_66);
  __Pyx_INCREF(__pyx_float_0_2823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_2823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 0, __pyx_float_0_2823529411764706)) __PYX_ERR(1, 971, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_4627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 1, __pyx_float_0_4627450980392157)) __PYX_ERR(1, 971, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 2, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 971, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":972
 * [0.21568627450980393,0.38823529411764707,0.7019607843137254],
 * [0.2823529411764706,0.4627450980392157,0.7725490196078432],
 * [0.34901960784313724,0.5372549019607843,0.8431372549019608],             # <<<<<<<<<<<<<<
 * [0.41568627450980394,0.611764705882353,0.9137254901960784],
 * [0.4823529411764706,0.6862745098039216,0.984313725490196],
 */
  __pyx_t_65 = PyList_New(3); if (unlikely(!__pyx_t_65)) __PYX_ERR(1, 972, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_65);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 0, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 972, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_5372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 1, __pyx_float_0_5372549019607843)) __PYX_ERR(1, 972, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_8431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 2, __pyx_float_0_8431372549019608)) __PYX_ERR(1, 972, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":973
 * [0.2823529411764706,0.4627450980392157,0.7725490196078432],
 * [0.34901960784313724,0.5372549019607843,0.8431372549019608],
 * [0.41568627450980394,0.611764705882353,0.9137254901960784],             # <<<<<<<<<<<<<<
 * [0.4823529411764706,0.6862745098039216,0.984313725490196],
 * [0.6588235294117647,0.7098039215686275,0.984313725490196],
 */
  __pyx_t_64 = PyList_New(3); if (unlikely(!__pyx_t_64)) __PYX_ERR(1, 973, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_64);
  __Pyx_INCREF(__pyx_float_0_41568627450980394);
  __Pyx_GIVEREF(__pyx_float_0_41568627450980394);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 0, __pyx_float_0_41568627450980394)) __PYX_ERR(1, 973, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_611764705882353);
  __Pyx_GIVEREF(__pyx_float_0_611764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 1, __pyx_float_0_611764705882353)) __PYX_ERR(1, 973, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_9137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 2, __pyx_float_0_9137254901960784)) __PYX_ERR(1, 973, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":974
 * [0.34901960784313724,0.5372549019607843,0.8431372549019608],
 * [0.41568627450980394,0.611764705882353,0.9137254901960784],
 * [0.4823529411764706,0.6862745098039216,0.984313725490196],             # <<<<<<<<<<<<<<
 * [0.6588235294117647,0.7098039215686275,0.984313725490196],
 * [0.6509803921568628,0.6352941176470588,0.8745098039215686],
 */
  __pyx_t_63 = PyList_New(3); if (unlikely(!__pyx_t_63)) __PYX_ERR(1, 974, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_63);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 0, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 974, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6862745098039216);
  __Pyx_GIVEREF(__pyx_float_0_6862745098039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 1, __pyx_float_0_6862745098039216)) __PYX_ERR(1, 974, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_984313725490196);
  __Pyx_GIVEREF(__pyx_float_0_984313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 2, __pyx_float_0_984313725490196)) __PYX_ERR(1, 974, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":975
 * [0.41568627450980394,0.611764705882353,0.9137254901960784],
 * [0.4823529411764706,0.6862745098039216,0.984313725490196],
 * [0.6588235294117647,0.7098039215686275,0.984313725490196],             # <<<<<<<<<<<<<<
 * [0.6509803921568628,0.6352941176470588,0.8745098039215686],
 * [0.6431372549019608,0.5568627450980392,0.7607843137254902],
 */
  __pyx_t_62 = PyList_New(3); if (unlikely(!__pyx_t_62)) __PYX_ERR(1, 975, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_62);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 0, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 975, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 1, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 975, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_984313725490196);
  __Pyx_GIVEREF(__pyx_float_0_984313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 2, __pyx_float_0_984313725490196)) __PYX_ERR(1, 975, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":976
 * [0.4823529411764706,0.6862745098039216,0.984313725490196],
 * [0.6588235294117647,0.7098039215686275,0.984313725490196],
 * [0.6509803921568628,0.6352941176470588,0.8745098039215686],             # <<<<<<<<<<<<<<
 * [0.6431372549019608,0.5568627450980392,0.7607843137254902],
 * [0.6352941176470588,0.47843137254901963,0.6509803921568628],
 */
  __pyx_t_61 = PyList_New(3); if (unlikely(!__pyx_t_61)) __PYX_ERR(1, 976, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_61);
  __Pyx_INCREF(__pyx_float_0_6509803921568628);
  __Pyx_GIVEREF(__pyx_float_0_6509803921568628);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 0, __pyx_float_0_6509803921568628)) __PYX_ERR(1, 976, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6352941176470588);
  __Pyx_GIVEREF(__pyx_float_0_6352941176470588);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 1, __pyx_float_0_6352941176470588)) __PYX_ERR(1, 976, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_8745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 2, __pyx_float_0_8745098039215686)) __PYX_ERR(1, 976, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":977
 * [0.6588235294117647,0.7098039215686275,0.984313725490196],
 * [0.6509803921568628,0.6352941176470588,0.8745098039215686],
 * [0.6431372549019608,0.5568627450980392,0.7607843137254902],             # <<<<<<<<<<<<<<
 * [0.6352941176470588,0.47843137254901963,0.6509803921568628],
 * [0.6274509803921569,0.4,0.5372549019607843],
 */
  __pyx_t_60 = PyList_New(3); if (unlikely(!__pyx_t_60)) __PYX_ERR(1, 977, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_60);
  __Pyx_INCREF(__pyx_float_0_6431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_6431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 0, __pyx_float_0_6431372549019608)) __PYX_ERR(1, 977, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_5568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 1, __pyx_float_0_5568627450980392)) __PYX_ERR(1, 977, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_7607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 2, __pyx_float_0_7607843137254902)) __PYX_ERR(1, 977, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":978
 * [0.6509803921568628,0.6352941176470588,0.8745098039215686],
 * [0.6431372549019608,0.5568627450980392,0.7607843137254902],
 * [0.6352941176470588,0.47843137254901963,0.6509803921568628],             # <<<<<<<<<<<<<<
 * [0.6274509803921569,0.4,0.5372549019607843],
 * [0.7294117647058823,0.5294117647058824,0.6549019607843137],
 */
  __pyx_t_59 = PyList_New(3); if (unlikely(!__pyx_t_59)) __PYX_ERR(1, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_59);
  __Pyx_INCREF(__pyx_float_0_6352941176470588);
  __Pyx_GIVEREF(__pyx_float_0_6352941176470588);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 0, __pyx_float_0_6352941176470588)) __PYX_ERR(1, 978, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137254901963);
  __Pyx_GIVEREF(__pyx_float_0_47843137254901963);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 1, __pyx_float_0_47843137254901963)) __PYX_ERR(1, 978, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6509803921568628);
  __Pyx_GIVEREF(__pyx_float_0_6509803921568628);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 2, __pyx_float_0_6509803921568628)) __PYX_ERR(1, 978, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":979
 * [0.6431372549019608,0.5568627450980392,0.7607843137254902],
 * [0.6352941176470588,0.47843137254901963,0.6509803921568628],
 * [0.6274509803921569,0.4,0.5372549019607843],             # <<<<<<<<<<<<<<
 * [0.7294117647058823,0.5294117647058824,0.6549019607843137],
 * [0.8313725490196079,0.6627450980392157,0.7725490196078432],
 */
  __pyx_t_58 = PyList_New(3); if (unlikely(!__pyx_t_58)) __PYX_ERR(1, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_58);
  __Pyx_INCREF(__pyx_float_0_6274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_6274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 0, __pyx_float_0_6274509803921569)) __PYX_ERR(1, 979, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4);
  __Pyx_GIVEREF(__pyx_float_0_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 1, __pyx_float_0_4)) __PYX_ERR(1, 979, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_5372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 2, __pyx_float_0_5372549019607843)) __PYX_ERR(1, 979, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":980
 * [0.6352941176470588,0.47843137254901963,0.6509803921568628],
 * [0.6274509803921569,0.4,0.5372549019607843],
 * [0.7294117647058823,0.5294117647058824,0.6549019607843137],             # <<<<<<<<<<<<<<
 * [0.8313725490196079,0.6627450980392157,0.7725490196078432],
 * [0.9372549019607843,0.796078431372549,0.8901960784313725]
 */
  __pyx_t_57 = PyList_New(3); if (unlikely(!__pyx_t_57)) __PYX_ERR(1, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_57);
  __Pyx_INCREF(__pyx_float_0_7294117647058823);
  __Pyx_GIVEREF(__pyx_float_0_7294117647058823);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 0, __pyx_float_0_7294117647058823)) __PYX_ERR(1, 980, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_5294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 1, __pyx_float_0_5294117647058824)) __PYX_ERR(1, 980, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_6549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 2, __pyx_float_0_6549019607843137)) __PYX_ERR(1, 980, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":981
 * [0.6274509803921569,0.4,0.5372549019607843],
 * [0.7294117647058823,0.5294117647058824,0.6549019607843137],
 * [0.8313725490196079,0.6627450980392157,0.7725490196078432],             # <<<<<<<<<<<<<<
 * [0.9372549019607843,0.796078431372549,0.8901960784313725]
 * ], dtype=float32)
 */
  __pyx_t_56 = PyList_New(3); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_56);
  __Pyx_INCREF(__pyx_float_0_8313725490196079);
  __Pyx_GIVEREF(__pyx_float_0_8313725490196079);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 0, __pyx_float_0_8313725490196079)) __PYX_ERR(1, 981, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_6627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 1, __pyx_float_0_6627450980392157)) __PYX_ERR(1, 981, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 2, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 981, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":982
 * [0.7294117647058823,0.5294117647058824,0.6549019607843137],
 * [0.8313725490196079,0.6627450980392157,0.7725490196078432],
 * [0.9372549019607843,0.796078431372549,0.8901960784313725]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * IRIDESCENTCRYSTAL =_IRIDESCENTCRYSTAL_NORMALIZED * <float>255.0
 */
  __pyx_t_55 = PyList_New(3); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 982, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);
  __Pyx_INCREF(__pyx_float_0_9372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_9372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 0, __pyx_float_0_9372549019607843)) __PYX_ERR(1, 982, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_796078431372549);
  __Pyx_GIVEREF(__pyx_float_0_796078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 1, __pyx_float_0_796078431372549)) __PYX_ERR(1, 982, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_8901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 2, __pyx_float_0_8901960784313725)) __PYX_ERR(1, 982, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":934
 * # https://lospec.com/palette-list/iridescent-crystal
 * # Created by LostInIndigo
 * _IRIDESCENTCRYSTAL_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.984313725490196,0.48627450980392156,0.5254901960784314],
 * [0.984313725490196,0.5568627450980392,0.5764705882352941],
 */
  __pyx_t_54 = PyList_New(48); if (unlikely(!__pyx_t_54)) __PYX_ERR(1, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_54);
  __Pyx_GIVEREF(__pyx_t_84);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 0, __pyx_t_84)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_82);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 1, __pyx_t_82)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_49);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 2, __pyx_t_49)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_81);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 3, __pyx_t_81)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_80);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 4, __pyx_t_80)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_79);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 5, __pyx_t_79)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_78);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 6, __pyx_t_78)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_77);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 7, __pyx_t_77)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_76);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 8, __pyx_t_76)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_75);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 9, __pyx_t_75)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_74);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 10, __pyx_t_74)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_73);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 11, __pyx_t_73)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 12, __pyx_t_23)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 13, __pyx_t_17)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 14, __pyx_t_5)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 15, __pyx_t_7)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 16, __pyx_t_32)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 17, __pyx_t_12)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 18, __pyx_t_31)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 19, __pyx_t_11)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 20, __pyx_t_22)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 21, __pyx_t_27)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 22, __pyx_t_28)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 23, __pyx_t_21)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 24, __pyx_t_29)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 25, __pyx_t_30)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 26, __pyx_t_10)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 27, __pyx_t_33)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 28, __pyx_t_34)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 29, __pyx_t_20)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_72);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 30, __pyx_t_72)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_70);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 31, __pyx_t_70)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 32, __pyx_t_15)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_69);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 33, __pyx_t_69)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_68);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 34, __pyx_t_68)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_67);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 35, __pyx_t_67)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_66);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 36, __pyx_t_66)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_65);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 37, __pyx_t_65)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_64);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 38, __pyx_t_64)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_63);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 39, __pyx_t_63)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_62);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 40, __pyx_t_62)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_61);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 41, __pyx_t_61)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_60);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 42, __pyx_t_60)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_59);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 43, __pyx_t_59)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_58);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 44, __pyx_t_58)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_57);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 45, __pyx_t_57)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_56);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 46, __pyx_t_56)) __PYX_ERR(1, 934, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_55);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 47, __pyx_t_55)) __PYX_ERR(1, 934, __pyx_L1_error);
  __pyx_t_84 = 0;
  __pyx_t_82 = 0;
  __pyx_t_49 = 0;
  __pyx_t_81 = 0;
  __pyx_t_80 = 0;
  __pyx_t_79 = 0;
  __pyx_t_78 = 0;
  __pyx_t_77 = 0;
  __pyx_t_76 = 0;
  __pyx_t_75 = 0;
  __pyx_t_74 = 0;
  __pyx_t_73 = 0;
  __pyx_t_23 = 0;
  __pyx_t_17 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_32 = 0;
  __pyx_t_12 = 0;
  __pyx_t_31 = 0;
  __pyx_t_11 = 0;
  __pyx_t_22 = 0;
  __pyx_t_27 = 0;
  __pyx_t_28 = 0;
  __pyx_t_21 = 0;
  __pyx_t_29 = 0;
  __pyx_t_30 = 0;
  __pyx_t_10 = 0;
  __pyx_t_33 = 0;
  __pyx_t_34 = 0;
  __pyx_t_20 = 0;
  __pyx_t_72 = 0;
  __pyx_t_70 = 0;
  __pyx_t_15 = 0;
  __pyx_t_69 = 0;
  __pyx_t_68 = 0;
  __pyx_t_67 = 0;
  __pyx_t_66 = 0;
  __pyx_t_65 = 0;
  __pyx_t_64 = 0;
  __pyx_t_63 = 0;
  __pyx_t_62 = 0;
  __pyx_t_61 = 0;
  __pyx_t_60 = 0;
  __pyx_t_59 = 0;
  __pyx_t_58 = 0;
  __pyx_t_57 = 0;
  __pyx_t_56 = 0;
  __pyx_t_55 = 0;
  __pyx_t_55 = PyTuple_New(1); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);
  __Pyx_GIVEREF(__pyx_t_54);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_55, 0, __pyx_t_54)) __PYX_ERR(1, 934, __pyx_L1_error);
  __pyx_t_54 = 0;

  /* "PygameShader/Palette.pyx":983
 * [0.8313725490196079,0.6627450980392157,0.7725490196078432],
 * [0.9372549019607843,0.796078431372549,0.8901960784313725]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * IRIDESCENTCRYSTAL =_IRIDESCENTCRYSTAL_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_54 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_54)) __PYX_ERR(1, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_54);
  __Pyx_GetModuleGlobalName(__pyx_t_56, __pyx_n_s_float32); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 983, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_56);
  if (PyDict_SetItem(__pyx_t_54, __pyx_n_s_dtype, __pyx_t_56) < 0) __PYX_ERR(1, 983, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_56); __pyx_t_56 = 0;

  /* "PygameShader/Palette.pyx":934
 * # https://lospec.com/palette-list/iridescent-crystal
 * # Created by LostInIndigo
 * _IRIDESCENTCRYSTAL_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.984313725490196,0.48627450980392156,0.5254901960784314],
 * [0.984313725490196,0.5568627450980392,0.5764705882352941],
 */
  __pyx_t_56 = __Pyx_PyObject_Call(__pyx_t_83, __pyx_t_55, __pyx_t_54); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_56);
  __Pyx_DECREF(__pyx_t_83); __pyx_t_83 = 0;
  __Pyx_DECREF(__pyx_t_55); __pyx_t_55 = 0;
  __Pyx_DECREF(__pyx_t_54); __pyx_t_54 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IRIDESCENTCRYSTAL_NORMALIZED, __pyx_t_56) < 0) __PYX_ERR(1, 934, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_56); __pyx_t_56 = 0;

  /* "PygameShader/Palette.pyx":984
 * [0.9372549019607843,0.796078431372549,0.8901960784313725]
 * ], dtype=float32)
 * IRIDESCENTCRYSTAL =_IRIDESCENTCRYSTAL_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_56, __pyx_n_s_IRIDESCENTCRYSTAL_NORMALIZED); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_56);
  __pyx_t_54 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_54)) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_54);
  __pyx_t_55 = PyNumber_Multiply(__pyx_t_56, __pyx_t_54); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);
  __Pyx_DECREF(__pyx_t_56); __pyx_t_56 = 0;
  __Pyx_DECREF(__pyx_t_54); __pyx_t_54 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_IRIDESCENTCRYSTAL, __pyx_t_55) < 0) __PYX_ERR(1, 984, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_55); __pyx_t_55 = 0;

  /* "PygameShader/Palette.pyx":989
 * # https://lospec.com/palette-list/aap-splendor128
 * # Created by Adigun A. Polack
 * _AAPSPLENDOR128_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0196078431372549,0.01568627450980392,0.011764705882352941],
 * [0.054901960784313725,0.047058823529411764,0.047058823529411764],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_55, __pyx_n_s_array); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);

  /* "PygameShader/Palette.pyx":990
 * # Created by Adigun A. Polack
 * _AAPSPLENDOR128_NORMALIZED = array([
 * [0.0196078431372549,0.01568627450980392,0.011764705882352941],             # <<<<<<<<<<<<<<
 * [0.054901960784313725,0.047058823529411764,0.047058823529411764],
 * [0.17647058823529413,0.10588235294117647,0.11764705882352941],
 */
  __pyx_t_54 = PyList_New(3); if (unlikely(!__pyx_t_54)) __PYX_ERR(1, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_54);
  __Pyx_INCREF(__pyx_float_0_0196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_0196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 0, __pyx_float_0_0196078431372549)) __PYX_ERR(1, 990, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_01568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_01568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 1, __pyx_float_0_01568627450980392)) __PYX_ERR(1, 990, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_011764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_011764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_54, 2, __pyx_float_0_011764705882352941)) __PYX_ERR(1, 990, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":991
 * _AAPSPLENDOR128_NORMALIZED = array([
 * [0.0196078431372549,0.01568627450980392,0.011764705882352941],
 * [0.054901960784313725,0.047058823529411764,0.047058823529411764],             # <<<<<<<<<<<<<<
 * [0.17647058823529413,0.10588235294117647,0.11764705882352941],
 * [0.3803921568627451,0.15294117647058825,0.12941176470588237],
 */
  __pyx_t_56 = PyList_New(3); if (unlikely(!__pyx_t_56)) __PYX_ERR(1, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_56);
  __Pyx_INCREF(__pyx_float_0_054901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_054901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 0, __pyx_float_0_054901960784313725)) __PYX_ERR(1, 991, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_047058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_047058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 1, __pyx_float_0_047058823529411764)) __PYX_ERR(1, 991, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_047058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_047058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_56, 2, __pyx_float_0_047058823529411764)) __PYX_ERR(1, 991, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":992
 * [0.0196078431372549,0.01568627450980392,0.011764705882352941],
 * [0.054901960784313725,0.047058823529411764,0.047058823529411764],
 * [0.17647058823529413,0.10588235294117647,0.11764705882352941],             # <<<<<<<<<<<<<<
 * [0.3803921568627451,0.15294117647058825,0.12941176470588237],
 * [0.7254901960784313,0.27058823529411763,0.11372549019607843],
 */
  __pyx_t_83 = PyList_New(3); if (unlikely(!__pyx_t_83)) __PYX_ERR(1, 992, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_83);
  __Pyx_INCREF(__pyx_float_0_17647058823529413);
  __Pyx_GIVEREF(__pyx_float_0_17647058823529413);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_83, 0, __pyx_float_0_17647058823529413)) __PYX_ERR(1, 992, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_10588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_83, 1, __pyx_float_0_10588235294117647)) __PYX_ERR(1, 992, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_11764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_83, 2, __pyx_float_0_11764705882352941)) __PYX_ERR(1, 992, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":993
 * [0.054901960784313725,0.047058823529411764,0.047058823529411764],
 * [0.17647058823529413,0.10588235294117647,0.11764705882352941],
 * [0.3803921568627451,0.15294117647058825,0.12941176470588237],             # <<<<<<<<<<<<<<
 * [0.7254901960784313,0.27058823529411763,0.11372549019607843],
 * [0.9450980392156862,0.39215686274509803,0.12156862745098039],
 */
  __pyx_t_57 = PyList_New(3); if (unlikely(!__pyx_t_57)) __PYX_ERR(1, 993, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_57);
  __Pyx_INCREF(__pyx_float_0_3803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_3803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 0, __pyx_float_0_3803921568627451)) __PYX_ERR(1, 993, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 1, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 993, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12941176470588237);
  __Pyx_GIVEREF(__pyx_float_0_12941176470588237);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_57, 2, __pyx_float_0_12941176470588237)) __PYX_ERR(1, 993, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":994
 * [0.17647058823529413,0.10588235294117647,0.11764705882352941],
 * [0.3803921568627451,0.15294117647058825,0.12941176470588237],
 * [0.7254901960784313,0.27058823529411763,0.11372549019607843],             # <<<<<<<<<<<<<<
 * [0.9450980392156862,0.39215686274509803,0.12156862745098039],
 * [0.9882352941176471,0.6470588235294118,0.4392156862745098],
 */
  __pyx_t_58 = PyList_New(3); if (unlikely(!__pyx_t_58)) __PYX_ERR(1, 994, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_58);
  __Pyx_INCREF(__pyx_float_0_7254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_7254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 0, __pyx_float_0_7254901960784313)) __PYX_ERR(1, 994, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_27058823529411763);
  __Pyx_GIVEREF(__pyx_float_0_27058823529411763);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 1, __pyx_float_0_27058823529411763)) __PYX_ERR(1, 994, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_11372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_58, 2, __pyx_float_0_11372549019607843)) __PYX_ERR(1, 994, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":995
 * [0.3803921568627451,0.15294117647058825,0.12941176470588237],
 * [0.7254901960784313,0.27058823529411763,0.11372549019607843],
 * [0.9450980392156862,0.39215686274509803,0.12156862745098039],             # <<<<<<<<<<<<<<
 * [0.9882352941176471,0.6470588235294118,0.4392156862745098],
 * [1.0,0.8784313725490196,0.7176470588235294],
 */
  __pyx_t_59 = PyList_New(3); if (unlikely(!__pyx_t_59)) __PYX_ERR(1, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_59);
  __Pyx_INCREF(__pyx_float_0_9450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_9450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 0, __pyx_float_0_9450980392156862)) __PYX_ERR(1, 995, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 1, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 995, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_12156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_59, 2, __pyx_float_0_12156862745098039)) __PYX_ERR(1, 995, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":996
 * [0.7254901960784313,0.27058823529411763,0.11372549019607843],
 * [0.9450980392156862,0.39215686274509803,0.12156862745098039],
 * [0.9882352941176471,0.6470588235294118,0.4392156862745098],             # <<<<<<<<<<<<<<
 * [1.0,0.8784313725490196,0.7176470588235294],
 * [1.0,1.0,1.0],
 */
  __pyx_t_60 = PyList_New(3); if (unlikely(!__pyx_t_60)) __PYX_ERR(1, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_60);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 0, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 996, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 1, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 996, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_4392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_60, 2, __pyx_float_0_4392156862745098)) __PYX_ERR(1, 996, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":997
 * [0.9450980392156862,0.39215686274509803,0.12156862745098039],
 * [0.9882352941176471,0.6470588235294118,0.4392156862745098],
 * [1.0,0.8784313725490196,0.7176470588235294],             # <<<<<<<<<<<<<<
 * [1.0,1.0,1.0],
 * [1.0,0.9411764705882353,0.5372549019607843],
 */
  __pyx_t_61 = PyList_New(3); if (unlikely(!__pyx_t_61)) __PYX_ERR(1, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_61);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 0, __pyx_float_1_0)) __PYX_ERR(1, 997, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_8784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 1, __pyx_float_0_8784313725490196)) __PYX_ERR(1, 997, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_7176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_61, 2, __pyx_float_0_7176470588235294)) __PYX_ERR(1, 997, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":998
 * [0.9882352941176471,0.6470588235294118,0.4392156862745098],
 * [1.0,0.8784313725490196,0.7176470588235294],
 * [1.0,1.0,1.0],             # <<<<<<<<<<<<<<
 * [1.0,0.9411764705882353,0.5372549019607843],
 * [0.9725490196078431,0.7725490196078432,0.22745098039215686],
 */
  __pyx_t_62 = PyList_New(3); if (unlikely(!__pyx_t_62)) __PYX_ERR(1, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_62);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 0, __pyx_float_1_0)) __PYX_ERR(1, 998, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 1, __pyx_float_1_0)) __PYX_ERR(1, 998, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_62, 2, __pyx_float_1_0)) __PYX_ERR(1, 998, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":999
 * [1.0,0.8784313725490196,0.7176470588235294],
 * [1.0,1.0,1.0],
 * [1.0,0.9411764705882353,0.5372549019607843],             # <<<<<<<<<<<<<<
 * [0.9725490196078431,0.7725490196078432,0.22745098039215686],
 * [0.9098039215686274,0.5411764705882353,0.21176470588235294],
 */
  __pyx_t_63 = PyList_New(3); if (unlikely(!__pyx_t_63)) __PYX_ERR(1, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_63);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 0, __pyx_float_1_0)) __PYX_ERR(1, 999, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_9411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 1, __pyx_float_0_9411764705882353)) __PYX_ERR(1, 999, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_5372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_63, 2, __pyx_float_0_5372549019607843)) __PYX_ERR(1, 999, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1000
 * [1.0,1.0,1.0],
 * [1.0,0.9411764705882353,0.5372549019607843],
 * [0.9725490196078431,0.7725490196078432,0.22745098039215686],             # <<<<<<<<<<<<<<
 * [0.9098039215686274,0.5411764705882353,0.21176470588235294],
 * [0.6901960784313725,0.3568627450980392,0.17254901960784313],
 */
  __pyx_t_64 = PyList_New(3); if (unlikely(!__pyx_t_64)) __PYX_ERR(1, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_64);
  __Pyx_INCREF(__pyx_float_0_9725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_9725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 0, __pyx_float_0_9725490196078431)) __PYX_ERR(1, 1000, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 1, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 1000, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_22745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_64, 2, __pyx_float_0_22745098039215686)) __PYX_ERR(1, 1000, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1001
 * [1.0,0.9411764705882353,0.5372549019607843],
 * [0.9725490196078431,0.7725490196078432,0.22745098039215686],
 * [0.9098039215686274,0.5411764705882353,0.21176470588235294],             # <<<<<<<<<<<<<<
 * [0.6901960784313725,0.3568627450980392,0.17254901960784313],
 * [0.403921568627451,0.2235294117647059,0.19215686274509805],
 */
  __pyx_t_65 = PyList_New(3); if (unlikely(!__pyx_t_65)) __PYX_ERR(1, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_65);
  __Pyx_INCREF(__pyx_float_0_9098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_9098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 0, __pyx_float_0_9098039215686274)) __PYX_ERR(1, 1001, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_5411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 1, __pyx_float_0_5411764705882353)) __PYX_ERR(1, 1001, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_21176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_65, 2, __pyx_float_0_21176470588235294)) __PYX_ERR(1, 1001, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1002
 * [0.9725490196078431,0.7725490196078432,0.22745098039215686],
 * [0.9098039215686274,0.5411764705882353,0.21176470588235294],
 * [0.6901960784313725,0.3568627450980392,0.17254901960784313],             # <<<<<<<<<<<<<<
 * [0.403921568627451,0.2235294117647059,0.19215686274509805],
 * [0.15294117647058825,0.12156862745098039,0.10588235294117647],
 */
  __pyx_t_66 = PyList_New(3); if (unlikely(!__pyx_t_66)) __PYX_ERR(1, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_66);
  __Pyx_INCREF(__pyx_float_0_6901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_6901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 0, __pyx_float_0_6901960784313725)) __PYX_ERR(1, 1002, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_3568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 1, __pyx_float_0_3568627450980392)) __PYX_ERR(1, 1002, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_66, 2, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 1002, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1003
 * [0.9098039215686274,0.5411764705882353,0.21176470588235294],
 * [0.6901960784313725,0.3568627450980392,0.17254901960784313],
 * [0.403921568627451,0.2235294117647059,0.19215686274509805],             # <<<<<<<<<<<<<<
 * [0.15294117647058825,0.12156862745098039,0.10588235294117647],
 * [0.2980392156862745,0.23921568627450981,0.1803921568627451],
 */
  __pyx_t_67 = PyList_New(3); if (unlikely(!__pyx_t_67)) __PYX_ERR(1, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_67);
  __Pyx_INCREF(__pyx_float_0_403921568627451);
  __Pyx_GIVEREF(__pyx_float_0_403921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 0, __pyx_float_0_403921568627451)) __PYX_ERR(1, 1003, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 1, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 1003, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_67, 2, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 1003, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1004
 * [0.6901960784313725,0.3568627450980392,0.17254901960784313],
 * [0.403921568627451,0.2235294117647059,0.19215686274509805],
 * [0.15294117647058825,0.12156862745098039,0.10588235294117647],             # <<<<<<<<<<<<<<
 * [0.2980392156862745,0.23921568627450981,0.1803921568627451],
 * [0.5215686274509804,0.37254901960784315,0.2235294117647059],
 */
  __pyx_t_68 = PyList_New(3); if (unlikely(!__pyx_t_68)) __PYX_ERR(1, 1004, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_68);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 0, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 1004, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_12156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 1, __pyx_float_0_12156862745098039)) __PYX_ERR(1, 1004, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_10588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_68, 2, __pyx_float_0_10588235294117647)) __PYX_ERR(1, 1004, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1005
 * [0.403921568627451,0.2235294117647059,0.19215686274509805],
 * [0.15294117647058825,0.12156862745098039,0.10588235294117647],
 * [0.2980392156862745,0.23921568627450981,0.1803921568627451],             # <<<<<<<<<<<<<<
 * [0.5215686274509804,0.37254901960784315,0.2235294117647059],
 * [0.8274509803921568,0.592156862745098,0.2549019607843137],
 */
  __pyx_t_69 = PyList_New(3); if (unlikely(!__pyx_t_69)) __PYX_ERR(1, 1005, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_69);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 0, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 1005, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_23921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 1, __pyx_float_0_23921568627450981)) __PYX_ERR(1, 1005, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_1803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_69, 2, __pyx_float_0_1803921568627451)) __PYX_ERR(1, 1005, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1006
 * [0.15294117647058825,0.12156862745098039,0.10588235294117647],
 * [0.2980392156862745,0.23921568627450981,0.1803921568627451],
 * [0.5215686274509804,0.37254901960784315,0.2235294117647059],             # <<<<<<<<<<<<<<
 * [0.8274509803921568,0.592156862745098,0.2549019607843137],
 * [0.9725490196078431,0.9647058823529412,0.26666666666666666],
 */
  __pyx_t_15 = PyList_New(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 1006, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_INCREF(__pyx_float_0_5215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_5215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 0, __pyx_float_0_5215686274509804)) __PYX_ERR(1, 1006, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_37254901960784315);
  __Pyx_GIVEREF(__pyx_float_0_37254901960784315);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 1, __pyx_float_0_37254901960784315)) __PYX_ERR(1, 1006, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_15, 2, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 1006, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1007
 * [0.2980392156862745,0.23921568627450981,0.1803921568627451],
 * [0.5215686274509804,0.37254901960784315,0.2235294117647059],
 * [0.8274509803921568,0.592156862745098,0.2549019607843137],             # <<<<<<<<<<<<<<
 * [0.9725490196078431,0.9647058823529412,0.26666666666666666],
 * [0.8352941176470589,0.8627450980392157,0.11372549019607843],
 */
  __pyx_t_70 = PyList_New(3); if (unlikely(!__pyx_t_70)) __PYX_ERR(1, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_70);
  __Pyx_INCREF(__pyx_float_0_8274509803921568);
  __Pyx_GIVEREF(__pyx_float_0_8274509803921568);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 0, __pyx_float_0_8274509803921568)) __PYX_ERR(1, 1007, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 1, __pyx_float_0_592156862745098)) __PYX_ERR(1, 1007, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_70, 2, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 1007, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1008
 * [0.5215686274509804,0.37254901960784315,0.2235294117647059],
 * [0.8274509803921568,0.592156862745098,0.2549019607843137],
 * [0.9725490196078431,0.9647058823529412,0.26666666666666666],             # <<<<<<<<<<<<<<
 * [0.8352941176470589,0.8627450980392157,0.11372549019607843],
 * [0.6784313725490196,0.7215686274509804,0.20392156862745098],
 */
  __pyx_t_72 = PyList_New(3); if (unlikely(!__pyx_t_72)) __PYX_ERR(1, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_72);
  __Pyx_INCREF(__pyx_float_0_9725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_9725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 0, __pyx_float_0_9725490196078431)) __PYX_ERR(1, 1008, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_9647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 1, __pyx_float_0_9647058823529412)) __PYX_ERR(1, 1008, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_26666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_26666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_72, 2, __pyx_float_0_26666666666666666)) __PYX_ERR(1, 1008, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1009
 * [0.8274509803921568,0.592156862745098,0.2549019607843137],
 * [0.9725490196078431,0.9647058823529412,0.26666666666666666],
 * [0.8352941176470589,0.8627450980392157,0.11372549019607843],             # <<<<<<<<<<<<<<
 * [0.6784313725490196,0.7215686274509804,0.20392156862745098],
 * [0.4980392156862745,0.5568627450980392,0.26666666666666666],
 */
  __pyx_t_20 = PyList_New(3); if (unlikely(!__pyx_t_20)) __PYX_ERR(1, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_20);
  __Pyx_INCREF(__pyx_float_0_8352941176470589);
  __Pyx_GIVEREF(__pyx_float_0_8352941176470589);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 0, __pyx_float_0_8352941176470589)) __PYX_ERR(1, 1009, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_8627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 1, __pyx_float_0_8627450980392157)) __PYX_ERR(1, 1009, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_11372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_20, 2, __pyx_float_0_11372549019607843)) __PYX_ERR(1, 1009, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1010
 * [0.9725490196078431,0.9647058823529412,0.26666666666666666],
 * [0.8352941176470589,0.8627450980392157,0.11372549019607843],
 * [0.6784313725490196,0.7215686274509804,0.20392156862745098],             # <<<<<<<<<<<<<<
 * [0.4980392156862745,0.5568627450980392,0.26666666666666666],
 * [0.34509803921568627,0.38823529411764707,0.20784313725490197],
 */
  __pyx_t_34 = PyList_New(3); if (unlikely(!__pyx_t_34)) __PYX_ERR(1, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_34);
  __Pyx_INCREF(__pyx_float_0_6784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_6784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 0, __pyx_float_0_6784313725490196)) __PYX_ERR(1, 1010, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_7215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 1, __pyx_float_0_7215686274509804)) __PYX_ERR(1, 1010, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_34, 2, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 1010, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1011
 * [0.8352941176470589,0.8627450980392157,0.11372549019607843],
 * [0.6784313725490196,0.7215686274509804,0.20392156862745098],
 * [0.4980392156862745,0.5568627450980392,0.26666666666666666],             # <<<<<<<<<<<<<<
 * [0.34509803921568627,0.38823529411764707,0.20784313725490197],
 * [0.2,0.23529411764705882,0.1411764705882353],
 */
  __pyx_t_33 = PyList_New(3); if (unlikely(!__pyx_t_33)) __PYX_ERR(1, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_33);
  __Pyx_INCREF(__pyx_float_0_4980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_4980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 0, __pyx_float_0_4980392156862745)) __PYX_ERR(1, 1011, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_5568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 1, __pyx_float_0_5568627450980392)) __PYX_ERR(1, 1011, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_26666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_26666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_33, 2, __pyx_float_0_26666666666666666)) __PYX_ERR(1, 1011, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1012
 * [0.6784313725490196,0.7215686274509804,0.20392156862745098],
 * [0.4980392156862745,0.5568627450980392,0.26666666666666666],
 * [0.34509803921568627,0.38823529411764707,0.20784313725490197],             # <<<<<<<<<<<<<<
 * [0.2,0.23529411764705882,0.1411764705882353],
 * [0.09411764705882353,0.10980392156862745,0.09803921568627451],
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 0, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 1012, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_38823529411764707);
  __Pyx_GIVEREF(__pyx_float_0_38823529411764707);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 1, __pyx_float_0_38823529411764707)) __PYX_ERR(1, 1012, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20784313725490197);
  __Pyx_GIVEREF(__pyx_float_0_20784313725490197);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_10, 2, __pyx_float_0_20784313725490197)) __PYX_ERR(1, 1012, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1013
 * [0.4980392156862745,0.5568627450980392,0.26666666666666666],
 * [0.34509803921568627,0.38823529411764707,0.20784313725490197],
 * [0.2,0.23529411764705882,0.1411764705882353],             # <<<<<<<<<<<<<<
 * [0.09411764705882353,0.10980392156862745,0.09803921568627451],
 * [0.1607843137254902,0.24705882352941178,0.12941176470588237],
 */
  __pyx_t_30 = PyList_New(3); if (unlikely(!__pyx_t_30)) __PYX_ERR(1, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_30);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 0, __pyx_float_0_2)) __PYX_ERR(1, 1013, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 1, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 1013, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_1411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_30, 2, __pyx_float_0_1411764705882353)) __PYX_ERR(1, 1013, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1014
 * [0.34509803921568627,0.38823529411764707,0.20784313725490197],
 * [0.2,0.23529411764705882,0.1411764705882353],
 * [0.09411764705882353,0.10980392156862745,0.09803921568627451],             # <<<<<<<<<<<<<<
 * [0.1607843137254902,0.24705882352941178,0.12941176470588237],
 * [0.2784313725490196,0.4470588235294118,0.2196078431372549],
 */
  __pyx_t_29 = PyList_New(3); if (unlikely(!__pyx_t_29)) __PYX_ERR(1, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_29);
  __Pyx_INCREF(__pyx_float_0_09411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_09411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 0, __pyx_float_0_09411764705882353)) __PYX_ERR(1, 1014, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_10980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 1, __pyx_float_0_10980392156862745)) __PYX_ERR(1, 1014, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_09803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_29, 2, __pyx_float_0_09803921568627451)) __PYX_ERR(1, 1014, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1015
 * [0.2,0.23529411764705882,0.1411764705882353],
 * [0.09411764705882353,0.10980392156862745,0.09803921568627451],
 * [0.1607843137254902,0.24705882352941178,0.12941176470588237],             # <<<<<<<<<<<<<<
 * [0.2784313725490196,0.4470588235294118,0.2196078431372549],
 * [0.3803921568627451,0.6470588235294118,0.24705882352941178],
 */
  __pyx_t_21 = PyList_New(3); if (unlikely(!__pyx_t_21)) __PYX_ERR(1, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_21);
  __Pyx_INCREF(__pyx_float_0_1607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_1607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 0, __pyx_float_0_1607843137254902)) __PYX_ERR(1, 1015, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24705882352941178);
  __Pyx_GIVEREF(__pyx_float_0_24705882352941178);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 1, __pyx_float_0_24705882352941178)) __PYX_ERR(1, 1015, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12941176470588237);
  __Pyx_GIVEREF(__pyx_float_0_12941176470588237);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_21, 2, __pyx_float_0_12941176470588237)) __PYX_ERR(1, 1015, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1016
 * [0.09411764705882353,0.10980392156862745,0.09803921568627451],
 * [0.1607843137254902,0.24705882352941178,0.12941176470588237],
 * [0.2784313725490196,0.4470588235294118,0.2196078431372549],             # <<<<<<<<<<<<<<
 * [0.3803921568627451,0.6470588235294118,0.24705882352941178],
 * [0.5607843137254902,0.8156862745098039,0.19607843137254902],
 */
  __pyx_t_28 = PyList_New(3); if (unlikely(!__pyx_t_28)) __PYX_ERR(1, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_28);
  __Pyx_INCREF(__pyx_float_0_2784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_2784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 0, __pyx_float_0_2784313725490196)) __PYX_ERR(1, 1016, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_4470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 1, __pyx_float_0_4470588235294118)) __PYX_ERR(1, 1016, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_2196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_28, 2, __pyx_float_0_2196078431372549)) __PYX_ERR(1, 1016, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1017
 * [0.1607843137254902,0.24705882352941178,0.12941176470588237],
 * [0.2784313725490196,0.4470588235294118,0.2196078431372549],
 * [0.3803921568627451,0.6470588235294118,0.24705882352941178],             # <<<<<<<<<<<<<<
 * [0.5607843137254902,0.8156862745098039,0.19607843137254902],
 * [0.7686274509803922,0.9450980392156862,0.1607843137254902],
 */
  __pyx_t_27 = PyList_New(3); if (unlikely(!__pyx_t_27)) __PYX_ERR(1, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_27);
  __Pyx_INCREF(__pyx_float_0_3803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_3803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 0, __pyx_float_0_3803921568627451)) __PYX_ERR(1, 1017, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 1, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 1017, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24705882352941178);
  __Pyx_GIVEREF(__pyx_float_0_24705882352941178);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_27, 2, __pyx_float_0_24705882352941178)) __PYX_ERR(1, 1017, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1018
 * [0.2784313725490196,0.4470588235294118,0.2196078431372549],
 * [0.3803921568627451,0.6470588235294118,0.24705882352941178],
 * [0.5607843137254902,0.8156862745098039,0.19607843137254902],             # <<<<<<<<<<<<<<
 * [0.7686274509803922,0.9450980392156862,0.1607843137254902],
 * [0.8156862745098039,1.0,0.9176470588235294],
 */
  __pyx_t_22 = PyList_New(3); if (unlikely(!__pyx_t_22)) __PYX_ERR(1, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_22);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 0, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 1018, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_8156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 1, __pyx_float_0_8156862745098039)) __PYX_ERR(1, 1018, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_22, 2, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 1018, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1019
 * [0.3803921568627451,0.6470588235294118,0.24705882352941178],
 * [0.5607843137254902,0.8156862745098039,0.19607843137254902],
 * [0.7686274509803922,0.9450980392156862,0.1607843137254902],             # <<<<<<<<<<<<<<
 * [0.8156862745098039,1.0,0.9176470588235294],
 * [0.592156862745098,0.9294117647058824,0.792156862745098],
 */
  __pyx_t_11 = PyList_New(3); if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_INCREF(__pyx_float_0_7686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_7686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 0, __pyx_float_0_7686274509803922)) __PYX_ERR(1, 1019, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_9450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 1, __pyx_float_0_9450980392156862)) __PYX_ERR(1, 1019, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_1607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_11, 2, __pyx_float_0_1607843137254902)) __PYX_ERR(1, 1019, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1020
 * [0.5607843137254902,0.8156862745098039,0.19607843137254902],
 * [0.7686274509803922,0.9450980392156862,0.1607843137254902],
 * [0.8156862745098039,1.0,0.9176470588235294],             # <<<<<<<<<<<<<<
 * [0.592156862745098,0.9294117647058824,0.792156862745098],
 * [0.34901960784313724,0.8117647058823529,0.5764705882352941],
 */
  __pyx_t_31 = PyList_New(3); if (unlikely(!__pyx_t_31)) __PYX_ERR(1, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_31);
  __Pyx_INCREF(__pyx_float_0_8156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_8156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 0, __pyx_float_0_8156862745098039)) __PYX_ERR(1, 1020, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 1, __pyx_float_1_0)) __PYX_ERR(1, 1020, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_31, 2, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 1020, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1021
 * [0.7686274509803922,0.9450980392156862,0.1607843137254902],
 * [0.8156862745098039,1.0,0.9176470588235294],
 * [0.592156862745098,0.9294117647058824,0.792156862745098],             # <<<<<<<<<<<<<<
 * [0.34901960784313724,0.8117647058823529,0.5764705882352941],
 * [0.25882352941176473,0.6431372549019608,0.34901960784313724],
 */
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(1, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 0, __pyx_float_0_592156862745098)) __PYX_ERR(1, 1021, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_9294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 1, __pyx_float_0_9294117647058824)) __PYX_ERR(1, 1021, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_792156862745098);
  __Pyx_GIVEREF(__pyx_float_0_792156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_12, 2, __pyx_float_0_792156862745098)) __PYX_ERR(1, 1021, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1022
 * [0.8156862745098039,1.0,0.9176470588235294],
 * [0.592156862745098,0.9294117647058824,0.792156862745098],
 * [0.34901960784313724,0.8117647058823529,0.5764705882352941],             # <<<<<<<<<<<<<<
 * [0.25882352941176473,0.6431372549019608,0.34901960784313724],
 * [0.23921568627450981,0.43529411764705883,0.2627450980392157],
 */
  __pyx_t_32 = PyList_New(3); if (unlikely(!__pyx_t_32)) __PYX_ERR(1, 1022, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_32);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 0, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 1022, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_8117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 1, __pyx_float_0_8117647058823529)) __PYX_ERR(1, 1022, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_5764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_32, 2, __pyx_float_0_5764705882352941)) __PYX_ERR(1, 1022, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1023
 * [0.592156862745098,0.9294117647058824,0.792156862745098],
 * [0.34901960784313724,0.8117647058823529,0.5764705882352941],
 * [0.25882352941176473,0.6431372549019608,0.34901960784313724],             # <<<<<<<<<<<<<<
 * [0.23921568627450981,0.43529411764705883,0.2627450980392157],
 * [0.15294117647058825,0.2549019607843137,0.17647058823529413],
 */
  __pyx_t_7 = PyList_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 1023, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_INCREF(__pyx_float_0_25882352941176473);
  __Pyx_GIVEREF(__pyx_float_0_25882352941176473);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 0, __pyx_float_0_25882352941176473)) __PYX_ERR(1, 1023, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_6431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 1, __pyx_float_0_6431372549019608)) __PYX_ERR(1, 1023, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_7, 2, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 1023, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1024
 * [0.34901960784313724,0.8117647058823529,0.5764705882352941],
 * [0.25882352941176473,0.6431372549019608,0.34901960784313724],
 * [0.23921568627450981,0.43529411764705883,0.2627450980392157],             # <<<<<<<<<<<<<<
 * [0.15294117647058825,0.2549019607843137,0.17647058823529413],
 * [0.0784313725490196,0.07058823529411765,0.11372549019607843],
 */
  __pyx_t_5 = PyList_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_float_0_23921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_23921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 0, __pyx_float_0_23921568627450981)) __PYX_ERR(1, 1024, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_43529411764705883);
  __Pyx_GIVEREF(__pyx_float_0_43529411764705883);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 1, __pyx_float_0_43529411764705883)) __PYX_ERR(1, 1024, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_2627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_5, 2, __pyx_float_0_2627450980392157)) __PYX_ERR(1, 1024, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1025
 * [0.25882352941176473,0.6431372549019608,0.34901960784313724],
 * [0.23921568627450981,0.43529411764705883,0.2627450980392157],
 * [0.15294117647058825,0.2549019607843137,0.17647058823529413],             # <<<<<<<<<<<<<<
 * [0.0784313725490196,0.07058823529411765,0.11372549019607843],
 * [0.10588235294117647,0.1411764705882353,0.2784313725490196],
 */
  __pyx_t_17 = PyList_New(3); if (unlikely(!__pyx_t_17)) __PYX_ERR(1, 1025, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 0, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 1025, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 1, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 1025, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17647058823529413);
  __Pyx_GIVEREF(__pyx_float_0_17647058823529413);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_17, 2, __pyx_float_0_17647058823529413)) __PYX_ERR(1, 1025, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1026
 * [0.23921568627450981,0.43529411764705883,0.2627450980392157],
 * [0.15294117647058825,0.2549019607843137,0.17647058823529413],
 * [0.0784313725490196,0.07058823529411765,0.11372549019607843],             # <<<<<<<<<<<<<<
 * [0.10588235294117647,0.1411764705882353,0.2784313725490196],
 * [0.16862745098039217,0.3058823529411765,0.5843137254901961],
 */
  __pyx_t_23 = PyList_New(3); if (unlikely(!__pyx_t_23)) __PYX_ERR(1, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_23);
  __Pyx_INCREF(__pyx_float_0_0784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_0784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 0, __pyx_float_0_0784313725490196)) __PYX_ERR(1, 1026, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_07058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_07058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 1, __pyx_float_0_07058823529411765)) __PYX_ERR(1, 1026, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_11372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_23, 2, __pyx_float_0_11372549019607843)) __PYX_ERR(1, 1026, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1027
 * [0.15294117647058825,0.2549019607843137,0.17647058823529413],
 * [0.0784313725490196,0.07058823529411765,0.11372549019607843],
 * [0.10588235294117647,0.1411764705882353,0.2784313725490196],             # <<<<<<<<<<<<<<
 * [0.16862745098039217,0.3058823529411765,0.5843137254901961],
 * [0.15294117647058825,0.5372549019607843,0.803921568627451],
 */
  __pyx_t_73 = PyList_New(3); if (unlikely(!__pyx_t_73)) __PYX_ERR(1, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_73);
  __Pyx_INCREF(__pyx_float_0_10588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_10588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 0, __pyx_float_0_10588235294117647)) __PYX_ERR(1, 1027, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_1411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 1, __pyx_float_0_1411764705882353)) __PYX_ERR(1, 1027, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_2784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_73, 2, __pyx_float_0_2784313725490196)) __PYX_ERR(1, 1027, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1028
 * [0.0784313725490196,0.07058823529411765,0.11372549019607843],
 * [0.10588235294117647,0.1411764705882353,0.2784313725490196],
 * [0.16862745098039217,0.3058823529411765,0.5843137254901961],             # <<<<<<<<<<<<<<
 * [0.15294117647058825,0.5372549019607843,0.803921568627451],
 * [0.25882352941176473,0.7490196078431373,0.9098039215686274],
 */
  __pyx_t_74 = PyList_New(3); if (unlikely(!__pyx_t_74)) __PYX_ERR(1, 1028, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_74);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 0, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 1028, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_3058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 1, __pyx_float_0_3058823529411765)) __PYX_ERR(1, 1028, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_5843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_74, 2, __pyx_float_0_5843137254901961)) __PYX_ERR(1, 1028, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1029
 * [0.10588235294117647,0.1411764705882353,0.2784313725490196],
 * [0.16862745098039217,0.3058823529411765,0.5843137254901961],
 * [0.15294117647058825,0.5372549019607843,0.803921568627451],             # <<<<<<<<<<<<<<
 * [0.25882352941176473,0.7490196078431373,0.9098039215686274],
 * [0.45098039215686275,0.9372549019607843,0.9098039215686274],
 */
  __pyx_t_75 = PyList_New(3); if (unlikely(!__pyx_t_75)) __PYX_ERR(1, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_75);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 0, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 1029, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_5372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 1, __pyx_float_0_5372549019607843)) __PYX_ERR(1, 1029, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_75, 2, __pyx_float_0_803921568627451)) __PYX_ERR(1, 1029, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1030
 * [0.16862745098039217,0.3058823529411765,0.5843137254901961],
 * [0.15294117647058825,0.5372549019607843,0.803921568627451],
 * [0.25882352941176473,0.7490196078431373,0.9098039215686274],             # <<<<<<<<<<<<<<
 * [0.45098039215686275,0.9372549019607843,0.9098039215686274],
 * [0.9450980392156862,0.9490196078431372,1.0],
 */
  __pyx_t_76 = PyList_New(3); if (unlikely(!__pyx_t_76)) __PYX_ERR(1, 1030, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_76);
  __Pyx_INCREF(__pyx_float_0_25882352941176473);
  __Pyx_GIVEREF(__pyx_float_0_25882352941176473);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 0, __pyx_float_0_25882352941176473)) __PYX_ERR(1, 1030, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_7490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 1, __pyx_float_0_7490196078431373)) __PYX_ERR(1, 1030, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_9098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_76, 2, __pyx_float_0_9098039215686274)) __PYX_ERR(1, 1030, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1031
 * [0.15294117647058825,0.5372549019607843,0.803921568627451],
 * [0.25882352941176473,0.7490196078431373,0.9098039215686274],
 * [0.45098039215686275,0.9372549019607843,0.9098039215686274],             # <<<<<<<<<<<<<<
 * [0.9450980392156862,0.9490196078431372,1.0],
 * [0.788235294117647,0.8313725490196079,0.9921568627450981],
 */
  __pyx_t_77 = PyList_New(3); if (unlikely(!__pyx_t_77)) __PYX_ERR(1, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_77);
  __Pyx_INCREF(__pyx_float_0_45098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_45098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 0, __pyx_float_0_45098039215686275)) __PYX_ERR(1, 1031, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_9372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 1, __pyx_float_0_9372549019607843)) __PYX_ERR(1, 1031, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_9098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_77, 2, __pyx_float_0_9098039215686274)) __PYX_ERR(1, 1031, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1032
 * [0.25882352941176473,0.7490196078431373,0.9098039215686274],
 * [0.45098039215686275,0.9372549019607843,0.9098039215686274],
 * [0.9450980392156862,0.9490196078431372,1.0],             # <<<<<<<<<<<<<<
 * [0.788235294117647,0.8313725490196079,0.9921568627450981],
 * [0.5411764705882353,0.6313725490196078,0.9647058823529412],
 */
  __pyx_t_78 = PyList_New(3); if (unlikely(!__pyx_t_78)) __PYX_ERR(1, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_78);
  __Pyx_INCREF(__pyx_float_0_9450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_9450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 0, __pyx_float_0_9450980392156862)) __PYX_ERR(1, 1032, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9490196078431372);
  __Pyx_GIVEREF(__pyx_float_0_9490196078431372);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 1, __pyx_float_0_9490196078431372)) __PYX_ERR(1, 1032, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_78, 2, __pyx_float_1_0)) __PYX_ERR(1, 1032, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1033
 * [0.45098039215686275,0.9372549019607843,0.9098039215686274],
 * [0.9450980392156862,0.9490196078431372,1.0],
 * [0.788235294117647,0.8313725490196079,0.9921568627450981],             # <<<<<<<<<<<<<<
 * [0.5411764705882353,0.6313725490196078,0.9647058823529412],
 * [0.27058823529411763,0.4470588235294118,0.8901960784313725],
 */
  __pyx_t_79 = PyList_New(3); if (unlikely(!__pyx_t_79)) __PYX_ERR(1, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_79);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 0, __pyx_float_0_788235294117647)) __PYX_ERR(1, 1033, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8313725490196079);
  __Pyx_GIVEREF(__pyx_float_0_8313725490196079);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 1, __pyx_float_0_8313725490196079)) __PYX_ERR(1, 1033, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_9921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_79, 2, __pyx_float_0_9921568627450981)) __PYX_ERR(1, 1033, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1034
 * [0.9450980392156862,0.9490196078431372,1.0],
 * [0.788235294117647,0.8313725490196079,0.9921568627450981],
 * [0.5411764705882353,0.6313725490196078,0.9647058823529412],             # <<<<<<<<<<<<<<
 * [0.27058823529411763,0.4470588235294118,0.8901960784313725],
 * [0.28627450980392155,0.2549019607843137,0.5098039215686274],
 */
  __pyx_t_80 = PyList_New(3); if (unlikely(!__pyx_t_80)) __PYX_ERR(1, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_80);
  __Pyx_INCREF(__pyx_float_0_5411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_5411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 0, __pyx_float_0_5411764705882353)) __PYX_ERR(1, 1034, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_6313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 1, __pyx_float_0_6313725490196078)) __PYX_ERR(1, 1034, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_9647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_80, 2, __pyx_float_0_9647058823529412)) __PYX_ERR(1, 1034, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1035
 * [0.788235294117647,0.8313725490196079,0.9921568627450981],
 * [0.5411764705882353,0.6313725490196078,0.9647058823529412],
 * [0.27058823529411763,0.4470588235294118,0.8901960784313725],             # <<<<<<<<<<<<<<
 * [0.28627450980392155,0.2549019607843137,0.5098039215686274],
 * [0.47058823529411764,0.39215686274509803,0.7764705882352941],
 */
  __pyx_t_81 = PyList_New(3); if (unlikely(!__pyx_t_81)) __PYX_ERR(1, 1035, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_81);
  __Pyx_INCREF(__pyx_float_0_27058823529411763);
  __Pyx_GIVEREF(__pyx_float_0_27058823529411763);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 0, __pyx_float_0_27058823529411763)) __PYX_ERR(1, 1035, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_4470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 1, __pyx_float_0_4470588235294118)) __PYX_ERR(1, 1035, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_8901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_81, 2, __pyx_float_0_8901960784313725)) __PYX_ERR(1, 1035, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1036
 * [0.5411764705882353,0.6313725490196078,0.9647058823529412],
 * [0.27058823529411763,0.4470588235294118,0.8901960784313725],
 * [0.28627450980392155,0.2549019607843137,0.5098039215686274],             # <<<<<<<<<<<<<<
 * [0.47058823529411764,0.39215686274509803,0.7764705882352941],
 * [0.611764705882353,0.5450980392156862,0.8588235294117647],
 */
  __pyx_t_49 = PyList_New(3); if (unlikely(!__pyx_t_49)) __PYX_ERR(1, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_49);
  __Pyx_INCREF(__pyx_float_0_28627450980392155);
  __Pyx_GIVEREF(__pyx_float_0_28627450980392155);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 0, __pyx_float_0_28627450980392155)) __PYX_ERR(1, 1036, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 1, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 1036, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_49, 2, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 1036, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1037
 * [0.27058823529411763,0.4470588235294118,0.8901960784313725],
 * [0.28627450980392155,0.2549019607843137,0.5098039215686274],
 * [0.47058823529411764,0.39215686274509803,0.7764705882352941],             # <<<<<<<<<<<<<<
 * [0.611764705882353,0.5450980392156862,0.8588235294117647],
 * [0.807843137254902,0.6666666666666666,0.9294117647058824],
 */
  __pyx_t_82 = PyList_New(3); if (unlikely(!__pyx_t_82)) __PYX_ERR(1, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_82);
  __Pyx_INCREF(__pyx_float_0_47058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_47058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 0, __pyx_float_0_47058823529411764)) __PYX_ERR(1, 1037, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 1, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 1037, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_7764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_82, 2, __pyx_float_0_7764705882352941)) __PYX_ERR(1, 1037, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1038
 * [0.28627450980392155,0.2549019607843137,0.5098039215686274],
 * [0.47058823529411764,0.39215686274509803,0.7764705882352941],
 * [0.611764705882353,0.5450980392156862,0.8588235294117647],             # <<<<<<<<<<<<<<
 * [0.807843137254902,0.6666666666666666,0.9294117647058824],
 * [0.9803921568627451,0.8392156862745098,1.0],
 */
  __pyx_t_84 = PyList_New(3); if (unlikely(!__pyx_t_84)) __PYX_ERR(1, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_84);
  __Pyx_INCREF(__pyx_float_0_611764705882353);
  __Pyx_GIVEREF(__pyx_float_0_611764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 0, __pyx_float_0_611764705882353)) __PYX_ERR(1, 1038, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 1, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 1038, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_8588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_84, 2, __pyx_float_0_8588235294117647)) __PYX_ERR(1, 1038, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1039
 * [0.47058823529411764,0.39215686274509803,0.7764705882352941],
 * [0.611764705882353,0.5450980392156862,0.8588235294117647],
 * [0.807843137254902,0.6666666666666666,0.9294117647058824],             # <<<<<<<<<<<<<<
 * [0.9803921568627451,0.8392156862745098,1.0],
 * [0.9333333333333333,0.7098039215686275,0.611764705882353],
 */
  __pyx_t_53 = PyList_New(3); if (unlikely(!__pyx_t_53)) __PYX_ERR(1, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_53);
  __Pyx_INCREF(__pyx_float_0_807843137254902);
  __Pyx_GIVEREF(__pyx_float_0_807843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 0, __pyx_float_0_807843137254902)) __PYX_ERR(1, 1039, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_6666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 1, __pyx_float_0_6666666666666666)) __PYX_ERR(1, 1039, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_9294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_53, 2, __pyx_float_0_9294117647058824)) __PYX_ERR(1, 1039, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1040
 * [0.611764705882353,0.5450980392156862,0.8588235294117647],
 * [0.807843137254902,0.6666666666666666,0.9294117647058824],
 * [0.9803921568627451,0.8392156862745098,1.0],             # <<<<<<<<<<<<<<
 * [0.9333333333333333,0.7098039215686275,0.611764705882353],
 * [0.8313725490196079,0.5019607843137255,0.7333333333333333],
 */
  __pyx_t_52 = PyList_New(3); if (unlikely(!__pyx_t_52)) __PYX_ERR(1, 1040, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_52);
  __Pyx_INCREF(__pyx_float_0_9803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_9803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 0, __pyx_float_0_9803921568627451)) __PYX_ERR(1, 1040, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_8392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 1, __pyx_float_0_8392156862745098)) __PYX_ERR(1, 1040, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_52, 2, __pyx_float_1_0)) __PYX_ERR(1, 1040, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1041
 * [0.807843137254902,0.6666666666666666,0.9294117647058824],
 * [0.9803921568627451,0.8392156862745098,1.0],
 * [0.9333333333333333,0.7098039215686275,0.611764705882353],             # <<<<<<<<<<<<<<
 * [0.8313725490196079,0.5019607843137255,0.7333333333333333],
 * [0.5647058823529412,0.3215686274509804,0.7372549019607844],
 */
  __pyx_t_51 = PyList_New(3); if (unlikely(!__pyx_t_51)) __PYX_ERR(1, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_51);
  __Pyx_INCREF(__pyx_float_0_9333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_9333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 0, __pyx_float_0_9333333333333333)) __PYX_ERR(1, 1041, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 1, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 1041, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_611764705882353);
  __Pyx_GIVEREF(__pyx_float_0_611764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_51, 2, __pyx_float_0_611764705882353)) __PYX_ERR(1, 1041, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1042
 * [0.9803921568627451,0.8392156862745098,1.0],
 * [0.9333333333333333,0.7098039215686275,0.611764705882353],
 * [0.8313725490196079,0.5019607843137255,0.7333333333333333],             # <<<<<<<<<<<<<<
 * [0.5647058823529412,0.3215686274509804,0.7372549019607844],
 * [0.09019607843137255,0.08235294117647059,0.08627450980392157],
 */
  __pyx_t_25 = PyList_New(3); if (unlikely(!__pyx_t_25)) __PYX_ERR(1, 1042, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_25);
  __Pyx_INCREF(__pyx_float_0_8313725490196079);
  __Pyx_GIVEREF(__pyx_float_0_8313725490196079);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 0, __pyx_float_0_8313725490196079)) __PYX_ERR(1, 1042, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_5019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 1, __pyx_float_0_5019607843137255)) __PYX_ERR(1, 1042, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_7333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_25, 2, __pyx_float_0_7333333333333333)) __PYX_ERR(1, 1042, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1043
 * [0.9333333333333333,0.7098039215686275,0.611764705882353],
 * [0.8313725490196079,0.5019607843137255,0.7333333333333333],
 * [0.5647058823529412,0.3215686274509804,0.7372549019607844],             # <<<<<<<<<<<<<<
 * [0.09019607843137255,0.08235294117647059,0.08627450980392157],
 * [0.21568627450980393,0.2,0.20392156862745098],
 */
  __pyx_t_14 = PyList_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 1043, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_float_0_5647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_5647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 0, __pyx_float_0_5647058823529412)) __PYX_ERR(1, 1043, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 1, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 1043, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7372549019607844);
  __Pyx_GIVEREF(__pyx_float_0_7372549019607844);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_14, 2, __pyx_float_0_7372549019607844)) __PYX_ERR(1, 1043, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1044
 * [0.8313725490196079,0.5019607843137255,0.7333333333333333],
 * [0.5647058823529412,0.3215686274509804,0.7372549019607844],
 * [0.09019607843137255,0.08235294117647059,0.08627450980392157],             # <<<<<<<<<<<<<<
 * [0.21568627450980393,0.2,0.20392156862745098],
 * [0.4117647058823529,0.3568627450980392,0.34901960784313724],
 */
  __pyx_t_26 = PyList_New(3); if (unlikely(!__pyx_t_26)) __PYX_ERR(1, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_26);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 0, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 1044, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 1, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 1044, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_08627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_26, 2, __pyx_float_0_08627450980392157)) __PYX_ERR(1, 1044, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1045
 * [0.5647058823529412,0.3215686274509804,0.7372549019607844],
 * [0.09019607843137255,0.08235294117647059,0.08627450980392157],
 * [0.21568627450980393,0.2,0.20392156862745098],             # <<<<<<<<<<<<<<
 * [0.4117647058823529,0.3568627450980392,0.34901960784313724],
 * [0.6980392156862745,0.5450980392156862,0.47058823529411764],
 */
  __pyx_t_36 = PyList_New(3); if (unlikely(!__pyx_t_36)) __PYX_ERR(1, 1045, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_36);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 0, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 1045, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 1, __pyx_float_0_2)) __PYX_ERR(1, 1045, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_36, 2, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 1045, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1046
 * [0.09019607843137255,0.08235294117647059,0.08627450980392157],
 * [0.21568627450980393,0.2,0.20392156862745098],
 * [0.4117647058823529,0.3568627450980392,0.34901960784313724],             # <<<<<<<<<<<<<<
 * [0.6980392156862745,0.5450980392156862,0.47058823529411764],
 * [0.8862745098039215,0.6980392156862745,0.49411764705882355],
 */
  __pyx_t_4 = PyList_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_float_0_4117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_4117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 0, __pyx_float_0_4117647058823529)) __PYX_ERR(1, 1046, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_3568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 1, __pyx_float_0_3568627450980392)) __PYX_ERR(1, 1046, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_4, 2, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 1046, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1047
 * [0.21568627450980393,0.2,0.20392156862745098],
 * [0.4117647058823529,0.3568627450980392,0.34901960784313724],
 * [0.6980392156862745,0.5450980392156862,0.47058823529411764],             # <<<<<<<<<<<<<<
 * [0.8862745098039215,0.6980392156862745,0.49411764705882355],
 * [0.9647058823529412,0.8470588235294118,0.5882352941176471],
 */
  __pyx_t_37 = PyList_New(3); if (unlikely(!__pyx_t_37)) __PYX_ERR(1, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_37);
  __Pyx_INCREF(__pyx_float_0_6980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_6980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 0, __pyx_float_0_6980392156862745)) __PYX_ERR(1, 1047, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 1, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 1047, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_47058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_37, 2, __pyx_float_0_47058823529411764)) __PYX_ERR(1, 1047, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1048
 * [0.4117647058823529,0.3568627450980392,0.34901960784313724],
 * [0.6980392156862745,0.5450980392156862,0.47058823529411764],
 * [0.8862745098039215,0.6980392156862745,0.49411764705882355],             # <<<<<<<<<<<<<<
 * [0.9647058823529412,0.8470588235294118,0.5882352941176471],
 * [0.9882352941176471,0.9686274509803922,0.7450980392156863],
 */
  __pyx_t_71 = PyList_New(3); if (unlikely(!__pyx_t_71)) __PYX_ERR(1, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_71);
  __Pyx_INCREF(__pyx_float_0_8862745098039215);
  __Pyx_GIVEREF(__pyx_float_0_8862745098039215);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 0, __pyx_float_0_8862745098039215)) __PYX_ERR(1, 1048, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_6980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 1, __pyx_float_0_6980392156862745)) __PYX_ERR(1, 1048, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_49411764705882355);
  __Pyx_GIVEREF(__pyx_float_0_49411764705882355);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_71, 2, __pyx_float_0_49411764705882355)) __PYX_ERR(1, 1048, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1049
 * [0.6980392156862745,0.5450980392156862,0.47058823529411764],
 * [0.8862745098039215,0.6980392156862745,0.49411764705882355],
 * [0.9647058823529412,0.8470588235294118,0.5882352941176471],             # <<<<<<<<<<<<<<
 * [0.9882352941176471,0.9686274509803922,0.7450980392156863],
 * [0.9254901960784314,0.9215686274509803,0.9058823529411765],
 */
  __pyx_t_16 = PyList_New(3); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_INCREF(__pyx_float_0_9647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_9647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 0, __pyx_float_0_9647058823529412)) __PYX_ERR(1, 1049, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_8470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 1, __pyx_float_0_8470588235294118)) __PYX_ERR(1, 1049, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_5882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_16, 2, __pyx_float_0_5882352941176471)) __PYX_ERR(1, 1049, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1050
 * [0.8862745098039215,0.6980392156862745,0.49411764705882355],
 * [0.9647058823529412,0.8470588235294118,0.5882352941176471],
 * [0.9882352941176471,0.9686274509803922,0.7450980392156863],             # <<<<<<<<<<<<<<
 * [0.9254901960784314,0.9215686274509803,0.9058823529411765],
 * [0.796078431372549,0.7764705882352941,0.7568627450980392],
 */
  __pyx_t_19 = PyList_New(3); if (unlikely(!__pyx_t_19)) __PYX_ERR(1, 1050, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_19);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 0, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 1050, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_9686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 1, __pyx_float_0_9686274509803922)) __PYX_ERR(1, 1050, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_7450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_19, 2, __pyx_float_0_7450980392156863)) __PYX_ERR(1, 1050, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1051
 * [0.9647058823529412,0.8470588235294118,0.5882352941176471],
 * [0.9882352941176471,0.9686274509803922,0.7450980392156863],
 * [0.9254901960784314,0.9215686274509803,0.9058823529411765],             # <<<<<<<<<<<<<<
 * [0.796078431372549,0.7764705882352941,0.7568627450980392],
 * [0.6509803921568628,0.6196078431372549,0.6039215686274509],
 */
  __pyx_t_18 = PyList_New(3); if (unlikely(!__pyx_t_18)) __PYX_ERR(1, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_18);
  __Pyx_INCREF(__pyx_float_0_9254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_9254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 0, __pyx_float_0_9254901960784314)) __PYX_ERR(1, 1051, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 1, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 1051, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_9058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_18, 2, __pyx_float_0_9058823529411765)) __PYX_ERR(1, 1051, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1052
 * [0.9882352941176471,0.9686274509803922,0.7450980392156863],
 * [0.9254901960784314,0.9215686274509803,0.9058823529411765],
 * [0.796078431372549,0.7764705882352941,0.7568627450980392],             # <<<<<<<<<<<<<<
 * [0.6509803921568628,0.6196078431372549,0.6039215686274509],
 * [0.5019607843137255,0.4823529411764706,0.47843137254901963],
 */
  __pyx_t_24 = PyList_New(3); if (unlikely(!__pyx_t_24)) __PYX_ERR(1, 1052, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_24);
  __Pyx_INCREF(__pyx_float_0_796078431372549);
  __Pyx_GIVEREF(__pyx_float_0_796078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 0, __pyx_float_0_796078431372549)) __PYX_ERR(1, 1052, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_7764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 1, __pyx_float_0_7764705882352941)) __PYX_ERR(1, 1052, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_7568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_24, 2, __pyx_float_0_7568627450980392)) __PYX_ERR(1, 1052, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1053
 * [0.9254901960784314,0.9215686274509803,0.9058823529411765],
 * [0.796078431372549,0.7764705882352941,0.7568627450980392],
 * [0.6509803921568628,0.6196078431372549,0.6039215686274509],             # <<<<<<<<<<<<<<
 * [0.5019607843137255,0.4823529411764706,0.47843137254901963],
 * [0.34901960784313724,0.3411764705882353,0.3411764705882353],
 */
  __pyx_t_35 = PyList_New(3); if (unlikely(!__pyx_t_35)) __PYX_ERR(1, 1053, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_35);
  __Pyx_INCREF(__pyx_float_0_6509803921568628);
  __Pyx_GIVEREF(__pyx_float_0_6509803921568628);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 0, __pyx_float_0_6509803921568628)) __PYX_ERR(1, 1053, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_6196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 1, __pyx_float_0_6196078431372549)) __PYX_ERR(1, 1053, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6039215686274509);
  __Pyx_GIVEREF(__pyx_float_0_6039215686274509);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_35, 2, __pyx_float_0_6039215686274509)) __PYX_ERR(1, 1053, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1054
 * [0.796078431372549,0.7764705882352941,0.7568627450980392],
 * [0.6509803921568628,0.6196078431372549,0.6039215686274509],
 * [0.5019607843137255,0.4823529411764706,0.47843137254901963],             # <<<<<<<<<<<<<<
 * [0.34901960784313724,0.3411764705882353,0.3411764705882353],
 * [0.19607843137254902,0.19607843137254902,0.19607843137254902],
 */
  __pyx_t_38 = PyList_New(3); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __Pyx_INCREF(__pyx_float_0_5019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_5019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 0, __pyx_float_0_5019607843137255)) __PYX_ERR(1, 1054, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 1, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 1054, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47843137254901963);
  __Pyx_GIVEREF(__pyx_float_0_47843137254901963);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 2, __pyx_float_0_47843137254901963)) __PYX_ERR(1, 1054, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1055
 * [0.6509803921568628,0.6196078431372549,0.6039215686274509],
 * [0.5019607843137255,0.4823529411764706,0.47843137254901963],
 * [0.34901960784313724,0.3411764705882353,0.3411764705882353],             # <<<<<<<<<<<<<<
 * [0.19607843137254902,0.19607843137254902,0.19607843137254902],
 * [0.30980392156862746,0.20392156862745098,0.1843137254901961],
 */
  __pyx_t_39 = PyList_New(3); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 1055, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 0, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 1055, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_3411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 1, __pyx_float_0_3411764705882353)) __PYX_ERR(1, 1055, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_3411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 2, __pyx_float_0_3411764705882353)) __PYX_ERR(1, 1055, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1056
 * [0.5019607843137255,0.4823529411764706,0.47843137254901963],
 * [0.34901960784313724,0.3411764705882353,0.3411764705882353],
 * [0.19607843137254902,0.19607843137254902,0.19607843137254902],             # <<<<<<<<<<<<<<
 * [0.30980392156862746,0.20392156862745098,0.1843137254901961],
 * [0.5490196078431373,0.3568627450980392,0.24313725490196078],
 */
  __pyx_t_40 = PyList_New(3); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 0, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 1056, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 1, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 1056, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 2, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 1056, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1057
 * [0.34901960784313724,0.3411764705882353,0.3411764705882353],
 * [0.19607843137254902,0.19607843137254902,0.19607843137254902],
 * [0.30980392156862746,0.20392156862745098,0.1843137254901961],             # <<<<<<<<<<<<<<
 * [0.5490196078431373,0.3568627450980392,0.24313725490196078],
 * [0.7764705882352941,0.5215686274509804,0.33725490196078434],
 */
  __pyx_t_41 = PyList_New(3); if (unlikely(!__pyx_t_41)) __PYX_ERR(1, 1057, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  __Pyx_INCREF(__pyx_float_0_30980392156862746);
  __Pyx_GIVEREF(__pyx_float_0_30980392156862746);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 0, __pyx_float_0_30980392156862746)) __PYX_ERR(1, 1057, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 1, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 1057, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_1843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 2, __pyx_float_0_1843137254901961)) __PYX_ERR(1, 1057, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1058
 * [0.19607843137254902,0.19607843137254902,0.19607843137254902],
 * [0.30980392156862746,0.20392156862745098,0.1843137254901961],
 * [0.5490196078431373,0.3568627450980392,0.24313725490196078],             # <<<<<<<<<<<<<<
 * [0.7764705882352941,0.5215686274509804,0.33725490196078434],
 * [0.8392156862745098,0.6588235294117647,0.3176470588235294],
 */
  __pyx_t_42 = PyList_New(3); if (unlikely(!__pyx_t_42)) __PYX_ERR(1, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __Pyx_INCREF(__pyx_float_0_5490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_5490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 0, __pyx_float_0_5490196078431373)) __PYX_ERR(1, 1058, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_3568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 1, __pyx_float_0_3568627450980392)) __PYX_ERR(1, 1058, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_24313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 2, __pyx_float_0_24313725490196078)) __PYX_ERR(1, 1058, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1059
 * [0.30980392156862746,0.20392156862745098,0.1843137254901961],
 * [0.5490196078431373,0.3568627450980392,0.24313725490196078],
 * [0.7764705882352941,0.5215686274509804,0.33725490196078434],             # <<<<<<<<<<<<<<
 * [0.8392156862745098,0.6588235294117647,0.3176470588235294],
 * [0.7058823529411765,0.4588235294117647,0.2196078431372549],
 */
  __pyx_t_43 = PyList_New(3); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_INCREF(__pyx_float_0_7764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_7764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 0, __pyx_float_0_7764705882352941)) __PYX_ERR(1, 1059, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_5215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 1, __pyx_float_0_5215686274509804)) __PYX_ERR(1, 1059, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_33725490196078434);
  __Pyx_GIVEREF(__pyx_float_0_33725490196078434);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 2, __pyx_float_0_33725490196078434)) __PYX_ERR(1, 1059, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1060
 * [0.5490196078431373,0.3568627450980392,0.24313725490196078],
 * [0.7764705882352941,0.5215686274509804,0.33725490196078434],
 * [0.8392156862745098,0.6588235294117647,0.3176470588235294],             # <<<<<<<<<<<<<<
 * [0.7058823529411765,0.4588235294117647,0.2196078431372549],
 * [0.4470588235294118,0.29411764705882354,0.17254901960784313],
 */
  __pyx_t_44 = PyList_New(3); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_INCREF(__pyx_float_0_8392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_8392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 0, __pyx_float_0_8392156862745098)) __PYX_ERR(1, 1060, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 1, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 1060, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_3176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 2, __pyx_float_0_3176470588235294)) __PYX_ERR(1, 1060, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1061
 * [0.7764705882352941,0.5215686274509804,0.33725490196078434],
 * [0.8392156862745098,0.6588235294117647,0.3176470588235294],
 * [0.7058823529411765,0.4588235294117647,0.2196078431372549],             # <<<<<<<<<<<<<<
 * [0.4470588235294118,0.29411764705882354,0.17254901960784313],
 * [0.27058823529411763,0.16470588235294117,0.10588235294117647],
 */
  __pyx_t_45 = PyList_New(3); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_INCREF(__pyx_float_0_7058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_7058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 0, __pyx_float_0_7058823529411765)) __PYX_ERR(1, 1061, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 1, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 1061, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_2196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 2, __pyx_float_0_2196078431372549)) __PYX_ERR(1, 1061, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1062
 * [0.8392156862745098,0.6588235294117647,0.3176470588235294],
 * [0.7058823529411765,0.4588235294117647,0.2196078431372549],
 * [0.4470588235294118,0.29411764705882354,0.17254901960784313],             # <<<<<<<<<<<<<<
 * [0.27058823529411763,0.16470588235294117,0.10588235294117647],
 * [0.3803921568627451,0.40784313725490196,0.22745098039215686],
 */
  __pyx_t_46 = PyList_New(3); if (unlikely(!__pyx_t_46)) __PYX_ERR(1, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_46);
  __Pyx_INCREF(__pyx_float_0_4470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_4470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 0, __pyx_float_0_4470588235294118)) __PYX_ERR(1, 1062, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_29411764705882354);
  __Pyx_GIVEREF(__pyx_float_0_29411764705882354);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 1, __pyx_float_0_29411764705882354)) __PYX_ERR(1, 1062, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 2, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 1062, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1063
 * [0.7058823529411765,0.4588235294117647,0.2196078431372549],
 * [0.4470588235294118,0.29411764705882354,0.17254901960784313],
 * [0.27058823529411763,0.16470588235294117,0.10588235294117647],             # <<<<<<<<<<<<<<
 * [0.3803921568627451,0.40784313725490196,0.22745098039215686],
 * [0.5764705882352941,0.5803921568627451,0.27450980392156865],
 */
  __pyx_t_47 = PyList_New(3); if (unlikely(!__pyx_t_47)) __PYX_ERR(1, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __Pyx_INCREF(__pyx_float_0_27058823529411763);
  __Pyx_GIVEREF(__pyx_float_0_27058823529411763);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 0, __pyx_float_0_27058823529411763)) __PYX_ERR(1, 1063, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16470588235294117);
  __Pyx_GIVEREF(__pyx_float_0_16470588235294117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 1, __pyx_float_0_16470588235294117)) __PYX_ERR(1, 1063, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_10588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 2, __pyx_float_0_10588235294117647)) __PYX_ERR(1, 1063, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1064
 * [0.4470588235294118,0.29411764705882354,0.17254901960784313],
 * [0.27058823529411763,0.16470588235294117,0.10588235294117647],
 * [0.3803921568627451,0.40784313725490196,0.22745098039215686],             # <<<<<<<<<<<<<<
 * [0.5764705882352941,0.5803921568627451,0.27450980392156865],
 * [0.7764705882352941,0.7215686274509804,0.34509803921568627],
 */
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_float_0_3803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_3803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_float_0_3803921568627451)) __PYX_ERR(1, 1064, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 1064, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_22745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_float_0_22745098039215686)) __PYX_ERR(1, 1064, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1065
 * [0.27058823529411763,0.16470588235294117,0.10588235294117647],
 * [0.3803921568627451,0.40784313725490196,0.22745098039215686],
 * [0.5764705882352941,0.5803921568627451,0.27450980392156865],             # <<<<<<<<<<<<<<
 * [0.7764705882352941,0.7215686274509804,0.34509803921568627],
 * [0.9372549019607843,0.8666666666666667,0.5686274509803921],
 */
  __pyx_t_48 = PyList_New(3); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __Pyx_INCREF(__pyx_float_0_5764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_5764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 0, __pyx_float_0_5764705882352941)) __PYX_ERR(1, 1065, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_5803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 1, __pyx_float_0_5803921568627451)) __PYX_ERR(1, 1065, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_27450980392156865);
  __Pyx_GIVEREF(__pyx_float_0_27450980392156865);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 2, __pyx_float_0_27450980392156865)) __PYX_ERR(1, 1065, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1066
 * [0.3803921568627451,0.40784313725490196,0.22745098039215686],
 * [0.5764705882352941,0.5803921568627451,0.27450980392156865],
 * [0.7764705882352941,0.7215686274509804,0.34509803921568627],             # <<<<<<<<<<<<<<
 * [0.9372549019607843,0.8666666666666667,0.5686274509803921],
 * [0.7098039215686275,0.9058823529411765,0.796078431372549],
 */
  __pyx_t_50 = PyList_New(3); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_50);
  __Pyx_INCREF(__pyx_float_0_7764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_7764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 0, __pyx_float_0_7764705882352941)) __PYX_ERR(1, 1066, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_7215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 1, __pyx_float_0_7215686274509804)) __PYX_ERR(1, 1066, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 2, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 1066, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1067
 * [0.5764705882352941,0.5803921568627451,0.27450980392156865],
 * [0.7764705882352941,0.7215686274509804,0.34509803921568627],
 * [0.9372549019607843,0.8666666666666667,0.5686274509803921],             # <<<<<<<<<<<<<<
 * [0.7098039215686275,0.9058823529411765,0.796078431372549],
 * [0.5254901960784314,0.7764705882352941,0.6039215686274509],
 */
  __pyx_t_85 = PyList_New(3); if (unlikely(!__pyx_t_85)) __PYX_ERR(1, 1067, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_85);
  __Pyx_INCREF(__pyx_float_0_9372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_9372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_85, 0, __pyx_float_0_9372549019607843)) __PYX_ERR(1, 1067, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_8666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_85, 1, __pyx_float_0_8666666666666667)) __PYX_ERR(1, 1067, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5686274509803921);
  __Pyx_GIVEREF(__pyx_float_0_5686274509803921);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_85, 2, __pyx_float_0_5686274509803921)) __PYX_ERR(1, 1067, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1068
 * [0.7764705882352941,0.7215686274509804,0.34509803921568627],
 * [0.9372549019607843,0.8666666666666667,0.5686274509803921],
 * [0.7098039215686275,0.9058823529411765,0.796078431372549],             # <<<<<<<<<<<<<<
 * [0.5254901960784314,0.7764705882352941,0.6039215686274509],
 * [0.36470588235294116,0.6078431372549019,0.4745098039215686],
 */
  __pyx_t_86 = PyList_New(3); if (unlikely(!__pyx_t_86)) __PYX_ERR(1, 1068, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_86);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_86, 0, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 1068, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_9058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_86, 1, __pyx_float_0_9058823529411765)) __PYX_ERR(1, 1068, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_796078431372549);
  __Pyx_GIVEREF(__pyx_float_0_796078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_86, 2, __pyx_float_0_796078431372549)) __PYX_ERR(1, 1068, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1069
 * [0.9372549019607843,0.8666666666666667,0.5686274509803921],
 * [0.7098039215686275,0.9058823529411765,0.796078431372549],
 * [0.5254901960784314,0.7764705882352941,0.6039215686274509],             # <<<<<<<<<<<<<<
 * [0.36470588235294116,0.6078431372549019,0.4745098039215686],
 * [0.2823529411764706,0.40784313725490196,0.34901960784313724],
 */
  __pyx_t_87 = PyList_New(3); if (unlikely(!__pyx_t_87)) __PYX_ERR(1, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_87);
  __Pyx_INCREF(__pyx_float_0_5254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_5254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_87, 0, __pyx_float_0_5254901960784314)) __PYX_ERR(1, 1069, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_7764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_87, 1, __pyx_float_0_7764705882352941)) __PYX_ERR(1, 1069, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6039215686274509);
  __Pyx_GIVEREF(__pyx_float_0_6039215686274509);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_87, 2, __pyx_float_0_6039215686274509)) __PYX_ERR(1, 1069, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1070
 * [0.7098039215686275,0.9058823529411765,0.796078431372549],
 * [0.5254901960784314,0.7764705882352941,0.6039215686274509],
 * [0.36470588235294116,0.6078431372549019,0.4745098039215686],             # <<<<<<<<<<<<<<
 * [0.2823529411764706,0.40784313725490196,0.34901960784313724],
 * [0.17254901960784313,0.23137254901960785,0.2235294117647059],
 */
  __pyx_t_88 = PyList_New(3); if (unlikely(!__pyx_t_88)) __PYX_ERR(1, 1070, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_88);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_88, 0, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 1070, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6078431372549019);
  __Pyx_GIVEREF(__pyx_float_0_6078431372549019);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_88, 1, __pyx_float_0_6078431372549019)) __PYX_ERR(1, 1070, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_4745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_88, 2, __pyx_float_0_4745098039215686)) __PYX_ERR(1, 1070, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1071
 * [0.5254901960784314,0.7764705882352941,0.6039215686274509],
 * [0.36470588235294116,0.6078431372549019,0.4745098039215686],
 * [0.2823529411764706,0.40784313725490196,0.34901960784313724],             # <<<<<<<<<<<<<<
 * [0.17254901960784313,0.23137254901960785,0.2235294117647059],
 * [0.09019607843137255,0.09411764705882353,0.09803921568627451],
 */
  __pyx_t_89 = PyList_New(3); if (unlikely(!__pyx_t_89)) __PYX_ERR(1, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_89);
  __Pyx_INCREF(__pyx_float_0_2823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_2823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_89, 0, __pyx_float_0_2823529411764706)) __PYX_ERR(1, 1071, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_89, 1, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 1071, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_89, 2, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 1071, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1072
 * [0.36470588235294116,0.6078431372549019,0.4745098039215686],
 * [0.2823529411764706,0.40784313725490196,0.34901960784313724],
 * [0.17254901960784313,0.23137254901960785,0.2235294117647059],             # <<<<<<<<<<<<<<
 * [0.09019607843137255,0.09411764705882353,0.09803921568627451],
 * [0.17254901960784313,0.20392156862745098,0.2196078431372549],
 */
  __pyx_t_90 = PyList_New(3); if (unlikely(!__pyx_t_90)) __PYX_ERR(1, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_90);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_90, 0, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 1072, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23137254901960785);
  __Pyx_GIVEREF(__pyx_float_0_23137254901960785);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_90, 1, __pyx_float_0_23137254901960785)) __PYX_ERR(1, 1072, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_90, 2, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 1072, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1073
 * [0.2823529411764706,0.40784313725490196,0.34901960784313724],
 * [0.17254901960784313,0.23137254901960785,0.2235294117647059],
 * [0.09019607843137255,0.09411764705882353,0.09803921568627451],             # <<<<<<<<<<<<<<
 * [0.17254901960784313,0.20392156862745098,0.2196078431372549],
 * [0.27450980392156865,0.32941176470588235,0.33725490196078434],
 */
  __pyx_t_91 = PyList_New(3); if (unlikely(!__pyx_t_91)) __PYX_ERR(1, 1073, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_91);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_91, 0, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 1073, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_09411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_91, 1, __pyx_float_0_09411764705882353)) __PYX_ERR(1, 1073, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_09803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_91, 2, __pyx_float_0_09803921568627451)) __PYX_ERR(1, 1073, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1074
 * [0.17254901960784313,0.23137254901960785,0.2235294117647059],
 * [0.09019607843137255,0.09411764705882353,0.09803921568627451],
 * [0.17254901960784313,0.20392156862745098,0.2196078431372549],             # <<<<<<<<<<<<<<
 * [0.27450980392156865,0.32941176470588235,0.33725490196078434],
 * [0.39215686274509803,0.5294117647058824,0.5490196078431373],
 */
  __pyx_t_92 = PyList_New(3); if (unlikely(!__pyx_t_92)) __PYX_ERR(1, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_92);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_92, 0, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 1074, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_92, 1, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 1074, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_2196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_92, 2, __pyx_float_0_2196078431372549)) __PYX_ERR(1, 1074, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1075
 * [0.09019607843137255,0.09411764705882353,0.09803921568627451],
 * [0.17254901960784313,0.20392156862745098,0.2196078431372549],
 * [0.27450980392156865,0.32941176470588235,0.33725490196078434],             # <<<<<<<<<<<<<<
 * [0.39215686274509803,0.5294117647058824,0.5490196078431373],
 * [0.5411764705882353,0.7686274509803922,0.7647058823529411],
 */
  __pyx_t_93 = PyList_New(3); if (unlikely(!__pyx_t_93)) __PYX_ERR(1, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_93);
  __Pyx_INCREF(__pyx_float_0_27450980392156865);
  __Pyx_GIVEREF(__pyx_float_0_27450980392156865);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_93, 0, __pyx_float_0_27450980392156865)) __PYX_ERR(1, 1075, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_32941176470588235);
  __Pyx_GIVEREF(__pyx_float_0_32941176470588235);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_93, 1, __pyx_float_0_32941176470588235)) __PYX_ERR(1, 1075, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_33725490196078434);
  __Pyx_GIVEREF(__pyx_float_0_33725490196078434);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_93, 2, __pyx_float_0_33725490196078434)) __PYX_ERR(1, 1075, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1076
 * [0.17254901960784313,0.20392156862745098,0.2196078431372549],
 * [0.27450980392156865,0.32941176470588235,0.33725490196078434],
 * [0.39215686274509803,0.5294117647058824,0.5490196078431373],             # <<<<<<<<<<<<<<
 * [0.5411764705882353,0.7686274509803922,0.7647058823529411],
 * [0.6862745098039216,0.9137254901960784,0.8745098039215686],
 */
  __pyx_t_94 = PyList_New(3); if (unlikely(!__pyx_t_94)) __PYX_ERR(1, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_94);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 0, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 1076, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_5294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 1, __pyx_float_0_5294117647058824)) __PYX_ERR(1, 1076, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_5490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 2, __pyx_float_0_5490196078431373)) __PYX_ERR(1, 1076, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1077
 * [0.27450980392156865,0.32941176470588235,0.33725490196078434],
 * [0.39215686274509803,0.5294117647058824,0.5490196078431373],
 * [0.5411764705882353,0.7686274509803922,0.7647058823529411],             # <<<<<<<<<<<<<<
 * [0.6862745098039216,0.9137254901960784,0.8745098039215686],
 * [0.8627450980392157,0.9176470588235294,0.9333333333333333],
 */
  __pyx_t_95 = PyList_New(3); if (unlikely(!__pyx_t_95)) __PYX_ERR(1, 1077, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_95);
  __Pyx_INCREF(__pyx_float_0_5411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_5411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 0, __pyx_float_0_5411764705882353)) __PYX_ERR(1, 1077, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_7686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 1, __pyx_float_0_7686274509803922)) __PYX_ERR(1, 1077, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7647058823529411);
  __Pyx_GIVEREF(__pyx_float_0_7647058823529411);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 2, __pyx_float_0_7647058823529411)) __PYX_ERR(1, 1077, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1078
 * [0.39215686274509803,0.5294117647058824,0.5490196078431373],
 * [0.5411764705882353,0.7686274509803922,0.7647058823529411],
 * [0.6862745098039216,0.9137254901960784,0.8745098039215686],             # <<<<<<<<<<<<<<
 * [0.8627450980392157,0.9176470588235294,0.9333333333333333],
 * [0.7215686274509804,0.8,0.8470588235294118],
 */
  __pyx_t_96 = PyList_New(3); if (unlikely(!__pyx_t_96)) __PYX_ERR(1, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_96);
  __Pyx_INCREF(__pyx_float_0_6862745098039216);
  __Pyx_GIVEREF(__pyx_float_0_6862745098039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 0, __pyx_float_0_6862745098039216)) __PYX_ERR(1, 1078, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_9137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 1, __pyx_float_0_9137254901960784)) __PYX_ERR(1, 1078, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_8745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 2, __pyx_float_0_8745098039215686)) __PYX_ERR(1, 1078, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1079
 * [0.5411764705882353,0.7686274509803922,0.7647058823529411],
 * [0.6862745098039216,0.9137254901960784,0.8745098039215686],
 * [0.8627450980392157,0.9176470588235294,0.9333333333333333],             # <<<<<<<<<<<<<<
 * [0.7215686274509804,0.8,0.8470588235294118],
 * [0.5333333333333333,0.6392156862745098,0.7372549019607844],
 */
  __pyx_t_97 = PyList_New(3); if (unlikely(!__pyx_t_97)) __PYX_ERR(1, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_97);
  __Pyx_INCREF(__pyx_float_0_8627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_8627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 0, __pyx_float_0_8627450980392157)) __PYX_ERR(1, 1079, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 1, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 1079, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_9333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 2, __pyx_float_0_9333333333333333)) __PYX_ERR(1, 1079, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1080
 * [0.6862745098039216,0.9137254901960784,0.8745098039215686],
 * [0.8627450980392157,0.9176470588235294,0.9333333333333333],
 * [0.7215686274509804,0.8,0.8470588235294118],             # <<<<<<<<<<<<<<
 * [0.5333333333333333,0.6392156862745098,0.7372549019607844],
 * [0.3686274509803922,0.44313725490196076,0.5568627450980392],
 */
  __pyx_t_98 = PyList_New(3); if (unlikely(!__pyx_t_98)) __PYX_ERR(1, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_98);
  __Pyx_INCREF(__pyx_float_0_7215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_7215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 0, __pyx_float_0_7215686274509804)) __PYX_ERR(1, 1080, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8);
  __Pyx_GIVEREF(__pyx_float_0_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 1, __pyx_float_0_8)) __PYX_ERR(1, 1080, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_8470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 2, __pyx_float_0_8470588235294118)) __PYX_ERR(1, 1080, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1081
 * [0.8627450980392157,0.9176470588235294,0.9333333333333333],
 * [0.7215686274509804,0.8,0.8470588235294118],
 * [0.5333333333333333,0.6392156862745098,0.7372549019607844],             # <<<<<<<<<<<<<<
 * [0.3686274509803922,0.44313725490196076,0.5568627450980392],
 * [0.2823529411764706,0.3215686274509804,0.3843137254901961],
 */
  __pyx_t_99 = PyList_New(3); if (unlikely(!__pyx_t_99)) __PYX_ERR(1, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_99);
  __Pyx_INCREF(__pyx_float_0_5333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_5333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 0, __pyx_float_0_5333333333333333)) __PYX_ERR(1, 1081, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_6392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 1, __pyx_float_0_6392156862745098)) __PYX_ERR(1, 1081, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7372549019607844);
  __Pyx_GIVEREF(__pyx_float_0_7372549019607844);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 2, __pyx_float_0_7372549019607844)) __PYX_ERR(1, 1081, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1082
 * [0.7215686274509804,0.8,0.8470588235294118],
 * [0.5333333333333333,0.6392156862745098,0.7372549019607844],
 * [0.3686274509803922,0.44313725490196076,0.5568627450980392],             # <<<<<<<<<<<<<<
 * [0.2823529411764706,0.3215686274509804,0.3843137254901961],
 * [0.1568627450980392,0.17254901960784313,0.23529411764705882],
 */
  __pyx_t_100 = PyList_New(3); if (unlikely(!__pyx_t_100)) __PYX_ERR(1, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_100);
  __Pyx_INCREF(__pyx_float_0_3686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_3686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 0, __pyx_float_0_3686274509803922)) __PYX_ERR(1, 1082, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_44313725490196076);
  __Pyx_GIVEREF(__pyx_float_0_44313725490196076);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 1, __pyx_float_0_44313725490196076)) __PYX_ERR(1, 1082, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_5568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 2, __pyx_float_0_5568627450980392)) __PYX_ERR(1, 1082, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1083
 * [0.5333333333333333,0.6392156862745098,0.7372549019607844],
 * [0.3686274509803922,0.44313725490196076,0.5568627450980392],
 * [0.2823529411764706,0.3215686274509804,0.3843137254901961],             # <<<<<<<<<<<<<<
 * [0.1568627450980392,0.17254901960784313,0.23529411764705882],
 * [0.27450980392156865,0.2784313725490196,0.3843137254901961],
 */
  __pyx_t_101 = PyList_New(3); if (unlikely(!__pyx_t_101)) __PYX_ERR(1, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_101);
  __Pyx_INCREF(__pyx_float_0_2823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_2823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 0, __pyx_float_0_2823529411764706)) __PYX_ERR(1, 1083, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 1, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 1083, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 2, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 1083, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1084
 * [0.3686274509803922,0.44313725490196076,0.5568627450980392],
 * [0.2823529411764706,0.3215686274509804,0.3843137254901961],
 * [0.1568627450980392,0.17254901960784313,0.23529411764705882],             # <<<<<<<<<<<<<<
 * [0.27450980392156865,0.2784313725490196,0.3843137254901961],
 * [0.4117647058823529,0.4,0.5098039215686274],
 */
  __pyx_t_102 = PyList_New(3); if (unlikely(!__pyx_t_102)) __PYX_ERR(1, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_102);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 0, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 1084, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 1, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 1084, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 2, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 1084, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1085
 * [0.2823529411764706,0.3215686274509804,0.3843137254901961],
 * [0.1568627450980392,0.17254901960784313,0.23529411764705882],
 * [0.27450980392156865,0.2784313725490196,0.3843137254901961],             # <<<<<<<<<<<<<<
 * [0.4117647058823529,0.4,0.5098039215686274],
 * [0.6039215686274509,0.592156862745098,0.7254901960784313],
 */
  __pyx_t_103 = PyList_New(3); if (unlikely(!__pyx_t_103)) __PYX_ERR(1, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_103);
  __Pyx_INCREF(__pyx_float_0_27450980392156865);
  __Pyx_GIVEREF(__pyx_float_0_27450980392156865);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 0, __pyx_float_0_27450980392156865)) __PYX_ERR(1, 1085, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_2784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 1, __pyx_float_0_2784313725490196)) __PYX_ERR(1, 1085, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 2, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 1085, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1086
 * [0.1568627450980392,0.17254901960784313,0.23529411764705882],
 * [0.27450980392156865,0.2784313725490196,0.3843137254901961],
 * [0.4117647058823529,0.4,0.5098039215686274],             # <<<<<<<<<<<<<<
 * [0.6039215686274509,0.592156862745098,0.7254901960784313],
 * [0.7725490196078432,0.7803921568627451,0.8666666666666667],
 */
  __pyx_t_104 = PyList_New(3); if (unlikely(!__pyx_t_104)) __PYX_ERR(1, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_104);
  __Pyx_INCREF(__pyx_float_0_4117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_4117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 0, __pyx_float_0_4117647058823529)) __PYX_ERR(1, 1086, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4);
  __Pyx_GIVEREF(__pyx_float_0_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 1, __pyx_float_0_4)) __PYX_ERR(1, 1086, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 2, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 1086, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1087
 * [0.27450980392156865,0.2784313725490196,0.3843137254901961],
 * [0.4117647058823529,0.4,0.5098039215686274],
 * [0.6039215686274509,0.592156862745098,0.7254901960784313],             # <<<<<<<<<<<<<<
 * [0.7725490196078432,0.7803921568627451,0.8666666666666667],
 * [0.9019607843137255,0.9058823529411765,0.9411764705882353],
 */
  __pyx_t_105 = PyList_New(3); if (unlikely(!__pyx_t_105)) __PYX_ERR(1, 1087, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_105);
  __Pyx_INCREF(__pyx_float_0_6039215686274509);
  __Pyx_GIVEREF(__pyx_float_0_6039215686274509);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 0, __pyx_float_0_6039215686274509)) __PYX_ERR(1, 1087, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 1, __pyx_float_0_592156862745098)) __PYX_ERR(1, 1087, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_7254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 2, __pyx_float_0_7254901960784313)) __PYX_ERR(1, 1087, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1088
 * [0.4117647058823529,0.4,0.5098039215686274],
 * [0.6039215686274509,0.592156862745098,0.7254901960784313],
 * [0.7725490196078432,0.7803921568627451,0.8666666666666667],             # <<<<<<<<<<<<<<
 * [0.9019607843137255,0.9058823529411765,0.9411764705882353],
 * [0.9333333333333333,0.9019607843137255,0.9176470588235294],
 */
  __pyx_t_106 = PyList_New(3); if (unlikely(!__pyx_t_106)) __PYX_ERR(1, 1088, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_106);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 0, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 1088, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_7803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 1, __pyx_float_0_7803921568627451)) __PYX_ERR(1, 1088, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_8666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 2, __pyx_float_0_8666666666666667)) __PYX_ERR(1, 1088, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1089
 * [0.6039215686274509,0.592156862745098,0.7254901960784313],
 * [0.7725490196078432,0.7803921568627451,0.8666666666666667],
 * [0.9019607843137255,0.9058823529411765,0.9411764705882353],             # <<<<<<<<<<<<<<
 * [0.9333333333333333,0.9019607843137255,0.9176470588235294],
 * [0.8901960784313725,0.803921568627451,0.8745098039215686],
 */
  __pyx_t_107 = PyList_New(3); if (unlikely(!__pyx_t_107)) __PYX_ERR(1, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_107);
  __Pyx_INCREF(__pyx_float_0_9019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_9019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 0, __pyx_float_0_9019607843137255)) __PYX_ERR(1, 1089, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_9058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 1, __pyx_float_0_9058823529411765)) __PYX_ERR(1, 1089, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_9411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 2, __pyx_float_0_9411764705882353)) __PYX_ERR(1, 1089, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1090
 * [0.7725490196078432,0.7803921568627451,0.8666666666666667],
 * [0.9019607843137255,0.9058823529411765,0.9411764705882353],
 * [0.9333333333333333,0.9019607843137255,0.9176470588235294],             # <<<<<<<<<<<<<<
 * [0.8901960784313725,0.803921568627451,0.8745098039215686],
 * [0.7490196078431373,0.6470588235294118,0.788235294117647],
 */
  __pyx_t_108 = PyList_New(3); if (unlikely(!__pyx_t_108)) __PYX_ERR(1, 1090, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_108);
  __Pyx_INCREF(__pyx_float_0_9333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_9333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 0, __pyx_float_0_9333333333333333)) __PYX_ERR(1, 1090, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_9019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 1, __pyx_float_0_9019607843137255)) __PYX_ERR(1, 1090, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 2, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 1090, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1091
 * [0.9019607843137255,0.9058823529411765,0.9411764705882353],
 * [0.9333333333333333,0.9019607843137255,0.9176470588235294],
 * [0.8901960784313725,0.803921568627451,0.8745098039215686],             # <<<<<<<<<<<<<<
 * [0.7490196078431373,0.6470588235294118,0.788235294117647],
 * [0.5294117647058824,0.45098039215686275,0.5607843137254902],
 */
  __pyx_t_109 = PyList_New(3); if (unlikely(!__pyx_t_109)) __PYX_ERR(1, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_109);
  __Pyx_INCREF(__pyx_float_0_8901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_8901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 0, __pyx_float_0_8901960784313725)) __PYX_ERR(1, 1091, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 1, __pyx_float_0_803921568627451)) __PYX_ERR(1, 1091, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_8745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 2, __pyx_float_0_8745098039215686)) __PYX_ERR(1, 1091, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1092
 * [0.9333333333333333,0.9019607843137255,0.9176470588235294],
 * [0.8901960784313725,0.803921568627451,0.8745098039215686],
 * [0.7490196078431373,0.6470588235294118,0.788235294117647],             # <<<<<<<<<<<<<<
 * [0.5294117647058824,0.45098039215686275,0.5607843137254902],
 * [0.33725490196078434,0.30980392156862746,0.3568627450980392],
 */
  __pyx_t_110 = PyList_New(3); if (unlikely(!__pyx_t_110)) __PYX_ERR(1, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_110);
  __Pyx_INCREF(__pyx_float_0_7490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_7490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 0, __pyx_float_0_7490196078431373)) __PYX_ERR(1, 1092, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 1, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 1092, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 2, __pyx_float_0_788235294117647)) __PYX_ERR(1, 1092, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1093
 * [0.8901960784313725,0.803921568627451,0.8745098039215686],
 * [0.7490196078431373,0.6470588235294118,0.788235294117647],
 * [0.5294117647058824,0.45098039215686275,0.5607843137254902],             # <<<<<<<<<<<<<<
 * [0.33725490196078434,0.30980392156862746,0.3568627450980392],
 * [0.19607843137254902,0.1843137254901961,0.20784313725490197],
 */
  __pyx_t_111 = PyList_New(3); if (unlikely(!__pyx_t_111)) __PYX_ERR(1, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_111);
  __Pyx_INCREF(__pyx_float_0_5294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_5294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 0, __pyx_float_0_5294117647058824)) __PYX_ERR(1, 1093, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_45098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_45098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 1, __pyx_float_0_45098039215686275)) __PYX_ERR(1, 1093, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 2, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 1093, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1094
 * [0.7490196078431373,0.6470588235294118,0.788235294117647],
 * [0.5294117647058824,0.45098039215686275,0.5607843137254902],
 * [0.33725490196078434,0.30980392156862746,0.3568627450980392],             # <<<<<<<<<<<<<<
 * [0.19607843137254902,0.1843137254901961,0.20784313725490197],
 * [0.21176470588235294,0.1568627450980392,0.16862745098039217],
 */
  __pyx_t_112 = PyList_New(3); if (unlikely(!__pyx_t_112)) __PYX_ERR(1, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_112);
  __Pyx_INCREF(__pyx_float_0_33725490196078434);
  __Pyx_GIVEREF(__pyx_float_0_33725490196078434);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 0, __pyx_float_0_33725490196078434)) __PYX_ERR(1, 1094, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_30980392156862746);
  __Pyx_GIVEREF(__pyx_float_0_30980392156862746);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 1, __pyx_float_0_30980392156862746)) __PYX_ERR(1, 1094, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_3568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 2, __pyx_float_0_3568627450980392)) __PYX_ERR(1, 1094, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1095
 * [0.5294117647058824,0.45098039215686275,0.5607843137254902],
 * [0.33725490196078434,0.30980392156862746,0.3568627450980392],
 * [0.19607843137254902,0.1843137254901961,0.20784313725490197],             # <<<<<<<<<<<<<<
 * [0.21176470588235294,0.1568627450980392,0.16862745098039217],
 * [0.396078431372549,0.28627450980392155,0.33725490196078434],
 */
  __pyx_t_113 = PyList_New(3); if (unlikely(!__pyx_t_113)) __PYX_ERR(1, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_113);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 0, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 1095, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_1843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 1, __pyx_float_0_1843137254901961)) __PYX_ERR(1, 1095, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20784313725490197);
  __Pyx_GIVEREF(__pyx_float_0_20784313725490197);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 2, __pyx_float_0_20784313725490197)) __PYX_ERR(1, 1095, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1096
 * [0.33725490196078434,0.30980392156862746,0.3568627450980392],
 * [0.19607843137254902,0.1843137254901961,0.20784313725490197],
 * [0.21176470588235294,0.1568627450980392,0.16862745098039217],             # <<<<<<<<<<<<<<
 * [0.396078431372549,0.28627450980392155,0.33725490196078434],
 * [0.5882352941176471,0.40784313725490196,0.5333333333333333],
 */
  __pyx_t_114 = PyList_New(3); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 1096, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_114);
  __Pyx_INCREF(__pyx_float_0_21176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_21176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 0, __pyx_float_0_21176470588235294)) __PYX_ERR(1, 1096, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 1, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 1096, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16862745098039217);
  __Pyx_GIVEREF(__pyx_float_0_16862745098039217);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 2, __pyx_float_0_16862745098039217)) __PYX_ERR(1, 1096, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1097
 * [0.19607843137254902,0.1843137254901961,0.20784313725490197],
 * [0.21176470588235294,0.1568627450980392,0.16862745098039217],
 * [0.396078431372549,0.28627450980392155,0.33725490196078434],             # <<<<<<<<<<<<<<
 * [0.5882352941176471,0.40784313725490196,0.5333333333333333],
 * [0.7529411764705882,0.5647058823529412,0.6627450980392157],
 */
  __pyx_t_115 = PyList_New(3); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_115);
  __Pyx_INCREF(__pyx_float_0_396078431372549);
  __Pyx_GIVEREF(__pyx_float_0_396078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 0, __pyx_float_0_396078431372549)) __PYX_ERR(1, 1097, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_28627450980392155);
  __Pyx_GIVEREF(__pyx_float_0_28627450980392155);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 1, __pyx_float_0_28627450980392155)) __PYX_ERR(1, 1097, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_33725490196078434);
  __Pyx_GIVEREF(__pyx_float_0_33725490196078434);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 2, __pyx_float_0_33725490196078434)) __PYX_ERR(1, 1097, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1098
 * [0.21176470588235294,0.1568627450980392,0.16862745098039217],
 * [0.396078431372549,0.28627450980392155,0.33725490196078434],
 * [0.5882352941176471,0.40784313725490196,0.5333333333333333],             # <<<<<<<<<<<<<<
 * [0.7529411764705882,0.5647058823529412,0.6627450980392157],
 * [0.8313725490196079,0.7215686274509804,0.7215686274509804],
 */
  __pyx_t_116 = PyList_New(3); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 1098, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_116);
  __Pyx_INCREF(__pyx_float_0_5882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_5882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 0, __pyx_float_0_5882352941176471)) __PYX_ERR(1, 1098, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_40784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_40784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 1, __pyx_float_0_40784313725490196)) __PYX_ERR(1, 1098, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_5333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 2, __pyx_float_0_5333333333333333)) __PYX_ERR(1, 1098, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1099
 * [0.396078431372549,0.28627450980392155,0.33725490196078434],
 * [0.5882352941176471,0.40784313725490196,0.5333333333333333],
 * [0.7529411764705882,0.5647058823529412,0.6627450980392157],             # <<<<<<<<<<<<<<
 * [0.8313725490196079,0.7215686274509804,0.7215686274509804],
 * [0.9176470588235294,0.8784313725490196,0.8666666666666667],
 */
  __pyx_t_117 = PyList_New(3); if (unlikely(!__pyx_t_117)) __PYX_ERR(1, 1099, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_117);
  __Pyx_INCREF(__pyx_float_0_7529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_7529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 0, __pyx_float_0_7529411764705882)) __PYX_ERR(1, 1099, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_5647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 1, __pyx_float_0_5647058823529412)) __PYX_ERR(1, 1099, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_6627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 2, __pyx_float_0_6627450980392157)) __PYX_ERR(1, 1099, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1100
 * [0.5882352941176471,0.40784313725490196,0.5333333333333333],
 * [0.7529411764705882,0.5647058823529412,0.6627450980392157],
 * [0.8313725490196079,0.7215686274509804,0.7215686274509804],             # <<<<<<<<<<<<<<
 * [0.9176470588235294,0.8784313725490196,0.8666666666666667],
 * [0.9450980392156862,0.9215686274509803,0.8588235294117647],
 */
  __pyx_t_118 = PyList_New(3); if (unlikely(!__pyx_t_118)) __PYX_ERR(1, 1100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_118);
  __Pyx_INCREF(__pyx_float_0_8313725490196079);
  __Pyx_GIVEREF(__pyx_float_0_8313725490196079);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 0, __pyx_float_0_8313725490196079)) __PYX_ERR(1, 1100, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_7215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 1, __pyx_float_0_7215686274509804)) __PYX_ERR(1, 1100, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_7215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 2, __pyx_float_0_7215686274509804)) __PYX_ERR(1, 1100, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1101
 * [0.7529411764705882,0.5647058823529412,0.6627450980392157],
 * [0.8313725490196079,0.7215686274509804,0.7215686274509804],
 * [0.9176470588235294,0.8784313725490196,0.8666666666666667],             # <<<<<<<<<<<<<<
 * [0.9450980392156862,0.9215686274509803,0.8588235294117647],
 * [0.8666666666666667,0.807843137254902,0.7490196078431373],
 */
  __pyx_t_119 = PyList_New(3); if (unlikely(!__pyx_t_119)) __PYX_ERR(1, 1101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_119);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 0, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 1101, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_8784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 1, __pyx_float_0_8784313725490196)) __PYX_ERR(1, 1101, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_8666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 2, __pyx_float_0_8666666666666667)) __PYX_ERR(1, 1101, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1102
 * [0.8313725490196079,0.7215686274509804,0.7215686274509804],
 * [0.9176470588235294,0.8784313725490196,0.8666666666666667],
 * [0.9450980392156862,0.9215686274509803,0.8588235294117647],             # <<<<<<<<<<<<<<
 * [0.8666666666666667,0.807843137254902,0.7490196078431373],
 * [0.7411764705882353,0.6431372549019608,0.6],
 */
  __pyx_t_120 = PyList_New(3); if (unlikely(!__pyx_t_120)) __PYX_ERR(1, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_120);
  __Pyx_INCREF(__pyx_float_0_9450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_9450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 0, __pyx_float_0_9450980392156862)) __PYX_ERR(1, 1102, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 1, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 1102, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_8588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 2, __pyx_float_0_8588235294117647)) __PYX_ERR(1, 1102, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1103
 * [0.9176470588235294,0.8784313725490196,0.8666666666666667],
 * [0.9450980392156862,0.9215686274509803,0.8588235294117647],
 * [0.8666666666666667,0.807843137254902,0.7490196078431373],             # <<<<<<<<<<<<<<
 * [0.7411764705882353,0.6431372549019608,0.6],
 * [0.5333333333333333,0.43137254901960786,0.41568627450980394],
 */
  __pyx_t_121 = PyList_New(3); if (unlikely(!__pyx_t_121)) __PYX_ERR(1, 1103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_121);
  __Pyx_INCREF(__pyx_float_0_8666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_8666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 0, __pyx_float_0_8666666666666667)) __PYX_ERR(1, 1103, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_807843137254902);
  __Pyx_GIVEREF(__pyx_float_0_807843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 1, __pyx_float_0_807843137254902)) __PYX_ERR(1, 1103, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_7490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 2, __pyx_float_0_7490196078431373)) __PYX_ERR(1, 1103, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1104
 * [0.9450980392156862,0.9215686274509803,0.8588235294117647],
 * [0.8666666666666667,0.807843137254902,0.7490196078431373],
 * [0.7411764705882353,0.6431372549019608,0.6],             # <<<<<<<<<<<<<<
 * [0.5333333333333333,0.43137254901960786,0.41568627450980394],
 * [0.34901960784313724,0.30196078431372547,0.30196078431372547],
 */
  __pyx_t_122 = PyList_New(3); if (unlikely(!__pyx_t_122)) __PYX_ERR(1, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_122);
  __Pyx_INCREF(__pyx_float_0_7411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_7411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 0, __pyx_float_0_7411764705882353)) __PYX_ERR(1, 1104, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_6431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 1, __pyx_float_0_6431372549019608)) __PYX_ERR(1, 1104, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6);
  __Pyx_GIVEREF(__pyx_float_0_6);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 2, __pyx_float_0_6)) __PYX_ERR(1, 1104, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1105
 * [0.8666666666666667,0.807843137254902,0.7490196078431373],
 * [0.7411764705882353,0.6431372549019608,0.6],
 * [0.5333333333333333,0.43137254901960786,0.41568627450980394],             # <<<<<<<<<<<<<<
 * [0.34901960784313724,0.30196078431372547,0.30196078431372547],
 * [0.2,0.15294117647058825,0.16470588235294117],
 */
  __pyx_t_123 = PyList_New(3); if (unlikely(!__pyx_t_123)) __PYX_ERR(1, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_123);
  __Pyx_INCREF(__pyx_float_0_5333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_5333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 0, __pyx_float_0_5333333333333333)) __PYX_ERR(1, 1105, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_43137254901960786);
  __Pyx_GIVEREF(__pyx_float_0_43137254901960786);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 1, __pyx_float_0_43137254901960786)) __PYX_ERR(1, 1105, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_41568627450980394);
  __Pyx_GIVEREF(__pyx_float_0_41568627450980394);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 2, __pyx_float_0_41568627450980394)) __PYX_ERR(1, 1105, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1106
 * [0.7411764705882353,0.6431372549019608,0.6],
 * [0.5333333333333333,0.43137254901960786,0.41568627450980394],
 * [0.34901960784313724,0.30196078431372547,0.30196078431372547],             # <<<<<<<<<<<<<<
 * [0.2,0.15294117647058825,0.16470588235294117],
 * [0.6980392156862745,0.5803921568627451,0.4627450980392157],
 */
  __pyx_t_124 = PyList_New(3); if (unlikely(!__pyx_t_124)) __PYX_ERR(1, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_124);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 0, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 1106, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_30196078431372547);
  __Pyx_GIVEREF(__pyx_float_0_30196078431372547);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 1, __pyx_float_0_30196078431372547)) __PYX_ERR(1, 1106, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_30196078431372547);
  __Pyx_GIVEREF(__pyx_float_0_30196078431372547);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 2, __pyx_float_0_30196078431372547)) __PYX_ERR(1, 1106, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1107
 * [0.5333333333333333,0.43137254901960786,0.41568627450980394],
 * [0.34901960784313724,0.30196078431372547,0.30196078431372547],
 * [0.2,0.15294117647058825,0.16470588235294117],             # <<<<<<<<<<<<<<
 * [0.6980392156862745,0.5803921568627451,0.4627450980392157],
 * [0.8823529411764706,0.7490196078431373,0.5372549019607843],
 */
  __pyx_t_125 = PyList_New(3); if (unlikely(!__pyx_t_125)) __PYX_ERR(1, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_125);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 0, __pyx_float_0_2)) __PYX_ERR(1, 1107, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 1, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 1107, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_16470588235294117);
  __Pyx_GIVEREF(__pyx_float_0_16470588235294117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 2, __pyx_float_0_16470588235294117)) __PYX_ERR(1, 1107, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1108
 * [0.34901960784313724,0.30196078431372547,0.30196078431372547],
 * [0.2,0.15294117647058825,0.16470588235294117],
 * [0.6980392156862745,0.5803921568627451,0.4627450980392157],             # <<<<<<<<<<<<<<
 * [0.8823529411764706,0.7490196078431373,0.5372549019607843],
 * [0.9725490196078431,0.8901960784313725,0.596078431372549],
 */
  __pyx_t_126 = PyList_New(3); if (unlikely(!__pyx_t_126)) __PYX_ERR(1, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_126);
  __Pyx_INCREF(__pyx_float_0_6980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_6980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 0, __pyx_float_0_6980392156862745)) __PYX_ERR(1, 1108, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_5803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 1, __pyx_float_0_5803921568627451)) __PYX_ERR(1, 1108, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_4627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 2, __pyx_float_0_4627450980392157)) __PYX_ERR(1, 1108, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1109
 * [0.2,0.15294117647058825,0.16470588235294117],
 * [0.6980392156862745,0.5803921568627451,0.4627450980392157],
 * [0.8823529411764706,0.7490196078431373,0.5372549019607843],             # <<<<<<<<<<<<<<
 * [0.9725490196078431,0.8901960784313725,0.596078431372549],
 * [1.0,0.9137254901960784,0.8901960784313725],
 */
  __pyx_t_127 = PyList_New(3); if (unlikely(!__pyx_t_127)) __PYX_ERR(1, 1109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_127);
  __Pyx_INCREF(__pyx_float_0_8823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_8823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 0, __pyx_float_0_8823529411764706)) __PYX_ERR(1, 1109, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_7490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 1, __pyx_float_0_7490196078431373)) __PYX_ERR(1, 1109, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_5372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 2, __pyx_float_0_5372549019607843)) __PYX_ERR(1, 1109, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1110
 * [0.6980392156862745,0.5803921568627451,0.4627450980392157],
 * [0.8823529411764706,0.7490196078431373,0.5372549019607843],
 * [0.9725490196078431,0.8901960784313725,0.596078431372549],             # <<<<<<<<<<<<<<
 * [1.0,0.9137254901960784,0.8901960784313725],
 * [0.9921568627450981,0.788235294117647,0.788235294117647],
 */
  __pyx_t_128 = PyList_New(3); if (unlikely(!__pyx_t_128)) __PYX_ERR(1, 1110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_128);
  __Pyx_INCREF(__pyx_float_0_9725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_9725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 0, __pyx_float_0_9725490196078431)) __PYX_ERR(1, 1110, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_8901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 1, __pyx_float_0_8901960784313725)) __PYX_ERR(1, 1110, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_596078431372549);
  __Pyx_GIVEREF(__pyx_float_0_596078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 2, __pyx_float_0_596078431372549)) __PYX_ERR(1, 1110, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1111
 * [0.8823529411764706,0.7490196078431373,0.5372549019607843],
 * [0.9725490196078431,0.8901960784313725,0.596078431372549],
 * [1.0,0.9137254901960784,0.8901960784313725],             # <<<<<<<<<<<<<<
 * [0.9921568627450981,0.788235294117647,0.788235294117647],
 * [0.9647058823529412,0.6352941176470588,0.6588235294117647],
 */
  __pyx_t_129 = PyList_New(3); if (unlikely(!__pyx_t_129)) __PYX_ERR(1, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_129);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 0, __pyx_float_1_0)) __PYX_ERR(1, 1111, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_9137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 1, __pyx_float_0_9137254901960784)) __PYX_ERR(1, 1111, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_8901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 2, __pyx_float_0_8901960784313725)) __PYX_ERR(1, 1111, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1112
 * [0.9725490196078431,0.8901960784313725,0.596078431372549],
 * [1.0,0.9137254901960784,0.8901960784313725],
 * [0.9921568627450981,0.788235294117647,0.788235294117647],             # <<<<<<<<<<<<<<
 * [0.9647058823529412,0.6352941176470588,0.6588235294117647],
 * [0.8862745098039215,0.4470588235294118,0.5215686274509804],
 */
  __pyx_t_130 = PyList_New(3); if (unlikely(!__pyx_t_130)) __PYX_ERR(1, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_130);
  __Pyx_INCREF(__pyx_float_0_9921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_9921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 0, __pyx_float_0_9921568627450981)) __PYX_ERR(1, 1112, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 1, __pyx_float_0_788235294117647)) __PYX_ERR(1, 1112, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 2, __pyx_float_0_788235294117647)) __PYX_ERR(1, 1112, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1113
 * [1.0,0.9137254901960784,0.8901960784313725],
 * [0.9921568627450981,0.788235294117647,0.788235294117647],
 * [0.9647058823529412,0.6352941176470588,0.6588235294117647],             # <<<<<<<<<<<<<<
 * [0.8862745098039215,0.4470588235294118,0.5215686274509804],
 * [0.6980392156862745,0.3215686274509804,0.4],
 */
  __pyx_t_131 = PyList_New(3); if (unlikely(!__pyx_t_131)) __PYX_ERR(1, 1113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_131);
  __Pyx_INCREF(__pyx_float_0_9647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_9647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 0, __pyx_float_0_9647058823529412)) __PYX_ERR(1, 1113, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6352941176470588);
  __Pyx_GIVEREF(__pyx_float_0_6352941176470588);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 1, __pyx_float_0_6352941176470588)) __PYX_ERR(1, 1113, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 2, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 1113, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1114
 * [0.9921568627450981,0.788235294117647,0.788235294117647],
 * [0.9647058823529412,0.6352941176470588,0.6588235294117647],
 * [0.8862745098039215,0.4470588235294118,0.5215686274509804],             # <<<<<<<<<<<<<<
 * [0.6980392156862745,0.3215686274509804,0.4],
 * [0.39215686274509803,0.21176470588235294,0.29411764705882354],
 */
  __pyx_t_132 = PyList_New(3); if (unlikely(!__pyx_t_132)) __PYX_ERR(1, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_132);
  __Pyx_INCREF(__pyx_float_0_8862745098039215);
  __Pyx_GIVEREF(__pyx_float_0_8862745098039215);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 0, __pyx_float_0_8862745098039215)) __PYX_ERR(1, 1114, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_4470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 1, __pyx_float_0_4470588235294118)) __PYX_ERR(1, 1114, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_5215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 2, __pyx_float_0_5215686274509804)) __PYX_ERR(1, 1114, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1115
 * [0.9647058823529412,0.6352941176470588,0.6588235294117647],
 * [0.8862745098039215,0.4470588235294118,0.5215686274509804],
 * [0.6980392156862745,0.3215686274509804,0.4],             # <<<<<<<<<<<<<<
 * [0.39215686274509803,0.21176470588235294,0.29411764705882354],
 * [0.16470588235294117,0.11764705882352941,0.13725490196078433]
 */
  __pyx_t_133 = PyList_New(3); if (unlikely(!__pyx_t_133)) __PYX_ERR(1, 1115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_133);
  __Pyx_INCREF(__pyx_float_0_6980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_6980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 0, __pyx_float_0_6980392156862745)) __PYX_ERR(1, 1115, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 1, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 1115, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4);
  __Pyx_GIVEREF(__pyx_float_0_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 2, __pyx_float_0_4)) __PYX_ERR(1, 1115, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1116
 * [0.8862745098039215,0.4470588235294118,0.5215686274509804],
 * [0.6980392156862745,0.3215686274509804,0.4],
 * [0.39215686274509803,0.21176470588235294,0.29411764705882354],             # <<<<<<<<<<<<<<
 * [0.16470588235294117,0.11764705882352941,0.13725490196078433]
 * ], dtype=float32)
 */
  __pyx_t_134 = PyList_New(3); if (unlikely(!__pyx_t_134)) __PYX_ERR(1, 1116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_134);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 0, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 1116, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_21176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 1, __pyx_float_0_21176470588235294)) __PYX_ERR(1, 1116, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_29411764705882354);
  __Pyx_GIVEREF(__pyx_float_0_29411764705882354);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 2, __pyx_float_0_29411764705882354)) __PYX_ERR(1, 1116, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1117
 * [0.6980392156862745,0.3215686274509804,0.4],
 * [0.39215686274509803,0.21176470588235294,0.29411764705882354],
 * [0.16470588235294117,0.11764705882352941,0.13725490196078433]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * AAPSPLENDOR128 =_AAPSPLENDOR128_NORMALIZED * <float>255.0
 */
  __pyx_t_135 = PyList_New(3); if (unlikely(!__pyx_t_135)) __PYX_ERR(1, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_135);
  __Pyx_INCREF(__pyx_float_0_16470588235294117);
  __Pyx_GIVEREF(__pyx_float_0_16470588235294117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_135, 0, __pyx_float_0_16470588235294117)) __PYX_ERR(1, 1117, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_11764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_135, 1, __pyx_float_0_11764705882352941)) __PYX_ERR(1, 1117, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_135, 2, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 1117, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":989
 * # https://lospec.com/palette-list/aap-splendor128
 * # Created by Adigun A. Polack
 * _AAPSPLENDOR128_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0196078431372549,0.01568627450980392,0.011764705882352941],
 * [0.054901960784313725,0.047058823529411764,0.047058823529411764],
 */
  __pyx_t_136 = PyList_New(128); if (unlikely(!__pyx_t_136)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_136);
  __Pyx_GIVEREF(__pyx_t_54);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 0, __pyx_t_54)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_56);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 1, __pyx_t_56)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_83);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 2, __pyx_t_83)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_57);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 3, __pyx_t_57)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_58);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 4, __pyx_t_58)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_59);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 5, __pyx_t_59)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_60);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 6, __pyx_t_60)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_61);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 7, __pyx_t_61)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_62);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 8, __pyx_t_62)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_63);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 9, __pyx_t_63)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_64);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 10, __pyx_t_64)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_65);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 11, __pyx_t_65)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_66);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 12, __pyx_t_66)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_67);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 13, __pyx_t_67)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_68);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 14, __pyx_t_68)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_69);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 15, __pyx_t_69)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_15);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 16, __pyx_t_15)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_70);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 17, __pyx_t_70)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_72);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 18, __pyx_t_72)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_20);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 19, __pyx_t_20)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_34);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 20, __pyx_t_34)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_33);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 21, __pyx_t_33)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_10);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 22, __pyx_t_10)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_30);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 23, __pyx_t_30)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_29);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 24, __pyx_t_29)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_21);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 25, __pyx_t_21)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_28);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 26, __pyx_t_28)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_27);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 27, __pyx_t_27)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_22);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 28, __pyx_t_22)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_11);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 29, __pyx_t_11)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_31);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 30, __pyx_t_31)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_12);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 31, __pyx_t_12)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_32);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 32, __pyx_t_32)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_7);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 33, __pyx_t_7)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_5);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 34, __pyx_t_5)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_17);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 35, __pyx_t_17)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_23);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 36, __pyx_t_23)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_73);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 37, __pyx_t_73)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_74);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 38, __pyx_t_74)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_75);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 39, __pyx_t_75)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_76);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 40, __pyx_t_76)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_77);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 41, __pyx_t_77)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_78);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 42, __pyx_t_78)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_79);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 43, __pyx_t_79)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_80);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 44, __pyx_t_80)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_81);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 45, __pyx_t_81)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_49);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 46, __pyx_t_49)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_82);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 47, __pyx_t_82)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_84);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 48, __pyx_t_84)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_53);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 49, __pyx_t_53)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_52);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 50, __pyx_t_52)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_51);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 51, __pyx_t_51)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_25);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 52, __pyx_t_25)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_14);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 53, __pyx_t_14)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_26);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 54, __pyx_t_26)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_36);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 55, __pyx_t_36)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 56, __pyx_t_4)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_37);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 57, __pyx_t_37)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_71);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 58, __pyx_t_71)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_16);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 59, __pyx_t_16)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_19);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 60, __pyx_t_19)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_18);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 61, __pyx_t_18)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_24);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 62, __pyx_t_24)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_35);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 63, __pyx_t_35)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_38);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 64, __pyx_t_38)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_39);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 65, __pyx_t_39)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_40);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 66, __pyx_t_40)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_41);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 67, __pyx_t_41)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_42);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 68, __pyx_t_42)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_43);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 69, __pyx_t_43)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_44);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 70, __pyx_t_44)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_45);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 71, __pyx_t_45)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_46);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 72, __pyx_t_46)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_47);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 73, __pyx_t_47)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 74, __pyx_t_13)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_48);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 75, __pyx_t_48)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_50);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 76, __pyx_t_50)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_85);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 77, __pyx_t_85)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_86);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 78, __pyx_t_86)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_87);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 79, __pyx_t_87)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_88);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 80, __pyx_t_88)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_89);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 81, __pyx_t_89)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_90);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 82, __pyx_t_90)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_91);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 83, __pyx_t_91)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_92);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 84, __pyx_t_92)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_93);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 85, __pyx_t_93)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_94);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 86, __pyx_t_94)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_95);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 87, __pyx_t_95)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_96);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 88, __pyx_t_96)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_97);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 89, __pyx_t_97)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_98);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 90, __pyx_t_98)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_99);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 91, __pyx_t_99)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_100);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 92, __pyx_t_100)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_101);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 93, __pyx_t_101)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_102);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 94, __pyx_t_102)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_103);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 95, __pyx_t_103)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_104);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 96, __pyx_t_104)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_105);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 97, __pyx_t_105)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_106);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 98, __pyx_t_106)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_107);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 99, __pyx_t_107)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_108);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 100, __pyx_t_108)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_109);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 101, __pyx_t_109)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_110);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 102, __pyx_t_110)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_111);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 103, __pyx_t_111)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_112);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 104, __pyx_t_112)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_113);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 105, __pyx_t_113)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_114);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 106, __pyx_t_114)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_115);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 107, __pyx_t_115)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 108, __pyx_t_116)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 109, __pyx_t_117)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 110, __pyx_t_118)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_119);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 111, __pyx_t_119)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_120);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 112, __pyx_t_120)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_121);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 113, __pyx_t_121)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_122);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 114, __pyx_t_122)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_123);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 115, __pyx_t_123)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_124);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 116, __pyx_t_124)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_125);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 117, __pyx_t_125)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_126);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 118, __pyx_t_126)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_127);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 119, __pyx_t_127)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_128);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 120, __pyx_t_128)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_129);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 121, __pyx_t_129)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_130);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 122, __pyx_t_130)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_131);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 123, __pyx_t_131)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_132);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 124, __pyx_t_132)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_133);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 125, __pyx_t_133)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_134);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 126, __pyx_t_134)) __PYX_ERR(1, 989, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_135);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 127, __pyx_t_135)) __PYX_ERR(1, 989, __pyx_L1_error);
  __pyx_t_54 = 0;
  __pyx_t_56 = 0;
  __pyx_t_83 = 0;
  __pyx_t_57 = 0;
  __pyx_t_58 = 0;
  __pyx_t_59 = 0;
  __pyx_t_60 = 0;
  __pyx_t_61 = 0;
  __pyx_t_62 = 0;
  __pyx_t_63 = 0;
  __pyx_t_64 = 0;
  __pyx_t_65 = 0;
  __pyx_t_66 = 0;
  __pyx_t_67 = 0;
  __pyx_t_68 = 0;
  __pyx_t_69 = 0;
  __pyx_t_15 = 0;
  __pyx_t_70 = 0;
  __pyx_t_72 = 0;
  __pyx_t_20 = 0;
  __pyx_t_34 = 0;
  __pyx_t_33 = 0;
  __pyx_t_10 = 0;
  __pyx_t_30 = 0;
  __pyx_t_29 = 0;
  __pyx_t_21 = 0;
  __pyx_t_28 = 0;
  __pyx_t_27 = 0;
  __pyx_t_22 = 0;
  __pyx_t_11 = 0;
  __pyx_t_31 = 0;
  __pyx_t_12 = 0;
  __pyx_t_32 = 0;
  __pyx_t_7 = 0;
  __pyx_t_5 = 0;
  __pyx_t_17 = 0;
  __pyx_t_23 = 0;
  __pyx_t_73 = 0;
  __pyx_t_74 = 0;
  __pyx_t_75 = 0;
  __pyx_t_76 = 0;
  __pyx_t_77 = 0;
  __pyx_t_78 = 0;
  __pyx_t_79 = 0;
  __pyx_t_80 = 0;
  __pyx_t_81 = 0;
  __pyx_t_49 = 0;
  __pyx_t_82 = 0;
  __pyx_t_84 = 0;
  __pyx_t_53 = 0;
  __pyx_t_52 = 0;
  __pyx_t_51 = 0;
  __pyx_t_25 = 0;
  __pyx_t_14 = 0;
  __pyx_t_26 = 0;
  __pyx_t_36 = 0;
  __pyx_t_4 = 0;
  __pyx_t_37 = 0;
  __pyx_t_71 = 0;
  __pyx_t_16 = 0;
  __pyx_t_19 = 0;
  __pyx_t_18 = 0;
  __pyx_t_24 = 0;
  __pyx_t_35 = 0;
  __pyx_t_38 = 0;
  __pyx_t_39 = 0;
  __pyx_t_40 = 0;
  __pyx_t_41 = 0;
  __pyx_t_42 = 0;
  __pyx_t_43 = 0;
  __pyx_t_44 = 0;
  __pyx_t_45 = 0;
  __pyx_t_46 = 0;
  __pyx_t_47 = 0;
  __pyx_t_13 = 0;
  __pyx_t_48 = 0;
  __pyx_t_50 = 0;
  __pyx_t_85 = 0;
  __pyx_t_86 = 0;
  __pyx_t_87 = 0;
  __pyx_t_88 = 0;
  __pyx_t_89 = 0;
  __pyx_t_90 = 0;
  __pyx_t_91 = 0;
  __pyx_t_92 = 0;
  __pyx_t_93 = 0;
  __pyx_t_94 = 0;
  __pyx_t_95 = 0;
  __pyx_t_96 = 0;
  __pyx_t_97 = 0;
  __pyx_t_98 = 0;
  __pyx_t_99 = 0;
  __pyx_t_100 = 0;
  __pyx_t_101 = 0;
  __pyx_t_102 = 0;
  __pyx_t_103 = 0;
  __pyx_t_104 = 0;
  __pyx_t_105 = 0;
  __pyx_t_106 = 0;
  __pyx_t_107 = 0;
  __pyx_t_108 = 0;
  __pyx_t_109 = 0;
  __pyx_t_110 = 0;
  __pyx_t_111 = 0;
  __pyx_t_112 = 0;
  __pyx_t_113 = 0;
  __pyx_t_114 = 0;
  __pyx_t_115 = 0;
  __pyx_t_116 = 0;
  __pyx_t_117 = 0;
  __pyx_t_118 = 0;
  __pyx_t_119 = 0;
  __pyx_t_120 = 0;
  __pyx_t_121 = 0;
  __pyx_t_122 = 0;
  __pyx_t_123 = 0;
  __pyx_t_124 = 0;
  __pyx_t_125 = 0;
  __pyx_t_126 = 0;
  __pyx_t_127 = 0;
  __pyx_t_128 = 0;
  __pyx_t_129 = 0;
  __pyx_t_130 = 0;
  __pyx_t_131 = 0;
  __pyx_t_132 = 0;
  __pyx_t_133 = 0;
  __pyx_t_134 = 0;
  __pyx_t_135 = 0;
  __pyx_t_135 = PyTuple_New(1); if (unlikely(!__pyx_t_135)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_135);
  __Pyx_GIVEREF(__pyx_t_136);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_135, 0, __pyx_t_136)) __PYX_ERR(1, 989, __pyx_L1_error);
  __pyx_t_136 = 0;

  /* "PygameShader/Palette.pyx":1118
 * [0.39215686274509803,0.21176470588235294,0.29411764705882354],
 * [0.16470588235294117,0.11764705882352941,0.13725490196078433]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * AAPSPLENDOR128 =_AAPSPLENDOR128_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_136 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_136)) __PYX_ERR(1, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_136);
  __Pyx_GetModuleGlobalName(__pyx_t_134, __pyx_n_s_float32); if (unlikely(!__pyx_t_134)) __PYX_ERR(1, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_134);
  if (PyDict_SetItem(__pyx_t_136, __pyx_n_s_dtype, __pyx_t_134) < 0) __PYX_ERR(1, 1118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_134); __pyx_t_134 = 0;

  /* "PygameShader/Palette.pyx":989
 * # https://lospec.com/palette-list/aap-splendor128
 * # Created by Adigun A. Polack
 * _AAPSPLENDOR128_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0196078431372549,0.01568627450980392,0.011764705882352941],
 * [0.054901960784313725,0.047058823529411764,0.047058823529411764],
 */
  __pyx_t_134 = __Pyx_PyObject_Call(__pyx_t_55, __pyx_t_135, __pyx_t_136); if (unlikely(!__pyx_t_134)) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_134);
  __Pyx_DECREF(__pyx_t_55); __pyx_t_55 = 0;
  __Pyx_DECREF(__pyx_t_135); __pyx_t_135 = 0;
  __Pyx_DECREF(__pyx_t_136); __pyx_t_136 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AAPSPLENDOR128_NORMALIZED, __pyx_t_134) < 0) __PYX_ERR(1, 989, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_134); __pyx_t_134 = 0;

  /* "PygameShader/Palette.pyx":1119
 * [0.16470588235294117,0.11764705882352941,0.13725490196078433]
 * ], dtype=float32)
 * AAPSPLENDOR128 =_AAPSPLENDOR128_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_134, __pyx_n_s_AAPSPLENDOR128_NORMALIZED); if (unlikely(!__pyx_t_134)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_134);
  __pyx_t_136 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_136)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_136);
  __pyx_t_135 = PyNumber_Multiply(__pyx_t_134, __pyx_t_136); if (unlikely(!__pyx_t_135)) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_135);
  __Pyx_DECREF(__pyx_t_134); __pyx_t_134 = 0;
  __Pyx_DECREF(__pyx_t_136); __pyx_t_136 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AAPSPLENDOR128, __pyx_t_135) < 0) __PYX_ERR(1, 1119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_135); __pyx_t_135 = 0;

  /* "PygameShader/Palette.pyx":1126
 * # https://lospec.com/palette-list/lospec500
 * # collaboration
 * _LOSPEC500_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.06274509803921569,0.07058823529411765,0.10980392156862745],
 * [0.17254901960784313,0.11764705882352941,0.19215686274509805],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_135, __pyx_n_s_array); if (unlikely(!__pyx_t_135)) __PYX_ERR(1, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_135);

  /* "PygameShader/Palette.pyx":1127
 * # collaboration
 * _LOSPEC500_NORMALIZED = array([
 * [0.06274509803921569,0.07058823529411765,0.10980392156862745],             # <<<<<<<<<<<<<<
 * [0.17254901960784313,0.11764705882352941,0.19215686274509805],
 * [0.4196078431372549,0.14901960784313725,0.2627450980392157],
 */
  __pyx_t_136 = PyList_New(3); if (unlikely(!__pyx_t_136)) __PYX_ERR(1, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_136);
  __Pyx_INCREF(__pyx_float_0_06274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_06274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 0, __pyx_float_0_06274509803921569)) __PYX_ERR(1, 1127, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_07058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_07058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 1, __pyx_float_0_07058823529411765)) __PYX_ERR(1, 1127, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_10980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 2, __pyx_float_0_10980392156862745)) __PYX_ERR(1, 1127, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1128
 * _LOSPEC500_NORMALIZED = array([
 * [0.06274509803921569,0.07058823529411765,0.10980392156862745],
 * [0.17254901960784313,0.11764705882352941,0.19215686274509805],             # <<<<<<<<<<<<<<
 * [0.4196078431372549,0.14901960784313725,0.2627450980392157],
 * [0.6745098039215687,0.1568627450980392,0.2784313725490196],
 */
  __pyx_t_134 = PyList_New(3); if (unlikely(!__pyx_t_134)) __PYX_ERR(1, 1128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_134);
  __Pyx_INCREF(__pyx_float_0_17254901960784313);
  __Pyx_GIVEREF(__pyx_float_0_17254901960784313);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 0, __pyx_float_0_17254901960784313)) __PYX_ERR(1, 1128, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_11764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_11764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 1, __pyx_float_0_11764705882352941)) __PYX_ERR(1, 1128, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 2, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 1128, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1129
 * [0.06274509803921569,0.07058823529411765,0.10980392156862745],
 * [0.17254901960784313,0.11764705882352941,0.19215686274509805],
 * [0.4196078431372549,0.14901960784313725,0.2627450980392157],             # <<<<<<<<<<<<<<
 * [0.6745098039215687,0.1568627450980392,0.2784313725490196],
 * [0.9254901960784314,0.15294117647058825,0.24705882352941178],
 */
  __pyx_t_55 = PyList_New(3); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 1129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);
  __Pyx_INCREF(__pyx_float_0_4196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_4196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 0, __pyx_float_0_4196078431372549)) __PYX_ERR(1, 1129, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_14901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_14901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 1, __pyx_float_0_14901960784313725)) __PYX_ERR(1, 1129, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_2627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 2, __pyx_float_0_2627450980392157)) __PYX_ERR(1, 1129, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1130
 * [0.17254901960784313,0.11764705882352941,0.19215686274509805],
 * [0.4196078431372549,0.14901960784313725,0.2627450980392157],
 * [0.6745098039215687,0.1568627450980392,0.2784313725490196],             # <<<<<<<<<<<<<<
 * [0.9254901960784314,0.15294117647058825,0.24705882352941178],
 * [0.5803921568627451,0.28627450980392155,0.22745098039215686],
 */
  __pyx_t_133 = PyList_New(3); if (unlikely(!__pyx_t_133)) __PYX_ERR(1, 1130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_133);
  __Pyx_INCREF(__pyx_float_0_6745098039215687);
  __Pyx_GIVEREF(__pyx_float_0_6745098039215687);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 0, __pyx_float_0_6745098039215687)) __PYX_ERR(1, 1130, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 1, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 1130, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_2784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 2, __pyx_float_0_2784313725490196)) __PYX_ERR(1, 1130, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1131
 * [0.4196078431372549,0.14901960784313725,0.2627450980392157],
 * [0.6745098039215687,0.1568627450980392,0.2784313725490196],
 * [0.9254901960784314,0.15294117647058825,0.24705882352941178],             # <<<<<<<<<<<<<<
 * [0.5803921568627451,0.28627450980392155,0.22745098039215686],
 * [0.8705882352941177,0.36470588235294116,0.22745098039215686],
 */
  __pyx_t_132 = PyList_New(3); if (unlikely(!__pyx_t_132)) __PYX_ERR(1, 1131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_132);
  __Pyx_INCREF(__pyx_float_0_9254901960784314);
  __Pyx_GIVEREF(__pyx_float_0_9254901960784314);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 0, __pyx_float_0_9254901960784314)) __PYX_ERR(1, 1131, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_15294117647058825);
  __Pyx_GIVEREF(__pyx_float_0_15294117647058825);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 1, __pyx_float_0_15294117647058825)) __PYX_ERR(1, 1131, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24705882352941178);
  __Pyx_GIVEREF(__pyx_float_0_24705882352941178);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 2, __pyx_float_0_24705882352941178)) __PYX_ERR(1, 1131, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1132
 * [0.6745098039215687,0.1568627450980392,0.2784313725490196],
 * [0.9254901960784314,0.15294117647058825,0.24705882352941178],
 * [0.5803921568627451,0.28627450980392155,0.22745098039215686],             # <<<<<<<<<<<<<<
 * [0.8705882352941177,0.36470588235294116,0.22745098039215686],
 * [0.9137254901960784,0.5215686274509804,0.21568627450980393],
 */
  __pyx_t_131 = PyList_New(3); if (unlikely(!__pyx_t_131)) __PYX_ERR(1, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_131);
  __Pyx_INCREF(__pyx_float_0_5803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_5803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 0, __pyx_float_0_5803921568627451)) __PYX_ERR(1, 1132, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_28627450980392155);
  __Pyx_GIVEREF(__pyx_float_0_28627450980392155);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 1, __pyx_float_0_28627450980392155)) __PYX_ERR(1, 1132, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_22745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 2, __pyx_float_0_22745098039215686)) __PYX_ERR(1, 1132, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1133
 * [0.9254901960784314,0.15294117647058825,0.24705882352941178],
 * [0.5803921568627451,0.28627450980392155,0.22745098039215686],
 * [0.8705882352941177,0.36470588235294116,0.22745098039215686],             # <<<<<<<<<<<<<<
 * [0.9137254901960784,0.5215686274509804,0.21568627450980393],
 * [0.9529411764705882,0.6588235294117647,0.2],
 */
  __pyx_t_130 = PyList_New(3); if (unlikely(!__pyx_t_130)) __PYX_ERR(1, 1133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_130);
  __Pyx_INCREF(__pyx_float_0_8705882352941177);
  __Pyx_GIVEREF(__pyx_float_0_8705882352941177);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 0, __pyx_float_0_8705882352941177)) __PYX_ERR(1, 1133, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 1, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 1133, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_22745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_22745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 2, __pyx_float_0_22745098039215686)) __PYX_ERR(1, 1133, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1134
 * [0.5803921568627451,0.28627450980392155,0.22745098039215686],
 * [0.8705882352941177,0.36470588235294116,0.22745098039215686],
 * [0.9137254901960784,0.5215686274509804,0.21568627450980393],             # <<<<<<<<<<<<<<
 * [0.9529411764705882,0.6588235294117647,0.2],
 * [0.30196078431372547,0.20784313725490197,0.2],
 */
  __pyx_t_129 = PyList_New(3); if (unlikely(!__pyx_t_129)) __PYX_ERR(1, 1134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_129);
  __Pyx_INCREF(__pyx_float_0_9137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_9137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 0, __pyx_float_0_9137254901960784)) __PYX_ERR(1, 1134, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_5215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 1, __pyx_float_0_5215686274509804)) __PYX_ERR(1, 1134, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 2, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 1134, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1135
 * [0.8705882352941177,0.36470588235294116,0.22745098039215686],
 * [0.9137254901960784,0.5215686274509804,0.21568627450980393],
 * [0.9529411764705882,0.6588235294117647,0.2],             # <<<<<<<<<<<<<<
 * [0.30196078431372547,0.20784313725490197,0.2],
 * [0.43137254901960786,0.2980392156862745,0.18823529411764706],
 */
  __pyx_t_128 = PyList_New(3); if (unlikely(!__pyx_t_128)) __PYX_ERR(1, 1135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_128);
  __Pyx_INCREF(__pyx_float_0_9529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_9529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 0, __pyx_float_0_9529411764705882)) __PYX_ERR(1, 1135, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 1, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 1135, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 2, __pyx_float_0_2)) __PYX_ERR(1, 1135, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1136
 * [0.9137254901960784,0.5215686274509804,0.21568627450980393],
 * [0.9529411764705882,0.6588235294117647,0.2],
 * [0.30196078431372547,0.20784313725490197,0.2],             # <<<<<<<<<<<<<<
 * [0.43137254901960786,0.2980392156862745,0.18823529411764706],
 * [0.6352941176470588,0.42745098039215684,0.24705882352941178],
 */
  __pyx_t_127 = PyList_New(3); if (unlikely(!__pyx_t_127)) __PYX_ERR(1, 1136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_127);
  __Pyx_INCREF(__pyx_float_0_30196078431372547);
  __Pyx_GIVEREF(__pyx_float_0_30196078431372547);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 0, __pyx_float_0_30196078431372547)) __PYX_ERR(1, 1136, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20784313725490197);
  __Pyx_GIVEREF(__pyx_float_0_20784313725490197);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 1, __pyx_float_0_20784313725490197)) __PYX_ERR(1, 1136, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 2, __pyx_float_0_2)) __PYX_ERR(1, 1136, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1137
 * [0.9529411764705882,0.6588235294117647,0.2],
 * [0.30196078431372547,0.20784313725490197,0.2],
 * [0.43137254901960786,0.2980392156862745,0.18823529411764706],             # <<<<<<<<<<<<<<
 * [0.6352941176470588,0.42745098039215684,0.24705882352941178],
 * [0.807843137254902,0.5725490196078431,0.2823529411764706],
 */
  __pyx_t_126 = PyList_New(3); if (unlikely(!__pyx_t_126)) __PYX_ERR(1, 1137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_126);
  __Pyx_INCREF(__pyx_float_0_43137254901960786);
  __Pyx_GIVEREF(__pyx_float_0_43137254901960786);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 0, __pyx_float_0_43137254901960786)) __PYX_ERR(1, 1137, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 1, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 1137, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_18823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_18823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 2, __pyx_float_0_18823529411764706)) __PYX_ERR(1, 1137, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1138
 * [0.30196078431372547,0.20784313725490197,0.2],
 * [0.43137254901960786,0.2980392156862745,0.18823529411764706],
 * [0.6352941176470588,0.42745098039215684,0.24705882352941178],             # <<<<<<<<<<<<<<
 * [0.807843137254902,0.5725490196078431,0.2823529411764706],
 * [0.8549019607843137,0.6941176470588235,0.38823529411764707],
 */
  __pyx_t_125 = PyList_New(3); if (unlikely(!__pyx_t_125)) __PYX_ERR(1, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_125);
  __Pyx_INCREF(__pyx_float_0_6352941176470588);
  __Pyx_GIVEREF(__pyx_float_0_6352941176470588);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 0, __pyx_float_0_6352941176470588)) __PYX_ERR(1, 1138, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_42745098039215684);
  __Pyx_GIVEREF(__pyx_float_0_42745098039215684);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 1, __pyx_float_0_42745098039215684)) __PYX_ERR(1, 1138, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_24705882352941178);
  __Pyx_GIVEREF(__pyx_float_0_24705882352941178);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 2, __pyx_float_0_24705882352941178)) __PYX_ERR(1, 1138, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1139
 * [0.43137254901960786,0.2980392156862745,0.18823529411764706],
 * [0.6352941176470588,0.42745098039215684,0.24705882352941178],
 * [0.807843137254902,0.5725490196078431,0.2823529411764706],             # <<<<<<<<<<<<<<
 * [0.8549019607843137,0.6941176470588235,0.38823529411764707],
 * [0.9098039215686274,0.8235294117647058,0.5098039215686274],
 */
  __pyx_t_124 = PyList_New(3); if (unlikely(!__pyx_t_124)) __PYX_ERR(1, 1139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_124);
  __Pyx_INCREF(__pyx_float_0_807843137254902);
  __Pyx_GIVEREF(__pyx_float_0_807843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 0, __pyx_float_0_807843137254902)) __PYX_ERR(1, 1139, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_5725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 1, __pyx_float_0_5725490196078431)) __PYX_ERR(1, 1139, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_2823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 2, __pyx_float_0_2823529411764706)) __PYX_ERR(1, 1139, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1140
 * [0.6352941176470588,0.42745098039215684,0.24705882352941178],
 * [0.807843137254902,0.5725490196078431,0.2823529411764706],
 * [0.8549019607843137,0.6941176470588235,0.38823529411764707],             # <<<<<<<<<<<<<<
 * [0.9098039215686274,0.8235294117647058,0.5098039215686274],
 * [0.9686274509803922,0.9529411764705882,0.7176470588235294],
 */
  __pyx_t_123 = PyList_New(3); if (unlikely(!__pyx_t_123)) __PYX_ERR(1, 1140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_123);
  __Pyx_INCREF(__pyx_float_0_8549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_8549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 0, __pyx_float_0_8549019607843137)) __PYX_ERR(1, 1140, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6941176470588235);
  __Pyx_GIVEREF(__pyx_float_0_6941176470588235);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 1, __pyx_float_0_6941176470588235)) __PYX_ERR(1, 1140, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_38823529411764707);
  __Pyx_GIVEREF(__pyx_float_0_38823529411764707);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 2, __pyx_float_0_38823529411764707)) __PYX_ERR(1, 1140, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1141
 * [0.807843137254902,0.5725490196078431,0.2823529411764706],
 * [0.8549019607843137,0.6941176470588235,0.38823529411764707],
 * [0.9098039215686274,0.8235294117647058,0.5098039215686274],             # <<<<<<<<<<<<<<
 * [0.9686274509803922,0.9529411764705882,0.7176470588235294],
 * [0.11764705882352941,0.25098039215686274,0.26666666666666666],
 */
  __pyx_t_122 = PyList_New(3); if (unlikely(!__pyx_t_122)) __PYX_ERR(1, 1141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_122);
  __Pyx_INCREF(__pyx_float_0_9098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_9098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 0, __pyx_float_0_9098039215686274)) __PYX_ERR(1, 1141, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8235294117647058);
  __Pyx_GIVEREF(__pyx_float_0_8235294117647058);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 1, __pyx_float_0_8235294117647058)) __PYX_ERR(1, 1141, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 2, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 1141, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1142
 * [0.8549019607843137,0.6941176470588235,0.38823529411764707],
 * [0.9098039215686274,0.8235294117647058,0.5098039215686274],
 * [0.9686274509803922,0.9529411764705882,0.7176470588235294],             # <<<<<<<<<<<<<<
 * [0.11764705882352941,0.25098039215686274,0.26666666666666666],
 * [0.0,0.396078431372549,0.32941176470588235],
 */
  __pyx_t_121 = PyList_New(3); if (unlikely(!__pyx_t_121)) __PYX_ERR(1, 1142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_121);
  __Pyx_INCREF(__pyx_float_0_9686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_9686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 0, __pyx_float_0_9686274509803922)) __PYX_ERR(1, 1142, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_9529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 1, __pyx_float_0_9529411764705882)) __PYX_ERR(1, 1142, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_7176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 2, __pyx_float_0_7176470588235294)) __PYX_ERR(1, 1142, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1143
 * [0.9098039215686274,0.8235294117647058,0.5098039215686274],
 * [0.9686274509803922,0.9529411764705882,0.7176470588235294],
 * [0.11764705882352941,0.25098039215686274,0.26666666666666666],             # <<<<<<<<<<<<<<
 * [0.0,0.396078431372549,0.32941176470588235],
 * [0.14901960784313725,0.5215686274509804,0.2980392156862745],
 */
  __pyx_t_120 = PyList_New(3); if (unlikely(!__pyx_t_120)) __PYX_ERR(1, 1143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_120);
  __Pyx_INCREF(__pyx_float_0_11764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_11764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 0, __pyx_float_0_11764705882352941)) __PYX_ERR(1, 1143, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_25098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_25098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 1, __pyx_float_0_25098039215686274)) __PYX_ERR(1, 1143, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_26666666666666666);
  __Pyx_GIVEREF(__pyx_float_0_26666666666666666);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 2, __pyx_float_0_26666666666666666)) __PYX_ERR(1, 1143, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1144
 * [0.9686274509803922,0.9529411764705882,0.7176470588235294],
 * [0.11764705882352941,0.25098039215686274,0.26666666666666666],
 * [0.0,0.396078431372549,0.32941176470588235],             # <<<<<<<<<<<<<<
 * [0.14901960784313725,0.5215686274509804,0.2980392156862745],
 * [0.35294117647058826,0.7098039215686275,0.3215686274509804],
 */
  __pyx_t_119 = PyList_New(3); if (unlikely(!__pyx_t_119)) __PYX_ERR(1, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_119);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 0, __pyx_float_0_0)) __PYX_ERR(1, 1144, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_396078431372549);
  __Pyx_GIVEREF(__pyx_float_0_396078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 1, __pyx_float_0_396078431372549)) __PYX_ERR(1, 1144, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_32941176470588235);
  __Pyx_GIVEREF(__pyx_float_0_32941176470588235);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 2, __pyx_float_0_32941176470588235)) __PYX_ERR(1, 1144, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1145
 * [0.11764705882352941,0.25098039215686274,0.26666666666666666],
 * [0.0,0.396078431372549,0.32941176470588235],
 * [0.14901960784313725,0.5215686274509804,0.2980392156862745],             # <<<<<<<<<<<<<<
 * [0.35294117647058826,0.7098039215686275,0.3215686274509804],
 * [0.615686274509804,0.9019607843137255,0.3058823529411765],
 */
  __pyx_t_118 = PyList_New(3); if (unlikely(!__pyx_t_118)) __PYX_ERR(1, 1145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_118);
  __Pyx_INCREF(__pyx_float_0_14901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_14901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 0, __pyx_float_0_14901960784313725)) __PYX_ERR(1, 1145, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_5215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 1, __pyx_float_0_5215686274509804)) __PYX_ERR(1, 1145, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 2, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 1145, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1146
 * [0.0,0.396078431372549,0.32941176470588235],
 * [0.14901960784313725,0.5215686274509804,0.2980392156862745],
 * [0.35294117647058826,0.7098039215686275,0.3215686274509804],             # <<<<<<<<<<<<<<
 * [0.615686274509804,0.9019607843137255,0.3058823529411765],
 * [0.0,0.5450980392156862,0.5450980392156862],
 */
  __pyx_t_117 = PyList_New(3); if (unlikely(!__pyx_t_117)) __PYX_ERR(1, 1146, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_117);
  __Pyx_INCREF(__pyx_float_0_35294117647058826);
  __Pyx_GIVEREF(__pyx_float_0_35294117647058826);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 0, __pyx_float_0_35294117647058826)) __PYX_ERR(1, 1146, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 1, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 1146, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 2, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 1146, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1147
 * [0.14901960784313725,0.5215686274509804,0.2980392156862745],
 * [0.35294117647058826,0.7098039215686275,0.3215686274509804],
 * [0.615686274509804,0.9019607843137255,0.3058823529411765],             # <<<<<<<<<<<<<<
 * [0.0,0.5450980392156862,0.5450980392156862],
 * [0.3843137254901961,0.6431372549019608,0.4666666666666667],
 */
  __pyx_t_116 = PyList_New(3); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 1147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_116);
  __Pyx_INCREF(__pyx_float_0_615686274509804);
  __Pyx_GIVEREF(__pyx_float_0_615686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 0, __pyx_float_0_615686274509804)) __PYX_ERR(1, 1147, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_9019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 1, __pyx_float_0_9019607843137255)) __PYX_ERR(1, 1147, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_3058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 2, __pyx_float_0_3058823529411765)) __PYX_ERR(1, 1147, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1148
 * [0.35294117647058826,0.7098039215686275,0.3215686274509804],
 * [0.615686274509804,0.9019607843137255,0.3058823529411765],
 * [0.0,0.5450980392156862,0.5450980392156862],             # <<<<<<<<<<<<<<
 * [0.3843137254901961,0.6431372549019608,0.4666666666666667],
 * [0.6509803921568628,0.796078431372549,0.5882352941176471],
 */
  __pyx_t_115 = PyList_New(3); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 1148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_115);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 0, __pyx_float_0_0)) __PYX_ERR(1, 1148, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 1, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 1148, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_5450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 2, __pyx_float_0_5450980392156862)) __PYX_ERR(1, 1148, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1149
 * [0.615686274509804,0.9019607843137255,0.3058823529411765],
 * [0.0,0.5450980392156862,0.5450980392156862],
 * [0.3843137254901961,0.6431372549019608,0.4666666666666667],             # <<<<<<<<<<<<<<
 * [0.6509803921568628,0.796078431372549,0.5882352941176471],
 * [0.8274509803921568,0.9333333333333333,0.8274509803921568],
 */
  __pyx_t_114 = PyList_New(3); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_114);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 0, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 1149, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_6431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 1, __pyx_float_0_6431372549019608)) __PYX_ERR(1, 1149, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4666666666666667);
  __Pyx_GIVEREF(__pyx_float_0_4666666666666667);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 2, __pyx_float_0_4666666666666667)) __PYX_ERR(1, 1149, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1150
 * [0.0,0.5450980392156862,0.5450980392156862],
 * [0.3843137254901961,0.6431372549019608,0.4666666666666667],
 * [0.6509803921568628,0.796078431372549,0.5882352941176471],             # <<<<<<<<<<<<<<
 * [0.8274509803921568,0.9333333333333333,0.8274509803921568],
 * [0.24313725490196078,0.23137254901960785,0.396078431372549],
 */
  __pyx_t_113 = PyList_New(3); if (unlikely(!__pyx_t_113)) __PYX_ERR(1, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_113);
  __Pyx_INCREF(__pyx_float_0_6509803921568628);
  __Pyx_GIVEREF(__pyx_float_0_6509803921568628);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 0, __pyx_float_0_6509803921568628)) __PYX_ERR(1, 1150, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_796078431372549);
  __Pyx_GIVEREF(__pyx_float_0_796078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 1, __pyx_float_0_796078431372549)) __PYX_ERR(1, 1150, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_5882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 2, __pyx_float_0_5882352941176471)) __PYX_ERR(1, 1150, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1151
 * [0.3843137254901961,0.6431372549019608,0.4666666666666667],
 * [0.6509803921568628,0.796078431372549,0.5882352941176471],
 * [0.8274509803921568,0.9333333333333333,0.8274509803921568],             # <<<<<<<<<<<<<<
 * [0.24313725490196078,0.23137254901960785,0.396078431372549],
 * [0.2196078431372549,0.34901960784313724,0.7019607843137254],
 */
  __pyx_t_112 = PyList_New(3); if (unlikely(!__pyx_t_112)) __PYX_ERR(1, 1151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_112);
  __Pyx_INCREF(__pyx_float_0_8274509803921568);
  __Pyx_GIVEREF(__pyx_float_0_8274509803921568);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 0, __pyx_float_0_8274509803921568)) __PYX_ERR(1, 1151, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_9333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 1, __pyx_float_0_9333333333333333)) __PYX_ERR(1, 1151, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8274509803921568);
  __Pyx_GIVEREF(__pyx_float_0_8274509803921568);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 2, __pyx_float_0_8274509803921568)) __PYX_ERR(1, 1151, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1152
 * [0.6509803921568628,0.796078431372549,0.5882352941176471],
 * [0.8274509803921568,0.9333333333333333,0.8274509803921568],
 * [0.24313725490196078,0.23137254901960785,0.396078431372549],             # <<<<<<<<<<<<<<
 * [0.2196078431372549,0.34901960784313724,0.7019607843137254],
 * [0.2,0.5333333333333333,0.8705882352941177],
 */
  __pyx_t_111 = PyList_New(3); if (unlikely(!__pyx_t_111)) __PYX_ERR(1, 1152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_111);
  __Pyx_INCREF(__pyx_float_0_24313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_24313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 0, __pyx_float_0_24313725490196078)) __PYX_ERR(1, 1152, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23137254901960785);
  __Pyx_GIVEREF(__pyx_float_0_23137254901960785);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 1, __pyx_float_0_23137254901960785)) __PYX_ERR(1, 1152, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_396078431372549);
  __Pyx_GIVEREF(__pyx_float_0_396078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 2, __pyx_float_0_396078431372549)) __PYX_ERR(1, 1152, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1153
 * [0.8274509803921568,0.9333333333333333,0.8274509803921568],
 * [0.24313725490196078,0.23137254901960785,0.396078431372549],
 * [0.2196078431372549,0.34901960784313724,0.7019607843137254],             # <<<<<<<<<<<<<<
 * [0.2,0.5333333333333333,0.8705882352941177],
 * [0.21176470588235294,0.7725490196078432,0.9568627450980393],
 */
  __pyx_t_110 = PyList_New(3); if (unlikely(!__pyx_t_110)) __PYX_ERR(1, 1153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_110);
  __Pyx_INCREF(__pyx_float_0_2196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_2196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 0, __pyx_float_0_2196078431372549)) __PYX_ERR(1, 1153, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34901960784313724);
  __Pyx_GIVEREF(__pyx_float_0_34901960784313724);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 1, __pyx_float_0_34901960784313724)) __PYX_ERR(1, 1153, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7019607843137254);
  __Pyx_GIVEREF(__pyx_float_0_7019607843137254);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 2, __pyx_float_0_7019607843137254)) __PYX_ERR(1, 1153, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1154
 * [0.24313725490196078,0.23137254901960785,0.396078431372549],
 * [0.2196078431372549,0.34901960784313724,0.7019607843137254],
 * [0.2,0.5333333333333333,0.8705882352941177],             # <<<<<<<<<<<<<<
 * [0.21176470588235294,0.7725490196078432,0.9568627450980393],
 * [0.42745098039215684,0.9176470588235294,0.8392156862745098],
 */
  __pyx_t_109 = PyList_New(3); if (unlikely(!__pyx_t_109)) __PYX_ERR(1, 1154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_109);
  __Pyx_INCREF(__pyx_float_0_2);
  __Pyx_GIVEREF(__pyx_float_0_2);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 0, __pyx_float_0_2)) __PYX_ERR(1, 1154, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_5333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 1, __pyx_float_0_5333333333333333)) __PYX_ERR(1, 1154, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8705882352941177);
  __Pyx_GIVEREF(__pyx_float_0_8705882352941177);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 2, __pyx_float_0_8705882352941177)) __PYX_ERR(1, 1154, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1155
 * [0.2196078431372549,0.34901960784313724,0.7019607843137254],
 * [0.2,0.5333333333333333,0.8705882352941177],
 * [0.21176470588235294,0.7725490196078432,0.9568627450980393],             # <<<<<<<<<<<<<<
 * [0.42745098039215684,0.9176470588235294,0.8392156862745098],
 * [0.3686274509803922,0.3568627450980392,0.5490196078431373],
 */
  __pyx_t_108 = PyList_New(3); if (unlikely(!__pyx_t_108)) __PYX_ERR(1, 1155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_108);
  __Pyx_INCREF(__pyx_float_0_21176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_21176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 0, __pyx_float_0_21176470588235294)) __PYX_ERR(1, 1155, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 1, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 1155, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_9568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 2, __pyx_float_0_9568627450980393)) __PYX_ERR(1, 1155, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1156
 * [0.2,0.5333333333333333,0.8705882352941177],
 * [0.21176470588235294,0.7725490196078432,0.9568627450980393],
 * [0.42745098039215684,0.9176470588235294,0.8392156862745098],             # <<<<<<<<<<<<<<
 * [0.3686274509803922,0.3568627450980392,0.5490196078431373],
 * [0.5490196078431373,0.47058823529411764,0.6470588235294118],
 */
  __pyx_t_107 = PyList_New(3); if (unlikely(!__pyx_t_107)) __PYX_ERR(1, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_107);
  __Pyx_INCREF(__pyx_float_0_42745098039215684);
  __Pyx_GIVEREF(__pyx_float_0_42745098039215684);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 0, __pyx_float_0_42745098039215684)) __PYX_ERR(1, 1156, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_9176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 1, __pyx_float_0_9176470588235294)) __PYX_ERR(1, 1156, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_8392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 2, __pyx_float_0_8392156862745098)) __PYX_ERR(1, 1156, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1157
 * [0.21176470588235294,0.7725490196078432,0.9568627450980393],
 * [0.42745098039215684,0.9176470588235294,0.8392156862745098],
 * [0.3686274509803922,0.3568627450980392,0.5490196078431373],             # <<<<<<<<<<<<<<
 * [0.5490196078431373,0.47058823529411764,0.6470588235294118],
 * [0.6901960784313725,0.6549019607843137,0.7215686274509804],
 */
  __pyx_t_106 = PyList_New(3); if (unlikely(!__pyx_t_106)) __PYX_ERR(1, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_106);
  __Pyx_INCREF(__pyx_float_0_3686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_3686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 0, __pyx_float_0_3686274509803922)) __PYX_ERR(1, 1157, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_3568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 1, __pyx_float_0_3568627450980392)) __PYX_ERR(1, 1157, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_5490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 2, __pyx_float_0_5490196078431373)) __PYX_ERR(1, 1157, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1158
 * [0.42745098039215684,0.9176470588235294,0.8392156862745098],
 * [0.3686274509803922,0.3568627450980392,0.5490196078431373],
 * [0.5490196078431373,0.47058823529411764,0.6470588235294118],             # <<<<<<<<<<<<<<
 * [0.6901960784313725,0.6549019607843137,0.7215686274509804],
 * [0.8705882352941177,0.807843137254902,0.9294117647058824],
 */
  __pyx_t_105 = PyList_New(3); if (unlikely(!__pyx_t_105)) __PYX_ERR(1, 1158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_105);
  __Pyx_INCREF(__pyx_float_0_5490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_5490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 0, __pyx_float_0_5490196078431373)) __PYX_ERR(1, 1158, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_47058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 1, __pyx_float_0_47058823529411764)) __PYX_ERR(1, 1158, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 2, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 1158, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1159
 * [0.3686274509803922,0.3568627450980392,0.5490196078431373],
 * [0.5490196078431373,0.47058823529411764,0.6470588235294118],
 * [0.6901960784313725,0.6549019607843137,0.7215686274509804],             # <<<<<<<<<<<<<<
 * [0.8705882352941177,0.807843137254902,0.9294117647058824],
 * [0.6039215686274509,0.30196078431372547,0.4627450980392157],
 */
  __pyx_t_104 = PyList_New(3); if (unlikely(!__pyx_t_104)) __PYX_ERR(1, 1159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_104);
  __Pyx_INCREF(__pyx_float_0_6901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_6901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 0, __pyx_float_0_6901960784313725)) __PYX_ERR(1, 1159, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_6549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 1, __pyx_float_0_6549019607843137)) __PYX_ERR(1, 1159, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_7215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 2, __pyx_float_0_7215686274509804)) __PYX_ERR(1, 1159, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1160
 * [0.5490196078431373,0.47058823529411764,0.6470588235294118],
 * [0.6901960784313725,0.6549019607843137,0.7215686274509804],
 * [0.8705882352941177,0.807843137254902,0.9294117647058824],             # <<<<<<<<<<<<<<
 * [0.6039215686274509,0.30196078431372547,0.4627450980392157],
 * [0.7843137254901961,0.47058823529411764,0.6862745098039216],
 */
  __pyx_t_103 = PyList_New(3); if (unlikely(!__pyx_t_103)) __PYX_ERR(1, 1160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_103);
  __Pyx_INCREF(__pyx_float_0_8705882352941177);
  __Pyx_GIVEREF(__pyx_float_0_8705882352941177);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 0, __pyx_float_0_8705882352941177)) __PYX_ERR(1, 1160, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_807843137254902);
  __Pyx_GIVEREF(__pyx_float_0_807843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 1, __pyx_float_0_807843137254902)) __PYX_ERR(1, 1160, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_9294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 2, __pyx_float_0_9294117647058824)) __PYX_ERR(1, 1160, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1161
 * [0.6901960784313725,0.6549019607843137,0.7215686274509804],
 * [0.8705882352941177,0.807843137254902,0.9294117647058824],
 * [0.6039215686274509,0.30196078431372547,0.4627450980392157],             # <<<<<<<<<<<<<<
 * [0.7843137254901961,0.47058823529411764,0.6862745098039216],
 * [0.8,0.6,1.0],
 */
  __pyx_t_102 = PyList_New(3); if (unlikely(!__pyx_t_102)) __PYX_ERR(1, 1161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_102);
  __Pyx_INCREF(__pyx_float_0_6039215686274509);
  __Pyx_GIVEREF(__pyx_float_0_6039215686274509);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 0, __pyx_float_0_6039215686274509)) __PYX_ERR(1, 1161, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_30196078431372547);
  __Pyx_GIVEREF(__pyx_float_0_30196078431372547);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 1, __pyx_float_0_30196078431372547)) __PYX_ERR(1, 1161, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_4627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 2, __pyx_float_0_4627450980392157)) __PYX_ERR(1, 1161, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1162
 * [0.8705882352941177,0.807843137254902,0.9294117647058824],
 * [0.6039215686274509,0.30196078431372547,0.4627450980392157],
 * [0.7843137254901961,0.47058823529411764,0.6862745098039216],             # <<<<<<<<<<<<<<
 * [0.8,0.6,1.0],
 * [0.9803921568627451,0.43137254901960786,0.4745098039215686],
 */
  __pyx_t_101 = PyList_New(3); if (unlikely(!__pyx_t_101)) __PYX_ERR(1, 1162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_101);
  __Pyx_INCREF(__pyx_float_0_7843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_7843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 0, __pyx_float_0_7843137254901961)) __PYX_ERR(1, 1162, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_47058823529411764);
  __Pyx_GIVEREF(__pyx_float_0_47058823529411764);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 1, __pyx_float_0_47058823529411764)) __PYX_ERR(1, 1162, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6862745098039216);
  __Pyx_GIVEREF(__pyx_float_0_6862745098039216);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 2, __pyx_float_0_6862745098039216)) __PYX_ERR(1, 1162, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1163
 * [0.6039215686274509,0.30196078431372547,0.4627450980392157],
 * [0.7843137254901961,0.47058823529411764,0.6862745098039216],
 * [0.8,0.6,1.0],             # <<<<<<<<<<<<<<
 * [0.9803921568627451,0.43137254901960786,0.4745098039215686],
 * [1.0,0.6352941176470588,0.6745098039215687],
 */
  __pyx_t_100 = PyList_New(3); if (unlikely(!__pyx_t_100)) __PYX_ERR(1, 1163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_100);
  __Pyx_INCREF(__pyx_float_0_8);
  __Pyx_GIVEREF(__pyx_float_0_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 0, __pyx_float_0_8)) __PYX_ERR(1, 1163, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6);
  __Pyx_GIVEREF(__pyx_float_0_6);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 1, __pyx_float_0_6)) __PYX_ERR(1, 1163, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 2, __pyx_float_1_0)) __PYX_ERR(1, 1163, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1164
 * [0.7843137254901961,0.47058823529411764,0.6862745098039216],
 * [0.8,0.6,1.0],
 * [0.9803921568627451,0.43137254901960786,0.4745098039215686],             # <<<<<<<<<<<<<<
 * [1.0,0.6352941176470588,0.6745098039215687],
 * [1.0,0.8196078431372549,0.8352941176470589],
 */
  __pyx_t_99 = PyList_New(3); if (unlikely(!__pyx_t_99)) __PYX_ERR(1, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_99);
  __Pyx_INCREF(__pyx_float_0_9803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_9803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 0, __pyx_float_0_9803921568627451)) __PYX_ERR(1, 1164, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_43137254901960786);
  __Pyx_GIVEREF(__pyx_float_0_43137254901960786);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 1, __pyx_float_0_43137254901960786)) __PYX_ERR(1, 1164, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4745098039215686);
  __Pyx_GIVEREF(__pyx_float_0_4745098039215686);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 2, __pyx_float_0_4745098039215686)) __PYX_ERR(1, 1164, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1165
 * [0.8,0.6,1.0],
 * [0.9803921568627451,0.43137254901960786,0.4745098039215686],
 * [1.0,0.6352941176470588,0.6745098039215687],             # <<<<<<<<<<<<<<
 * [1.0,0.8196078431372549,0.8352941176470589],
 * [0.9647058823529412,0.9098039215686274,0.8784313725490196],
 */
  __pyx_t_98 = PyList_New(3); if (unlikely(!__pyx_t_98)) __PYX_ERR(1, 1165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_98);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 0, __pyx_float_1_0)) __PYX_ERR(1, 1165, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6352941176470588);
  __Pyx_GIVEREF(__pyx_float_0_6352941176470588);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 1, __pyx_float_0_6352941176470588)) __PYX_ERR(1, 1165, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6745098039215687);
  __Pyx_GIVEREF(__pyx_float_0_6745098039215687);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 2, __pyx_float_0_6745098039215687)) __PYX_ERR(1, 1165, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1166
 * [0.9803921568627451,0.43137254901960786,0.4745098039215686],
 * [1.0,0.6352941176470588,0.6745098039215687],
 * [1.0,0.8196078431372549,0.8352941176470589],             # <<<<<<<<<<<<<<
 * [0.9647058823529412,0.9098039215686274,0.8784313725490196],
 * [1.0,1.0,1.0]
 */
  __pyx_t_97 = PyList_New(3); if (unlikely(!__pyx_t_97)) __PYX_ERR(1, 1166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_97);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 0, __pyx_float_1_0)) __PYX_ERR(1, 1166, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_8196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 1, __pyx_float_0_8196078431372549)) __PYX_ERR(1, 1166, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8352941176470589);
  __Pyx_GIVEREF(__pyx_float_0_8352941176470589);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 2, __pyx_float_0_8352941176470589)) __PYX_ERR(1, 1166, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1167
 * [1.0,0.6352941176470588,0.6745098039215687],
 * [1.0,0.8196078431372549,0.8352941176470589],
 * [0.9647058823529412,0.9098039215686274,0.8784313725490196],             # <<<<<<<<<<<<<<
 * [1.0,1.0,1.0]
 * ], dtype=float32)
 */
  __pyx_t_96 = PyList_New(3); if (unlikely(!__pyx_t_96)) __PYX_ERR(1, 1167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_96);
  __Pyx_INCREF(__pyx_float_0_9647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_9647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 0, __pyx_float_0_9647058823529412)) __PYX_ERR(1, 1167, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_9098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 1, __pyx_float_0_9098039215686274)) __PYX_ERR(1, 1167, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_8784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 2, __pyx_float_0_8784313725490196)) __PYX_ERR(1, 1167, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1168
 * [1.0,0.8196078431372549,0.8352941176470589],
 * [0.9647058823529412,0.9098039215686274,0.8784313725490196],
 * [1.0,1.0,1.0]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * LOSPEC500 =_LOSPEC500_NORMALIZED * <float>255.0
 */
  __pyx_t_95 = PyList_New(3); if (unlikely(!__pyx_t_95)) __PYX_ERR(1, 1168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_95);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 0, __pyx_float_1_0)) __PYX_ERR(1, 1168, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 1, __pyx_float_1_0)) __PYX_ERR(1, 1168, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 2, __pyx_float_1_0)) __PYX_ERR(1, 1168, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1126
 * # https://lospec.com/palette-list/lospec500
 * # collaboration
 * _LOSPEC500_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.06274509803921569,0.07058823529411765,0.10980392156862745],
 * [0.17254901960784313,0.11764705882352941,0.19215686274509805],
 */
  __pyx_t_94 = PyList_New(42); if (unlikely(!__pyx_t_94)) __PYX_ERR(1, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_94);
  __Pyx_GIVEREF(__pyx_t_136);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 0, __pyx_t_136)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_134);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 1, __pyx_t_134)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_55);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 2, __pyx_t_55)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_133);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 3, __pyx_t_133)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_132);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 4, __pyx_t_132)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_131);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 5, __pyx_t_131)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_130);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 6, __pyx_t_130)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_129);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 7, __pyx_t_129)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_128);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 8, __pyx_t_128)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_127);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 9, __pyx_t_127)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_126);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 10, __pyx_t_126)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_125);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 11, __pyx_t_125)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_124);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 12, __pyx_t_124)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_123);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 13, __pyx_t_123)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_122);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 14, __pyx_t_122)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_121);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 15, __pyx_t_121)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_120);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 16, __pyx_t_120)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_119);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 17, __pyx_t_119)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 18, __pyx_t_118)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 19, __pyx_t_117)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 20, __pyx_t_116)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_115);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 21, __pyx_t_115)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_114);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 22, __pyx_t_114)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_113);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 23, __pyx_t_113)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_112);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 24, __pyx_t_112)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_111);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 25, __pyx_t_111)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_110);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 26, __pyx_t_110)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_109);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 27, __pyx_t_109)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_108);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 28, __pyx_t_108)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_107);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 29, __pyx_t_107)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_106);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 30, __pyx_t_106)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_105);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 31, __pyx_t_105)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_104);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 32, __pyx_t_104)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_103);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 33, __pyx_t_103)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_102);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 34, __pyx_t_102)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_101);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 35, __pyx_t_101)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_100);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 36, __pyx_t_100)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_99);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 37, __pyx_t_99)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_98);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 38, __pyx_t_98)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_97);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 39, __pyx_t_97)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_96);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 40, __pyx_t_96)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_95);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 41, __pyx_t_95)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __pyx_t_136 = 0;
  __pyx_t_134 = 0;
  __pyx_t_55 = 0;
  __pyx_t_133 = 0;
  __pyx_t_132 = 0;
  __pyx_t_131 = 0;
  __pyx_t_130 = 0;
  __pyx_t_129 = 0;
  __pyx_t_128 = 0;
  __pyx_t_127 = 0;
  __pyx_t_126 = 0;
  __pyx_t_125 = 0;
  __pyx_t_124 = 0;
  __pyx_t_123 = 0;
  __pyx_t_122 = 0;
  __pyx_t_121 = 0;
  __pyx_t_120 = 0;
  __pyx_t_119 = 0;
  __pyx_t_118 = 0;
  __pyx_t_117 = 0;
  __pyx_t_116 = 0;
  __pyx_t_115 = 0;
  __pyx_t_114 = 0;
  __pyx_t_113 = 0;
  __pyx_t_112 = 0;
  __pyx_t_111 = 0;
  __pyx_t_110 = 0;
  __pyx_t_109 = 0;
  __pyx_t_108 = 0;
  __pyx_t_107 = 0;
  __pyx_t_106 = 0;
  __pyx_t_105 = 0;
  __pyx_t_104 = 0;
  __pyx_t_103 = 0;
  __pyx_t_102 = 0;
  __pyx_t_101 = 0;
  __pyx_t_100 = 0;
  __pyx_t_99 = 0;
  __pyx_t_98 = 0;
  __pyx_t_97 = 0;
  __pyx_t_96 = 0;
  __pyx_t_95 = 0;
  __pyx_t_95 = PyTuple_New(1); if (unlikely(!__pyx_t_95)) __PYX_ERR(1, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_95);
  __Pyx_GIVEREF(__pyx_t_94);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_95, 0, __pyx_t_94)) __PYX_ERR(1, 1126, __pyx_L1_error);
  __pyx_t_94 = 0;

  /* "PygameShader/Palette.pyx":1169
 * [0.9647058823529412,0.9098039215686274,0.8784313725490196],
 * [1.0,1.0,1.0]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * LOSPEC500 =_LOSPEC500_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_94 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_94)) __PYX_ERR(1, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_94);
  __Pyx_GetModuleGlobalName(__pyx_t_96, __pyx_n_s_float32); if (unlikely(!__pyx_t_96)) __PYX_ERR(1, 1169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_96);
  if (PyDict_SetItem(__pyx_t_94, __pyx_n_s_dtype, __pyx_t_96) < 0) __PYX_ERR(1, 1169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_96); __pyx_t_96 = 0;

  /* "PygameShader/Palette.pyx":1126
 * # https://lospec.com/palette-list/lospec500
 * # collaboration
 * _LOSPEC500_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.06274509803921569,0.07058823529411765,0.10980392156862745],
 * [0.17254901960784313,0.11764705882352941,0.19215686274509805],
 */
  __pyx_t_96 = __Pyx_PyObject_Call(__pyx_t_135, __pyx_t_95, __pyx_t_94); if (unlikely(!__pyx_t_96)) __PYX_ERR(1, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_96);
  __Pyx_DECREF(__pyx_t_135); __pyx_t_135 = 0;
  __Pyx_DECREF(__pyx_t_95); __pyx_t_95 = 0;
  __Pyx_DECREF(__pyx_t_94); __pyx_t_94 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOSPEC500_NORMALIZED, __pyx_t_96) < 0) __PYX_ERR(1, 1126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_96); __pyx_t_96 = 0;

  /* "PygameShader/Palette.pyx":1170
 * [1.0,1.0,1.0]
 * ], dtype=float32)
 * LOSPEC500 =_LOSPEC500_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_96, __pyx_n_s_LOSPEC500_NORMALIZED); if (unlikely(!__pyx_t_96)) __PYX_ERR(1, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_96);
  __pyx_t_94 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_94)) __PYX_ERR(1, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_94);
  __pyx_t_95 = PyNumber_Multiply(__pyx_t_96, __pyx_t_94); if (unlikely(!__pyx_t_95)) __PYX_ERR(1, 1170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_95);
  __Pyx_DECREF(__pyx_t_96); __pyx_t_96 = 0;
  __Pyx_DECREF(__pyx_t_94); __pyx_t_94 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LOSPEC500, __pyx_t_95) < 0) __PYX_ERR(1, 1170, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_95); __pyx_t_95 = 0;

  /* "PygameShader/Palette.pyx":1178
 * # https://lospec.com/palette-list/famicube
 * # Created by Arne as part of his Famicube Project.
 * _FAMICUBE_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.8784313725490196,0.23529411764705882,0.1568627450980392],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_95, __pyx_n_s_array); if (unlikely(!__pyx_t_95)) __PYX_ERR(1, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_95);

  /* "PygameShader/Palette.pyx":1179
 * # Created by Arne as part of his Famicube Project.
 * _FAMICUBE_NORMALIZED = array([
 * [0.0,0.0,0.0],             # <<<<<<<<<<<<<<
 * [0.8784313725490196,0.23529411764705882,0.1568627450980392],
 * [1.0,1.0,1.0],
 */
  __pyx_t_94 = PyList_New(3); if (unlikely(!__pyx_t_94)) __PYX_ERR(1, 1179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_94);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 0, __pyx_float_0_0)) __PYX_ERR(1, 1179, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 1, __pyx_float_0_0)) __PYX_ERR(1, 1179, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_94, 2, __pyx_float_0_0)) __PYX_ERR(1, 1179, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1180
 * _FAMICUBE_NORMALIZED = array([
 * [0.0,0.0,0.0],
 * [0.8784313725490196,0.23529411764705882,0.1568627450980392],             # <<<<<<<<<<<<<<
 * [1.0,1.0,1.0],
 * [0.8431372549019608,0.8431372549019608,0.8431372549019608],
 */
  __pyx_t_96 = PyList_New(3); if (unlikely(!__pyx_t_96)) __PYX_ERR(1, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_96);
  __Pyx_INCREF(__pyx_float_0_8784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_8784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 0, __pyx_float_0_8784313725490196)) __PYX_ERR(1, 1180, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 1, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 1180, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_96, 2, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 1180, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1181
 * [0.0,0.0,0.0],
 * [0.8784313725490196,0.23529411764705882,0.1568627450980392],
 * [1.0,1.0,1.0],             # <<<<<<<<<<<<<<
 * [0.8431372549019608,0.8431372549019608,0.8431372549019608],
 * [0.6588235294117647,0.6588235294117647,0.6588235294117647],
 */
  __pyx_t_135 = PyList_New(3); if (unlikely(!__pyx_t_135)) __PYX_ERR(1, 1181, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_135);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_135, 0, __pyx_float_1_0)) __PYX_ERR(1, 1181, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_135, 1, __pyx_float_1_0)) __PYX_ERR(1, 1181, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_135, 2, __pyx_float_1_0)) __PYX_ERR(1, 1181, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1182
 * [0.8784313725490196,0.23529411764705882,0.1568627450980392],
 * [1.0,1.0,1.0],
 * [0.8431372549019608,0.8431372549019608,0.8431372549019608],             # <<<<<<<<<<<<<<
 * [0.6588235294117647,0.6588235294117647,0.6588235294117647],
 * [0.4823529411764706,0.4823529411764706,0.4823529411764706],
 */
  __pyx_t_97 = PyList_New(3); if (unlikely(!__pyx_t_97)) __PYX_ERR(1, 1182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_97);
  __Pyx_INCREF(__pyx_float_0_8431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_8431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 0, __pyx_float_0_8431372549019608)) __PYX_ERR(1, 1182, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_8431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 1, __pyx_float_0_8431372549019608)) __PYX_ERR(1, 1182, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_8431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_97, 2, __pyx_float_0_8431372549019608)) __PYX_ERR(1, 1182, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1183
 * [1.0,1.0,1.0],
 * [0.8431372549019608,0.8431372549019608,0.8431372549019608],
 * [0.6588235294117647,0.6588235294117647,0.6588235294117647],             # <<<<<<<<<<<<<<
 * [0.4823529411764706,0.4823529411764706,0.4823529411764706],
 * [0.20392156862745098,0.20392156862745098,0.20392156862745098],
 */
  __pyx_t_98 = PyList_New(3); if (unlikely(!__pyx_t_98)) __PYX_ERR(1, 1183, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_98);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 0, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 1183, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 1, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 1183, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_98, 2, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 1183, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1184
 * [0.8431372549019608,0.8431372549019608,0.8431372549019608],
 * [0.6588235294117647,0.6588235294117647,0.6588235294117647],
 * [0.4823529411764706,0.4823529411764706,0.4823529411764706],             # <<<<<<<<<<<<<<
 * [0.20392156862745098,0.20392156862745098,0.20392156862745098],
 * [0.08235294117647059,0.08235294117647059,0.08235294117647059],
 */
  __pyx_t_99 = PyList_New(3); if (unlikely(!__pyx_t_99)) __PYX_ERR(1, 1184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_99);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 0, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 1184, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 1, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 1184, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_4823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_99, 2, __pyx_float_0_4823529411764706)) __PYX_ERR(1, 1184, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1185
 * [0.6588235294117647,0.6588235294117647,0.6588235294117647],
 * [0.4823529411764706,0.4823529411764706,0.4823529411764706],
 * [0.20392156862745098,0.20392156862745098,0.20392156862745098],             # <<<<<<<<<<<<<<
 * [0.08235294117647059,0.08235294117647059,0.08235294117647059],
 * [0.050980392156862744,0.12549019607843137,0.18823529411764706],
 */
  __pyx_t_100 = PyList_New(3); if (unlikely(!__pyx_t_100)) __PYX_ERR(1, 1185, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_100);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 0, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 1185, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 1, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 1185, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_100, 2, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 1185, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1186
 * [0.4823529411764706,0.4823529411764706,0.4823529411764706],
 * [0.20392156862745098,0.20392156862745098,0.20392156862745098],
 * [0.08235294117647059,0.08235294117647059,0.08235294117647059],             # <<<<<<<<<<<<<<
 * [0.050980392156862744,0.12549019607843137,0.18823529411764706],
 * [0.2549019607843137,0.36470588235294116,0.4],
 */
  __pyx_t_101 = PyList_New(3); if (unlikely(!__pyx_t_101)) __PYX_ERR(1, 1186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_101);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 0, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 1186, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 1, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 1186, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_101, 2, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 1186, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1187
 * [0.20392156862745098,0.20392156862745098,0.20392156862745098],
 * [0.08235294117647059,0.08235294117647059,0.08235294117647059],
 * [0.050980392156862744,0.12549019607843137,0.18823529411764706],             # <<<<<<<<<<<<<<
 * [0.2549019607843137,0.36470588235294116,0.4],
 * [0.44313725490196076,0.6509803921568628,0.6313725490196078],
 */
  __pyx_t_102 = PyList_New(3); if (unlikely(!__pyx_t_102)) __PYX_ERR(1, 1187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_102);
  __Pyx_INCREF(__pyx_float_0_050980392156862744);
  __Pyx_GIVEREF(__pyx_float_0_050980392156862744);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 0, __pyx_float_0_050980392156862744)) __PYX_ERR(1, 1187, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_12549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 1, __pyx_float_0_12549019607843137)) __PYX_ERR(1, 1187, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_18823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_18823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_102, 2, __pyx_float_0_18823529411764706)) __PYX_ERR(1, 1187, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1188
 * [0.08235294117647059,0.08235294117647059,0.08235294117647059],
 * [0.050980392156862744,0.12549019607843137,0.18823529411764706],
 * [0.2549019607843137,0.36470588235294116,0.4],             # <<<<<<<<<<<<<<
 * [0.44313725490196076,0.6509803921568628,0.6313725490196078],
 * [0.7411764705882353,1.0,0.792156862745098],
 */
  __pyx_t_103 = PyList_New(3); if (unlikely(!__pyx_t_103)) __PYX_ERR(1, 1188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_103);
  __Pyx_INCREF(__pyx_float_0_2549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_2549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 0, __pyx_float_0_2549019607843137)) __PYX_ERR(1, 1188, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_36470588235294116);
  __Pyx_GIVEREF(__pyx_float_0_36470588235294116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 1, __pyx_float_0_36470588235294116)) __PYX_ERR(1, 1188, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4);
  __Pyx_GIVEREF(__pyx_float_0_4);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_103, 2, __pyx_float_0_4)) __PYX_ERR(1, 1188, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1189
 * [0.050980392156862744,0.12549019607843137,0.18823529411764706],
 * [0.2549019607843137,0.36470588235294116,0.4],
 * [0.44313725490196076,0.6509803921568628,0.6313725490196078],             # <<<<<<<<<<<<<<
 * [0.7411764705882353,1.0,0.792156862745098],
 * [0.1450980392156863,0.8862745098039215,0.803921568627451],
 */
  __pyx_t_104 = PyList_New(3); if (unlikely(!__pyx_t_104)) __PYX_ERR(1, 1189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_104);
  __Pyx_INCREF(__pyx_float_0_44313725490196076);
  __Pyx_GIVEREF(__pyx_float_0_44313725490196076);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 0, __pyx_float_0_44313725490196076)) __PYX_ERR(1, 1189, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6509803921568628);
  __Pyx_GIVEREF(__pyx_float_0_6509803921568628);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 1, __pyx_float_0_6509803921568628)) __PYX_ERR(1, 1189, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6313725490196078);
  __Pyx_GIVEREF(__pyx_float_0_6313725490196078);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_104, 2, __pyx_float_0_6313725490196078)) __PYX_ERR(1, 1189, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1190
 * [0.2549019607843137,0.36470588235294116,0.4],
 * [0.44313725490196076,0.6509803921568628,0.6313725490196078],
 * [0.7411764705882353,1.0,0.792156862745098],             # <<<<<<<<<<<<<<
 * [0.1450980392156863,0.8862745098039215,0.803921568627451],
 * [0.0392156862745098,0.596078431372549,0.6745098039215687],
 */
  __pyx_t_105 = PyList_New(3); if (unlikely(!__pyx_t_105)) __PYX_ERR(1, 1190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_105);
  __Pyx_INCREF(__pyx_float_0_7411764705882353);
  __Pyx_GIVEREF(__pyx_float_0_7411764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 0, __pyx_float_0_7411764705882353)) __PYX_ERR(1, 1190, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 1, __pyx_float_1_0)) __PYX_ERR(1, 1190, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_792156862745098);
  __Pyx_GIVEREF(__pyx_float_0_792156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_105, 2, __pyx_float_0_792156862745098)) __PYX_ERR(1, 1190, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1191
 * [0.44313725490196076,0.6509803921568628,0.6313725490196078],
 * [0.7411764705882353,1.0,0.792156862745098],
 * [0.1450980392156863,0.8862745098039215,0.803921568627451],             # <<<<<<<<<<<<<<
 * [0.0392156862745098,0.596078431372549,0.6745098039215687],
 * [0.0,0.3215686274509804,0.5019607843137255],
 */
  __pyx_t_106 = PyList_New(3); if (unlikely(!__pyx_t_106)) __PYX_ERR(1, 1191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_106);
  __Pyx_INCREF(__pyx_float_0_1450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_1450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 0, __pyx_float_0_1450980392156863)) __PYX_ERR(1, 1191, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8862745098039215);
  __Pyx_GIVEREF(__pyx_float_0_8862745098039215);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 1, __pyx_float_0_8862745098039215)) __PYX_ERR(1, 1191, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_106, 2, __pyx_float_0_803921568627451)) __PYX_ERR(1, 1191, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1192
 * [0.7411764705882353,1.0,0.792156862745098],
 * [0.1450980392156863,0.8862745098039215,0.803921568627451],
 * [0.0392156862745098,0.596078431372549,0.6745098039215687],             # <<<<<<<<<<<<<<
 * [0.0,0.3215686274509804,0.5019607843137255],
 * [0.0,0.3764705882352941,0.29411764705882354],
 */
  __pyx_t_107 = PyList_New(3); if (unlikely(!__pyx_t_107)) __PYX_ERR(1, 1192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_107);
  __Pyx_INCREF(__pyx_float_0_0392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_0392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 0, __pyx_float_0_0392156862745098)) __PYX_ERR(1, 1192, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_596078431372549);
  __Pyx_GIVEREF(__pyx_float_0_596078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 1, __pyx_float_0_596078431372549)) __PYX_ERR(1, 1192, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6745098039215687);
  __Pyx_GIVEREF(__pyx_float_0_6745098039215687);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_107, 2, __pyx_float_0_6745098039215687)) __PYX_ERR(1, 1192, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1193
 * [0.1450980392156863,0.8862745098039215,0.803921568627451],
 * [0.0392156862745098,0.596078431372549,0.6745098039215687],
 * [0.0,0.3215686274509804,0.5019607843137255],             # <<<<<<<<<<<<<<
 * [0.0,0.3764705882352941,0.29411764705882354],
 * [0.12549019607843137,0.7098039215686275,0.3843137254901961],
 */
  __pyx_t_108 = PyList_New(3); if (unlikely(!__pyx_t_108)) __PYX_ERR(1, 1193, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_108);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 0, __pyx_float_0_0)) __PYX_ERR(1, 1193, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3215686274509804);
  __Pyx_GIVEREF(__pyx_float_0_3215686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 1, __pyx_float_0_3215686274509804)) __PYX_ERR(1, 1193, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_5019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_108, 2, __pyx_float_0_5019607843137255)) __PYX_ERR(1, 1193, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1194
 * [0.0392156862745098,0.596078431372549,0.6745098039215687],
 * [0.0,0.3215686274509804,0.5019607843137255],
 * [0.0,0.3764705882352941,0.29411764705882354],             # <<<<<<<<<<<<<<
 * [0.12549019607843137,0.7098039215686275,0.3843137254901961],
 * [0.34509803921568627,0.8274509803921568,0.19607843137254902],
 */
  __pyx_t_109 = PyList_New(3); if (unlikely(!__pyx_t_109)) __PYX_ERR(1, 1194, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_109);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 0, __pyx_float_0_0)) __PYX_ERR(1, 1194, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_3764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 1, __pyx_float_0_3764705882352941)) __PYX_ERR(1, 1194, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_29411764705882354);
  __Pyx_GIVEREF(__pyx_float_0_29411764705882354);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_109, 2, __pyx_float_0_29411764705882354)) __PYX_ERR(1, 1194, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1195
 * [0.0,0.3215686274509804,0.5019607843137255],
 * [0.0,0.3764705882352941,0.29411764705882354],
 * [0.12549019607843137,0.7098039215686275,0.3843137254901961],             # <<<<<<<<<<<<<<
 * [0.34509803921568627,0.8274509803921568,0.19607843137254902],
 * [0.07450980392156863,0.615686274509804,0.03137254901960784],
 */
  __pyx_t_110 = PyList_New(3); if (unlikely(!__pyx_t_110)) __PYX_ERR(1, 1195, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_110);
  __Pyx_INCREF(__pyx_float_0_12549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_12549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 0, __pyx_float_0_12549019607843137)) __PYX_ERR(1, 1195, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 1, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 1195, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_110, 2, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 1195, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1196
 * [0.0,0.3764705882352941,0.29411764705882354],
 * [0.12549019607843137,0.7098039215686275,0.3843137254901961],
 * [0.34509803921568627,0.8274509803921568,0.19607843137254902],             # <<<<<<<<<<<<<<
 * [0.07450980392156863,0.615686274509804,0.03137254901960784],
 * [0.0,0.3058823529411765,0.0],
 */
  __pyx_t_111 = PyList_New(3); if (unlikely(!__pyx_t_111)) __PYX_ERR(1, 1196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_111);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 0, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 1196, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8274509803921568);
  __Pyx_GIVEREF(__pyx_float_0_8274509803921568);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 1, __pyx_float_0_8274509803921568)) __PYX_ERR(1, 1196, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_19607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_111, 2, __pyx_float_0_19607843137254902)) __PYX_ERR(1, 1196, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1197
 * [0.12549019607843137,0.7098039215686275,0.3843137254901961],
 * [0.34509803921568627,0.8274509803921568,0.19607843137254902],
 * [0.07450980392156863,0.615686274509804,0.03137254901960784],             # <<<<<<<<<<<<<<
 * [0.0,0.3058823529411765,0.0],
 * [0.09019607843137255,0.1568627450980392,0.03137254901960784],
 */
  __pyx_t_112 = PyList_New(3); if (unlikely(!__pyx_t_112)) __PYX_ERR(1, 1197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_112);
  __Pyx_INCREF(__pyx_float_0_07450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_07450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 0, __pyx_float_0_07450980392156863)) __PYX_ERR(1, 1197, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_615686274509804);
  __Pyx_GIVEREF(__pyx_float_0_615686274509804);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 1, __pyx_float_0_615686274509804)) __PYX_ERR(1, 1197, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_03137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_03137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_112, 2, __pyx_float_0_03137254901960784)) __PYX_ERR(1, 1197, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1198
 * [0.34509803921568627,0.8274509803921568,0.19607843137254902],
 * [0.07450980392156863,0.615686274509804,0.03137254901960784],
 * [0.0,0.3058823529411765,0.0],             # <<<<<<<<<<<<<<
 * [0.09019607843137255,0.1568627450980392,0.03137254901960784],
 * [0.21568627450980393,0.42745098039215684,0.011764705882352941],
 */
  __pyx_t_113 = PyList_New(3); if (unlikely(!__pyx_t_113)) __PYX_ERR(1, 1198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_113);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 0, __pyx_float_0_0)) __PYX_ERR(1, 1198, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_3058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 1, __pyx_float_0_3058823529411765)) __PYX_ERR(1, 1198, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_113, 2, __pyx_float_0_0)) __PYX_ERR(1, 1198, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1199
 * [0.07450980392156863,0.615686274509804,0.03137254901960784],
 * [0.0,0.3058823529411765,0.0],
 * [0.09019607843137255,0.1568627450980392,0.03137254901960784],             # <<<<<<<<<<<<<<
 * [0.21568627450980393,0.42745098039215684,0.011764705882352941],
 * [0.41568627450980394,0.7058823529411765,0.09019607843137255],
 */
  __pyx_t_114 = PyList_New(3); if (unlikely(!__pyx_t_114)) __PYX_ERR(1, 1199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_114);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 0, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 1199, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 1, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 1199, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_03137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_03137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_114, 2, __pyx_float_0_03137254901960784)) __PYX_ERR(1, 1199, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1200
 * [0.0,0.3058823529411765,0.0],
 * [0.09019607843137255,0.1568627450980392,0.03137254901960784],
 * [0.21568627450980393,0.42745098039215684,0.011764705882352941],             # <<<<<<<<<<<<<<
 * [0.41568627450980394,0.7058823529411765,0.09019607843137255],
 * [0.5490196078431373,0.8392156862745098,0.07058823529411765],
 */
  __pyx_t_115 = PyList_New(3); if (unlikely(!__pyx_t_115)) __PYX_ERR(1, 1200, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_115);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 0, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 1200, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_42745098039215684);
  __Pyx_GIVEREF(__pyx_float_0_42745098039215684);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 1, __pyx_float_0_42745098039215684)) __PYX_ERR(1, 1200, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_011764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_011764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_115, 2, __pyx_float_0_011764705882352941)) __PYX_ERR(1, 1200, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1201
 * [0.09019607843137255,0.1568627450980392,0.03137254901960784],
 * [0.21568627450980393,0.42745098039215684,0.011764705882352941],
 * [0.41568627450980394,0.7058823529411765,0.09019607843137255],             # <<<<<<<<<<<<<<
 * [0.5490196078431373,0.8392156862745098,0.07058823529411765],
 * [0.7450980392156863,0.9215686274509803,0.44313725490196076],
 */
  __pyx_t_116 = PyList_New(3); if (unlikely(!__pyx_t_116)) __PYX_ERR(1, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_116);
  __Pyx_INCREF(__pyx_float_0_41568627450980394);
  __Pyx_GIVEREF(__pyx_float_0_41568627450980394);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 0, __pyx_float_0_41568627450980394)) __PYX_ERR(1, 1201, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_7058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 1, __pyx_float_0_7058823529411765)) __PYX_ERR(1, 1201, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_116, 2, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 1201, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1202
 * [0.21568627450980393,0.42745098039215684,0.011764705882352941],
 * [0.41568627450980394,0.7058823529411765,0.09019607843137255],
 * [0.5490196078431373,0.8392156862745098,0.07058823529411765],             # <<<<<<<<<<<<<<
 * [0.7450980392156863,0.9215686274509803,0.44313725490196076],
 * [0.9333333333333333,1.0,0.6627450980392157],
 */
  __pyx_t_117 = PyList_New(3); if (unlikely(!__pyx_t_117)) __PYX_ERR(1, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_117);
  __Pyx_INCREF(__pyx_float_0_5490196078431373);
  __Pyx_GIVEREF(__pyx_float_0_5490196078431373);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 0, __pyx_float_0_5490196078431373)) __PYX_ERR(1, 1202, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_8392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 1, __pyx_float_0_8392156862745098)) __PYX_ERR(1, 1202, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_07058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_07058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_117, 2, __pyx_float_0_07058823529411765)) __PYX_ERR(1, 1202, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1203
 * [0.41568627450980394,0.7058823529411765,0.09019607843137255],
 * [0.5490196078431373,0.8392156862745098,0.07058823529411765],
 * [0.7450980392156863,0.9215686274509803,0.44313725490196076],             # <<<<<<<<<<<<<<
 * [0.9333333333333333,1.0,0.6627450980392157],
 * [0.7137254901960784,0.7568627450980392,0.12941176470588237],
 */
  __pyx_t_118 = PyList_New(3); if (unlikely(!__pyx_t_118)) __PYX_ERR(1, 1203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_118);
  __Pyx_INCREF(__pyx_float_0_7450980392156863);
  __Pyx_GIVEREF(__pyx_float_0_7450980392156863);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 0, __pyx_float_0_7450980392156863)) __PYX_ERR(1, 1203, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_9215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 1, __pyx_float_0_9215686274509803)) __PYX_ERR(1, 1203, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_44313725490196076);
  __Pyx_GIVEREF(__pyx_float_0_44313725490196076);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_118, 2, __pyx_float_0_44313725490196076)) __PYX_ERR(1, 1203, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1204
 * [0.5490196078431373,0.8392156862745098,0.07058823529411765],
 * [0.7450980392156863,0.9215686274509803,0.44313725490196076],
 * [0.9333333333333333,1.0,0.6627450980392157],             # <<<<<<<<<<<<<<
 * [0.7137254901960784,0.7568627450980392,0.12941176470588237],
 * [0.5764705882352941,0.592156862745098,0.09019607843137255],
 */
  __pyx_t_119 = PyList_New(3); if (unlikely(!__pyx_t_119)) __PYX_ERR(1, 1204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_119);
  __Pyx_INCREF(__pyx_float_0_9333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_9333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 0, __pyx_float_0_9333333333333333)) __PYX_ERR(1, 1204, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 1, __pyx_float_1_0)) __PYX_ERR(1, 1204, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_6627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_119, 2, __pyx_float_0_6627450980392157)) __PYX_ERR(1, 1204, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1205
 * [0.7450980392156863,0.9215686274509803,0.44313725490196076],
 * [0.9333333333333333,1.0,0.6627450980392157],
 * [0.7137254901960784,0.7568627450980392,0.12941176470588237],             # <<<<<<<<<<<<<<
 * [0.5764705882352941,0.592156862745098,0.09019607843137255],
 * [0.8,0.5607843137254902,0.08235294117647059],
 */
  __pyx_t_120 = PyList_New(3); if (unlikely(!__pyx_t_120)) __PYX_ERR(1, 1205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_120);
  __Pyx_INCREF(__pyx_float_0_7137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_7137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 0, __pyx_float_0_7137254901960784)) __PYX_ERR(1, 1205, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_7568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 1, __pyx_float_0_7568627450980392)) __PYX_ERR(1, 1205, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12941176470588237);
  __Pyx_GIVEREF(__pyx_float_0_12941176470588237);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_120, 2, __pyx_float_0_12941176470588237)) __PYX_ERR(1, 1205, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1206
 * [0.9333333333333333,1.0,0.6627450980392157],
 * [0.7137254901960784,0.7568627450980392,0.12941176470588237],
 * [0.5764705882352941,0.592156862745098,0.09019607843137255],             # <<<<<<<<<<<<<<
 * [0.8,0.5607843137254902,0.08235294117647059],
 * [1.0,0.7333333333333333,0.19215686274509805],
 */
  __pyx_t_121 = PyList_New(3); if (unlikely(!__pyx_t_121)) __PYX_ERR(1, 1206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_121);
  __Pyx_INCREF(__pyx_float_0_5764705882352941);
  __Pyx_GIVEREF(__pyx_float_0_5764705882352941);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 0, __pyx_float_0_5764705882352941)) __PYX_ERR(1, 1206, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 1, __pyx_float_0_592156862745098)) __PYX_ERR(1, 1206, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_121, 2, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 1206, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1207
 * [0.7137254901960784,0.7568627450980392,0.12941176470588237],
 * [0.5764705882352941,0.592156862745098,0.09019607843137255],
 * [0.8,0.5607843137254902,0.08235294117647059],             # <<<<<<<<<<<<<<
 * [1.0,0.7333333333333333,0.19215686274509805],
 * [1.0,0.9058823529411765,0.21568627450980393],
 */
  __pyx_t_122 = PyList_New(3); if (unlikely(!__pyx_t_122)) __PYX_ERR(1, 1207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_122);
  __Pyx_INCREF(__pyx_float_0_8);
  __Pyx_GIVEREF(__pyx_float_0_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 0, __pyx_float_0_8)) __PYX_ERR(1, 1207, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 1, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 1207, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_122, 2, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 1207, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1208
 * [0.5764705882352941,0.592156862745098,0.09019607843137255],
 * [0.8,0.5607843137254902,0.08235294117647059],
 * [1.0,0.7333333333333333,0.19215686274509805],             # <<<<<<<<<<<<<<
 * [1.0,0.9058823529411765,0.21568627450980393],
 * [0.9647058823529412,0.5607843137254902,0.21568627450980393],
 */
  __pyx_t_123 = PyList_New(3); if (unlikely(!__pyx_t_123)) __PYX_ERR(1, 1208, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_123);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 0, __pyx_float_1_0)) __PYX_ERR(1, 1208, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7333333333333333);
  __Pyx_GIVEREF(__pyx_float_0_7333333333333333);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 1, __pyx_float_0_7333333333333333)) __PYX_ERR(1, 1208, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_123, 2, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 1208, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1209
 * [0.8,0.5607843137254902,0.08235294117647059],
 * [1.0,0.7333333333333333,0.19215686274509805],
 * [1.0,0.9058823529411765,0.21568627450980393],             # <<<<<<<<<<<<<<
 * [0.9647058823529412,0.5607843137254902,0.21568627450980393],
 * [0.6784313725490196,0.3058823529411765,0.10196078431372549],
 */
  __pyx_t_124 = PyList_New(3); if (unlikely(!__pyx_t_124)) __PYX_ERR(1, 1209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_124);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 0, __pyx_float_1_0)) __PYX_ERR(1, 1209, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_9058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 1, __pyx_float_0_9058823529411765)) __PYX_ERR(1, 1209, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_124, 2, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 1209, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1210
 * [1.0,0.7333333333333333,0.19215686274509805],
 * [1.0,0.9058823529411765,0.21568627450980393],
 * [0.9647058823529412,0.5607843137254902,0.21568627450980393],             # <<<<<<<<<<<<<<
 * [0.6784313725490196,0.3058823529411765,0.10196078431372549],
 * [0.13725490196078433,0.09019607843137255,0.07058823529411765],
 */
  __pyx_t_125 = PyList_New(3); if (unlikely(!__pyx_t_125)) __PYX_ERR(1, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_125);
  __Pyx_INCREF(__pyx_float_0_9647058823529412);
  __Pyx_GIVEREF(__pyx_float_0_9647058823529412);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 0, __pyx_float_0_9647058823529412)) __PYX_ERR(1, 1210, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_5607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 1, __pyx_float_0_5607843137254902)) __PYX_ERR(1, 1210, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_125, 2, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 1210, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1211
 * [1.0,0.9058823529411765,0.21568627450980393],
 * [0.9647058823529412,0.5607843137254902,0.21568627450980393],
 * [0.6784313725490196,0.3058823529411765,0.10196078431372549],             # <<<<<<<<<<<<<<
 * [0.13725490196078433,0.09019607843137255,0.07058823529411765],
 * [0.3607843137254902,0.23529411764705882,0.050980392156862744],
 */
  __pyx_t_126 = PyList_New(3); if (unlikely(!__pyx_t_126)) __PYX_ERR(1, 1211, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_126);
  __Pyx_INCREF(__pyx_float_0_6784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_6784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 0, __pyx_float_0_6784313725490196)) __PYX_ERR(1, 1211, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_3058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 1, __pyx_float_0_3058823529411765)) __PYX_ERR(1, 1211, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_10196078431372549);
  __Pyx_GIVEREF(__pyx_float_0_10196078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_126, 2, __pyx_float_0_10196078431372549)) __PYX_ERR(1, 1211, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1212
 * [0.9647058823529412,0.5607843137254902,0.21568627450980393],
 * [0.6784313725490196,0.3058823529411765,0.10196078431372549],
 * [0.13725490196078433,0.09019607843137255,0.07058823529411765],             # <<<<<<<<<<<<<<
 * [0.3607843137254902,0.23529411764705882,0.050980392156862744],
 * [0.6823529411764706,0.4235294117647059,0.21568627450980393],
 */
  __pyx_t_127 = PyList_New(3); if (unlikely(!__pyx_t_127)) __PYX_ERR(1, 1212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_127);
  __Pyx_INCREF(__pyx_float_0_13725490196078433);
  __Pyx_GIVEREF(__pyx_float_0_13725490196078433);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 0, __pyx_float_0_13725490196078433)) __PYX_ERR(1, 1212, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 1, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 1212, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_07058823529411765);
  __Pyx_GIVEREF(__pyx_float_0_07058823529411765);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_127, 2, __pyx_float_0_07058823529411765)) __PYX_ERR(1, 1212, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1213
 * [0.6784313725490196,0.3058823529411765,0.10196078431372549],
 * [0.13725490196078433,0.09019607843137255,0.07058823529411765],
 * [0.3607843137254902,0.23529411764705882,0.050980392156862744],             # <<<<<<<<<<<<<<
 * [0.6823529411764706,0.4235294117647059,0.21568627450980393],
 * [0.7725490196078432,0.592156862745098,0.5098039215686274],
 */
  __pyx_t_128 = PyList_New(3); if (unlikely(!__pyx_t_128)) __PYX_ERR(1, 1213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_128);
  __Pyx_INCREF(__pyx_float_0_3607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_3607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 0, __pyx_float_0_3607843137254902)) __PYX_ERR(1, 1213, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 1, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 1213, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_050980392156862744);
  __Pyx_GIVEREF(__pyx_float_0_050980392156862744);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_128, 2, __pyx_float_0_050980392156862744)) __PYX_ERR(1, 1213, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1214
 * [0.13725490196078433,0.09019607843137255,0.07058823529411765],
 * [0.3607843137254902,0.23529411764705882,0.050980392156862744],
 * [0.6823529411764706,0.4235294117647059,0.21568627450980393],             # <<<<<<<<<<<<<<
 * [0.7725490196078432,0.592156862745098,0.5098039215686274],
 * [0.8862745098039215,0.8431372549019608,0.7098039215686275],
 */
  __pyx_t_129 = PyList_New(3); if (unlikely(!__pyx_t_129)) __PYX_ERR(1, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_129);
  __Pyx_INCREF(__pyx_float_0_6823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_6823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 0, __pyx_float_0_6823529411764706)) __PYX_ERR(1, 1214, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_4235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 1, __pyx_float_0_4235294117647059)) __PYX_ERR(1, 1214, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_21568627450980393);
  __Pyx_GIVEREF(__pyx_float_0_21568627450980393);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_129, 2, __pyx_float_0_21568627450980393)) __PYX_ERR(1, 1214, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1215
 * [0.3607843137254902,0.23529411764705882,0.050980392156862744],
 * [0.6823529411764706,0.4235294117647059,0.21568627450980393],
 * [0.7725490196078432,0.592156862745098,0.5098039215686274],             # <<<<<<<<<<<<<<
 * [0.8862745098039215,0.8431372549019608,0.7098039215686275],
 * [0.30980392156862746,0.08235294117647059,0.027450980392156862],
 */
  __pyx_t_130 = PyList_New(3); if (unlikely(!__pyx_t_130)) __PYX_ERR(1, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_130);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 0, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 1215, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_592156862745098);
  __Pyx_GIVEREF(__pyx_float_0_592156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 1, __pyx_float_0_592156862745098)) __PYX_ERR(1, 1215, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_130, 2, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 1215, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1216
 * [0.6823529411764706,0.4235294117647059,0.21568627450980393],
 * [0.7725490196078432,0.592156862745098,0.5098039215686274],
 * [0.8862745098039215,0.8431372549019608,0.7098039215686275],             # <<<<<<<<<<<<<<
 * [0.30980392156862746,0.08235294117647059,0.027450980392156862],
 * [0.5098039215686274,0.23529411764705882,0.23921568627450981],
 */
  __pyx_t_131 = PyList_New(3); if (unlikely(!__pyx_t_131)) __PYX_ERR(1, 1216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_131);
  __Pyx_INCREF(__pyx_float_0_8862745098039215);
  __Pyx_GIVEREF(__pyx_float_0_8862745098039215);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 0, __pyx_float_0_8862745098039215)) __PYX_ERR(1, 1216, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8431372549019608);
  __Pyx_GIVEREF(__pyx_float_0_8431372549019608);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 1, __pyx_float_0_8431372549019608)) __PYX_ERR(1, 1216, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7098039215686275);
  __Pyx_GIVEREF(__pyx_float_0_7098039215686275);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_131, 2, __pyx_float_0_7098039215686275)) __PYX_ERR(1, 1216, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1217
 * [0.7725490196078432,0.592156862745098,0.5098039215686274],
 * [0.8862745098039215,0.8431372549019608,0.7098039215686275],
 * [0.30980392156862746,0.08235294117647059,0.027450980392156862],             # <<<<<<<<<<<<<<
 * [0.5098039215686274,0.23529411764705882,0.23921568627450981],
 * [0.8549019607843137,0.396078431372549,0.3686274509803922],
 */
  __pyx_t_132 = PyList_New(3); if (unlikely(!__pyx_t_132)) __PYX_ERR(1, 1217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_132);
  __Pyx_INCREF(__pyx_float_0_30980392156862746);
  __Pyx_GIVEREF(__pyx_float_0_30980392156862746);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 0, __pyx_float_0_30980392156862746)) __PYX_ERR(1, 1217, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_08235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 1, __pyx_float_0_08235294117647059)) __PYX_ERR(1, 1217, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_027450980392156862);
  __Pyx_GIVEREF(__pyx_float_0_027450980392156862);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_132, 2, __pyx_float_0_027450980392156862)) __PYX_ERR(1, 1217, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1218
 * [0.8862745098039215,0.8431372549019608,0.7098039215686275],
 * [0.30980392156862746,0.08235294117647059,0.027450980392156862],
 * [0.5098039215686274,0.23529411764705882,0.23921568627450981],             # <<<<<<<<<<<<<<
 * [0.8549019607843137,0.396078431372549,0.3686274509803922],
 * [0.8823529411764706,0.5098039215686274,0.5372549019607843],
 */
  __pyx_t_133 = PyList_New(3); if (unlikely(!__pyx_t_133)) __PYX_ERR(1, 1218, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_133);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 0, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 1218, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 1, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 1218, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_23921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_133, 2, __pyx_float_0_23921568627450981)) __PYX_ERR(1, 1218, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1219
 * [0.30980392156862746,0.08235294117647059,0.027450980392156862],
 * [0.5098039215686274,0.23529411764705882,0.23921568627450981],
 * [0.8549019607843137,0.396078431372549,0.3686274509803922],             # <<<<<<<<<<<<<<
 * [0.8823529411764706,0.5098039215686274,0.5372549019607843],
 * [0.9607843137254902,0.7176470588235294,0.5176470588235295],
 */
  __pyx_t_55 = PyList_New(3); if (unlikely(!__pyx_t_55)) __PYX_ERR(1, 1219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_55);
  __Pyx_INCREF(__pyx_float_0_8549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_8549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 0, __pyx_float_0_8549019607843137)) __PYX_ERR(1, 1219, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_396078431372549);
  __Pyx_GIVEREF(__pyx_float_0_396078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 1, __pyx_float_0_396078431372549)) __PYX_ERR(1, 1219, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_3686274509803922);
  __Pyx_GIVEREF(__pyx_float_0_3686274509803922);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_55, 2, __pyx_float_0_3686274509803922)) __PYX_ERR(1, 1219, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1220
 * [0.5098039215686274,0.23529411764705882,0.23921568627450981],
 * [0.8549019607843137,0.396078431372549,0.3686274509803922],
 * [0.8823529411764706,0.5098039215686274,0.5372549019607843],             # <<<<<<<<<<<<<<
 * [0.9607843137254902,0.7176470588235294,0.5176470588235295],
 * [1.0,0.9137254901960784,0.7725490196078432],
 */
  __pyx_t_134 = PyList_New(3); if (unlikely(!__pyx_t_134)) __PYX_ERR(1, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_134);
  __Pyx_INCREF(__pyx_float_0_8823529411764706);
  __Pyx_GIVEREF(__pyx_float_0_8823529411764706);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 0, __pyx_float_0_8823529411764706)) __PYX_ERR(1, 1220, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 1, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 1220, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_5372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_134, 2, __pyx_float_0_5372549019607843)) __PYX_ERR(1, 1220, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1221
 * [0.8549019607843137,0.396078431372549,0.3686274509803922],
 * [0.8823529411764706,0.5098039215686274,0.5372549019607843],
 * [0.9607843137254902,0.7176470588235294,0.5176470588235295],             # <<<<<<<<<<<<<<
 * [1.0,0.9137254901960784,0.7725490196078432],
 * [1.0,0.5098039215686274,0.807843137254902],
 */
  __pyx_t_136 = PyList_New(3); if (unlikely(!__pyx_t_136)) __PYX_ERR(1, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_136);
  __Pyx_INCREF(__pyx_float_0_9607843137254902);
  __Pyx_GIVEREF(__pyx_float_0_9607843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 0, __pyx_float_0_9607843137254902)) __PYX_ERR(1, 1221, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7176470588235294);
  __Pyx_GIVEREF(__pyx_float_0_7176470588235294);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 1, __pyx_float_0_7176470588235294)) __PYX_ERR(1, 1221, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5176470588235295);
  __Pyx_GIVEREF(__pyx_float_0_5176470588235295);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_136, 2, __pyx_float_0_5176470588235295)) __PYX_ERR(1, 1221, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1222
 * [0.8823529411764706,0.5098039215686274,0.5372549019607843],
 * [0.9607843137254902,0.7176470588235294,0.5176470588235295],
 * [1.0,0.9137254901960784,0.7725490196078432],             # <<<<<<<<<<<<<<
 * [1.0,0.5098039215686274,0.807843137254902],
 * [0.8117647058823529,0.23529411764705882,0.44313725490196076],
 */
  __pyx_t_93 = PyList_New(3); if (unlikely(!__pyx_t_93)) __PYX_ERR(1, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_93);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_93, 0, __pyx_float_1_0)) __PYX_ERR(1, 1222, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9137254901960784);
  __Pyx_GIVEREF(__pyx_float_0_9137254901960784);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_93, 1, __pyx_float_0_9137254901960784)) __PYX_ERR(1, 1222, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7725490196078432);
  __Pyx_GIVEREF(__pyx_float_0_7725490196078432);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_93, 2, __pyx_float_0_7725490196078432)) __PYX_ERR(1, 1222, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1223
 * [0.9607843137254902,0.7176470588235294,0.5176470588235295],
 * [1.0,0.9137254901960784,0.7725490196078432],
 * [1.0,0.5098039215686274,0.807843137254902],             # <<<<<<<<<<<<<<
 * [0.8117647058823529,0.23529411764705882,0.44313725490196076],
 * [0.5294117647058824,0.08627450980392157,0.27450980392156865],
 */
  __pyx_t_92 = PyList_New(3); if (unlikely(!__pyx_t_92)) __PYX_ERR(1, 1223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_92);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_92, 0, __pyx_float_1_0)) __PYX_ERR(1, 1223, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_5098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_92, 1, __pyx_float_0_5098039215686274)) __PYX_ERR(1, 1223, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_807843137254902);
  __Pyx_GIVEREF(__pyx_float_0_807843137254902);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_92, 2, __pyx_float_0_807843137254902)) __PYX_ERR(1, 1223, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1224
 * [1.0,0.9137254901960784,0.7725490196078432],
 * [1.0,0.5098039215686274,0.807843137254902],
 * [0.8117647058823529,0.23529411764705882,0.44313725490196076],             # <<<<<<<<<<<<<<
 * [0.5294117647058824,0.08627450980392157,0.27450980392156865],
 * [0.6392156862745098,0.1568627450980392,0.7019607843137254],
 */
  __pyx_t_91 = PyList_New(3); if (unlikely(!__pyx_t_91)) __PYX_ERR(1, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_91);
  __Pyx_INCREF(__pyx_float_0_8117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_8117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_91, 0, __pyx_float_0_8117647058823529)) __PYX_ERR(1, 1224, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23529411764705882);
  __Pyx_GIVEREF(__pyx_float_0_23529411764705882);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_91, 1, __pyx_float_0_23529411764705882)) __PYX_ERR(1, 1224, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_44313725490196076);
  __Pyx_GIVEREF(__pyx_float_0_44313725490196076);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_91, 2, __pyx_float_0_44313725490196076)) __PYX_ERR(1, 1224, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1225
 * [1.0,0.5098039215686274,0.807843137254902],
 * [0.8117647058823529,0.23529411764705882,0.44313725490196076],
 * [0.5294117647058824,0.08627450980392157,0.27450980392156865],             # <<<<<<<<<<<<<<
 * [0.6392156862745098,0.1568627450980392,0.7019607843137254],
 * [0.8,0.4117647058823529,0.8941176470588236],
 */
  __pyx_t_90 = PyList_New(3); if (unlikely(!__pyx_t_90)) __PYX_ERR(1, 1225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_90);
  __Pyx_INCREF(__pyx_float_0_5294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_5294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_90, 0, __pyx_float_0_5294117647058824)) __PYX_ERR(1, 1225, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_08627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_90, 1, __pyx_float_0_08627450980392157)) __PYX_ERR(1, 1225, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_27450980392156865);
  __Pyx_GIVEREF(__pyx_float_0_27450980392156865);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_90, 2, __pyx_float_0_27450980392156865)) __PYX_ERR(1, 1225, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1226
 * [0.8117647058823529,0.23529411764705882,0.44313725490196076],
 * [0.5294117647058824,0.08627450980392157,0.27450980392156865],
 * [0.6392156862745098,0.1568627450980392,0.7019607843137254],             # <<<<<<<<<<<<<<
 * [0.8,0.4117647058823529,0.8941176470588236],
 * [0.8352941176470589,0.611764705882353,0.9882352941176471],
 */
  __pyx_t_89 = PyList_New(3); if (unlikely(!__pyx_t_89)) __PYX_ERR(1, 1226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_89);
  __Pyx_INCREF(__pyx_float_0_6392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_6392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_89, 0, __pyx_float_0_6392156862745098)) __PYX_ERR(1, 1226, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_89, 1, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 1226, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_7019607843137254);
  __Pyx_GIVEREF(__pyx_float_0_7019607843137254);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_89, 2, __pyx_float_0_7019607843137254)) __PYX_ERR(1, 1226, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1227
 * [0.5294117647058824,0.08627450980392157,0.27450980392156865],
 * [0.6392156862745098,0.1568627450980392,0.7019607843137254],
 * [0.8,0.4117647058823529,0.8941176470588236],             # <<<<<<<<<<<<<<
 * [0.8352941176470589,0.611764705882353,0.9882352941176471],
 * [0.996078431372549,0.788235294117647,0.9294117647058824],
 */
  __pyx_t_88 = PyList_New(3); if (unlikely(!__pyx_t_88)) __PYX_ERR(1, 1227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_88);
  __Pyx_INCREF(__pyx_float_0_8);
  __Pyx_GIVEREF(__pyx_float_0_8);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_88, 0, __pyx_float_0_8)) __PYX_ERR(1, 1227, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4117647058823529);
  __Pyx_GIVEREF(__pyx_float_0_4117647058823529);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_88, 1, __pyx_float_0_4117647058823529)) __PYX_ERR(1, 1227, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8941176470588236);
  __Pyx_GIVEREF(__pyx_float_0_8941176470588236);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_88, 2, __pyx_float_0_8941176470588236)) __PYX_ERR(1, 1227, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1228
 * [0.6392156862745098,0.1568627450980392,0.7019607843137254],
 * [0.8,0.4117647058823529,0.8941176470588236],
 * [0.8352941176470589,0.611764705882353,0.9882352941176471],             # <<<<<<<<<<<<<<
 * [0.996078431372549,0.788235294117647,0.9294117647058824],
 * [0.8862745098039215,0.788235294117647,1.0],
 */
  __pyx_t_87 = PyList_New(3); if (unlikely(!__pyx_t_87)) __PYX_ERR(1, 1228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_87);
  __Pyx_INCREF(__pyx_float_0_8352941176470589);
  __Pyx_GIVEREF(__pyx_float_0_8352941176470589);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_87, 0, __pyx_float_0_8352941176470589)) __PYX_ERR(1, 1228, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_611764705882353);
  __Pyx_GIVEREF(__pyx_float_0_611764705882353);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_87, 1, __pyx_float_0_611764705882353)) __PYX_ERR(1, 1228, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9882352941176471);
  __Pyx_GIVEREF(__pyx_float_0_9882352941176471);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_87, 2, __pyx_float_0_9882352941176471)) __PYX_ERR(1, 1228, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1229
 * [0.8,0.4117647058823529,0.8941176470588236],
 * [0.8352941176470589,0.611764705882353,0.9882352941176471],
 * [0.996078431372549,0.788235294117647,0.9294117647058824],             # <<<<<<<<<<<<<<
 * [0.8862745098039215,0.788235294117647,1.0],
 * [0.6509803921568628,0.4588235294117647,0.996078431372549],
 */
  __pyx_t_86 = PyList_New(3); if (unlikely(!__pyx_t_86)) __PYX_ERR(1, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_86);
  __Pyx_INCREF(__pyx_float_0_996078431372549);
  __Pyx_GIVEREF(__pyx_float_0_996078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_86, 0, __pyx_float_0_996078431372549)) __PYX_ERR(1, 1229, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_86, 1, __pyx_float_0_788235294117647)) __PYX_ERR(1, 1229, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9294117647058824);
  __Pyx_GIVEREF(__pyx_float_0_9294117647058824);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_86, 2, __pyx_float_0_9294117647058824)) __PYX_ERR(1, 1229, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1230
 * [0.8352941176470589,0.611764705882353,0.9882352941176471],
 * [0.996078431372549,0.788235294117647,0.9294117647058824],
 * [0.8862745098039215,0.788235294117647,1.0],             # <<<<<<<<<<<<<<
 * [0.6509803921568628,0.4588235294117647,0.996078431372549],
 * [0.41568627450980394,0.19215686274509805,0.792156862745098],
 */
  __pyx_t_85 = PyList_New(3); if (unlikely(!__pyx_t_85)) __PYX_ERR(1, 1230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_85);
  __Pyx_INCREF(__pyx_float_0_8862745098039215);
  __Pyx_GIVEREF(__pyx_float_0_8862745098039215);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_85, 0, __pyx_float_0_8862745098039215)) __PYX_ERR(1, 1230, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_788235294117647);
  __Pyx_GIVEREF(__pyx_float_0_788235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_85, 1, __pyx_float_0_788235294117647)) __PYX_ERR(1, 1230, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_85, 2, __pyx_float_1_0)) __PYX_ERR(1, 1230, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1231
 * [0.996078431372549,0.788235294117647,0.9294117647058824],
 * [0.8862745098039215,0.788235294117647,1.0],
 * [0.6509803921568628,0.4588235294117647,0.996078431372549],             # <<<<<<<<<<<<<<
 * [0.41568627450980394,0.19215686274509805,0.792156862745098],
 * [0.35294117647058826,0.09803921568627451,0.5686274509803921],
 */
  __pyx_t_50 = PyList_New(3); if (unlikely(!__pyx_t_50)) __PYX_ERR(1, 1231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_50);
  __Pyx_INCREF(__pyx_float_0_6509803921568628);
  __Pyx_GIVEREF(__pyx_float_0_6509803921568628);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 0, __pyx_float_0_6509803921568628)) __PYX_ERR(1, 1231, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_4588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_4588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 1, __pyx_float_0_4588235294117647)) __PYX_ERR(1, 1231, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_996078431372549);
  __Pyx_GIVEREF(__pyx_float_0_996078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_50, 2, __pyx_float_0_996078431372549)) __PYX_ERR(1, 1231, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1232
 * [0.8862745098039215,0.788235294117647,1.0],
 * [0.6509803921568628,0.4588235294117647,0.996078431372549],
 * [0.41568627450980394,0.19215686274509805,0.792156862745098],             # <<<<<<<<<<<<<<
 * [0.35294117647058826,0.09803921568627451,0.5686274509803921],
 * [0.12941176470588237,0.08627450980392157,0.25098039215686274],
 */
  __pyx_t_48 = PyList_New(3); if (unlikely(!__pyx_t_48)) __PYX_ERR(1, 1232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_48);
  __Pyx_INCREF(__pyx_float_0_41568627450980394);
  __Pyx_GIVEREF(__pyx_float_0_41568627450980394);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 0, __pyx_float_0_41568627450980394)) __PYX_ERR(1, 1232, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_19215686274509805);
  __Pyx_GIVEREF(__pyx_float_0_19215686274509805);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 1, __pyx_float_0_19215686274509805)) __PYX_ERR(1, 1232, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_792156862745098);
  __Pyx_GIVEREF(__pyx_float_0_792156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_48, 2, __pyx_float_0_792156862745098)) __PYX_ERR(1, 1232, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1233
 * [0.6509803921568628,0.4588235294117647,0.996078431372549],
 * [0.41568627450980394,0.19215686274509805,0.792156862745098],
 * [0.35294117647058826,0.09803921568627451,0.5686274509803921],             # <<<<<<<<<<<<<<
 * [0.12941176470588237,0.08627450980392157,0.25098039215686274],
 * [0.23921568627450981,0.20392156862745098,0.6470588235294118],
 */
  __pyx_t_13 = PyList_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 1233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(__pyx_float_0_35294117647058826);
  __Pyx_GIVEREF(__pyx_float_0_35294117647058826);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 0, __pyx_float_0_35294117647058826)) __PYX_ERR(1, 1233, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09803921568627451);
  __Pyx_GIVEREF(__pyx_float_0_09803921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 1, __pyx_float_0_09803921568627451)) __PYX_ERR(1, 1233, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5686274509803921);
  __Pyx_GIVEREF(__pyx_float_0_5686274509803921);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_13, 2, __pyx_float_0_5686274509803921)) __PYX_ERR(1, 1233, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1234
 * [0.41568627450980394,0.19215686274509805,0.792156862745098],
 * [0.35294117647058826,0.09803921568627451,0.5686274509803921],
 * [0.12941176470588237,0.08627450980392157,0.25098039215686274],             # <<<<<<<<<<<<<<
 * [0.23921568627450981,0.20392156862745098,0.6470588235294118],
 * [0.3843137254901961,0.39215686274509803,0.8627450980392157],
 */
  __pyx_t_47 = PyList_New(3); if (unlikely(!__pyx_t_47)) __PYX_ERR(1, 1234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_47);
  __Pyx_INCREF(__pyx_float_0_12941176470588237);
  __Pyx_GIVEREF(__pyx_float_0_12941176470588237);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 0, __pyx_float_0_12941176470588237)) __PYX_ERR(1, 1234, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_08627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_08627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 1, __pyx_float_0_08627450980392157)) __PYX_ERR(1, 1234, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_25098039215686274);
  __Pyx_GIVEREF(__pyx_float_0_25098039215686274);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_47, 2, __pyx_float_0_25098039215686274)) __PYX_ERR(1, 1234, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1235
 * [0.35294117647058826,0.09803921568627451,0.5686274509803921],
 * [0.12941176470588237,0.08627450980392157,0.25098039215686274],
 * [0.23921568627450981,0.20392156862745098,0.6470588235294118],             # <<<<<<<<<<<<<<
 * [0.3843137254901961,0.39215686274509803,0.8627450980392157],
 * [0.6078431372549019,0.6274509803921569,0.9372549019607843],
 */
  __pyx_t_46 = PyList_New(3); if (unlikely(!__pyx_t_46)) __PYX_ERR(1, 1235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_46);
  __Pyx_INCREF(__pyx_float_0_23921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_23921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 0, __pyx_float_0_23921568627450981)) __PYX_ERR(1, 1235, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_20392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_20392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 1, __pyx_float_0_20392156862745098)) __PYX_ERR(1, 1235, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6470588235294118);
  __Pyx_GIVEREF(__pyx_float_0_6470588235294118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_46, 2, __pyx_float_0_6470588235294118)) __PYX_ERR(1, 1235, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1236
 * [0.12941176470588237,0.08627450980392157,0.25098039215686274],
 * [0.23921568627450981,0.20392156862745098,0.6470588235294118],
 * [0.3843137254901961,0.39215686274509803,0.8627450980392157],             # <<<<<<<<<<<<<<
 * [0.6078431372549019,0.6274509803921569,0.9372549019607843],
 * [0.596078431372549,0.8627450980392157,1.0],
 */
  __pyx_t_45 = PyList_New(3); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 1236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_INCREF(__pyx_float_0_3843137254901961);
  __Pyx_GIVEREF(__pyx_float_0_3843137254901961);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 0, __pyx_float_0_3843137254901961)) __PYX_ERR(1, 1236, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_39215686274509803);
  __Pyx_GIVEREF(__pyx_float_0_39215686274509803);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 1, __pyx_float_0_39215686274509803)) __PYX_ERR(1, 1236, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_8627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 2, __pyx_float_0_8627450980392157)) __PYX_ERR(1, 1236, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1237
 * [0.23921568627450981,0.20392156862745098,0.6470588235294118],
 * [0.3843137254901961,0.39215686274509803,0.8627450980392157],
 * [0.6078431372549019,0.6274509803921569,0.9372549019607843],             # <<<<<<<<<<<<<<
 * [0.596078431372549,0.8627450980392157,1.0],
 * [0.3568627450980392,0.6588235294117647,1.0],
 */
  __pyx_t_44 = PyList_New(3); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 1237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_INCREF(__pyx_float_0_6078431372549019);
  __Pyx_GIVEREF(__pyx_float_0_6078431372549019);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 0, __pyx_float_0_6078431372549019)) __PYX_ERR(1, 1237, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6274509803921569);
  __Pyx_GIVEREF(__pyx_float_0_6274509803921569);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 1, __pyx_float_0_6274509803921569)) __PYX_ERR(1, 1237, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_9372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_9372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 2, __pyx_float_0_9372549019607843)) __PYX_ERR(1, 1237, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1238
 * [0.3843137254901961,0.39215686274509803,0.8627450980392157],
 * [0.6078431372549019,0.6274509803921569,0.9372549019607843],
 * [0.596078431372549,0.8627450980392157,1.0],             # <<<<<<<<<<<<<<
 * [0.3568627450980392,0.6588235294117647,1.0],
 * [0.0392156862745098,0.5372549019607843,1.0],
 */
  __pyx_t_43 = PyList_New(3); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 1238, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_INCREF(__pyx_float_0_596078431372549);
  __Pyx_GIVEREF(__pyx_float_0_596078431372549);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 0, __pyx_float_0_596078431372549)) __PYX_ERR(1, 1238, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8627450980392157);
  __Pyx_GIVEREF(__pyx_float_0_8627450980392157);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 1, __pyx_float_0_8627450980392157)) __PYX_ERR(1, 1238, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 2, __pyx_float_1_0)) __PYX_ERR(1, 1238, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1239
 * [0.6078431372549019,0.6274509803921569,0.9372549019607843],
 * [0.596078431372549,0.8627450980392157,1.0],
 * [0.3568627450980392,0.6588235294117647,1.0],             # <<<<<<<<<<<<<<
 * [0.0392156862745098,0.5372549019607843,1.0],
 * [0.00784313725490196,0.2901960784313726,0.792156862745098],
 */
  __pyx_t_42 = PyList_New(3); if (unlikely(!__pyx_t_42)) __PYX_ERR(1, 1239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __Pyx_INCREF(__pyx_float_0_3568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_3568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 0, __pyx_float_0_3568627450980392)) __PYX_ERR(1, 1239, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6588235294117647);
  __Pyx_GIVEREF(__pyx_float_0_6588235294117647);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 1, __pyx_float_0_6588235294117647)) __PYX_ERR(1, 1239, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 2, __pyx_float_1_0)) __PYX_ERR(1, 1239, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1240
 * [0.596078431372549,0.8627450980392157,1.0],
 * [0.3568627450980392,0.6588235294117647,1.0],
 * [0.0392156862745098,0.5372549019607843,1.0],             # <<<<<<<<<<<<<<
 * [0.00784313725490196,0.2901960784313726,0.792156862745098],
 * [0.0,0.09019607843137255,0.49019607843137253]
 */
  __pyx_t_41 = PyList_New(3); if (unlikely(!__pyx_t_41)) __PYX_ERR(1, 1240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  __Pyx_INCREF(__pyx_float_0_0392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_0392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 0, __pyx_float_0_0392156862745098)) __PYX_ERR(1, 1240, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5372549019607843);
  __Pyx_GIVEREF(__pyx_float_0_5372549019607843);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 1, __pyx_float_0_5372549019607843)) __PYX_ERR(1, 1240, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 2, __pyx_float_1_0)) __PYX_ERR(1, 1240, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1241
 * [0.3568627450980392,0.6588235294117647,1.0],
 * [0.0392156862745098,0.5372549019607843,1.0],
 * [0.00784313725490196,0.2901960784313726,0.792156862745098],             # <<<<<<<<<<<<<<
 * [0.0,0.09019607843137255,0.49019607843137253]
 * ], dtype=float32)
 */
  __pyx_t_40 = PyList_New(3); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 1241, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_INCREF(__pyx_float_0_00784313725490196);
  __Pyx_GIVEREF(__pyx_float_0_00784313725490196);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 0, __pyx_float_0_00784313725490196)) __PYX_ERR(1, 1241, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2901960784313726);
  __Pyx_GIVEREF(__pyx_float_0_2901960784313726);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 1, __pyx_float_0_2901960784313726)) __PYX_ERR(1, 1241, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_792156862745098);
  __Pyx_GIVEREF(__pyx_float_0_792156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 2, __pyx_float_0_792156862745098)) __PYX_ERR(1, 1241, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1242
 * [0.0392156862745098,0.5372549019607843,1.0],
 * [0.00784313725490196,0.2901960784313726,0.792156862745098],
 * [0.0,0.09019607843137255,0.49019607843137253]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * FAMICUBE =_FAMICUBE_NORMALIZED * <float>255.0
 */
  __pyx_t_39 = PyList_New(3); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 1242, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 0, __pyx_float_0_0)) __PYX_ERR(1, 1242, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_09019607843137255);
  __Pyx_GIVEREF(__pyx_float_0_09019607843137255);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 1, __pyx_float_0_09019607843137255)) __PYX_ERR(1, 1242, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_49019607843137253);
  __Pyx_GIVEREF(__pyx_float_0_49019607843137253);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_39, 2, __pyx_float_0_49019607843137253)) __PYX_ERR(1, 1242, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1178
 * # https://lospec.com/palette-list/famicube
 * # Created by Arne as part of his Famicube Project.
 * _FAMICUBE_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.8784313725490196,0.23529411764705882,0.1568627450980392],
 */
  __pyx_t_38 = PyList_New(64); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __Pyx_GIVEREF(__pyx_t_94);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 0, __pyx_t_94)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_96);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 1, __pyx_t_96)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_135);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 2, __pyx_t_135)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_97);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 3, __pyx_t_97)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_98);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 4, __pyx_t_98)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_99);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 5, __pyx_t_99)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_100);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 6, __pyx_t_100)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_101);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 7, __pyx_t_101)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_102);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 8, __pyx_t_102)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_103);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 9, __pyx_t_103)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_104);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 10, __pyx_t_104)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_105);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 11, __pyx_t_105)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_106);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 12, __pyx_t_106)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_107);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 13, __pyx_t_107)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_108);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 14, __pyx_t_108)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_109);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 15, __pyx_t_109)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_110);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 16, __pyx_t_110)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_111);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 17, __pyx_t_111)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_112);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 18, __pyx_t_112)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_113);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 19, __pyx_t_113)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_114);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 20, __pyx_t_114)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_115);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 21, __pyx_t_115)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_116);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 22, __pyx_t_116)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_117);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 23, __pyx_t_117)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_118);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 24, __pyx_t_118)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_119);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 25, __pyx_t_119)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_120);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 26, __pyx_t_120)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_121);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 27, __pyx_t_121)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_122);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 28, __pyx_t_122)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_123);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 29, __pyx_t_123)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_124);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 30, __pyx_t_124)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_125);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 31, __pyx_t_125)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_126);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 32, __pyx_t_126)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_127);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 33, __pyx_t_127)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_128);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 34, __pyx_t_128)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_129);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 35, __pyx_t_129)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_130);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 36, __pyx_t_130)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_131);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 37, __pyx_t_131)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_132);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 38, __pyx_t_132)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_133);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 39, __pyx_t_133)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_55);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 40, __pyx_t_55)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_134);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 41, __pyx_t_134)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_136);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 42, __pyx_t_136)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_93);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 43, __pyx_t_93)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_92);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 44, __pyx_t_92)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_91);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 45, __pyx_t_91)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_90);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 46, __pyx_t_90)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_89);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 47, __pyx_t_89)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_88);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 48, __pyx_t_88)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_87);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 49, __pyx_t_87)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_86);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 50, __pyx_t_86)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_85);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 51, __pyx_t_85)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_50);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 52, __pyx_t_50)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_48);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 53, __pyx_t_48)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_13);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 54, __pyx_t_13)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_47);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 55, __pyx_t_47)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_46);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 56, __pyx_t_46)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_45);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 57, __pyx_t_45)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_44);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 58, __pyx_t_44)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_43);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 59, __pyx_t_43)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_42);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 60, __pyx_t_42)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_41);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 61, __pyx_t_41)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_40);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 62, __pyx_t_40)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_39);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 63, __pyx_t_39)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __pyx_t_94 = 0;
  __pyx_t_96 = 0;
  __pyx_t_135 = 0;
  __pyx_t_97 = 0;
  __pyx_t_98 = 0;
  __pyx_t_99 = 0;
  __pyx_t_100 = 0;
  __pyx_t_101 = 0;
  __pyx_t_102 = 0;
  __pyx_t_103 = 0;
  __pyx_t_104 = 0;
  __pyx_t_105 = 0;
  __pyx_t_106 = 0;
  __pyx_t_107 = 0;
  __pyx_t_108 = 0;
  __pyx_t_109 = 0;
  __pyx_t_110 = 0;
  __pyx_t_111 = 0;
  __pyx_t_112 = 0;
  __pyx_t_113 = 0;
  __pyx_t_114 = 0;
  __pyx_t_115 = 0;
  __pyx_t_116 = 0;
  __pyx_t_117 = 0;
  __pyx_t_118 = 0;
  __pyx_t_119 = 0;
  __pyx_t_120 = 0;
  __pyx_t_121 = 0;
  __pyx_t_122 = 0;
  __pyx_t_123 = 0;
  __pyx_t_124 = 0;
  __pyx_t_125 = 0;
  __pyx_t_126 = 0;
  __pyx_t_127 = 0;
  __pyx_t_128 = 0;
  __pyx_t_129 = 0;
  __pyx_t_130 = 0;
  __pyx_t_131 = 0;
  __pyx_t_132 = 0;
  __pyx_t_133 = 0;
  __pyx_t_55 = 0;
  __pyx_t_134 = 0;
  __pyx_t_136 = 0;
  __pyx_t_93 = 0;
  __pyx_t_92 = 0;
  __pyx_t_91 = 0;
  __pyx_t_90 = 0;
  __pyx_t_89 = 0;
  __pyx_t_88 = 0;
  __pyx_t_87 = 0;
  __pyx_t_86 = 0;
  __pyx_t_85 = 0;
  __pyx_t_50 = 0;
  __pyx_t_48 = 0;
  __pyx_t_13 = 0;
  __pyx_t_47 = 0;
  __pyx_t_46 = 0;
  __pyx_t_45 = 0;
  __pyx_t_44 = 0;
  __pyx_t_43 = 0;
  __pyx_t_42 = 0;
  __pyx_t_41 = 0;
  __pyx_t_40 = 0;
  __pyx_t_39 = 0;
  __pyx_t_39 = PyTuple_New(1); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_GIVEREF(__pyx_t_38);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_39, 0, __pyx_t_38)) __PYX_ERR(1, 1178, __pyx_L1_error);
  __pyx_t_38 = 0;

  /* "PygameShader/Palette.pyx":1243
 * [0.00784313725490196,0.2901960784313726,0.792156862745098],
 * [0.0,0.09019607843137255,0.49019607843137253]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * FAMICUBE =_FAMICUBE_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_38 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __Pyx_GetModuleGlobalName(__pyx_t_40, __pyx_n_s_float32); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 1243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  if (PyDict_SetItem(__pyx_t_38, __pyx_n_s_dtype, __pyx_t_40) < 0) __PYX_ERR(1, 1243, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;

  /* "PygameShader/Palette.pyx":1178
 * # https://lospec.com/palette-list/famicube
 * # Created by Arne as part of his Famicube Project.
 * _FAMICUBE_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.8784313725490196,0.23529411764705882,0.1568627450980392],
 */
  __pyx_t_40 = __Pyx_PyObject_Call(__pyx_t_95, __pyx_t_39, __pyx_t_38); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_DECREF(__pyx_t_95); __pyx_t_95 = 0;
  __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
  __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FAMICUBE_NORMALIZED, __pyx_t_40) < 0) __PYX_ERR(1, 1178, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;

  /* "PygameShader/Palette.pyx":1244
 * [0.0,0.09019607843137255,0.49019607843137253]
 * ], dtype=float32)
 * FAMICUBE =_FAMICUBE_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_40, __pyx_n_s_FAMICUBE_NORMALIZED); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __pyx_t_38 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __pyx_t_39 = PyNumber_Multiply(__pyx_t_40, __pyx_t_38); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 1244, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_DECREF(__pyx_t_40); __pyx_t_40 = 0;
  __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_FAMICUBE, __pyx_t_39) < 0) __PYX_ERR(1, 1244, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;

  /* "PygameShader/Palette.pyx":1248
 * 
 * # https://lospec.com/palette-list/smooth-polished-silver
 * _SILVER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.1568627450980392,0.12941176470588237,0.12156862745098039],
 */
  __Pyx_GetModuleGlobalName(__pyx_t_39, __pyx_n_s_array); if (unlikely(!__pyx_t_39)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);

  /* "PygameShader/Palette.pyx":1249
 * # https://lospec.com/palette-list/smooth-polished-silver
 * _SILVER_NORMALIZED = array([
 * [0.0,0.0,0.0],             # <<<<<<<<<<<<<<
 * [0.1568627450980392,0.12941176470588237,0.12156862745098039],
 * [0.2901960784313726,0.2235294117647059,0.23921568627450981],
 */
  __pyx_t_38 = PyList_New(3); if (unlikely(!__pyx_t_38)) __PYX_ERR(1, 1249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_38);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 0, __pyx_float_0_0)) __PYX_ERR(1, 1249, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 1, __pyx_float_0_0)) __PYX_ERR(1, 1249, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_0);
  __Pyx_GIVEREF(__pyx_float_0_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_38, 2, __pyx_float_0_0)) __PYX_ERR(1, 1249, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1250
 * _SILVER_NORMALIZED = array([
 * [0.0,0.0,0.0],
 * [0.1568627450980392,0.12941176470588237,0.12156862745098039],             # <<<<<<<<<<<<<<
 * [0.2901960784313726,0.2235294117647059,0.23921568627450981],
 * [0.403921568627451,0.34509803921568627,0.2980392156862745],
 */
  __pyx_t_40 = PyList_New(3); if (unlikely(!__pyx_t_40)) __PYX_ERR(1, 1250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_40);
  __Pyx_INCREF(__pyx_float_0_1568627450980392);
  __Pyx_GIVEREF(__pyx_float_0_1568627450980392);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 0, __pyx_float_0_1568627450980392)) __PYX_ERR(1, 1250, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12941176470588237);
  __Pyx_GIVEREF(__pyx_float_0_12941176470588237);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 1, __pyx_float_0_12941176470588237)) __PYX_ERR(1, 1250, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_12156862745098039);
  __Pyx_GIVEREF(__pyx_float_0_12156862745098039);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_40, 2, __pyx_float_0_12156862745098039)) __PYX_ERR(1, 1250, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1251
 * [0.0,0.0,0.0],
 * [0.1568627450980392,0.12941176470588237,0.12156862745098039],
 * [0.2901960784313726,0.2235294117647059,0.23921568627450981],             # <<<<<<<<<<<<<<
 * [0.403921568627451,0.34509803921568627,0.2980392156862745],
 * [0.6901960784313725,0.5725490196078431,0.6549019607843137],
 */
  __pyx_t_95 = PyList_New(3); if (unlikely(!__pyx_t_95)) __PYX_ERR(1, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_95);
  __Pyx_INCREF(__pyx_float_0_2901960784313726);
  __Pyx_GIVEREF(__pyx_float_0_2901960784313726);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 0, __pyx_float_0_2901960784313726)) __PYX_ERR(1, 1251, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2235294117647059);
  __Pyx_GIVEREF(__pyx_float_0_2235294117647059);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 1, __pyx_float_0_2235294117647059)) __PYX_ERR(1, 1251, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_23921568627450981);
  __Pyx_GIVEREF(__pyx_float_0_23921568627450981);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_95, 2, __pyx_float_0_23921568627450981)) __PYX_ERR(1, 1251, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1252
 * [0.1568627450980392,0.12941176470588237,0.12156862745098039],
 * [0.2901960784313726,0.2235294117647059,0.23921568627450981],
 * [0.403921568627451,0.34509803921568627,0.2980392156862745],             # <<<<<<<<<<<<<<
 * [0.6901960784313725,0.5725490196078431,0.6549019607843137],
 * [0.9490196078431372,0.8392156862745098,0.8862745098039215],
 */
  __pyx_t_41 = PyList_New(3); if (unlikely(!__pyx_t_41)) __PYX_ERR(1, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_41);
  __Pyx_INCREF(__pyx_float_0_403921568627451);
  __Pyx_GIVEREF(__pyx_float_0_403921568627451);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 0, __pyx_float_0_403921568627451)) __PYX_ERR(1, 1252, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_34509803921568627);
  __Pyx_GIVEREF(__pyx_float_0_34509803921568627);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 1, __pyx_float_0_34509803921568627)) __PYX_ERR(1, 1252, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_2980392156862745);
  __Pyx_GIVEREF(__pyx_float_0_2980392156862745);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_41, 2, __pyx_float_0_2980392156862745)) __PYX_ERR(1, 1252, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1253
 * [0.2901960784313726,0.2235294117647059,0.23921568627450981],
 * [0.403921568627451,0.34509803921568627,0.2980392156862745],
 * [0.6901960784313725,0.5725490196078431,0.6549019607843137],             # <<<<<<<<<<<<<<
 * [0.9490196078431372,0.8392156862745098,0.8862745098039215],
 * [1.0,1.0,1.0]
 */
  __pyx_t_42 = PyList_New(3); if (unlikely(!__pyx_t_42)) __PYX_ERR(1, 1253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_42);
  __Pyx_INCREF(__pyx_float_0_6901960784313725);
  __Pyx_GIVEREF(__pyx_float_0_6901960784313725);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 0, __pyx_float_0_6901960784313725)) __PYX_ERR(1, 1253, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_5725490196078431);
  __Pyx_GIVEREF(__pyx_float_0_5725490196078431);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 1, __pyx_float_0_5725490196078431)) __PYX_ERR(1, 1253, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_6549019607843137);
  __Pyx_GIVEREF(__pyx_float_0_6549019607843137);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_42, 2, __pyx_float_0_6549019607843137)) __PYX_ERR(1, 1253, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1254
 * [0.403921568627451,0.34509803921568627,0.2980392156862745],
 * [0.6901960784313725,0.5725490196078431,0.6549019607843137],
 * [0.9490196078431372,0.8392156862745098,0.8862745098039215],             # <<<<<<<<<<<<<<
 * [1.0,1.0,1.0]
 * ], dtype=float32)
 */
  __pyx_t_43 = PyList_New(3); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 1254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_INCREF(__pyx_float_0_9490196078431372);
  __Pyx_GIVEREF(__pyx_float_0_9490196078431372);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 0, __pyx_float_0_9490196078431372)) __PYX_ERR(1, 1254, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8392156862745098);
  __Pyx_GIVEREF(__pyx_float_0_8392156862745098);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 1, __pyx_float_0_8392156862745098)) __PYX_ERR(1, 1254, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_0_8862745098039215);
  __Pyx_GIVEREF(__pyx_float_0_8862745098039215);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_43, 2, __pyx_float_0_8862745098039215)) __PYX_ERR(1, 1254, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1255
 * [0.6901960784313725,0.5725490196078431,0.6549019607843137],
 * [0.9490196078431372,0.8392156862745098,0.8862745098039215],
 * [1.0,1.0,1.0]             # <<<<<<<<<<<<<<
 * ], dtype=float32)
 * SILVER =_SILVER_NORMALIZED * <float>255.0
 */
  __pyx_t_44 = PyList_New(3); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 1255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 0, __pyx_float_1_0)) __PYX_ERR(1, 1255, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 1, __pyx_float_1_0)) __PYX_ERR(1, 1255, __pyx_L1_error);
  __Pyx_INCREF(__pyx_float_1_0);
  __Pyx_GIVEREF(__pyx_float_1_0);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_44, 2, __pyx_float_1_0)) __PYX_ERR(1, 1255, __pyx_L1_error);

  /* "PygameShader/Palette.pyx":1248
 * 
 * # https://lospec.com/palette-list/smooth-polished-silver
 * _SILVER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.1568627450980392,0.12941176470588237,0.12156862745098039],
 */
  __pyx_t_45 = PyList_New(7); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_GIVEREF(__pyx_t_38);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 0, __pyx_t_38)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_40);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 1, __pyx_t_40)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_95);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 2, __pyx_t_95)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_41);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 3, __pyx_t_41)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_42);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 4, __pyx_t_42)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_43);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 5, __pyx_t_43)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_44);
  if (__Pyx_PyList_SET_ITEM(__pyx_t_45, 6, __pyx_t_44)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __pyx_t_38 = 0;
  __pyx_t_40 = 0;
  __pyx_t_95 = 0;
  __pyx_t_41 = 0;
  __pyx_t_42 = 0;
  __pyx_t_43 = 0;
  __pyx_t_44 = 0;
  __pyx_t_44 = PyTuple_New(1); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_GIVEREF(__pyx_t_45);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_44, 0, __pyx_t_45)) __PYX_ERR(1, 1248, __pyx_L1_error);
  __pyx_t_45 = 0;

  /* "PygameShader/Palette.pyx":1256
 * [0.9490196078431372,0.8392156862745098,0.8862745098039215],
 * [1.0,1.0,1.0]
 * ], dtype=float32)             # <<<<<<<<<<<<<<
 * SILVER =_SILVER_NORMALIZED * <float>255.0
 * 
 */
  __pyx_t_45 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_GetModuleGlobalName(__pyx_t_43, __pyx_n_s_float32); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  if (PyDict_SetItem(__pyx_t_45, __pyx_n_s_dtype, __pyx_t_43) < 0) __PYX_ERR(1, 1256, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_43); __pyx_t_43 = 0;

  /* "PygameShader/Palette.pyx":1248
 * 
 * # https://lospec.com/palette-list/smooth-polished-silver
 * _SILVER_NORMALIZED = array([             # <<<<<<<<<<<<<<
 * [0.0,0.0,0.0],
 * [0.1568627450980392,0.12941176470588237,0.12156862745098039],
 */
  __pyx_t_43 = __Pyx_PyObject_Call(__pyx_t_39, __pyx_t_44, __pyx_t_45); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
  __Pyx_DECREF(__pyx_t_44); __pyx_t_44 = 0;
  __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SILVER_NORMALIZED, __pyx_t_43) < 0) __PYX_ERR(1, 1248, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_43); __pyx_t_43 = 0;

  /* "PygameShader/Palette.pyx":1257
 * [1.0,1.0,1.0]
 * ], dtype=float32)
 * SILVER =_SILVER_NORMALIZED * <float>255.0             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_43, __pyx_n_s_SILVER_NORMALIZED); if (unlikely(!__pyx_t_43)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_43);
  __pyx_t_45 = PyFloat_FromDouble(((float)255.0)); if (unlikely(!__pyx_t_45)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __pyx_t_44 = PyNumber_Multiply(__pyx_t_43, __pyx_t_45); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  __Pyx_DECREF(__pyx_t_43); __pyx_t_43 = 0;
  __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SILVER, __pyx_t_44) < 0) __PYX_ERR(1, 1257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_44); __pyx_t_44 = 0;

  /* "PygameShader/Palette.pyx":1
 * # cython: binding=False, boundscheck=False, wraparound=False, nonecheck=False, cdivision=True,             # <<<<<<<<<<<<<<
 * # profile=False, initializedcheck=False, exceptval(check=False)
 * # cython: optimize.use_switch=True
 */
  __pyx_t_44 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_44)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_44);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_44) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_44); __pyx_t_44 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_XDECREF(__pyx_t_26);
  __Pyx_XDECREF(__pyx_t_27);
  __Pyx_XDECREF(__pyx_t_28);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_30);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_XDECREF(__pyx_t_33);
  __Pyx_XDECREF(__pyx_t_34);
  __Pyx_XDECREF(__pyx_t_35);
  __Pyx_XDECREF(__pyx_t_36);
  __Pyx_XDECREF(__pyx_t_37);
  __Pyx_XDECREF(__pyx_t_38);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_XDECREF(__pyx_t_40);
  __Pyx_XDECREF(__pyx_t_41);
  __Pyx_XDECREF(__pyx_t_42);
  __Pyx_XDECREF(__pyx_t_43);
  __Pyx_XDECREF(__pyx_t_44);
  __Pyx_XDECREF(__pyx_t_45);
  __Pyx_XDECREF(__pyx_t_46);
  __Pyx_XDECREF(__pyx_t_47);
  __Pyx_XDECREF(__pyx_t_48);
  __Pyx_XDECREF(__pyx_t_49);
  __Pyx_XDECREF(__pyx_t_50);
  __Pyx_XDECREF(__pyx_t_51);
  __Pyx_XDECREF(__pyx_t_52);
  __Pyx_XDECREF(__pyx_t_53);
  __Pyx_XDECREF(__pyx_t_54);
  __Pyx_XDECREF(__pyx_t_55);
  __Pyx_XDECREF(__pyx_t_56);
  __Pyx_XDECREF(__pyx_t_57);
  __Pyx_XDECREF(__pyx_t_58);
  __Pyx_XDECREF(__pyx_t_59);
  __Pyx_XDECREF(__pyx_t_60);
  __Pyx_XDECREF(__pyx_t_61);
  __Pyx_XDECREF(__pyx_t_62);
  __Pyx_XDECREF(__pyx_t_63);
  __Pyx_XDECREF(__pyx_t_64);
  __Pyx_XDECREF(__pyx_t_65);
  __Pyx_XDECREF(__pyx_t_66);
  __Pyx_XDECREF(__pyx_t_67);
  __Pyx_XDECREF(__pyx_t_68);
  __Pyx_XDECREF(__pyx_t_69);
  __Pyx_XDECREF(__pyx_t_70);
  __Pyx_XDECREF(__pyx_t_71);
  __Pyx_XDECREF(__pyx_t_72);
  __Pyx_XDECREF(__pyx_t_73);
  __Pyx_XDECREF(__pyx_t_74);
  __Pyx_XDECREF(__pyx_t_75);
  __Pyx_XDECREF(__pyx_t_76);
  __Pyx_XDECREF(__pyx_t_77);
  __Pyx_XDECREF(__pyx_t_78);
  __Pyx_XDECREF(__pyx_t_79);
  __Pyx_XDECREF(__pyx_t_80);
  __Pyx_XDECREF(__pyx_t_81);
  __Pyx_XDECREF(__pyx_t_82);
  __Pyx_XDECREF(__pyx_t_83);
  __Pyx_XDECREF(__pyx_t_84);
  __Pyx_XDECREF(__pyx_t_85);
  __Pyx_XDECREF(__pyx_t_86);
  __Pyx_XDECREF(__pyx_t_87);
  __Pyx_XDECREF(__pyx_t_88);
  __Pyx_XDECREF(__pyx_t_89);
  __Pyx_XDECREF(__pyx_t_90);
  __Pyx_XDECREF(__pyx_t_91);
  __Pyx_XDECREF(__pyx_t_92);
  __Pyx_XDECREF(__pyx_t_93);
  __Pyx_XDECREF(__pyx_t_94);
  __Pyx_XDECREF(__pyx_t_95);
  __Pyx_XDECREF(__pyx_t_96);
  __Pyx_XDECREF(__pyx_t_97);
  __Pyx_XDECREF(__pyx_t_98);
  __Pyx_XDECREF(__pyx_t_99);
  __Pyx_XDECREF(__pyx_t_100);
  __Pyx_XDECREF(__pyx_t_101);
  __Pyx_XDECREF(__pyx_t_102);
  __Pyx_XDECREF(__pyx_t_103);
  __Pyx_XDECREF(__pyx_t_104);
  __Pyx_XDECREF(__pyx_t_105);
  __Pyx_XDECREF(__pyx_t_106);
  __Pyx_XDECREF(__pyx_t_107);
  __Pyx_XDECREF(__pyx_t_108);
  __Pyx_XDECREF(__pyx_t_109);
  __Pyx_XDECREF(__pyx_t_110);
  __Pyx_XDECREF(__pyx_t_111);
  __Pyx_XDECREF(__pyx_t_112);
  __Pyx_XDECREF(__pyx_t_113);
  __Pyx_XDECREF(__pyx_t_114);
  __Pyx_XDECREF(__pyx_t_115);
  __Pyx_XDECREF(__pyx_t_116);
  __Pyx_XDECREF(__pyx_t_117);
  __Pyx_XDECREF(__pyx_t_118);
  __Pyx_XDECREF(__pyx_t_119);
  __Pyx_XDECREF(__pyx_t_120);
  __Pyx_XDECREF(__pyx_t_121);
  __Pyx_XDECREF(__pyx_t_122);
  __Pyx_XDECREF(__pyx_t_123);
  __Pyx_XDECREF(__pyx_t_124);
  __Pyx_XDECREF(__pyx_t_125);
  __Pyx_XDECREF(__pyx_t_126);
  __Pyx_XDECREF(__pyx_t_127);
  __Pyx_XDECREF(__pyx_t_128);
  __Pyx_XDECREF(__pyx_t_129);
  __Pyx_XDECREF(__pyx_t_130);
  __Pyx_XDECREF(__pyx_t_131);
  __Pyx_XDECREF(__pyx_t_132);
  __Pyx_XDECREF(__pyx_t_133);
  __Pyx_XDECREF(__pyx_t_134);
  __Pyx_XDECREF(__pyx_t_135);
  __Pyx_XDECREF(__pyx_t_136);
  if (__pyx_m) {
    if (__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init PygameShader.Palette", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PygameShader.Palette");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs = PyTuple_GET_SIZE(kwnames);
    PyObject *dict;
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        Py_XDECREF(key); key = NULL;
        Py_XDECREF(value); value = NULL;
        if (kwds_is_tuple) {
            Py_ssize_t size;
#if CYTHON_ASSUME_SAFE_MACROS
            size = PyTuple_GET_SIZE(kwds);
#else
            size = PyTuple_Size(kwds);
            if (size < 0) goto bad;
#endif
            if (pos >= size) break;
#if CYTHON_AVOID_BORROWED_REFS
            key = __Pyx_PySequence_ITEM(kwds, pos);
            if (!key) goto bad;
#elif CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kwds, pos);
#else
            key = PyTuple_GetItem(kwds, pos);
            if (!key) goto bad;
#endif
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
#endif
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(value);
            Py_DECREF(key);
#endif
            key = NULL;
            value = NULL;
            continue;
        }
#if !CYTHON_AVOID_BORROWED_REFS
        Py_INCREF(key);
#endif
        Py_INCREF(value);
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
#if CYTHON_AVOID_BORROWED_REFS
                    value = NULL;
#endif
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    Py_XDECREF(key);
    Py_XDECREF(value);
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    Py_XDECREF(key);
    Py_XDECREF(value);
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
      #if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
      #elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    #endif
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    #if PY_MAJOR_VERSION < 3
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    #else
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    #endif
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) < 0) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL
        #if PY_VERSION_HEX < 0x03090000
        vectorcallfunc f = _PyVectorcall_Function(func);
        #else
        vectorcallfunc f = PyVectorcall_Function(func);
        #endif
        if (f) {
            return f(func, args, (size_t)nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, (size_t)nargs, NULL);
        }
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* CIntToDigits */
static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSsize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* CIntToPyUnicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_8 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            memcpy(dpos, DIGIT_PAIRS_10 + digit_pos * 2, 2);
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if PY_VERSION_HEX >= 0x030d0000
            if (unlikely(PyUnicode_CopyCharacters(result_uval, char_pos, uval, 0, ulength) < 0)) goto bad;
            #elif CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr = NULL;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (!meth) {
            PyErr_Clear();
        } else {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        Py_ssize_t kwsize;
#if CYTHON_ASSUME_SAFE_MACROS
        kwsize = PyTuple_GET_SIZE(kw);
#else
        kwsize = PyTuple_Size(kw);
        if (kwsize < 0) return 0;
#endif
        if (unlikely(kwsize == 0))
            return 1;
        if (!kw_allowed) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, 0);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < kwsize; pos++) {
#if CYTHON_ASSUME_SAFE_MACROS
            key = PyTuple_GET_ITEM(kw, pos);
#else
            key = PyTuple_GetItem(kw, pos);
            if (!key) return 0;
#endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* DivInt[Py_ssize_t] */
static CYTHON_INLINE Py_ssize_t __Pyx_div_Py_ssize_t(Py_ssize_t a, Py_ssize_t b) {
    Py_ssize_t q = a / b;
    Py_ssize_t r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* GetAttr3 */
#if __PYX_LIMITED_VERSION_HEX < 0x030d00A1
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
#endif
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d00A1
    int res = PyObject_GetOptionalAttr(o, n, &r);
    return (res != 0) ? r : __Pyx_NewRef(d);
#else
  #if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
  #endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && PY_VERSION_HEX < 0x030d0000
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK && CYTHON_FAST_THREAD_STATE
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_value == NULL || exc_info->exc_value == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    PyObject *exc_value = exc_info->exc_value;
    if (exc_value == NULL || exc_value == Py_None) {
        *value = NULL;
        *type = NULL;
        *tb = NULL;
    } else {
        *value = exc_value;
        Py_INCREF(*value);
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        *tb = PyException_GetTraceback(exc_value);
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
  #endif
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    PyObject *tmp_value = exc_info->exc_value;
    exc_info->exc_value = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
  #else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
  #endif
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type = NULL, *local_value, *local_tb = NULL;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if PY_VERSION_HEX >= 0x030C00A6
    local_value = tstate->current_exception;
    tstate->current_exception = 0;
    if (likely(local_value)) {
        local_type = (PyObject*) Py_TYPE(local_value);
        Py_INCREF(local_type);
        local_tb = PyException_GetTraceback(local_value);
    }
  #else
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
  #endif
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE && PY_VERSION_HEX >= 0x030C00A6
    if (unlikely(tstate->current_exception))
#elif CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
      #if PY_VERSION_HEX >= 0x030B00a4
        tmp_value = exc_info->exc_value;
        exc_info->exc_value = local_value;
        tmp_type = NULL;
        tmp_tb = NULL;
        Py_XDECREF(local_type);
        Py_XDECREF(local_tb);
      #else
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
      #endif
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
  #if CYTHON_USE_EXC_INFO_STACK && PY_VERSION_HEX >= 0x030B00a4
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_value = exc_info->exc_value;
    exc_info->exc_value = *value;
    if (tmp_value == NULL || tmp_value == Py_None) {
        Py_XDECREF(tmp_value);
        tmp_value = NULL;
        tmp_type = NULL;
        tmp_tb = NULL;
    } else {
        tmp_type = (PyObject*) Py_TYPE(tmp_value);
        Py_INCREF(tmp_type);
        #if CYTHON_COMPILING_IN_CPYTHON
        tmp_tb = ((PyBaseExceptionObject*) tmp_value)->traceback;
        Py_XINCREF(tmp_tb);
        #else
        tmp_tb = PyException_GetTraceback(tmp_value);
        #endif
    }
  #elif CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
  #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
  #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.') != NULL) {
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__3;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* PySequenceMultiply */
static PyObject* __Pyx_PySequence_Multiply_Generic(PyObject *seq, Py_ssize_t mul) {
    PyObject *result, *pymul = PyInt_FromSsize_t(mul);
    if (unlikely(!pymul))
        return NULL;
    result = PyNumber_Multiply(seq, pymul);
    Py_DECREF(pymul);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PySequence_Multiply(PyObject *seq, Py_ssize_t mul) {
#if CYTHON_USE_TYPE_SLOTS
    PyTypeObject *type = Py_TYPE(seq);
    if (likely(type->tp_as_sequence && type->tp_as_sequence->sq_repeat)) {
        return type->tp_as_sequence->sq_repeat(seq, mul);
    } else
#endif
    {
        return __Pyx_PySequence_Multiply_Generic(seq, mul);
    }
}

/* SetItemInt */
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (unlikely(!j)) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_ass_subscript) {
            int r;
            PyObject *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return -1;
            r = mm->mp_ass_subscript(o, key, v);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return sm->sq_ass_item(o, i, v);
        }
    }
#else
    if (is_list || !PyMapping_Check(o))
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* RaiseUnboundLocalError */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* DivInt[long] */
static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        const char* module_name_str = 0;
        PyObject* module_name = 0;
        PyObject* module_dot = 0;
        PyObject* full_name = 0;
        PyErr_Clear();
        module_name_str = PyModule_GetName(module);
        if (unlikely(!module_name_str)) { goto modbad; }
        module_name = PyUnicode_FromString(module_name_str);
        if (unlikely(!module_name)) { goto modbad; }
        module_dot = PyUnicode_Concat(module_name, __pyx_kp_u__2);
        if (unlikely(!module_dot)) { goto modbad; }
        full_name = PyUnicode_Concat(module_dot, name);
        if (unlikely(!full_name)) { goto modbad; }
        #if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
        {
            PyObject *modules = PyImport_GetModuleDict();
            if (unlikely(!modules))
                goto modbad;
            value = PyObject_GetItem(modules, full_name);
        }
        #else
        value = PyImport_GetModule(full_name);
        #endif
      modbad:
        Py_XDECREF(full_name);
        Py_XDECREF(module_dot);
        Py_XDECREF(module_name);
    }
    if (unlikely(!value)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyObjectFormatAndDecref */
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatSimpleAndDecref(PyObject* s, PyObject* f) {
    if (unlikely(!s)) return NULL;
    if (likely(PyUnicode_CheckExact(s))) return s;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyString_CheckExact(s))) {
        PyObject *result = PyUnicode_FromEncodedObject(s, NULL, "strict");
        Py_DECREF(s);
        return result;
    }
    #endif
    return __Pyx_PyObject_FormatAndDecref(s, f);
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FormatAndDecref(PyObject* s, PyObject* f) {
    PyObject *result;
    if (unlikely(!s)) return NULL;
    result = PyObject_Format(s, f);
    Py_DECREF(s);
    return result;
}

/* ErrOccurredWithGIL */
static CYTHON_INLINE int __Pyx_ErrOccurredWithGIL(void) {
  int err;
  #ifdef WITH_THREAD
  PyGILState_STATE _save = PyGILState_Ensure();
  #endif
  err = !!PyErr_Occurred();
  #ifdef WITH_THREAD
  PyGILState_Release(_save);
  #endif
  return err;
}

/* PyIntCompare */
static CYTHON_INLINE int __Pyx_PyInt_BoolEqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        return 1;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        return (a == b);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = __Pyx_PyLong_DigitCount(op1);
        const digit* digits = __Pyx_PyLong_Digits(op1);
        if (intval == 0) {
            return (__Pyx_PyLong_IsZero(op1) == 1);
        } else if (intval < 0) {
            if (__Pyx_PyLong_IsNonNeg(op1))
                return 0;
            intval = -intval;
        } else {
            if (__Pyx_PyLong_IsNeg(op1))
                return 0;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        return (unequal == 0);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        return ((double)a == (double)b);
    }
    return __Pyx_PyObject_IsTrueAndDecref(
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* FixUpExtensionType */
#if CYTHON_USE_TYPE_SPECS
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if PY_VERSION_HEX > 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
#else
    const PyType_Slot *slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
        int changed = 0;
#if !(PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON)
        const
#endif
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
#if PY_VERSION_HEX < 0x030900b1
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif
#else
                if ((0));
#endif
#if PY_VERSION_HEX <= 0x030900b1 && CYTHON_COMPILING_IN_CPYTHON
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    if (unlikely(PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr) < 0)) {
                        Py_DECREF(descr);
                        return -1;
                    }
                    Py_DECREF(descr);
                    changed = 1;
                }
#endif
            }
            memb++;
        }
        if (changed)
            PyType_Modified(type);
    }
#endif
    return 0;
}
#endif

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_MACROS
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (n < 0) return -1;
#endif
    for (i = 1; i < n; i++)
    {
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
        if (PyClass_Check(b0))
        {
            PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                         PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !(CYTHON_USE_TYPE_SLOTS || CYTHON_COMPILING_IN_PYPY)
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !(CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API) || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000 && !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_n_s_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_n_s_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_n_s_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_0_12
#define __PYX_HAVE_RT_ImportType_3_0_12
static PyTypeObject *__Pyx_ImportType_3_0_12(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_0_12 check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_0_12 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_0_12 && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* CLineInTraceback */
#ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result;
        result = PyObject_Call(replace, __pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    #if __PYX_LIMITED_VERSION_HEX < 0x030780000
    {
        PyObject *compiled = NULL, *result = NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "code", code))) return NULL;
        if (unlikely(PyDict_SetItemString(scratch_dict, "type", (PyObject*)(&PyType_Type)))) return NULL;
        compiled = Py_CompileString(
            "out = type(code)(\n"
            "  code.co_argcount, code.co_kwonlyargcount, code.co_nlocals, code.co_stacksize,\n"
            "  code.co_flags, code.co_code, code.co_consts, code.co_names,\n"
            "  code.co_varnames, code.co_filename, co_name, co_firstlineno,\n"
            "  code.co_lnotab)\n", "<dummy>", Py_file_input);
        if (!compiled) return NULL;
        result = PyEval_EvalCode(compiled, scratch_dict, scratch_dict);
        Py_DECREF(compiled);
        if (!result) PyErr_Print();
        Py_DECREF(result);
        result = PyDict_GetItemString(scratch_dict, "out");
        if (result) Py_INCREF(result);
        return result;
    }
    #else
    return NULL;
    #endif
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
    if (unlikely(!code_object)) goto bad;
    py_py_line = PyLong_FromLong(py_line);
    if (unlikely(!py_py_line)) goto bad;
    py_funcname = PyUnicode_FromString(funcname);
    if (unlikely(!py_funcname)) goto bad;
    dict = PyDict_New();
    if (unlikely(!dict)) goto bad;
    {
        PyObject *old_code_object = code_object;
        code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
        Py_DECREF(old_code_object);
    }
    if (unlikely(!code_object)) goto bad;
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_srcfile = NULL;
    py_srcfile = PyString_FromString(filename);
    if (!py_srcfile) goto bad;
    #endif
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        if (!py_funcname) goto bad;
        #endif
    }
    #if PY_MAJOR_VERSION < 3
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    #else
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    #endif
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_srcfile);
    #endif
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    __Pyx_TypeName obj_type_name;
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_array_type)) return __pyx_array_getbuffer(obj, view, flags);
        if (__Pyx_TypeCheck(obj, __pyx_memoryview_type)) return __pyx_memoryview_getbuffer(obj, view, flags);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
                 "'" __Pyx_FMT_TYPENAME "' does not have the buffer interface",
                 obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
    if ((0)) {}
    view->obj = NULL;
    Py_DECREF(obj);
}
#endif


/* MemviewSliceIsContig */
static int
__pyx_memviewslice_is_contig(const __Pyx_memviewslice mvs, char order, int ndim)
{
    int i, index, step, start;
    Py_ssize_t itemsize = mvs.memview->view.itemsize;
    if (order == 'F') {
        step = 1;
        start = 0;
    } else {
        step = -1;
        start = ndim - 1;
    }
    for (i = 0; i < ndim; i++) {
        index = start + step * i;
        if (mvs.suboffsets[index] >= 0 || mvs.strides[index] != itemsize)
            return 0;
        itemsize *= mvs.shape[index];
    }
    return 1;
}

/* OverlappingSlices */
static void
__pyx_get_array_memory_extents(__Pyx_memviewslice *slice,
                               void **out_start, void **out_end,
                               int ndim, size_t itemsize)
{
    char *start, *end;
    int i;
    start = end = slice->data;
    for (i = 0; i < ndim; i++) {
        Py_ssize_t stride = slice->strides[i];
        Py_ssize_t extent = slice->shape[i];
        if (extent == 0) {
            *out_start = *out_end = start;
            return;
        } else {
            if (stride > 0)
                end += stride * (extent - 1);
            else
                start += stride * (extent - 1);
        }
    }
    *out_start = start;
    *out_end = end + itemsize;
}
static int
__pyx_slices_overlap(__Pyx_memviewslice *slice1,
                     __Pyx_memviewslice *slice2,
                     int ndim, size_t itemsize)
{
    void *start1, *end1, *start2, *end2;
    __pyx_get_array_memory_extents(slice1, &start1, &end1, ndim, itemsize);
    __pyx_get_array_memory_extents(slice2, &start2, &end2, ndim, itemsize);
    return (start1 < end2) && (start2 < end1);
}

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* IsLittleEndian */
static CYTHON_INLINE int __Pyx_Is_Little_Endian(void)
{
  union {
    uint32_t u32;
    uint8_t u8[4];
  } S;
  S.u32 = 0x01020304;
  return S.u8[0] == 4;
}

/* BufferFormatCheck */
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t <= '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1)
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case '?': return "'bool'";
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparsable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, int is_complex) {
  CYTHON_UNUSED_VAR(is_complex);
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case '?': case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count;
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break;
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue;
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static int
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number, ndim;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return -1;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return -1;
    ndim = ctx->head->field->type->ndim;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return -1;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i]) {
            PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
            return -1;
        }
        if (*ts != ',' && *ts != ')') {
            PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
            return -1;
        }
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim) {
        PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
        return -1;
    }
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return -1;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return 0;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_Is_Little_Endian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T':
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}':
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0;
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
        CYTHON_FALLTHROUGH;
      case '?': case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if ((ctx->enc_type == *ts) && (got_Z == ctx->is_complex) &&
            (ctx->enc_packmode == ctx->new_packmode) && (!ctx->is_valid_array)) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
        CYTHON_FALLTHROUGH;
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (__pyx_buffmt_parse_array(ctx, &ts) < 0) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}

/* TypeInfoCompare */
  static int
__pyx_typeinfo_cmp(__Pyx_TypeInfo *a, __Pyx_TypeInfo *b)
{
    int i;
    if (!a || !b)
        return 0;
    if (a == b)
        return 1;
    if (a->size != b->size || a->typegroup != b->typegroup ||
            a->is_unsigned != b->is_unsigned || a->ndim != b->ndim) {
        if (a->typegroup == 'H' || b->typegroup == 'H') {
            return a->size == b->size;
        } else {
            return 0;
        }
    }
    if (a->ndim) {
        for (i = 0; i < a->ndim; i++)
            if (a->arraysize[i] != b->arraysize[i])
                return 0;
    }
    if (a->typegroup == 'S') {
        if (a->flags != b->flags)
            return 0;
        if (a->fields || b->fields) {
            if (!(a->fields && b->fields))
                return 0;
            for (i = 0; a->fields[i].type && b->fields[i].type; i++) {
                __Pyx_StructField *field_a = a->fields + i;
                __Pyx_StructField *field_b = b->fields + i;
                if (field_a->offset != field_b->offset ||
                    !__pyx_typeinfo_cmp(field_a->type, field_b->type))
                    return 0;
            }
            return !a->fields[i].type && !b->fields[i].type;
        }
    }
    return 1;
}

/* MemviewSliceValidateAndInit */
  static int
__pyx_check_strides(Py_buffer *buf, int dim, int ndim, int spec)
{
    if (buf->shape[dim] <= 1)
        return 1;
    if (buf->strides) {
        if (spec & __Pyx_MEMVIEW_CONTIG) {
            if (spec & (__Pyx_MEMVIEW_PTR|__Pyx_MEMVIEW_FULL)) {
                if (unlikely(buf->strides[dim] != sizeof(void *))) {
                    PyErr_Format(PyExc_ValueError,
                                 "Buffer is not indirectly contiguous "
                                 "in dimension %d.", dim);
                    goto fail;
                }
            } else if (unlikely(buf->strides[dim] != buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
        if (spec & __Pyx_MEMVIEW_FOLLOW) {
            Py_ssize_t stride = buf->strides[dim];
            if (stride < 0)
                stride = -stride;
            if (unlikely(stride < buf->itemsize)) {
                PyErr_SetString(PyExc_ValueError,
                                "Buffer and memoryview are not contiguous "
                                "in the same dimension.");
                goto fail;
            }
        }
    } else {
        if (unlikely(spec & __Pyx_MEMVIEW_CONTIG && dim != ndim - 1)) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not contiguous in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(spec & (__Pyx_MEMVIEW_PTR))) {
            PyErr_Format(PyExc_ValueError,
                         "C-contiguous buffer is not indirect in "
                         "dimension %d", dim);
            goto fail;
        } else if (unlikely(buf->suboffsets)) {
            PyErr_SetString(PyExc_ValueError,
                            "Buffer exposes suboffsets but no strides");
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_check_suboffsets(Py_buffer *buf, int dim, int ndim, int spec)
{
    CYTHON_UNUSED_VAR(ndim);
    if (spec & __Pyx_MEMVIEW_DIRECT) {
        if (unlikely(buf->suboffsets && buf->suboffsets[dim] >= 0)) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer not compatible with direct access "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    if (spec & __Pyx_MEMVIEW_PTR) {
        if (unlikely(!buf->suboffsets || (buf->suboffsets[dim] < 0))) {
            PyErr_Format(PyExc_ValueError,
                         "Buffer is not indirectly accessible "
                         "in dimension %d.", dim);
            goto fail;
        }
    }
    return 1;
fail:
    return 0;
}
static int
__pyx_verify_contig(Py_buffer *buf, int ndim, int c_or_f_flag)
{
    int i;
    if (c_or_f_flag & __Pyx_IS_F_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = 0; i < ndim; i++) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not fortran contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    } else if (c_or_f_flag & __Pyx_IS_C_CONTIG) {
        Py_ssize_t stride = 1;
        for (i = ndim - 1; i >- 1; i--) {
            if (unlikely(stride * buf->itemsize != buf->strides[i]  &&  buf->shape[i] > 1)) {
                PyErr_SetString(PyExc_ValueError,
                    "Buffer not C contiguous.");
                goto fail;
            }
            stride = stride * buf->shape[i];
        }
    }
    return 1;
fail:
    return 0;
}
static int __Pyx_ValidateAndInit_memviewslice(
                int *axes_specs,
                int c_or_f_flag,
                int buf_flags,
                int ndim,
                __Pyx_TypeInfo *dtype,
                __Pyx_BufFmt_StackElem stack[],
                __Pyx_memviewslice *memviewslice,
                PyObject *original_obj)
{
    struct __pyx_memoryview_obj *memview, *new_memview;
    __Pyx_RefNannyDeclarations
    Py_buffer *buf;
    int i, spec = 0, retval = -1;
    __Pyx_BufFmt_Context ctx;
    int from_memoryview = __pyx_memoryview_check(original_obj);
    __Pyx_RefNannySetupContext("ValidateAndInit_memviewslice", 0);
    if (from_memoryview && __pyx_typeinfo_cmp(dtype, ((struct __pyx_memoryview_obj *)
                                                            original_obj)->typeinfo)) {
        memview = (struct __pyx_memoryview_obj *) original_obj;
        new_memview = NULL;
    } else {
        memview = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                            original_obj, buf_flags, 0, dtype);
        new_memview = memview;
        if (unlikely(!memview))
            goto fail;
    }
    buf = &memview->view;
    if (unlikely(buf->ndim != ndim)) {
        PyErr_Format(PyExc_ValueError,
                "Buffer has wrong number of dimensions (expected %d, got %d)",
                ndim, buf->ndim);
        goto fail;
    }
    if (new_memview) {
        __Pyx_BufFmt_Init(&ctx, stack, dtype);
        if (unlikely(!__Pyx_BufFmt_CheckString(&ctx, buf->format))) goto fail;
    }
    if (unlikely((unsigned) buf->itemsize != dtype->size)) {
        PyErr_Format(PyExc_ValueError,
                     "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "u byte%s) "
                     "does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "u byte%s)",
                     buf->itemsize,
                     (buf->itemsize > 1) ? "s" : "",
                     dtype->name,
                     dtype->size,
                     (dtype->size > 1) ? "s" : "");
        goto fail;
    }
    if (buf->len > 0) {
        for (i = 0; i < ndim; i++) {
            spec = axes_specs[i];
            if (unlikely(!__pyx_check_strides(buf, i, ndim, spec)))
                goto fail;
            if (unlikely(!__pyx_check_suboffsets(buf, i, ndim, spec)))
                goto fail;
        }
        if (unlikely(buf->strides && !__pyx_verify_contig(buf, ndim, c_or_f_flag)))
            goto fail;
    }
    if (unlikely(__Pyx_init_memviewslice(memview, ndim, memviewslice,
                                         new_memview != NULL) == -1)) {
        goto fail;
    }
    retval = 0;
    goto no_fail;
fail:
    Py_XDECREF(new_memview);
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dc_unsigned_int(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 1,
                                                 &__Pyx_TypeInfo_unsigned_int, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsds_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 2,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_d_dc_float(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_FOLLOW), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_CONTIG) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, __Pyx_IS_C_CONTIG,
                                                 (PyBUF_C_CONTIGUOUS | PyBUF_FORMAT) | writable_flag, 2,
                                                 &__Pyx_TypeInfo_float, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* ObjectToMemviewSlice */
  static CYTHON_INLINE __Pyx_memviewslice __Pyx_PyObject_to_MemoryviewSlice_dsdsds_unsigned_char(PyObject *obj, int writable_flag) {
    __Pyx_memviewslice result = { 0, 0, { 0 }, { 0 }, { 0 } };
    __Pyx_BufFmt_StackElem stack[1];
    int axes_specs[] = { (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED), (__Pyx_MEMVIEW_DIRECT | __Pyx_MEMVIEW_STRIDED) };
    int retcode;
    if (obj == Py_None) {
        result.memview = (struct __pyx_memoryview_obj *) Py_None;
        return result;
    }
    retcode = __Pyx_ValidateAndInit_memviewslice(axes_specs, 0,
                                                 PyBUF_RECORDS_RO | writable_flag, 3,
                                                 &__Pyx_TypeInfo_unsigned_char, stack,
                                                 &result, obj);
    if (unlikely(retcode == -1))
        goto __pyx_fail;
    return result;
__pyx_fail:
    result.memview = NULL;
    result.data = NULL;
    return result;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_unsigned_char(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_unsigned_char(*(unsigned char *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_unsigned_char(const char *itemp, PyObject *obj) {
    unsigned char value = __Pyx_PyInt_As_unsigned_char(obj);
    if (unlikely((value == (unsigned char)-1) && PyErr_Occurred()))
        return 0;
    *(unsigned char *) itemp = value;
    return 1;
}

/* MemviewDtypeToObject */
  static CYTHON_INLINE PyObject *__pyx_memview_get_unsigned_int(const char *itemp) {
    return (PyObject *) __Pyx_PyInt_From_unsigned_int(*(unsigned int *) itemp);
}
static CYTHON_INLINE int __pyx_memview_set_unsigned_int(const char *itemp, PyObject *obj) {
    unsigned int value = __Pyx_PyInt_As_unsigned_int(obj);
    if (unlikely((value == (unsigned int)-1) && PyErr_Occurred()))
        return 0;
    *(unsigned int *) itemp = value;
    return 1;
}

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return ::std::complex< long double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      return x + y*(__pyx_t_long_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_long_double_complex __pyx_t_long_double_complex_from_parts(long double x, long double y) {
      __pyx_t_long_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX && (1) && (!0 || __cplusplus)
#else
    static CYTHON_INLINE int __Pyx_c_eq_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_sum_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_diff_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_prod_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        __pyx_t_long_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsl(b.real) >= fabsl(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                long double r = b.imag / b.real;
                long double s = (long double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_long_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            long double r = b.real / b.imag;
            long double s = (long double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_long_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_quot_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_long_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            long double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_long_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_neg_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_long__double(__pyx_t_long_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_conj_long__double(__pyx_t_long_double_complex a) {
        __pyx_t_long_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE long double __Pyx_c_abs_long__double(__pyx_t_long_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtl(z.real*z.real + z.imag*z.imag);
          #else
            return hypotl(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_long_double_complex __Pyx_c_pow_long__double(__pyx_t_long_double_complex a, __pyx_t_long_double_complex b) {
            __pyx_t_long_double_complex z;
            long double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    long double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_long__double(a, a);
                    case 3:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, a);
                    case 4:
                        z = __Pyx_c_prod_long__double(a, a);
                        return __Pyx_c_prod_long__double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if ((b.imag == 0) && (a.real >= 0)) {
                    z.real = powl(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2l(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_long__double(a);
                theta = atan2l(a.imag, a.real);
            }
            lnr = logl(r);
            z_r = expl(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosl(z_theta);
            z.imag = z_r * sinl(z_theta);
            return z;
        }
    #endif
#endif

/* MemviewSliceCopyTemplate */
  static __Pyx_memviewslice
__pyx_memoryview_copy_new_contig(const __Pyx_memviewslice *from_mvs,
                                 const char *mode, int ndim,
                                 size_t sizeof_dtype, int contig_flag,
                                 int dtype_is_object)
{
    __Pyx_RefNannyDeclarations
    int i;
    __Pyx_memviewslice new_mvs = { 0, 0, { 0 }, { 0 }, { 0 } };
    struct __pyx_memoryview_obj *from_memview = from_mvs->memview;
    Py_buffer *buf = &from_memview->view;
    PyObject *shape_tuple = NULL;
    PyObject *temp_int = NULL;
    struct __pyx_array_obj *array_obj = NULL;
    struct __pyx_memoryview_obj *memview_obj = NULL;
    __Pyx_RefNannySetupContext("__pyx_memoryview_copy_new_contig", 0);
    for (i = 0; i < ndim; i++) {
        if (unlikely(from_mvs->suboffsets[i] >= 0)) {
            PyErr_Format(PyExc_ValueError, "Cannot copy memoryview slice with "
                                           "indirect dimensions (axis %d)", i);
            goto fail;
        }
    }
    shape_tuple = PyTuple_New(ndim);
    if (unlikely(!shape_tuple)) {
        goto fail;
    }
    __Pyx_GOTREF(shape_tuple);
    for(i = 0; i < ndim; i++) {
        temp_int = PyInt_FromSsize_t(from_mvs->shape[i]);
        if(unlikely(!temp_int)) {
            goto fail;
        } else {
            PyTuple_SET_ITEM(shape_tuple, i, temp_int);
            temp_int = NULL;
        }
    }
    array_obj = __pyx_array_new(shape_tuple, sizeof_dtype, buf->format, (char *) mode, NULL);
    if (unlikely(!array_obj)) {
        goto fail;
    }
    __Pyx_GOTREF(array_obj);
    memview_obj = (struct __pyx_memoryview_obj *) __pyx_memoryview_new(
                                    (PyObject *) array_obj, contig_flag,
                                    dtype_is_object,
                                    from_mvs->memview->typeinfo);
    if (unlikely(!memview_obj))
        goto fail;
    if (unlikely(__Pyx_init_memviewslice(memview_obj, ndim, &new_mvs, 1) < 0))
        goto fail;
    if (unlikely(__pyx_memoryview_copy_contents(*from_mvs, new_mvs, ndim, ndim,
                                                dtype_is_object) < 0))
        goto fail;
    goto no_fail;
fail:
    __Pyx_XDECREF(new_mvs.memview);
    new_mvs.memview = NULL;
    new_mvs.data = NULL;
no_fail:
    __Pyx_XDECREF(shape_tuple);
    __Pyx_XDECREF(temp_int);
    __Pyx_XDECREF(array_obj);
    __Pyx_RefNannyFinishContext();
    return new_mvs;
}

/* MemviewSliceInit */
  static int
__Pyx_init_memviewslice(struct __pyx_memoryview_obj *memview,
                        int ndim,
                        __Pyx_memviewslice *memviewslice,
                        int memview_is_new_reference)
{
    __Pyx_RefNannyDeclarations
    int i, retval=-1;
    Py_buffer *buf = &memview->view;
    __Pyx_RefNannySetupContext("init_memviewslice", 0);
    if (unlikely(memviewslice->memview || memviewslice->data)) {
        PyErr_SetString(PyExc_ValueError,
            "memviewslice is already initialized!");
        goto fail;
    }
    if (buf->strides) {
        for (i = 0; i < ndim; i++) {
            memviewslice->strides[i] = buf->strides[i];
        }
    } else {
        Py_ssize_t stride = buf->itemsize;
        for (i = ndim - 1; i >= 0; i--) {
            memviewslice->strides[i] = stride;
            stride *= buf->shape[i];
        }
    }
    for (i = 0; i < ndim; i++) {
        memviewslice->shape[i]   = buf->shape[i];
        if (buf->suboffsets) {
            memviewslice->suboffsets[i] = buf->suboffsets[i];
        } else {
            memviewslice->suboffsets[i] = -1;
        }
    }
    memviewslice->memview = memview;
    memviewslice->data = (char *)buf->buf;
    if (__pyx_add_acquisition_count(memview) == 0 && !memview_is_new_reference) {
        Py_INCREF(memview);
    }
    retval = 0;
    goto no_fail;
fail:
    memviewslice->memview = 0;
    memviewslice->data = 0;
    retval = -1;
no_fail:
    __Pyx_RefNannyFinishContext();
    return retval;
}
#ifndef Py_NO_RETURN
#define Py_NO_RETURN
#endif
static void __pyx_fatalerror(const char *fmt, ...) Py_NO_RETURN {
    va_list vargs;
    char msg[200];
#if PY_VERSION_HEX >= 0x030A0000 || defined(HAVE_STDARG_PROTOTYPES)
    va_start(vargs, fmt);
#else
    va_start(vargs);
#endif
    vsnprintf(msg, 200, fmt, vargs);
    va_end(vargs);
    Py_FatalError(msg);
}
static CYTHON_INLINE int
__pyx_add_acquisition_count_locked(__pyx_atomic_int_type *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)++;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE int
__pyx_sub_acquisition_count_locked(__pyx_atomic_int_type *acquisition_count,
                                   PyThread_type_lock lock)
{
    int result;
    PyThread_acquire_lock(lock, 1);
    result = (*acquisition_count)--;
    PyThread_release_lock(lock);
    return result;
}
static CYTHON_INLINE void
__Pyx_INC_MEMVIEW(__Pyx_memviewslice *memslice, int have_gil, int lineno)
{
    __pyx_nonatomic_int_type old_acquisition_count;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        return;
    }
    old_acquisition_count = __pyx_add_acquisition_count(memview);
    if (unlikely(old_acquisition_count <= 0)) {
        if (likely(old_acquisition_count == 0)) {
            if (have_gil) {
                Py_INCREF((PyObject *) memview);
            } else {
                PyGILState_STATE _gilstate = PyGILState_Ensure();
                Py_INCREF((PyObject *) memview);
                PyGILState_Release(_gilstate);
            }
        } else {
            __pyx_fatalerror("Acquisition count is %d (line %d)",
                             old_acquisition_count+1, lineno);
        }
    }
}
static CYTHON_INLINE void __Pyx_XCLEAR_MEMVIEW(__Pyx_memviewslice *memslice,
                                             int have_gil, int lineno) {
    __pyx_nonatomic_int_type old_acquisition_count;
    struct __pyx_memoryview_obj *memview = memslice->memview;
    if (unlikely(!memview || (PyObject *) memview == Py_None)) {
        memslice->memview = NULL;
        return;
    }
    old_acquisition_count = __pyx_sub_acquisition_count(memview);
    memslice->data = NULL;
    if (likely(old_acquisition_count > 1)) {
        memslice->memview = NULL;
    } else if (likely(old_acquisition_count == 1)) {
        if (have_gil) {
            Py_CLEAR(memslice->memview);
        } else {
            PyGILState_STATE _gilstate = PyGILState_Ensure();
            Py_CLEAR(memslice->memview);
            PyGILState_Release(_gilstate);
        }
    } else {
        __pyx_fatalerror("Acquisition count is %d (line %d)",
                         old_acquisition_count-1, lineno);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_char(unsigned char value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned char) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned char) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned char) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned char) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned char),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned char));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned char __Pyx_PyInt_As_unsigned_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned char neg_one = (unsigned char) -1, const_zero = (unsigned char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned char) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        unsigned char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned char) -1;
        val = __Pyx_PyInt_As_unsigned_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(unsigned char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) >= 2 * PyLong_SHIFT)) {
                            return (unsigned char) (((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) >= 3 * PyLong_SHIFT)) {
                            return (unsigned char) (((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) >= 4 * PyLong_SHIFT)) {
                            return (unsigned char) (((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (unsigned char) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(unsigned char) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned char) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(unsigned char) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned char) (((unsigned char)-1)*(((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(unsigned char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned char) ((((((unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(unsigned char) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned char) (((unsigned char)-1)*(((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned char) ((((((((unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(unsigned char) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned char) (((unsigned char)-1)*(((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned char) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned char) ((((((((((unsigned char)digits[3]) << PyLong_SHIFT) | (unsigned char)digits[2]) << PyLong_SHIFT) | (unsigned char)digits[1]) << PyLong_SHIFT) | (unsigned char)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(unsigned char) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned char) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        unsigned char val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (unsigned char) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (unsigned char) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (unsigned char) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (unsigned char) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(unsigned char) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((unsigned char) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(unsigned char) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((unsigned char) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((unsigned char) 1) << (sizeof(unsigned char) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (unsigned char) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned char");
    return (unsigned char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned char");
    return (unsigned char) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE unsigned int __Pyx_PyInt_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(unsigned int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(unsigned int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (unsigned int) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyInt_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (unsigned int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(unsigned int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        unsigned int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (unsigned int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (unsigned int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (unsigned int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (unsigned int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((unsigned int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((unsigned int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (unsigned int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL;
        PyObject *py_bytes = NULL, *arg_tuple = NULL, *kwds = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        arg_tuple = PyTuple_Pack(2, py_bytes, order_str);
        if (!arg_tuple) goto limited_bad;
        if (!is_unsigned) {
            kwds = PyDict_New();
            if (!kwds) goto limited_bad;
            if (PyDict_SetItemString(kwds, "signed", __Pyx_NewRef(Py_True))) goto limited_bad;
        }
        result = PyObject_Call(from_bytes, arg_tuple, kwds);
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(arg_tuple);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE char __Pyx_PyInt_As_char(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const char neg_one = (char) -1, const_zero = (char) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(char) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(char, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (char) val;
        }
    }
#endif
    if (unlikely(!PyLong_Check(x))) {
        char val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (char) -1;
        val = __Pyx_PyInt_As_char(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 2 * PyLong_SHIFT)) {
                            return (char) (((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 3 * PyLong_SHIFT)) {
                            return (char) (((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) >= 4 * PyLong_SHIFT)) {
                            return (char) (((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (char) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(char) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(char) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(char, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(char) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(char) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                            return (char) ((((((char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(char) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(char) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                            return (char) ((((((((char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(char) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                            return (char) (((char)-1)*(((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(char) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(char, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(char) - 1 > 4 * PyLong_SHIFT)) {
                            return (char) ((((((((((char)digits[3]) << PyLong_SHIFT) | (char)digits[2]) << PyLong_SHIFT) | (char)digits[1]) << PyLong_SHIFT) | (char)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(char) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(char) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(char, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        char val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (char) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (char) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (char) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (char) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(char) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((char) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(char) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((char) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((char) 1) << (sizeof(char) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (char) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to char");
    return (char) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to char");
    return (char) -1;
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XDECREF(name);
        name = __Pyx_NewRef(__pyx_n_s__30);
    }
    return name;
}
#endif

/* CheckBinaryVersion */
  static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030B00A4
    return Py_Version & ~0xFFUL;
#else
    const char* rt_version = Py_GetVersion();
    unsigned long version = 0;
    unsigned long factor = 0x01000000UL;
    unsigned int digit = 0;
    int i = 0;
    while (factor) {
        while ('0' <= rt_version[i] && rt_version[i] <= '9') {
            digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
            ++i;
        }
        version += factor * digit;
        if (rt_version[i] != '.')
            break;
        digit = 0;
        factor >>= 8;
        ++i;
    }
    return version;
#endif
}
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* FunctionExport */
  static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
    cobj = PyCapsule_New(tmp.p, sig, 0);
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* FunctionImport */
  #ifndef __PYX_HAVE_RT_ImportFunction_3_0_12
#define __PYX_HAVE_RT_ImportFunction_3_0_12
static int __Pyx_ImportFunction_3_0_12(PyObject *module, const char *funcname, void (**f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(module, (char *)"__pyx_capi__");
    if (!d)
        goto bad;
    cobj = PyDict_GetItemString(d, funcname);
    if (!cobj) {
        PyErr_Format(PyExc_ImportError,
            "%.200s does not export expected C function %.200s",
                PyModule_GetName(module), funcname);
        goto bad;
    }
    if (!PyCapsule_IsValid(cobj, sig)) {
        PyErr_Format(PyExc_TypeError,
            "C function %.200s.%.200s has wrong signature (expected %.500s, got %.500s)",
             PyModule_GetName(module), funcname, sig, PyCapsule_GetName(cobj));
        goto bad;
    }
    tmp.p = PyCapsule_GetPointer(cobj, sig);
    *f = tmp.fp;
    if (!(*f))
        goto bad;
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(d);
    return -1;
}
#endif

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
